/**
 * The MIT License (MIT)
 *
 * Copyright (c) 2018-2019 Erik Moqvist
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use, copy,
 * modify, merge, publish, distribute, sublicense, and/or sell copies
 * of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

/**
 * This file was generated by cantools version 32.20.3 Tue Nov 26 22:55:34 2019.
 */

#ifndef MODEL3_CAN_H
#define MODEL3_CAN_H

#include <stdint.h>
#include <stdbool.h>
#include <stddef.h>

#ifndef EINVAL
#    define EINVAL 22
#endif

/* Frame ids. */
#define MODEL3_CAN_ID243_VCRIGHT_HVAC_FEEDBACK_FRAME_ID (0x243u)
#define MODEL3_CAN_ID20_CVCRIGHT_HVAC_REQUEST_FRAME_ID (0x20cu)
#define MODEL3_CAN_ID2_B3_VCRIGHT_LOGGING1_HZ_FRAME_ID (0x2b3u)
#define MODEL3_CAN_ID2_C1_VC_FRONT10HZ_FRAME_ID (0x2c1u)
#define MODEL3_CAN_ID2_E1_VC_FRONT_STATUS_FRAME_ID (0x2e1u)
#define MODEL3_CAN_ID381_VC_FRONT1_HZ_FRAME_ID (0x381u)
#define MODEL3_CAN_ID318_SYSTEM_TIME_UTC_FRAME_ID (0x318u)
#define MODEL3_CAN_ID528_UNIX_TIME_FRAME_ID (0x528u)
#define MODEL3_CAN_ID229_GEAR_LEVER_FRAME_ID (0x229u)
#define MODEL3_CAN_ID249_LEFT_STALK_FRAME_ID (0x249u)
#define MODEL3_CAN_ID628_UDSPC_STO_MCU_FRAME_ID (0x629u)
#define MODEL3_CAN_ID628_UDSMC_UTO_PCS_FRAME_ID (0x628u)
#define MODEL3_CAN_ID186_FRONT_DRIVE_TORQUE_RPM_FRAME_ID (0x186u)
#define MODEL3_CAN_ID395_FRONT_OIL_PUMP_FRAME_ID (0x395u)
#define MODEL3_CAN_ID396_REAR_OIL_PUMP_FRAME_ID (0x396u)
#define MODEL3_CAN_ID5_D5_REAR_TEMP_REQ_FRAME_ID (0x5d5u)
#define MODEL3_CAN_ID556_FRONT_TEMP_REQ_FRAME_ID (0x556u)
#define MODEL3_CAN_ID1_D8_REAR_TORQUE_FRAME_ID (0x1d8u)
#define MODEL3_CAN_ID155_WHEEL_ANGLES_FRAME_ID (0x155u)
#define MODEL3_CAN_ID175_WHEEL_SPEED_FRAME_ID (0x175u)
#define MODEL3_CAN_ID1_D4_FRONT_TORQUE_OLD_FRAME_ID (0x1d4u)
#define MODEL3_CAN_ID1_D5_FRONT_TORQUE_FRAME_ID (0x1d5u)
#define MODEL3_CAN_ID2_E5_FRONT_INVERTER_POWER_FRAME_ID (0x2e5u)
#define MODEL3_CAN_ID3_C2_VC_LSWITCHES_FRAME_ID (0x3c2u)
#define MODEL3_CAN_ID336_MAX_POWER_RATING_FRAME_ID (0x336u)
#define MODEL3_CAN_ID333_U_ICHARGING_FRAME_ID (0x333u)
#define MODEL3_CAN_ID241_COOLANT_FRAME_ID (0x241u)
#define MODEL3_CAN_ID293CHASSIS_CONTROLS_FRAME_ID (0x293u)
#define MODEL3_CAN_ID268_SYSTEM_POWER_FRAME_ID (0x268u)
#define MODEL3_CAN_ID04_FGPS_LAT_LONG_FRAME_ID (0x4fu)
#define MODEL3_CAN_ID3_D2_TOTAL_CHARGE_DISCHARGE_FRAME_ID (0x3d2u)
#define MODEL3_CAN_ID3_F2_BMS_COUNTERS_FRAME_ID (0x3f2u)
#define MODEL3_CAN_ID2_D2_BMSV_ALIMITS_FRAME_ID (0x2d2u)
#define MODEL3_CAN_ID541_FAST_CHARGE_MAX_LIMITS_FRAME_ID (0x541u)
#define MODEL3_CAN_ID244_FAST_CHARGE_LIMITS_FRAME_ID (0x244u)
#define MODEL3_CAN_ID214_FAST_CHARGE_VA_FRAME_ID (0x214u)
#define MODEL3_CAN_ID215_F_CISOLATION_FRAME_ID (0x215u)
#define MODEL3_CAN_ID217_F_CINFO_FRAME_ID (0x217u)
#define MODEL3_CAN_ID321_VC_FRONT_TEMPS_LEVELS_FRAME_ID (0x321u)
#define MODEL3_CAN_ID3_D8_ELEVATION_FRAME_ID (0x3d8u)
#define MODEL3_CAN_ID261_12V_BATT_STATUS_FRAME_ID (0x261u)
#define MODEL3_CAN_ID129_STEERING_ANGLE_FRAME_ID (0x129u)
#define MODEL3_CAN_ID264_CHARGE_LINE_STATUS_FRAME_ID (0x264u)
#define MODEL3_CAN_ID224_PCSDCD_CSTATUS_FRAME_ID (0x224u)
#define MODEL3_CAN_ID118_DRIVE_SYSTEM_STATUS_FRAME_ID (0x118u)
#define MODEL3_CAN_ID212_BM_SSTATUS_FRAME_ID (0x212u)
#define MODEL3_CAN_ID352_BM_SENERGY_FRAME_ID (0x352u)
#define MODEL3_CAN_ID252_POWER_LIMITS_FRAME_ID (0x252u)
#define MODEL3_CAN_ID312_BM_STHERMAL_FRAME_ID (0x312u)
#define MODEL3_CAN_ID292_BMS_SOC_FRAME_ID (0x292u)
#define MODEL3_CAN_ID257_U_ISPEED_FRAME_ID (0x257u)
#define MODEL3_CAN_ID405_VIN_FRAME_ID (0x405u)
#define MODEL3_CAN_ID51_E_CHG_CONNECTOR_INFO_FRAME_ID (0x51eu)
#define MODEL3_CAN_ID376_FRONT_INVERTER_TEMPS_FRAME_ID (0x376u)
#define MODEL3_CAN_ID315_REAR_INVERTER_TEMPS_FRAME_ID (0x315u)
#define MODEL3_CAN_ID154_REAR_TORQUE_OLD_FRAME_ID (0x154u)
#define MODEL3_CAN_ID3_B6ODOMETER_FRAME_ID (0x3b6u)
#define MODEL3_CAN_ID266_REAR_INVERTER_POWER_FRAME_ID (0x266u)
#define MODEL3_CAN_ID108_REAR_DRIVE_TORQUE_RPM_FRAME_ID (0x108u)
#define MODEL3_CAN_ID132_HV_BATT_AMP_VOLT_FRAME_ID (0x132u)
#define MODEL3_CAN_ID126_FRAME_ID (0x126u)
#define MODEL3_CAN_ID31_FTPM_SSENSORS_FRAME_ID (0x31fu)
#define MODEL3_CAN_ID3_F_EBRAKE_TEMPS_FRAME_ID (0x3feu)
#define MODEL3_CAN_ID228_EP_BRIGHT_STATUS_FRAME_ID (0x228u)
#define MODEL3_CAN_ID288_EP_BLEFT_STATUS_FRAME_ID (0x288u)
#define MODEL3_CAN_ID7_F_FCAR_CONFIG_FRAME_ID (0x7ffu)
#define MODEL3_CAN_ID332_BATT_CELL_MIN_MAX_FRAME_ID (0x332u)
#define MODEL3_CAN_ID401_CELL_VOLTAGES_FRAME_ID (0x401u)

/* Frame lengths in bytes. */
#define MODEL3_CAN_ID243_VCRIGHT_HVAC_FEEDBACK_LENGTH (8u)
#define MODEL3_CAN_ID20_CVCRIGHT_HVAC_REQUEST_LENGTH (6u)
#define MODEL3_CAN_ID2_B3_VCRIGHT_LOGGING1_HZ_LENGTH (8u)
#define MODEL3_CAN_ID2_C1_VC_FRONT10HZ_LENGTH (8u)
#define MODEL3_CAN_ID2_E1_VC_FRONT_STATUS_LENGTH (8u)
#define MODEL3_CAN_ID381_VC_FRONT1_HZ_LENGTH (8u)
#define MODEL3_CAN_ID318_SYSTEM_TIME_UTC_LENGTH (8u)
#define MODEL3_CAN_ID528_UNIX_TIME_LENGTH (4u)
#define MODEL3_CAN_ID229_GEAR_LEVER_LENGTH (3u)
#define MODEL3_CAN_ID249_LEFT_STALK_LENGTH (3u)
#define MODEL3_CAN_ID628_UDSPC_STO_MCU_LENGTH (8u)
#define MODEL3_CAN_ID628_UDSMC_UTO_PCS_LENGTH (8u)
#define MODEL3_CAN_ID186_FRONT_DRIVE_TORQUE_RPM_LENGTH (8u)
#define MODEL3_CAN_ID395_FRONT_OIL_PUMP_LENGTH (8u)
#define MODEL3_CAN_ID396_REAR_OIL_PUMP_LENGTH (8u)
#define MODEL3_CAN_ID5_D5_REAR_TEMP_REQ_LENGTH (5u)
#define MODEL3_CAN_ID556_FRONT_TEMP_REQ_LENGTH (5u)
#define MODEL3_CAN_ID1_D8_REAR_TORQUE_LENGTH (8u)
#define MODEL3_CAN_ID155_WHEEL_ANGLES_LENGTH (8u)
#define MODEL3_CAN_ID175_WHEEL_SPEED_LENGTH (8u)
#define MODEL3_CAN_ID1_D4_FRONT_TORQUE_OLD_LENGTH (8u)
#define MODEL3_CAN_ID1_D5_FRONT_TORQUE_LENGTH (8u)
#define MODEL3_CAN_ID2_E5_FRONT_INVERTER_POWER_LENGTH (8u)
#define MODEL3_CAN_ID3_C2_VC_LSWITCHES_LENGTH (8u)
#define MODEL3_CAN_ID336_MAX_POWER_RATING_LENGTH (3u)
#define MODEL3_CAN_ID333_U_ICHARGING_LENGTH (4u)
#define MODEL3_CAN_ID241_COOLANT_LENGTH (7u)
#define MODEL3_CAN_ID293CHASSIS_CONTROLS_LENGTH (8u)
#define MODEL3_CAN_ID268_SYSTEM_POWER_LENGTH (8u)
#define MODEL3_CAN_ID04_FGPS_LAT_LONG_LENGTH (8u)
#define MODEL3_CAN_ID3_D2_TOTAL_CHARGE_DISCHARGE_LENGTH (8u)
#define MODEL3_CAN_ID3_F2_BMS_COUNTERS_LENGTH (8u)
#define MODEL3_CAN_ID2_D2_BMSV_ALIMITS_LENGTH (8u)
#define MODEL3_CAN_ID541_FAST_CHARGE_MAX_LIMITS_LENGTH (8u)
#define MODEL3_CAN_ID244_FAST_CHARGE_LIMITS_LENGTH (8u)
#define MODEL3_CAN_ID214_FAST_CHARGE_VA_LENGTH (8u)
#define MODEL3_CAN_ID215_F_CISOLATION_LENGTH (1u)
#define MODEL3_CAN_ID217_F_CINFO_LENGTH (8u)
#define MODEL3_CAN_ID321_VC_FRONT_TEMPS_LEVELS_LENGTH (8u)
#define MODEL3_CAN_ID3_D8_ELEVATION_LENGTH (8u)
#define MODEL3_CAN_ID261_12V_BATT_STATUS_LENGTH (8u)
#define MODEL3_CAN_ID129_STEERING_ANGLE_LENGTH (8u)
#define MODEL3_CAN_ID264_CHARGE_LINE_STATUS_LENGTH (8u)
#define MODEL3_CAN_ID224_PCSDCD_CSTATUS_LENGTH (8u)
#define MODEL3_CAN_ID118_DRIVE_SYSTEM_STATUS_LENGTH (8u)
#define MODEL3_CAN_ID212_BM_SSTATUS_LENGTH (8u)
#define MODEL3_CAN_ID352_BM_SENERGY_LENGTH (8u)
#define MODEL3_CAN_ID252_POWER_LIMITS_LENGTH (8u)
#define MODEL3_CAN_ID312_BM_STHERMAL_LENGTH (8u)
#define MODEL3_CAN_ID292_BMS_SOC_LENGTH (8u)
#define MODEL3_CAN_ID257_U_ISPEED_LENGTH (8u)
#define MODEL3_CAN_ID405_VIN_LENGTH (8u)
#define MODEL3_CAN_ID51_E_CHG_CONNECTOR_INFO_LENGTH (8u)
#define MODEL3_CAN_ID376_FRONT_INVERTER_TEMPS_LENGTH (8u)
#define MODEL3_CAN_ID315_REAR_INVERTER_TEMPS_LENGTH (8u)
#define MODEL3_CAN_ID154_REAR_TORQUE_OLD_LENGTH (8u)
#define MODEL3_CAN_ID3_B6ODOMETER_LENGTH (4u)
#define MODEL3_CAN_ID266_REAR_INVERTER_POWER_LENGTH (8u)
#define MODEL3_CAN_ID108_REAR_DRIVE_TORQUE_RPM_LENGTH (8u)
#define MODEL3_CAN_ID132_HV_BATT_AMP_VOLT_LENGTH (8u)
#define MODEL3_CAN_ID126_LENGTH (8u)
#define MODEL3_CAN_ID31_FTPM_SSENSORS_LENGTH (8u)
#define MODEL3_CAN_ID3_F_EBRAKE_TEMPS_LENGTH (5u)
#define MODEL3_CAN_ID228_EP_BRIGHT_STATUS_LENGTH (8u)
#define MODEL3_CAN_ID288_EP_BLEFT_STATUS_LENGTH (8u)
#define MODEL3_CAN_ID7_F_FCAR_CONFIG_LENGTH (8u)
#define MODEL3_CAN_ID332_BATT_CELL_MIN_MAX_LENGTH (6u)
#define MODEL3_CAN_ID401_CELL_VOLTAGES_LENGTH (8u)

/* Extended or standard frame types. */
#define MODEL3_CAN_ID243_VCRIGHT_HVAC_FEEDBACK_IS_EXTENDED (0)
#define MODEL3_CAN_ID20_CVCRIGHT_HVAC_REQUEST_IS_EXTENDED (0)
#define MODEL3_CAN_ID2_B3_VCRIGHT_LOGGING1_HZ_IS_EXTENDED (0)
#define MODEL3_CAN_ID2_C1_VC_FRONT10HZ_IS_EXTENDED (0)
#define MODEL3_CAN_ID2_E1_VC_FRONT_STATUS_IS_EXTENDED (0)
#define MODEL3_CAN_ID381_VC_FRONT1_HZ_IS_EXTENDED (0)
#define MODEL3_CAN_ID318_SYSTEM_TIME_UTC_IS_EXTENDED (0)
#define MODEL3_CAN_ID528_UNIX_TIME_IS_EXTENDED (0)
#define MODEL3_CAN_ID229_GEAR_LEVER_IS_EXTENDED (0)
#define MODEL3_CAN_ID249_LEFT_STALK_IS_EXTENDED (0)
#define MODEL3_CAN_ID628_UDSPC_STO_MCU_IS_EXTENDED (0)
#define MODEL3_CAN_ID628_UDSMC_UTO_PCS_IS_EXTENDED (0)
#define MODEL3_CAN_ID186_FRONT_DRIVE_TORQUE_RPM_IS_EXTENDED (0)
#define MODEL3_CAN_ID395_FRONT_OIL_PUMP_IS_EXTENDED (0)
#define MODEL3_CAN_ID396_REAR_OIL_PUMP_IS_EXTENDED (0)
#define MODEL3_CAN_ID5_D5_REAR_TEMP_REQ_IS_EXTENDED (0)
#define MODEL3_CAN_ID556_FRONT_TEMP_REQ_IS_EXTENDED (0)
#define MODEL3_CAN_ID1_D8_REAR_TORQUE_IS_EXTENDED (0)
#define MODEL3_CAN_ID155_WHEEL_ANGLES_IS_EXTENDED (0)
#define MODEL3_CAN_ID175_WHEEL_SPEED_IS_EXTENDED (0)
#define MODEL3_CAN_ID1_D4_FRONT_TORQUE_OLD_IS_EXTENDED (0)
#define MODEL3_CAN_ID1_D5_FRONT_TORQUE_IS_EXTENDED (0)
#define MODEL3_CAN_ID2_E5_FRONT_INVERTER_POWER_IS_EXTENDED (0)
#define MODEL3_CAN_ID3_C2_VC_LSWITCHES_IS_EXTENDED (0)
#define MODEL3_CAN_ID336_MAX_POWER_RATING_IS_EXTENDED (0)
#define MODEL3_CAN_ID333_U_ICHARGING_IS_EXTENDED (0)
#define MODEL3_CAN_ID241_COOLANT_IS_EXTENDED (0)
#define MODEL3_CAN_ID293CHASSIS_CONTROLS_IS_EXTENDED (0)
#define MODEL3_CAN_ID268_SYSTEM_POWER_IS_EXTENDED (0)
#define MODEL3_CAN_ID04_FGPS_LAT_LONG_IS_EXTENDED (0)
#define MODEL3_CAN_ID3_D2_TOTAL_CHARGE_DISCHARGE_IS_EXTENDED (0)
#define MODEL3_CAN_ID3_F2_BMS_COUNTERS_IS_EXTENDED (0)
#define MODEL3_CAN_ID2_D2_BMSV_ALIMITS_IS_EXTENDED (0)
#define MODEL3_CAN_ID541_FAST_CHARGE_MAX_LIMITS_IS_EXTENDED (0)
#define MODEL3_CAN_ID244_FAST_CHARGE_LIMITS_IS_EXTENDED (0)
#define MODEL3_CAN_ID214_FAST_CHARGE_VA_IS_EXTENDED (0)
#define MODEL3_CAN_ID215_F_CISOLATION_IS_EXTENDED (0)
#define MODEL3_CAN_ID217_F_CINFO_IS_EXTENDED (0)
#define MODEL3_CAN_ID321_VC_FRONT_TEMPS_LEVELS_IS_EXTENDED (0)
#define MODEL3_CAN_ID3_D8_ELEVATION_IS_EXTENDED (0)
#define MODEL3_CAN_ID261_12V_BATT_STATUS_IS_EXTENDED (0)
#define MODEL3_CAN_ID129_STEERING_ANGLE_IS_EXTENDED (0)
#define MODEL3_CAN_ID264_CHARGE_LINE_STATUS_IS_EXTENDED (0)
#define MODEL3_CAN_ID224_PCSDCD_CSTATUS_IS_EXTENDED (0)
#define MODEL3_CAN_ID118_DRIVE_SYSTEM_STATUS_IS_EXTENDED (0)
#define MODEL3_CAN_ID212_BM_SSTATUS_IS_EXTENDED (0)
#define MODEL3_CAN_ID352_BM_SENERGY_IS_EXTENDED (0)
#define MODEL3_CAN_ID252_POWER_LIMITS_IS_EXTENDED (0)
#define MODEL3_CAN_ID312_BM_STHERMAL_IS_EXTENDED (0)
#define MODEL3_CAN_ID292_BMS_SOC_IS_EXTENDED (0)
#define MODEL3_CAN_ID257_U_ISPEED_IS_EXTENDED (0)
#define MODEL3_CAN_ID405_VIN_IS_EXTENDED (0)
#define MODEL3_CAN_ID51_E_CHG_CONNECTOR_INFO_IS_EXTENDED (0)
#define MODEL3_CAN_ID376_FRONT_INVERTER_TEMPS_IS_EXTENDED (0)
#define MODEL3_CAN_ID315_REAR_INVERTER_TEMPS_IS_EXTENDED (0)
#define MODEL3_CAN_ID154_REAR_TORQUE_OLD_IS_EXTENDED (0)
#define MODEL3_CAN_ID3_B6ODOMETER_IS_EXTENDED (0)
#define MODEL3_CAN_ID266_REAR_INVERTER_POWER_IS_EXTENDED (0)
#define MODEL3_CAN_ID108_REAR_DRIVE_TORQUE_RPM_IS_EXTENDED (0)
#define MODEL3_CAN_ID132_HV_BATT_AMP_VOLT_IS_EXTENDED (0)
#define MODEL3_CAN_ID126_IS_EXTENDED (0)
#define MODEL3_CAN_ID31_FTPM_SSENSORS_IS_EXTENDED (0)
#define MODEL3_CAN_ID3_F_EBRAKE_TEMPS_IS_EXTENDED (0)
#define MODEL3_CAN_ID228_EP_BRIGHT_STATUS_IS_EXTENDED (0)
#define MODEL3_CAN_ID288_EP_BLEFT_STATUS_IS_EXTENDED (0)
#define MODEL3_CAN_ID7_F_FCAR_CONFIG_IS_EXTENDED (0)
#define MODEL3_CAN_ID332_BATT_CELL_MIN_MAX_IS_EXTENDED (0)
#define MODEL3_CAN_ID401_CELL_VOLTAGES_IS_EXTENDED (0)

/* Frame cycle times in milliseconds. */
#define MODEL3_CAN_ID243_VCRIGHT_HVAC_FEEDBACK_CYCLE_TIME_MS (0u)
#define MODEL3_CAN_ID20_CVCRIGHT_HVAC_REQUEST_CYCLE_TIME_MS (0u)
#define MODEL3_CAN_ID2_B3_VCRIGHT_LOGGING1_HZ_CYCLE_TIME_MS (0u)
#define MODEL3_CAN_ID2_C1_VC_FRONT10HZ_CYCLE_TIME_MS (0u)
#define MODEL3_CAN_ID2_E1_VC_FRONT_STATUS_CYCLE_TIME_MS (0u)
#define MODEL3_CAN_ID381_VC_FRONT1_HZ_CYCLE_TIME_MS (0u)
#define MODEL3_CAN_ID318_SYSTEM_TIME_UTC_CYCLE_TIME_MS (0u)
#define MODEL3_CAN_ID528_UNIX_TIME_CYCLE_TIME_MS (0u)
#define MODEL3_CAN_ID229_GEAR_LEVER_CYCLE_TIME_MS (0u)
#define MODEL3_CAN_ID249_LEFT_STALK_CYCLE_TIME_MS (0u)
#define MODEL3_CAN_ID628_UDSPC_STO_MCU_CYCLE_TIME_MS (0u)
#define MODEL3_CAN_ID628_UDSMC_UTO_PCS_CYCLE_TIME_MS (0u)
#define MODEL3_CAN_ID186_FRONT_DRIVE_TORQUE_RPM_CYCLE_TIME_MS (0u)
#define MODEL3_CAN_ID395_FRONT_OIL_PUMP_CYCLE_TIME_MS (0u)
#define MODEL3_CAN_ID396_REAR_OIL_PUMP_CYCLE_TIME_MS (0u)
#define MODEL3_CAN_ID5_D5_REAR_TEMP_REQ_CYCLE_TIME_MS (0u)
#define MODEL3_CAN_ID556_FRONT_TEMP_REQ_CYCLE_TIME_MS (0u)
#define MODEL3_CAN_ID1_D8_REAR_TORQUE_CYCLE_TIME_MS (0u)
#define MODEL3_CAN_ID155_WHEEL_ANGLES_CYCLE_TIME_MS (0u)
#define MODEL3_CAN_ID175_WHEEL_SPEED_CYCLE_TIME_MS (0u)
#define MODEL3_CAN_ID1_D4_FRONT_TORQUE_OLD_CYCLE_TIME_MS (10u)
#define MODEL3_CAN_ID1_D5_FRONT_TORQUE_CYCLE_TIME_MS (0u)
#define MODEL3_CAN_ID2_E5_FRONT_INVERTER_POWER_CYCLE_TIME_MS (1000u)
#define MODEL3_CAN_ID3_C2_VC_LSWITCHES_CYCLE_TIME_MS (50u)
#define MODEL3_CAN_ID336_MAX_POWER_RATING_CYCLE_TIME_MS (1000u)
#define MODEL3_CAN_ID333_U_ICHARGING_CYCLE_TIME_MS (500u)
#define MODEL3_CAN_ID241_COOLANT_CYCLE_TIME_MS (100u)
#define MODEL3_CAN_ID293CHASSIS_CONTROLS_CYCLE_TIME_MS (500u)
#define MODEL3_CAN_ID268_SYSTEM_POWER_CYCLE_TIME_MS (100u)
#define MODEL3_CAN_ID04_FGPS_LAT_LONG_CYCLE_TIME_MS (1000u)
#define MODEL3_CAN_ID3_D2_TOTAL_CHARGE_DISCHARGE_CYCLE_TIME_MS (1000u)
#define MODEL3_CAN_ID3_F2_BMS_COUNTERS_CYCLE_TIME_MS (0u)
#define MODEL3_CAN_ID2_D2_BMSV_ALIMITS_CYCLE_TIME_MS (100u)
#define MODEL3_CAN_ID541_FAST_CHARGE_MAX_LIMITS_CYCLE_TIME_MS (100u)
#define MODEL3_CAN_ID244_FAST_CHARGE_LIMITS_CYCLE_TIME_MS (100u)
#define MODEL3_CAN_ID214_FAST_CHARGE_VA_CYCLE_TIME_MS (100u)
#define MODEL3_CAN_ID215_F_CISOLATION_CYCLE_TIME_MS (1000u)
#define MODEL3_CAN_ID217_F_CINFO_CYCLE_TIME_MS (1000u)
#define MODEL3_CAN_ID321_VC_FRONT_TEMPS_LEVELS_CYCLE_TIME_MS (1000u)
#define MODEL3_CAN_ID3_D8_ELEVATION_CYCLE_TIME_MS (1000u)
#define MODEL3_CAN_ID261_12V_BATT_STATUS_CYCLE_TIME_MS (100u)
#define MODEL3_CAN_ID129_STEERING_ANGLE_CYCLE_TIME_MS (10u)
#define MODEL3_CAN_ID264_CHARGE_LINE_STATUS_CYCLE_TIME_MS (100u)
#define MODEL3_CAN_ID224_PCSDCD_CSTATUS_CYCLE_TIME_MS (100u)
#define MODEL3_CAN_ID118_DRIVE_SYSTEM_STATUS_CYCLE_TIME_MS (10u)
#define MODEL3_CAN_ID212_BM_SSTATUS_CYCLE_TIME_MS (100u)
#define MODEL3_CAN_ID352_BM_SENERGY_CYCLE_TIME_MS (1000u)
#define MODEL3_CAN_ID252_POWER_LIMITS_CYCLE_TIME_MS (100u)
#define MODEL3_CAN_ID312_BM_STHERMAL_CYCLE_TIME_MS (1000u)
#define MODEL3_CAN_ID292_BMS_SOC_CYCLE_TIME_MS (100u)
#define MODEL3_CAN_ID257_U_ISPEED_CYCLE_TIME_MS (20u)
#define MODEL3_CAN_ID405_VIN_CYCLE_TIME_MS (205u)
#define MODEL3_CAN_ID51_E_CHG_CONNECTOR_INFO_CYCLE_TIME_MS (0u)
#define MODEL3_CAN_ID376_FRONT_INVERTER_TEMPS_CYCLE_TIME_MS (1000u)
#define MODEL3_CAN_ID315_REAR_INVERTER_TEMPS_CYCLE_TIME_MS (0u)
#define MODEL3_CAN_ID154_REAR_TORQUE_OLD_CYCLE_TIME_MS (10u)
#define MODEL3_CAN_ID3_B6ODOMETER_CYCLE_TIME_MS (1000u)
#define MODEL3_CAN_ID266_REAR_INVERTER_POWER_CYCLE_TIME_MS (10u)
#define MODEL3_CAN_ID108_REAR_DRIVE_TORQUE_RPM_CYCLE_TIME_MS (10u)
#define MODEL3_CAN_ID132_HV_BATT_AMP_VOLT_CYCLE_TIME_MS (10u)
#define MODEL3_CAN_ID126_CYCLE_TIME_MS (100u)
#define MODEL3_CAN_ID31_FTPM_SSENSORS_CYCLE_TIME_MS (1000u)
#define MODEL3_CAN_ID3_F_EBRAKE_TEMPS_CYCLE_TIME_MS (1000u)
#define MODEL3_CAN_ID228_EP_BRIGHT_STATUS_CYCLE_TIME_MS (0u)
#define MODEL3_CAN_ID288_EP_BLEFT_STATUS_CYCLE_TIME_MS (0u)
#define MODEL3_CAN_ID7_F_FCAR_CONFIG_CYCLE_TIME_MS (100u)
#define MODEL3_CAN_ID332_BATT_CELL_MIN_MAX_CYCLE_TIME_MS (0u)
#define MODEL3_CAN_ID401_CELL_VOLTAGES_CYCLE_TIME_MS (0u)

/* Signal choices. */
#define MODEL3_CAN_ID243_VCRIGHT_HVAC_FEEDBACK_VCRIGHT_HVAC_AIR_DISTRIBUTION_MODE_NONE_CHOICE (0u)
#define MODEL3_CAN_ID243_VCRIGHT_HVAC_FEEDBACK_VCRIGHT_HVAC_AIR_DISTRIBUTION_MODE_FLOOR_CHOICE (1u)
#define MODEL3_CAN_ID243_VCRIGHT_HVAC_FEEDBACK_VCRIGHT_HVAC_AIR_DISTRIBUTION_MODE_PANEL_CHOICE (2u)
#define MODEL3_CAN_ID243_VCRIGHT_HVAC_FEEDBACK_VCRIGHT_HVAC_AIR_DISTRIBUTION_MODE_PANEL_FLOOR_CHOICE (3u)
#define MODEL3_CAN_ID243_VCRIGHT_HVAC_FEEDBACK_VCRIGHT_HVAC_AIR_DISTRIBUTION_MODE_DEFROST_CHOICE (4u)
#define MODEL3_CAN_ID243_VCRIGHT_HVAC_FEEDBACK_VCRIGHT_HVAC_AIR_DISTRIBUTION_MODE_DEFROST_FLOOR_CHOICE (5u)
#define MODEL3_CAN_ID243_VCRIGHT_HVAC_FEEDBACK_VCRIGHT_HVAC_AIR_DISTRIBUTION_MODE_DEFROST_PANEL_CHOICE (6u)
#define MODEL3_CAN_ID243_VCRIGHT_HVAC_FEEDBACK_VCRIGHT_HVAC_AIR_DISTRIBUTION_MODE_DEFROST_PANEL_FLOOR_CHOICE (7u)

#define MODEL3_CAN_ID243_VCRIGHT_HVAC_FEEDBACK_VCRIGHT_HVAC_BLOWER_SEGMENT_OFF_CHOICE (0u)
#define MODEL3_CAN_ID243_VCRIGHT_HVAC_FEEDBACK_VCRIGHT_HVAC_BLOWER_SEGMENT_1_CHOICE (1u)
#define MODEL3_CAN_ID243_VCRIGHT_HVAC_FEEDBACK_VCRIGHT_HVAC_BLOWER_SEGMENT_2_CHOICE (2u)
#define MODEL3_CAN_ID243_VCRIGHT_HVAC_FEEDBACK_VCRIGHT_HVAC_BLOWER_SEGMENT_3_CHOICE (3u)
#define MODEL3_CAN_ID243_VCRIGHT_HVAC_FEEDBACK_VCRIGHT_HVAC_BLOWER_SEGMENT_4_CHOICE (4u)
#define MODEL3_CAN_ID243_VCRIGHT_HVAC_FEEDBACK_VCRIGHT_HVAC_BLOWER_SEGMENT_5_CHOICE (5u)
#define MODEL3_CAN_ID243_VCRIGHT_HVAC_FEEDBACK_VCRIGHT_HVAC_BLOWER_SEGMENT_6_CHOICE (6u)
#define MODEL3_CAN_ID243_VCRIGHT_HVAC_FEEDBACK_VCRIGHT_HVAC_BLOWER_SEGMENT_7_CHOICE (7u)
#define MODEL3_CAN_ID243_VCRIGHT_HVAC_FEEDBACK_VCRIGHT_HVAC_BLOWER_SEGMENT_8_CHOICE (8u)
#define MODEL3_CAN_ID243_VCRIGHT_HVAC_FEEDBACK_VCRIGHT_HVAC_BLOWER_SEGMENT_9_CHOICE (9u)
#define MODEL3_CAN_ID243_VCRIGHT_HVAC_FEEDBACK_VCRIGHT_HVAC_BLOWER_SEGMENT_10_CHOICE (10u)
#define MODEL3_CAN_ID243_VCRIGHT_HVAC_FEEDBACK_VCRIGHT_HVAC_BLOWER_SEGMENT_11_CHOICE (11u)

#define MODEL3_CAN_ID243_VCRIGHT_HVAC_FEEDBACK_VCRIGHT_HVAC_RECIRC_AUTO_CHOICE (0u)
#define MODEL3_CAN_ID243_VCRIGHT_HVAC_FEEDBACK_VCRIGHT_HVAC_RECIRC_RECIRC_CHOICE (1u)
#define MODEL3_CAN_ID243_VCRIGHT_HVAC_FEEDBACK_VCRIGHT_HVAC_RECIRC_FRESH_CHOICE (2u)

#define MODEL3_CAN_ID243_VCRIGHT_HVAC_FEEDBACK_VCRIGHT_HVAC_AC_RUNNING_OFF_CHOICE (0u)
#define MODEL3_CAN_ID243_VCRIGHT_HVAC_FEEDBACK_VCRIGHT_HVAC_AC_RUNNING_ON_CHOICE (1u)

#define MODEL3_CAN_ID243_VCRIGHT_HVAC_FEEDBACK_VCRIGHT_HVAC_POWER_STATE_OFF_CHOICE (0u)
#define MODEL3_CAN_ID243_VCRIGHT_HVAC_FEEDBACK_VCRIGHT_HVAC_POWER_STATE_ON_CHOICE (1u)
#define MODEL3_CAN_ID243_VCRIGHT_HVAC_FEEDBACK_VCRIGHT_HVAC_POWER_STATE_PRECONDITION_CHOICE (2u)
#define MODEL3_CAN_ID243_VCRIGHT_HVAC_FEEDBACK_VCRIGHT_HVAC_POWER_STATE_OVERHEAT_PROTECT_FANONLY_CHOICE (3u)
#define MODEL3_CAN_ID243_VCRIGHT_HVAC_FEEDBACK_VCRIGHT_HVAC_POWER_STATE_OVERHEAT_PROTECT_CHOICE (4u)

#define MODEL3_CAN_ID243_VCRIGHT_HVAC_FEEDBACK_VCRIGHT_HVAC_SECOND_ROW_STATE_AUTO_CHOICE (0u)
#define MODEL3_CAN_ID243_VCRIGHT_HVAC_FEEDBACK_VCRIGHT_HVAC_SECOND_ROW_STATE_OFF_CHOICE (1u)
#define MODEL3_CAN_ID243_VCRIGHT_HVAC_FEEDBACK_VCRIGHT_HVAC_SECOND_ROW_STATE_LOW_CHOICE (2u)
#define MODEL3_CAN_ID243_VCRIGHT_HVAC_FEEDBACK_VCRIGHT_HVAC_SECOND_ROW_STATE_MED_CHOICE (3u)
#define MODEL3_CAN_ID243_VCRIGHT_HVAC_FEEDBACK_VCRIGHT_HVAC_SECOND_ROW_STATE_HIGH_CHOICE (4u)

#define MODEL3_CAN_ID20_CVCRIGHT_HVAC_REQUEST_VCRIGHT_TEMP_EVAPORATOR_SNA_CHOICE (2047u)

#define MODEL3_CAN_ID20_CVCRIGHT_HVAC_REQUEST_VCRIGHT_TEMP_EVAPORATOR_TARGET_SNA_CHOICE (255u)

#define MODEL3_CAN_ID2_B3_VCRIGHT_LOGGING1_HZ_VCRIGHT_LOGGING1_HZ_INDEX_HVAC_TEMP_SENSORS_AND_ESTIMATES_1_CHOICE (0u)
#define MODEL3_CAN_ID2_B3_VCRIGHT_LOGGING1_HZ_VCRIGHT_LOGGING1_HZ_INDEX_HVAC_TEMP_SENSORS_AND_ESTIMATES_2_CHOICE (1u)
#define MODEL3_CAN_ID2_B3_VCRIGHT_LOGGING1_HZ_VCRIGHT_LOGGING1_HZ_INDEX_HVAC_HUMIDITY_HEATER_CHOICE (2u)
#define MODEL3_CAN_ID2_B3_VCRIGHT_LOGGING1_HZ_VCRIGHT_LOGGING1_HZ_INDEX_HVAC_STATUS_AIRFLOW_CHOICE (3u)
#define MODEL3_CAN_ID2_B3_VCRIGHT_LOGGING1_HZ_VCRIGHT_LOGGING1_HZ_INDEX_HVAC_COMFORT_SOLAR_CHOICE (4u)
#define MODEL3_CAN_ID2_B3_VCRIGHT_LOGGING1_HZ_VCRIGHT_LOGGING1_HZ_INDEX_HEATER_AND_DUCT_TARGETS_CHOICE (5u)
#define MODEL3_CAN_ID2_B3_VCRIGHT_LOGGING1_HZ_VCRIGHT_LOGGING1_HZ_INDEX_HVAC_ACTUATOR_VOLTAGES_CHOICE (6u)
#define MODEL3_CAN_ID2_B3_VCRIGHT_LOGGING1_HZ_VCRIGHT_LOGGING1_HZ_INDEX_HVAC_ACTUATOR_ENDSTOP_CHOICE (7u)
#define MODEL3_CAN_ID2_B3_VCRIGHT_LOGGING1_HZ_VCRIGHT_LOGGING1_HZ_INDEX_HVAC_ACTUATOR_ZEROSTOP_CHOICE (8u)
#define MODEL3_CAN_ID2_B3_VCRIGHT_LOGGING1_HZ_VCRIGHT_LOGGING1_HZ_INDEX_HVAC_MISCELLANEOUS_1_CHOICE (9u)
#define MODEL3_CAN_ID2_B3_VCRIGHT_LOGGING1_HZ_VCRIGHT_LOGGING1_HZ_INDEX_HVAC_MISCELLANEOUS_2_CHOICE (10u)
#define MODEL3_CAN_ID2_B3_VCRIGHT_LOGGING1_HZ_VCRIGHT_LOGGING1_HZ_INDEX_END_CHOICE (11u)

#define MODEL3_CAN_ID2_B3_VCRIGHT_LOGGING1_HZ_VCRIGHT_TEMP_DUCT_LEFT_SNA_CHOICE (511u)

#define MODEL3_CAN_ID2_B3_VCRIGHT_LOGGING1_HZ_VCRIGHT_TEMP_DUCT_MODELED_LEFT_SNA_CHOICE (511u)

#define MODEL3_CAN_ID2_B3_VCRIGHT_LOGGING1_HZ_VCRIGHT_CABIN_TEMP_GLASS_ROOF_SNA_CHOICE (255u)

#define MODEL3_CAN_ID2_B3_VCRIGHT_LOGGING1_HZ_VCRIGHT_CONVECTION_TARGET_LEFT_SNA_CHOICE (255u)

#define MODEL3_CAN_ID2_B3_VCRIGHT_LOGGING1_HZ_VCRIGHT_TEMP_DUCT_RIGHT_SNA_CHOICE (511u)

#define MODEL3_CAN_ID2_B3_VCRIGHT_LOGGING1_HZ_VCRIGHT_HVAC_DUCT_TARGET_LEFT_SNA_CHOICE (255u)

#define MODEL3_CAN_ID2_B3_VCRIGHT_LOGGING1_HZ_VCRIGHT_TEMP_DUCT_MODELED_RIGHT_SNA_CHOICE (511u)

#define MODEL3_CAN_ID2_B3_VCRIGHT_LOGGING1_HZ_VCRIGHT_CABIN_TEMP_WINDSHIELD_SNA_CHOICE (255u)

#define MODEL3_CAN_ID2_B3_VCRIGHT_LOGGING1_HZ_VCRIGHT_CONVECTION_TARGET_RIGHT_SNA_CHOICE (255u)

#define MODEL3_CAN_ID2_B3_VCRIGHT_LOGGING1_HZ_VCRIGHT_SOLAR_LOAD_ON_VEH_FILTERED_SNA_CHOICE (255u)

#define MODEL3_CAN_ID2_B3_VCRIGHT_LOGGING1_HZ_VCRIGHT_HVAC_DUCT_TARGET_RIGHT_SNA_CHOICE (255u)

#define MODEL3_CAN_ID2_B3_VCRIGHT_LOGGING1_HZ_VCRIGHT_TEMP_HTR_SURFACE_MODELED_L_SNA_CHOICE (511u)

#define MODEL3_CAN_ID2_B3_VCRIGHT_LOGGING1_HZ_VCRIGHT_TEMP_INCAR_CABIN_PROBE_SNA_CHOICE (255u)

#define MODEL3_CAN_ID2_B3_VCRIGHT_LOGGING1_HZ_VCRIGHT_CABIN_TEMP_INTERIOR_SNA_CHOICE (240u)

#define MODEL3_CAN_ID2_B3_VCRIGHT_LOGGING1_HZ_VCRIGHT_HVAC_AUTO_TRANSITION_REASON_NONE_CHOICE (0u)
#define MODEL3_CAN_ID2_B3_VCRIGHT_LOGGING1_HZ_VCRIGHT_HVAC_AUTO_TRANSITION_REASON_HUMIDITY_HIGH_CHOICE (1u)
#define MODEL3_CAN_ID2_B3_VCRIGHT_LOGGING1_HZ_VCRIGHT_HVAC_AUTO_TRANSITION_REASON_HUMIDITY_MODERATE_CHOICE (2u)
#define MODEL3_CAN_ID2_B3_VCRIGHT_LOGGING1_HZ_VCRIGHT_HVAC_AUTO_TRANSITION_REASON_HUMIDITY_LOW_CHOICE (3u)
#define MODEL3_CAN_ID2_B3_VCRIGHT_LOGGING1_HZ_VCRIGHT_HVAC_AUTO_TRANSITION_REASON_TEMP_TARGET_BELOW_THRESHOLD_CHOICE (4u)
#define MODEL3_CAN_ID2_B3_VCRIGHT_LOGGING1_HZ_VCRIGHT_HVAC_AUTO_TRANSITION_REASON_TEMP_TARGET_ABOVE_THRESHOLD_CHOICE (5u)
#define MODEL3_CAN_ID2_B3_VCRIGHT_LOGGING1_HZ_VCRIGHT_HVAC_AUTO_TRANSITION_REASON_EXCESS_OCCUPANT_CONVECTION_CHOICE (6u)
#define MODEL3_CAN_ID2_B3_VCRIGHT_LOGGING1_HZ_VCRIGHT_HVAC_AUTO_TRANSITION_REASON_OCCUPANT_CONVECTION_REQUIREMENT_CHOICE (7u)
#define MODEL3_CAN_ID2_B3_VCRIGHT_LOGGING1_HZ_VCRIGHT_HVAC_AUTO_TRANSITION_REASON_TEMP_TARGET_LOW_CHOICE (8u)
#define MODEL3_CAN_ID2_B3_VCRIGHT_LOGGING1_HZ_VCRIGHT_HVAC_AUTO_TRANSITION_REASON_DUCTS_COLD_CHOICE (9u)
#define MODEL3_CAN_ID2_B3_VCRIGHT_LOGGING1_HZ_VCRIGHT_HVAC_AUTO_TRANSITION_REASON_BI_LEVEL_LANDING_CHOICE (10u)
#define MODEL3_CAN_ID2_B3_VCRIGHT_LOGGING1_HZ_VCRIGHT_HVAC_AUTO_TRANSITION_REASON_DEFOG_OVERRIDE_CHOICE (11u)
#define MODEL3_CAN_ID2_B3_VCRIGHT_LOGGING1_HZ_VCRIGHT_HVAC_AUTO_TRANSITION_REASON_SET_TEMP_LO_CHOICE (12u)
#define MODEL3_CAN_ID2_B3_VCRIGHT_LOGGING1_HZ_VCRIGHT_HVAC_AUTO_TRANSITION_REASON_SET_TEMP_HI_CHOICE (13u)
#define MODEL3_CAN_ID2_B3_VCRIGHT_LOGGING1_HZ_VCRIGHT_HVAC_AUTO_TRANSITION_REASON_CABIN_PURGE_CHOICE (14u)
#define MODEL3_CAN_ID2_B3_VCRIGHT_LOGGING1_HZ_VCRIGHT_HVAC_AUTO_TRANSITION_REASON_EVAP_DRYING_CHOICE (15u)
#define MODEL3_CAN_ID2_B3_VCRIGHT_LOGGING1_HZ_VCRIGHT_HVAC_AUTO_TRANSITION_REASON_HVAC_OFF_CHOICE (16u)
#define MODEL3_CAN_ID2_B3_VCRIGHT_LOGGING1_HZ_VCRIGHT_HVAC_AUTO_TRANSITION_REASON_END_CHOICE (17u)

#define MODEL3_CAN_ID2_B3_VCRIGHT_LOGGING1_HZ_VCRIGHT_CONVECTION_DELIVERED_LEFT_SNA_CHOICE (255u)

#define MODEL3_CAN_ID2_B3_VCRIGHT_LOGGING1_HZ_VCRIGHT_HVAC_AIR_FLOW_MODE_ROW1_NONE_CHOICE (0u)
#define MODEL3_CAN_ID2_B3_VCRIGHT_LOGGING1_HZ_VCRIGHT_HVAC_AIR_FLOW_MODE_ROW1_FLOOR_CHOICE (1u)
#define MODEL3_CAN_ID2_B3_VCRIGHT_LOGGING1_HZ_VCRIGHT_HVAC_AIR_FLOW_MODE_ROW1_PANEL_CHOICE (2u)
#define MODEL3_CAN_ID2_B3_VCRIGHT_LOGGING1_HZ_VCRIGHT_HVAC_AIR_FLOW_MODE_ROW1_PANEL_FLOOR_CHOICE (3u)
#define MODEL3_CAN_ID2_B3_VCRIGHT_LOGGING1_HZ_VCRIGHT_HVAC_AIR_FLOW_MODE_ROW1_DEFROST_CHOICE (4u)
#define MODEL3_CAN_ID2_B3_VCRIGHT_LOGGING1_HZ_VCRIGHT_HVAC_AIR_FLOW_MODE_ROW1_DEFROST_FLOOR_CHOICE (5u)
#define MODEL3_CAN_ID2_B3_VCRIGHT_LOGGING1_HZ_VCRIGHT_HVAC_AIR_FLOW_MODE_ROW1_DEFROST_PANEL_CHOICE (6u)
#define MODEL3_CAN_ID2_B3_VCRIGHT_LOGGING1_HZ_VCRIGHT_HVAC_AIR_FLOW_MODE_ROW1_DEFROST_PANEL_FLOOR_CHOICE (7u)

#define MODEL3_CAN_ID2_B3_VCRIGHT_LOGGING1_HZ_VCRIGHT_TEMP_HTR_SURFACE_MODELED_R_SNA_CHOICE (511u)

#define MODEL3_CAN_ID2_B3_VCRIGHT_LOGGING1_HZ_VCRIGHT_TEMP_INCAR_CABIN_MID_SNA_CHOICE (250u)

#define MODEL3_CAN_ID2_B3_VCRIGHT_LOGGING1_HZ_VCRIGHT_CABIN_TEMP_INTERIOR_SUNNY_SNA_CHOICE (240u)

#define MODEL3_CAN_ID2_B3_VCRIGHT_LOGGING1_HZ_VCRIGHT_HVAC_AIR_FLOW_MODE_ROW2_NONE_CHOICE (0u)
#define MODEL3_CAN_ID2_B3_VCRIGHT_LOGGING1_HZ_VCRIGHT_HVAC_AIR_FLOW_MODE_ROW2_FLOOR_CHOICE (1u)
#define MODEL3_CAN_ID2_B3_VCRIGHT_LOGGING1_HZ_VCRIGHT_HVAC_AIR_FLOW_MODE_ROW2_PANEL_CHOICE (2u)
#define MODEL3_CAN_ID2_B3_VCRIGHT_LOGGING1_HZ_VCRIGHT_HVAC_AIR_FLOW_MODE_ROW2_PANEL_FLOOR_CHOICE (3u)
#define MODEL3_CAN_ID2_B3_VCRIGHT_LOGGING1_HZ_VCRIGHT_HVAC_AIR_FLOW_MODE_ROW2_DEFROST_CHOICE (4u)
#define MODEL3_CAN_ID2_B3_VCRIGHT_LOGGING1_HZ_VCRIGHT_HVAC_AIR_FLOW_MODE_ROW2_DEFROST_FLOOR_CHOICE (5u)
#define MODEL3_CAN_ID2_B3_VCRIGHT_LOGGING1_HZ_VCRIGHT_HVAC_AIR_FLOW_MODE_ROW2_DEFROST_PANEL_CHOICE (6u)
#define MODEL3_CAN_ID2_B3_VCRIGHT_LOGGING1_HZ_VCRIGHT_HVAC_AIR_FLOW_MODE_ROW2_DEFROST_PANEL_FLOOR_CHOICE (7u)

#define MODEL3_CAN_ID2_B3_VCRIGHT_LOGGING1_HZ_VCRIGHT_CONVECTION_DELIVERED_RIGHT_SNA_CHOICE (255u)

#define MODEL3_CAN_ID2_B3_VCRIGHT_LOGGING1_HZ_VCRIGHT_CABIN_TEMP_INTERIOR_L3_SNA_CHOICE (240u)

#define MODEL3_CAN_ID2_B3_VCRIGHT_LOGGING1_HZ_VCRIGHT_TEMP_INCAR_CABIN_DEEP_SNA_CHOICE (255u)

#define MODEL3_CAN_ID2_B3_VCRIGHT_LOGGING1_HZ_VCRIGHT_CABIN_TEMP_SIDE_GLASS_LEFT_SNA_CHOICE (255u)

#define MODEL3_CAN_ID2_B3_VCRIGHT_LOGGING1_HZ_VCRIGHT_SOLAR_LOAD_RIGHT_OCCUPANT_SNA_CHOICE (255u)

#define MODEL3_CAN_ID2_B3_VCRIGHT_LOGGING1_HZ_VCRIGHT_CABIN_TEMP_INTERIOR_SUNNY_L3_SNA_CHOICE (240u)

#define MODEL3_CAN_ID2_B3_VCRIGHT_LOGGING1_HZ_VCRIGHT_CABIN_TEMP_INTERIOR_L2_SNA_CHOICE (240u)

#define MODEL3_CAN_ID2_B3_VCRIGHT_LOGGING1_HZ_VCRIGHT_CABIN_TEMP_SIDE_GLASS_RIGHT_SNA_CHOICE (255u)

#define MODEL3_CAN_ID2_B3_VCRIGHT_LOGGING1_HZ_VCRIGHT_HVAC_AIRFLOW_REASON_HVAC_OFF_CHOICE (0u)
#define MODEL3_CAN_ID2_B3_VCRIGHT_LOGGING1_HZ_VCRIGHT_HVAC_AIRFLOW_REASON_MANUAL_FAN_SPEED_CHOICE (1u)
#define MODEL3_CAN_ID2_B3_VCRIGHT_LOGGING1_HZ_VCRIGHT_HVAC_AIRFLOW_REASON_UI_SHORTCUT_CHOICE (2u)
#define MODEL3_CAN_ID2_B3_VCRIGHT_LOGGING1_HZ_VCRIGHT_HVAC_AIRFLOW_REASON_CABIN_TEMPERATURE_CONTROL_CHOICE (3u)
#define MODEL3_CAN_ID2_B3_VCRIGHT_LOGGING1_HZ_VCRIGHT_HVAC_AIRFLOW_REASON_MINIMUM_AUTO_AIRFLOW_CHOICE (4u)
#define MODEL3_CAN_ID2_B3_VCRIGHT_LOGGING1_HZ_VCRIGHT_HVAC_AIRFLOW_REASON_STRATIFICATION_GLASS_ROOF_CHOICE (5u)
#define MODEL3_CAN_ID2_B3_VCRIGHT_LOGGING1_HZ_VCRIGHT_HVAC_AIRFLOW_REASON_STRATIFICATION_INTERIOR_SURFACES_CHOICE (6u)
#define MODEL3_CAN_ID2_B3_VCRIGHT_LOGGING1_HZ_VCRIGHT_HVAC_AIRFLOW_REASON_OCCUPANT_CONVECTION_REQUIREMENT_CHOICE (7u)
#define MODEL3_CAN_ID2_B3_VCRIGHT_LOGGING1_HZ_VCRIGHT_HVAC_AIRFLOW_REASON_COLD_DUCT_LOCKOUT_CHOICE (8u)
#define MODEL3_CAN_ID2_B3_VCRIGHT_LOGGING1_HZ_VCRIGHT_HVAC_AIRFLOW_REASON_CABIN_PURGE_CHOICE (9u)
#define MODEL3_CAN_ID2_B3_VCRIGHT_LOGGING1_HZ_VCRIGHT_HVAC_AIRFLOW_REASON_CABIN_OVERHEAT_PROTECT_CHOICE (10u)
#define MODEL3_CAN_ID2_B3_VCRIGHT_LOGGING1_HZ_VCRIGHT_HVAC_AIRFLOW_REASON_SCREEN_PROTECTION_CHOICE (11u)
#define MODEL3_CAN_ID2_B3_VCRIGHT_LOGGING1_HZ_VCRIGHT_HVAC_AIRFLOW_REASON_EVAP_DRYING_CHOICE (12u)
#define MODEL3_CAN_ID2_B3_VCRIGHT_LOGGING1_HZ_VCRIGHT_HVAC_AIRFLOW_REASON_NONE_CHOICE (13u)

#define MODEL3_CAN_ID2_B3_VCRIGHT_LOGGING1_HZ_VCRIGHT_SOLAR_LOAD_LEFT_OCCUPANT_SNA_CHOICE (255u)

#define MODEL3_CAN_ID2_B3_VCRIGHT_LOGGING1_HZ_VCRIGHT_CABIN_TEMP_TOP_PAD_AIR_SNA_CHOICE (240u)

#define MODEL3_CAN_ID2_B3_VCRIGHT_LOGGING1_HZ_VCRIGHT_CABIN_TEMP_INTERIOR_SUNNY_L2_SNA_CHOICE (240u)

#define MODEL3_CAN_ID2_B3_VCRIGHT_LOGGING1_HZ_VCRIGHT_CABIN_TEMP_BREATH_LEVEL_SNA_CHOICE (255u)

#define MODEL3_CAN_ID2_B3_VCRIGHT_LOGGING1_HZ_VCRIGHT_SOLAR_LOAD_ON_VEHICLE_SNA_CHOICE (255u)

#define MODEL3_CAN_ID2_C1_VC_FRONT10HZ_VC_FRONT10_HZ_INDEX_COOLANT_PUMPS_CHOICE (0u)
#define MODEL3_CAN_ID2_C1_VC_FRONT10HZ_VC_FRONT10_HZ_INDEX_THERMAL_FAN_CHOICE (1u)
#define MODEL3_CAN_ID2_C1_VC_FRONT10HZ_VC_FRONT10_HZ_INDEX_FIVE_WAY_VALVE_CHOICE (2u)
#define MODEL3_CAN_ID2_C1_VC_FRONT10HZ_VC_FRONT10_HZ_INDEX_REFRIGERANT_LV8907_CHOICE (3u)
#define MODEL3_CAN_ID2_C1_VC_FRONT10HZ_VC_FRONT10_HZ_INDEX_COMPRESSOR_CHOICE (4u)
#define MODEL3_CAN_ID2_C1_VC_FRONT10HZ_VC_FRONT10_HZ_INDEX_EXV_EVAP_SOLENOID_AIRFLOW_CHOICE (5u)
#define MODEL3_CAN_ID2_C1_VC_FRONT10HZ_VC_FRONT10_HZ_INDEX_END_CHOICE (6u)

#define MODEL3_CAN_ID2_C1_VC_FRONT10HZ_V_CFRONTFIVE_WAY_VALVE_MODE_SERIES_CHOICE (0u)
#define MODEL3_CAN_ID2_C1_VC_FRONT10HZ_V_CFRONTFIVE_WAY_VALVE_MODE_PARALLEL_CHOICE (1u)

#define MODEL3_CAN_ID2_C1_VC_FRONT10HZ_V_CFRONTCOOLANT_TEMP_BASED_MODE_SERIES_CHOICE (0u)
#define MODEL3_CAN_ID2_C1_VC_FRONT10HZ_V_CFRONTCOOLANT_TEMP_BASED_MODE_PARALLEL_CHOICE (1u)

#define MODEL3_CAN_ID2_C1_VC_FRONT10HZ_V_CFRONTCOMPRESSOR_STATE_STANDBY_CHOICE (0u)
#define MODEL3_CAN_ID2_C1_VC_FRONT10HZ_V_CFRONTCOMPRESSOR_STATE_READY_CHOICE (1u)
#define MODEL3_CAN_ID2_C1_VC_FRONT10HZ_V_CFRONTCOMPRESSOR_STATE_RUNNING_CHOICE (2u)
#define MODEL3_CAN_ID2_C1_VC_FRONT10HZ_V_CFRONTCOMPRESSOR_STATE_FAULT_CHOICE (3u)

#define MODEL3_CAN_ID2_C1_VC_FRONT10HZ_V_CFRONTFIVE_WAY_VALVE_STATE_UNPOWERED_CHOICE (0u)
#define MODEL3_CAN_ID2_C1_VC_FRONT10HZ_V_CFRONTFIVE_WAY_VALVE_STATE_CALIBRATING_CHOICE (1u)
#define MODEL3_CAN_ID2_C1_VC_FRONT10HZ_V_CFRONTFIVE_WAY_VALVE_STATE_READY_CHOICE (2u)
#define MODEL3_CAN_ID2_C1_VC_FRONT10HZ_V_CFRONTFIVE_WAY_VALVE_STATE_FAULT_CHOICE (3u)

#define MODEL3_CAN_ID2_E1_VC_FRONT_STATUS_VC_FRONT_STATUS_INDEX_BODY_CONTROLS_CHOICE (0u)
#define MODEL3_CAN_ID2_E1_VC_FRONT_STATUS_VC_FRONT_STATUS_INDEX_VEHICLE_AND_RAILS_CHOICE (1u)
#define MODEL3_CAN_ID2_E1_VC_FRONT_STATUS_VC_FRONT_STATUS_INDEX_HOMELINK_CHOICE (2u)
#define MODEL3_CAN_ID2_E1_VC_FRONT_STATUS_VC_FRONT_STATUS_INDEX_REFRIGERANT_SYSTEM_CHOICE (3u)
#define MODEL3_CAN_ID2_E1_VC_FRONT_STATUS_VC_FRONT_STATUS_INDEX_LV_BATTERY_DEBUG_CHOICE (4u)
#define MODEL3_CAN_ID2_E1_VC_FRONT_STATUS_VC_FRONT_STATUS_INDEX_INVALID_CHOICE (5u)

#define MODEL3_CAN_ID2_E1_VC_FRONT_STATUS_V_CFRONTWIPER_SPEED_SNA_CHOICE (0u)
#define MODEL3_CAN_ID2_E1_VC_FRONT_STATUS_V_CFRONTWIPER_SPEED_OFF_CHOICE (1u)
#define MODEL3_CAN_ID2_E1_VC_FRONT_STATUS_V_CFRONTWIPER_SPEED_1_CHOICE (2u)
#define MODEL3_CAN_ID2_E1_VC_FRONT_STATUS_V_CFRONTWIPER_SPEED_2_CHOICE (3u)
#define MODEL3_CAN_ID2_E1_VC_FRONT_STATUS_V_CFRONTWIPER_SPEED_3_CHOICE (4u)
#define MODEL3_CAN_ID2_E1_VC_FRONT_STATUS_V_CFRONTWIPER_SPEED_4_CHOICE (5u)
#define MODEL3_CAN_ID2_E1_VC_FRONT_STATUS_V_CFRONTWIPER_SPEED_5_CHOICE (6u)
#define MODEL3_CAN_ID2_E1_VC_FRONT_STATUS_V_CFRONTWIPER_SPEED_LOW_CHOICE (7u)
#define MODEL3_CAN_ID2_E1_VC_FRONT_STATUS_V_CFRONTWIPER_SPEED_HIGH_CHOICE (8u)

#define MODEL3_CAN_ID2_E1_VC_FRONT_STATUS_V_CFRONTWIPER_POSITION_SNA_CHOICE (0u)
#define MODEL3_CAN_ID2_E1_VC_FRONT_STATUS_V_CFRONTWIPER_POSITION_SERVICE_CHOICE (1u)
#define MODEL3_CAN_ID2_E1_VC_FRONT_STATUS_V_CFRONTWIPER_POSITION_DEPRESSED_PARK_CHOICE (2u)
#define MODEL3_CAN_ID2_E1_VC_FRONT_STATUS_V_CFRONTWIPER_POSITION_DELAYED_REST_CHOICE (3u)
#define MODEL3_CAN_ID2_E1_VC_FRONT_STATUS_V_CFRONTWIPER_POSITION_WIPING_CHOICE (4u)

#define MODEL3_CAN_ID2_E1_VC_FRONT_STATUS_V_CFRONTWIPER_STATE_SNA_CHOICE (0u)
#define MODEL3_CAN_ID2_E1_VC_FRONT_STATUS_V_CFRONTWIPER_STATE_SERVICE_CHOICE (1u)
#define MODEL3_CAN_ID2_E1_VC_FRONT_STATUS_V_CFRONTWIPER_STATE_FAULT_CHOICE (2u)
#define MODEL3_CAN_ID2_E1_VC_FRONT_STATUS_V_CFRONTWIPER_STATE_DELAYED_REST_CHOICE (3u)
#define MODEL3_CAN_ID2_E1_VC_FRONT_STATUS_V_CFRONTWIPER_STATE_PARK_CHOICE (4u)
#define MODEL3_CAN_ID2_E1_VC_FRONT_STATUS_V_CFRONTWIPER_STATE_WASH_CHOICE (5u)
#define MODEL3_CAN_ID2_E1_VC_FRONT_STATUS_V_CFRONTWIPER_STATE_MOMENTARY_WIPE_CHOICE (6u)
#define MODEL3_CAN_ID2_E1_VC_FRONT_STATUS_V_CFRONTWIPER_STATE_INTERMITTENT_HIGH_CHOICE (7u)
#define MODEL3_CAN_ID2_E1_VC_FRONT_STATUS_V_CFRONTWIPER_STATE_INTERMITTENT_LOW_CHOICE (8u)
#define MODEL3_CAN_ID2_E1_VC_FRONT_STATUS_V_CFRONTWIPER_STATE_CONT_FAST_CHOICE (9u)
#define MODEL3_CAN_ID2_E1_VC_FRONT_STATUS_V_CFRONTWIPER_STATE_CONT_SLOW_CHOICE (10u)
#define MODEL3_CAN_ID2_E1_VC_FRONT_STATUS_V_CFRONTWIPER_STATE_INT_AUTO_LOW_CHOICE (11u)
#define MODEL3_CAN_ID2_E1_VC_FRONT_STATUS_V_CFRONTWIPER_STATE_INT_AUTO_HIGH_CHOICE (12u)

#define MODEL3_CAN_ID2_E1_VC_FRONT_STATUS_V_CFRONTCRASH_DETECTED_TYPE_NONE_CHOICE (0u)
#define MODEL3_CAN_ID2_E1_VC_FRONT_STATUS_V_CFRONTCRASH_DETECTED_TYPE_MINOR_CHOICE (1u)
#define MODEL3_CAN_ID2_E1_VC_FRONT_STATUS_V_CFRONTCRASH_DETECTED_TYPE_SEVERE_CHOICE (2u)

#define MODEL3_CAN_ID2_E1_VC_FRONT_STATUS_V_CFRONTCRASH_STATE_IDLE_CHOICE (0u)
#define MODEL3_CAN_ID2_E1_VC_FRONT_STATUS_V_CFRONTCRASH_STATE_MINOR_CHOICE (1u)
#define MODEL3_CAN_ID2_E1_VC_FRONT_STATUS_V_CFRONTCRASH_STATE_SEVERE_CHOICE (2u)

#define MODEL3_CAN_ID2_E1_VC_FRONT_STATUS_V_CFRONTAIR_COMPRESSOR_STATUS_OFF_CHOICE (0u)
#define MODEL3_CAN_ID2_E1_VC_FRONT_STATUS_V_CFRONTAIR_COMPRESSOR_STATUS_ON_CHOICE (1u)
#define MODEL3_CAN_ID2_E1_VC_FRONT_STATUS_V_CFRONTAIR_COMPRESSOR_STATUS_TURNING_OFF_CHOICE (2u)
#define MODEL3_CAN_ID2_E1_VC_FRONT_STATUS_V_CFRONTAIR_COMPRESSOR_STATUS_TURNING_ON_CHOICE (3u)
#define MODEL3_CAN_ID2_E1_VC_FRONT_STATUS_V_CFRONTAIR_COMPRESSOR_STATUS_FAULT_CHOICE (4u)
#define MODEL3_CAN_ID2_E1_VC_FRONT_STATUS_V_CFRONTAIR_COMPRESSOR_STATUS_RETRY_AVAILABLE_CHOICE (5u)
#define MODEL3_CAN_ID2_E1_VC_FRONT_STATUS_V_CFRONTAIR_COMPRESSOR_STATUS_SNA_CHOICE (7u)

#define MODEL3_CAN_ID2_E1_VC_FRONT_STATUS_V_CFRONTHOMELINK_COMM_STATUS_SNA_CHOICE (0u)
#define MODEL3_CAN_ID2_E1_VC_FRONT_STATUS_V_CFRONTHOMELINK_COMM_STATUS_OFF_CHOICE (1u)
#define MODEL3_CAN_ID2_E1_VC_FRONT_STATUS_V_CFRONTHOMELINK_COMM_STATUS_ON_CHOICE (2u)
#define MODEL3_CAN_ID2_E1_VC_FRONT_STATUS_V_CFRONTHOMELINK_COMM_STATUS_FAULT_CHOICE (3u)

#define MODEL3_CAN_ID381_VC_FRONT1_HZ_VC_FRONT1_HZ_INDEX_COOLANT_CHOICE (0u)
#define MODEL3_CAN_ID381_VC_FRONT1_HZ_VC_FRONT1_HZ_INDEX_CONDENSER_LOUVER_IC_CHOICE (1u)
#define MODEL3_CAN_ID381_VC_FRONT1_HZ_VC_FRONT1_HZ_INDEX_ACTIVE_LOUVER_AND_BRUSHLESS_FETS_CHOICE (2u)
#define MODEL3_CAN_ID381_VC_FRONT1_HZ_VC_FRONT1_HZ_INDEX_FIVE_WAY_VALVE_CHOICE (3u)
#define MODEL3_CAN_ID381_VC_FRONT1_HZ_VC_FRONT1_HZ_INDEX_END_CHOICE (4u)

#define MODEL3_CAN_ID381_VC_FRONT1_HZ_VC_FRONTMODE_TRANSITION_ID_PARALLEL_F1_NO_FLOW_REQUEST_CHOICE (0u)
#define MODEL3_CAN_ID381_VC_FRONT1_HZ_VC_FRONTMODE_TRANSITION_ID_SERIES_F2_FAULT_PUMPS_CHOICE (1u)
#define MODEL3_CAN_ID381_VC_FRONT1_HZ_VC_FRONTMODE_TRANSITION_ID_SERIES_1_DRIVE_BATTERY_WANTS_COOL_CHOICE (2u)
#define MODEL3_CAN_ID381_VC_FRONT1_HZ_VC_FRONTMODE_TRANSITION_ID_SERIES_2_DRIVE_BATTERY_NEEDS_HEAT_CHOICE (3u)
#define MODEL3_CAN_ID381_VC_FRONT1_HZ_VC_FRONTMODE_TRANSITION_ID_SERIES_3_DRIVE_BATTERY_WANTS_HEAT_CHOICE (4u)
#define MODEL3_CAN_ID381_VC_FRONT1_HZ_VC_FRONTMODE_TRANSITION_ID_PARALLEL_2_DRIVE_BATTERY_WANTS_HEAT_CHOICE (5u)
#define MODEL3_CAN_ID381_VC_FRONT1_HZ_VC_FRONTMODE_TRANSITION_ID_PARALLEL_3_DRIVE_BATTERY_WANTS_COOL_CHOICE (6u)
#define MODEL3_CAN_ID381_VC_FRONT1_HZ_VC_FRONTMODE_TRANSITION_ID_PARALLEL_4_DRIVE_BATTERY_NEEDS_COOL_CHOICE (7u)
#define MODEL3_CAN_ID381_VC_FRONT1_HZ_VC_FRONTMODE_TRANSITION_ID_SERIES_4_CHARGE_BATTERY_NEEDS_HEAT_CHOICE (8u)
#define MODEL3_CAN_ID381_VC_FRONT1_HZ_VC_FRONTMODE_TRANSITION_ID_SERIES_5_CHARGE_BATTERY_WANTS_HEAT_CHOICE (9u)
#define MODEL3_CAN_ID381_VC_FRONT1_HZ_VC_FRONTMODE_TRANSITION_ID_PARALLEL_5_CHARGE_BATTERY_WANTS_HEAT_CHOICE (10u)
#define MODEL3_CAN_ID381_VC_FRONT1_HZ_VC_FRONTMODE_TRANSITION_ID_PARALLEL_6_CHARGE_BATTERY_WANTS_COOL_CHOICE (11u)
#define MODEL3_CAN_ID381_VC_FRONT1_HZ_VC_FRONTMODE_TRANSITION_ID_SERIES_6_FAST_CHARGE_BATTERY_NEEDS_HEAT_CHOICE (12u)
#define MODEL3_CAN_ID381_VC_FRONT1_HZ_VC_FRONTMODE_TRANSITION_ID_SERIES_7_FAST_CHARGE_BATTERY_WANTS_COOL_CHOICE (13u)
#define MODEL3_CAN_ID381_VC_FRONT1_HZ_VC_FRONTMODE_TRANSITION_ID_PARALLEL_7_FAST_CHARGE_BATTERY_WANTS_COOL_CHOICE (14u)
#define MODEL3_CAN_ID381_VC_FRONT1_HZ_VC_FRONTMODE_TRANSITION_ID_PARALLEL_8_FAST_CHARGE_BATTERY_WANTS_HEAT_CHOICE (15u)
#define MODEL3_CAN_ID381_VC_FRONT1_HZ_VC_FRONTMODE_TRANSITION_ID_SERIES_8_PRE_CONDITIONING_BATTERY_NEEDS_HEAT_CHOICE (16u)
#define MODEL3_CAN_ID381_VC_FRONT1_HZ_VC_FRONTMODE_TRANSITION_ID_SERIES_9_DRIVE_DRIVE_UNIT_THERMAL_LIMITING_CHOICE (17u)
#define MODEL3_CAN_ID381_VC_FRONT1_HZ_VC_FRONTMODE_TRANSITION_ID_PARALLEL_9_DRIVE_BATTERY_THERMAL_LIMITING_CHOICE (18u)
#define MODEL3_CAN_ID381_VC_FRONT1_HZ_VC_FRONTMODE_TRANSITION_ID_INIT_CHOICE (19u)
#define MODEL3_CAN_ID381_VC_FRONT1_HZ_VC_FRONTMODE_TRANSITION_ID_OVERRIDE_CHOICE (20u)
#define MODEL3_CAN_ID381_VC_FRONT1_HZ_VC_FRONTMODE_TRANSITION_ID_UNDEFINED_CHOICE (21u)

#define MODEL3_CAN_ID381_VC_FRONT1_HZ_VC_FRONTACTIVE_LOUVER_STATE_UNCALIBRATED_CHOICE (0u)
#define MODEL3_CAN_ID381_VC_FRONT1_HZ_VC_FRONTACTIVE_LOUVER_STATE_CALIB_CLOSE_CHOICE (1u)
#define MODEL3_CAN_ID381_VC_FRONT1_HZ_VC_FRONTACTIVE_LOUVER_STATE_CALIB_OPEN_CHOICE (2u)
#define MODEL3_CAN_ID381_VC_FRONT1_HZ_VC_FRONTACTIVE_LOUVER_STATE_READY_CHOICE (3u)
#define MODEL3_CAN_ID381_VC_FRONT1_HZ_VC_FRONTACTIVE_LOUVER_STATE_FAULTED_CHOICE (4u)

#define MODEL3_CAN_ID381_VC_FRONT1_HZ_VC_FRONTFIVE_WAY_VALVE_RECAL_REASON_UNDEFINED_CHOICE (0u)
#define MODEL3_CAN_ID381_VC_FRONT1_HZ_VC_FRONTFIVE_WAY_VALVE_RECAL_REASON_MAX_TRAVEL_CHOICE (1u)
#define MODEL3_CAN_ID381_VC_FRONT1_HZ_VC_FRONTFIVE_WAY_VALVE_RECAL_REASON_GENERAL_FAULT_CHOICE (2u)
#define MODEL3_CAN_ID381_VC_FRONT1_HZ_VC_FRONTFIVE_WAY_VALVE_RECAL_REASON_CALIBRATION_FAULT_NO_TRAVEL_CHOICE (3u)
#define MODEL3_CAN_ID381_VC_FRONT1_HZ_VC_FRONTFIVE_WAY_VALVE_RECAL_REASON_SELF_TEST_CHOICE (4u)
#define MODEL3_CAN_ID381_VC_FRONT1_HZ_VC_FRONTFIVE_WAY_VALVE_RECAL_REASON_MOTOR_FEEDBACK_INTERRUPTED_CHOICE (5u)

#define MODEL3_CAN_ID381_VC_FRONT1_HZ_VC_FRONTMODE_DESIRED_SERIES_CHOICE (0u)
#define MODEL3_CAN_ID381_VC_FRONT1_HZ_VC_FRONTMODE_DESIRED_PARALLEL_CHOICE (1u)

#define MODEL3_CAN_ID381_VC_FRONT1_HZ_VC_FRONTACTIVE_LOUVER_MOTOR_STATE_UNPOWERED_CHOICE (0u)
#define MODEL3_CAN_ID381_VC_FRONT1_HZ_VC_FRONTACTIVE_LOUVER_MOTOR_STATE_INIT_I2_C_CHOICE (1u)
#define MODEL3_CAN_ID381_VC_FRONT1_HZ_VC_FRONTACTIVE_LOUVER_MOTOR_STATE_INIT_EEPROM_CHOICE (2u)
#define MODEL3_CAN_ID381_VC_FRONT1_HZ_VC_FRONTACTIVE_LOUVER_MOTOR_STATE_I2_C_ERROR_CHOICE (3u)
#define MODEL3_CAN_ID381_VC_FRONT1_HZ_VC_FRONTACTIVE_LOUVER_MOTOR_STATE_READY_CHOICE (4u)
#define MODEL3_CAN_ID381_VC_FRONT1_HZ_VC_FRONTACTIVE_LOUVER_MOTOR_STATE_BRAKE_CHOICE (5u)
#define MODEL3_CAN_ID381_VC_FRONT1_HZ_VC_FRONTACTIVE_LOUVER_MOTOR_STATE_STALL_CHOICE (6u)
#define MODEL3_CAN_ID381_VC_FRONT1_HZ_VC_FRONTACTIVE_LOUVER_MOTOR_STATE_FAULT_MOTOR_DISCONNECTED_CHOICE (7u)
#define MODEL3_CAN_ID381_VC_FRONT1_HZ_VC_FRONTACTIVE_LOUVER_MOTOR_STATE_DRIVER_FAULT_CHOICE (8u)

#define MODEL3_CAN_ID229_GEAR_LEVER_GEAR_LEVER_POSITION229_CENTER_CHOICE (0u)
#define MODEL3_CAN_ID229_GEAR_LEVER_GEAR_LEVER_POSITION229_HALF__DOWN_CHOICE (1u)
#define MODEL3_CAN_ID229_GEAR_LEVER_GEAR_LEVER_POSITION229_FULL__DOWN_CHOICE (2u)
#define MODEL3_CAN_ID229_GEAR_LEVER_GEAR_LEVER_POSITION229_HALF__UP_CHOICE (3u)
#define MODEL3_CAN_ID229_GEAR_LEVER_GEAR_LEVER_POSITION229_FULL__UP_CHOICE (4u)

#define MODEL3_CAN_ID249_LEFT_STALK_LEFT_STALK_F_RPOS249_CENTER_CHOICE (0u)
#define MODEL3_CAN_ID249_LEFT_STALK_LEFT_STALK_F_RPOS249_PULL_CHOICE (1u)
#define MODEL3_CAN_ID249_LEFT_STALK_LEFT_STALK_F_RPOS249_PUSH_CHOICE (2u)

#define MODEL3_CAN_ID249_LEFT_STALK_LEFT_STALK_U_DPOS249_CENTER_CHOICE (0u)
#define MODEL3_CAN_ID249_LEFT_STALK_LEFT_STALK_U_DPOS249_HALF__UP_CHOICE (1u)
#define MODEL3_CAN_ID249_LEFT_STALK_LEFT_STALK_U_DPOS249_FULL__UP_CHOICE (2u)
#define MODEL3_CAN_ID249_LEFT_STALK_LEFT_STALK_U_DPOS249_HALF__DOWN_CHOICE (3u)
#define MODEL3_CAN_ID249_LEFT_STALK_LEFT_STALK_U_DPOS249_FULL__DOWN_CHOICE (4u)

#define MODEL3_CAN_ID293CHASSIS_CONTROLS_UIC_CSTEERING_MODE293_COMFORT_CHOICE (0u)
#define MODEL3_CAN_ID293CHASSIS_CONTROLS_UIC_CSTEERING_MODE293_STANDARD_CHOICE (1u)
#define MODEL3_CAN_ID293CHASSIS_CONTROLS_UIC_CSTEERING_MODE293_SPORT_CHOICE (2u)

#define MODEL3_CAN_ID293CHASSIS_CONTROLS_UIC_CTRACTION_CONTROL_MODE293_FULL_TRACTION_CHOICE (0u)
#define MODEL3_CAN_ID293CHASSIS_CONTROLS_UIC_CTRACTION_CONTROL_MODE293_SLIP_START_CHOICE (1u)

#define MODEL3_CAN_ID214_FAST_CHARGE_VA_F_CTYPE214_SUPERCHARGER_CHOICE (0u)
#define MODEL3_CAN_ID214_FAST_CHARGE_VA_F_CTYPE214_CHADEMO_CHOICE (1u)
#define MODEL3_CAN_ID214_FAST_CHARGE_VA_F_CTYPE214_GB_CHOICE (2u)
#define MODEL3_CAN_ID214_FAST_CHARGE_VA_F_CTYPE214_CCS_CHOICE (3u)
#define MODEL3_CAN_ID214_FAST_CHARGE_VA_F_CTYPE214_COMBO_CHOICE (4u)
#define MODEL3_CAN_ID214_FAST_CHARGE_VA_F_CTYPE214_MCEVSE_CHOICE (5u)
#define MODEL3_CAN_ID214_FAST_CHARGE_VA_F_CTYPE214_OTHER_CHOICE (6u)
#define MODEL3_CAN_ID214_FAST_CHARGE_VA_F_CTYPE214_ERROR_CHOICE (7u)

#define MODEL3_CAN_ID217_F_CINFO_F_CCLASS217_ERR_CHOICE (0u)
#define MODEL3_CAN_ID217_F_CINFO_F_CCLASS217_SUPERCHARGER_CHOICE (1u)
#define MODEL3_CAN_ID217_F_CINFO_F_CCLASS217_URBAN_SC_CHOICE (2u)

#define MODEL3_CAN_ID217_F_CINFO_F_CBRAND217_ERR_CHOICE (0u)
#define MODEL3_CAN_ID217_F_CINFO_F_CBRAND217_TESLA_CHOICE (1u)

#define MODEL3_CAN_ID217_F_CINFO_F_CCOOLING_TYPE217_ERR_CHOICE (0u)
#define MODEL3_CAN_ID217_F_CINFO_F_CCOOLING_TYPE217_CONVECTION_CHOICE (1u)
#define MODEL3_CAN_ID217_F_CINFO_F_CCOOLING_TYPE217_LIQUID_CHOICE (2u)

#define MODEL3_CAN_ID224_PCSDCD_CSTATUS_DCD_CSTATE224_IDLE_CHOICE (0u)
#define MODEL3_CAN_ID224_PCSDCD_CSTATUS_DCD_CSTATE224_12V_CHG_CHOICE (1u)
#define MODEL3_CAN_ID224_PCSDCD_CSTATUS_DCD_CSTATE224_PRECHARGE_START_CHOICE (2u)
#define MODEL3_CAN_ID224_PCSDCD_CSTATUS_DCD_CSTATE224_PRECHARGE_CHOICE (3u)
#define MODEL3_CAN_ID224_PCSDCD_CSTATUS_DCD_CSTATE224_H_VACTIVE_CHOICE (4u)
#define MODEL3_CAN_ID224_PCSDCD_CSTATUS_DCD_CSTATE224_SHUTDOWN_CHOICE (5u)
#define MODEL3_CAN_ID224_PCSDCD_CSTATUS_DCD_CSTATE224_ERROR_CHOICE (6u)

#define MODEL3_CAN_ID118_DRIVE_SYSTEM_STATUS_DRIVE_STATE118_IDLE_CHOICE (0u)
#define MODEL3_CAN_ID118_DRIVE_SYSTEM_STATUS_DRIVE_STATE118_CHARGING_CHOICE (1u)
#define MODEL3_CAN_ID118_DRIVE_SYSTEM_STATUS_DRIVE_STATE118_STANDBY_CHOICE (2u)
#define MODEL3_CAN_ID118_DRIVE_SYSTEM_STATUS_DRIVE_STATE118_DRIVING_CHOICE (5u)

#define MODEL3_CAN_ID118_DRIVE_SYSTEM_STATUS_BRAKE_PEDAL118_PEDAL_BRAKE_CHOICE (1u)

#define MODEL3_CAN_ID118_DRIVE_SYSTEM_STATUS_D_IGEAR118_PARK_CHOICE (1u)
#define MODEL3_CAN_ID118_DRIVE_SYSTEM_STATUS_D_IGEAR118_REVERSE_CHOICE (2u)
#define MODEL3_CAN_ID118_DRIVE_SYSTEM_STATUS_D_IGEAR118_NEUTRAL_CHOICE (3u)
#define MODEL3_CAN_ID118_DRIVE_SYSTEM_STATUS_D_IGEAR118_DRIVE_CHOICE (4u)
#define MODEL3_CAN_ID118_DRIVE_SYSTEM_STATUS_D_IGEAR118_IDLE_CHOICE (7u)

#define MODEL3_CAN_ID118_DRIVE_SYSTEM_STATUS_BRAKE_STATE118_REGEN_BRAKE_CHOICE (1u)

#define MODEL3_CAN_ID118_DRIVE_SYSTEM_STATUS_TRACTION_CONTROL118_STANDARD_CHOICE (0u)
#define MODEL3_CAN_ID118_DRIVE_SYSTEM_STATUS_TRACTION_CONTROL118_SLIP_START_CHOICE (1u)

#define MODEL3_CAN_ID118_DRIVE_SYSTEM_STATUS_PARKING_BRAKE118_IDLE_CHOICE (0u)
#define MODEL3_CAN_ID118_DRIVE_SYSTEM_STATUS_PARKING_BRAKE118_ENGAGE_CHOICE (1u)
#define MODEL3_CAN_ID118_DRIVE_SYSTEM_STATUS_PARKING_BRAKE118_DISENGAGE_CHOICE (2u)

#define MODEL3_CAN_ID212_BM_SSTATUS_BM_SCONTACTORS212_ERR_0_CHOICE (0u)
#define MODEL3_CAN_ID212_BM_SSTATUS_BM_SCONTACTORS212_OPEN_CHOICE (1u)
#define MODEL3_CAN_ID212_BM_SSTATUS_BM_SCONTACTORS212_OPENING_CHOICE (2u)
#define MODEL3_CAN_ID212_BM_SSTATUS_BM_SCONTACTORS212_CLOSING_CHOICE (3u)
#define MODEL3_CAN_ID212_BM_SSTATUS_BM_SCONTACTORS212_CLOSED_CHOICE (4u)
#define MODEL3_CAN_ID212_BM_SSTATUS_BM_SCONTACTORS212_ERR_5_CHOICE (5u)
#define MODEL3_CAN_ID212_BM_SSTATUS_BM_SCONTACTORS212_ERR_6_CHOICE (6u)

#define MODEL3_CAN_ID212_BM_SSTATUS_BM_SSTATE212_IDLE_CHOICE (0u)
#define MODEL3_CAN_ID212_BM_SSTATUS_BM_SSTATE212_DRIVE_CHOICE (1u)
#define MODEL3_CAN_ID212_BM_SSTATUS_BM_SSTATE212_CHARGE_CHOICE (3u)

#define MODEL3_CAN_ID212_BM_SSTATUS_BM_SCHARGE_STATUS212_DISCONNECTED_CHOICE (0u)
#define MODEL3_CAN_ID212_BM_SSTATUS_BM_SCHARGE_STATUS212_CONNECTED_CHOICE (1u)

#define MODEL3_CAN_ID257_U_ISPEED_U_ISPEED_UNITS257_MPH_CHOICE (0u)
#define MODEL3_CAN_ID257_U_ISPEED_U_ISPEED_UNITS257_KPH_CHOICE (1u)

#define MODEL3_CAN_ID228_EP_BRIGHT_STATUS_EPB_RUNIT_STATUS228_DRIVE_RELEASED_CHOICE (1u)
#define MODEL3_CAN_ID228_EP_BRIGHT_STATUS_EPB_RUNIT_STATUS228_PARK_ENGAGED_CHOICE (3u)
#define MODEL3_CAN_ID228_EP_BRIGHT_STATUS_EPB_RUNIT_STATUS228_ENGAGING_CHOICE (8u)
#define MODEL3_CAN_ID228_EP_BRIGHT_STATUS_EPB_RUNIT_STATUS228_DISENGAGING_CHOICE (10u)

#define MODEL3_CAN_ID228_EP_BRIGHT_STATUS_EPB_RESM_CALIPER_REQUEST228_IDLE_CHOICE (1u)
#define MODEL3_CAN_ID228_EP_BRIGHT_STATUS_EPB_RESM_CALIPER_REQUEST228_ENGAGING_CHOICE (2u)
#define MODEL3_CAN_ID228_EP_BRIGHT_STATUS_EPB_RESM_CALIPER_REQUEST228_DISENGAGING_CHOICE (3u)

#define MODEL3_CAN_ID228_EP_BRIGHT_STATUS_EPB_RESM_OPERATION_TRIGGER228_PARK_ENGAGED_CHOICE (1u)
#define MODEL3_CAN_ID228_EP_BRIGHT_STATUS_EPB_RESM_OPERATION_TRIGGER228_RELEASED_CHOICE (6u)
#define MODEL3_CAN_ID228_EP_BRIGHT_STATUS_EPB_RESM_OPERATION_TRIGGER228_SUPER_PARK_CHOICE (22u)

#define MODEL3_CAN_ID288_EP_BLEFT_STATUS_EPB_LUNIT_STATUS288_DRIVE_RELEASED_CHOICE (1u)
#define MODEL3_CAN_ID288_EP_BLEFT_STATUS_EPB_LUNIT_STATUS288_PARK_ENGAGED_CHOICE (3u)
#define MODEL3_CAN_ID288_EP_BLEFT_STATUS_EPB_LUNIT_STATUS288_ENGAGING_CHOICE (8u)
#define MODEL3_CAN_ID288_EP_BLEFT_STATUS_EPB_LUNIT_STATUS288_DISENGAGING_CHOICE (10u)

#define MODEL3_CAN_ID288_EP_BLEFT_STATUS_EPB_LESM_CALIPER_REQUEST288_IDLE_CHOICE (1u)
#define MODEL3_CAN_ID288_EP_BLEFT_STATUS_EPB_LESM_CALIPER_REQUEST288_ENGAGING_CHOICE (2u)
#define MODEL3_CAN_ID288_EP_BLEFT_STATUS_EPB_LESM_CALIPER_REQUEST288_DISENGAGING_CHOICE (3u)

#define MODEL3_CAN_ID288_EP_BLEFT_STATUS_EPB_LESM_OPERATION_TRIGGER288_PARK_ENGAGED_CHOICE (1u)
#define MODEL3_CAN_ID288_EP_BLEFT_STATUS_EPB_LESM_OPERATION_TRIGGER288_RELEASED_CHOICE (6u)
#define MODEL3_CAN_ID288_EP_BLEFT_STATUS_EPB_LESM_OPERATION_TRIGGER288_SUPER_PARK_CHOICE (22u)

#define MODEL3_CAN_ID7_F_FCAR_CONFIG_CF_GDRIVETRAIN_TYPE7_FF_RWD_CHOICE (0u)
#define MODEL3_CAN_ID7_F_FCAR_CONFIG_CF_GDRIVETRAIN_TYPE7_FF_AWD_CHOICE (1u)

#define MODEL3_CAN_ID7_F_FCAR_CONFIG_CF_GPACK_ENERGY7_FF_50K_WH_CHOICE (0u)
#define MODEL3_CAN_ID7_F_FCAR_CONFIG_CF_GPACK_ENERGY7_FF_74K_WH_CHOICE (1u)

#define MODEL3_CAN_ID7_F_FCAR_CONFIG_CF_GINTERIOR_LIGHTING7_FF_BASE_CHOICE (0u)
#define MODEL3_CAN_ID7_F_FCAR_CONFIG_CF_GINTERIOR_LIGHTING7_FF_PREMIUM_CHOICE (1u)

#define MODEL3_CAN_ID7_F_FCAR_CONFIG_CF_GHEADLAMPS7_FF_BASE_CHOICE (0u)
#define MODEL3_CAN_ID7_F_FCAR_CONFIG_CF_GHEADLAMPS7_FF_PREMIUM_CHOICE (1u)

#define MODEL3_CAN_ID7_F_FCAR_CONFIG_CF_GAUDIO_TYPE7_FF_BASE_CHOICE (0u)
#define MODEL3_CAN_ID7_F_FCAR_CONFIG_CF_GAUDIO_TYPE7_FF_PREMIUM_CHOICE (1u)

#define MODEL3_CAN_ID7_F_FCAR_CONFIG_CF_GFRONT_SEAT_TYPE7_FF_BASE_CHOICE (0u)
#define MODEL3_CAN_ID7_F_FCAR_CONFIG_CF_GFRONT_SEAT_TYPE7_FF_PREMIUM_CHOICE (1u)

#define MODEL3_CAN_ID7_F_FCAR_CONFIG_CF_GROOF_TYPE7_FF_METAL_CHOICE (0u)
#define MODEL3_CAN_ID7_F_FCAR_CONFIG_CF_GROOF_TYPE7_FF_FIXED__GLASS_CHOICE (1u)
#define MODEL3_CAN_ID7_F_FCAR_CONFIG_CF_GROOF_TYPE7_FF_PANORAMIC__SUNROOF_CHOICE (2u)

#define MODEL3_CAN_ID7_F_FCAR_CONFIG_CF_GAUTOPILOT7_FF_NONE_CHOICE (0u)
#define MODEL3_CAN_ID7_F_FCAR_CONFIG_CF_GAUTOPILOT7_FF_HIGHWAY_CHOICE (1u)
#define MODEL3_CAN_ID7_F_FCAR_CONFIG_CF_GAUTOPILOT7_FF_ENHANCED_CHOICE (2u)
#define MODEL3_CAN_ID7_F_FCAR_CONFIG_CF_GAUTOPILOT7_FF_FULL__SELF__DRIVING_CHOICE (3u)

#define MODEL3_CAN_ID7_F_FCAR_CONFIG_CF_GSUPERCHARGING_ACCESS7_FF_NONE_CHOICE (0u)
#define MODEL3_CAN_ID7_F_FCAR_CONFIG_CF_GSUPERCHARGING_ACCESS7_FF_FREE_CHOICE (1u)
#define MODEL3_CAN_ID7_F_FCAR_CONFIG_CF_GSUPERCHARGING_ACCESS7_FF_PAY_AS_YOU_GO_CHOICE (2u)

#define MODEL3_CAN_ID7_F_FCAR_CONFIG_CF_GWHEEL_TYPE7_FF_18_CHOICE (0u)
#define MODEL3_CAN_ID7_F_FCAR_CONFIG_CF_GWHEEL_TYPE7_FF_19_CHOICE (1u)
#define MODEL3_CAN_ID7_F_FCAR_CONFIG_CF_GWHEEL_TYPE7_FF_20_CHOICE (2u)

#define MODEL3_CAN_ID7_F_FCAR_CONFIG_CF_GEXTERIOR_COLOR7_FF_RED__MULTICOAT_CHOICE (0u)
#define MODEL3_CAN_ID7_F_FCAR_CONFIG_CF_GEXTERIOR_COLOR7_FF_BLACK_CHOICE (1u)
#define MODEL3_CAN_ID7_F_FCAR_CONFIG_CF_GEXTERIOR_COLOR7_FF_SILVER__METALLIC_CHOICE (2u)
#define MODEL3_CAN_ID7_F_FCAR_CONFIG_CF_GEXTERIOR_COLOR7_FF_MIDNIGHT__SILVER_CHOICE (3u)
#define MODEL3_CAN_ID7_F_FCAR_CONFIG_CF_GEXTERIOR_COLOR7_FF_4_CHOICE (4u)
#define MODEL3_CAN_ID7_F_FCAR_CONFIG_CF_GEXTERIOR_COLOR7_FF_DEEP__BLUE_CHOICE (5u)
#define MODEL3_CAN_ID7_F_FCAR_CONFIG_CF_GEXTERIOR_COLOR7_FF_PEARL__WHITE_CHOICE (6u)

/**
 * Signals in message ID243VCRIGHT_hvacFeedback.
 *
 * All signal values are as on the CAN bus.
 */
struct model3_can_id243_vcright_hvac_feedback_t {
    /**
     * Range: 0..65535 (-32767..32768 W)
     * Scale: 1
     * Offset: -32767
     */
    uint16_t vcright_hvac_qdot_left;

    /**
     * Range: 0..65535 (-32767..32768 W)
     * Scale: 1
     * Offset: -32767
     */
    uint16_t vcright_hvac_qdot_right;

    /**
     * Range: 0..2047 (-40..164.7 C)
     * Scale: 0.1
     * Offset: -40
     */
    uint16_t vcright_hvac_cabin_temp_est;

    /**
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcright_hvac_air_distribution_mode;

    /**
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcright_hvac_blower_segment;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcright_hvac_recirc;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcright_hvac_ac_running;

    /**
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcright_hvac_power_state;

    /**
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcright_hvac_second_row_state;
};

/**
 * Signals in message ID20CVCRIGHT_hvacRequest.
 *
 * All signal values are as on the CAN bus.
 */
struct model3_can_id20_cvcright_hvac_request_t {
    /**
     * Range: 0..2047 (0..10235 W)
     * Scale: 5
     * Offset: 0
     */
    uint16_t vcright_watts_demand_evap;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcright_hvac_evap_enabled;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcright_conditioning_request;

    /**
     * Range: 0..2047 (-40..164.7 C)
     * Scale: 0.1
     * Offset: -40
     */
    uint16_t vcright_temp_evaporator;

    /**
     * Range: 0..255 (0..51 C)
     * Scale: 0.2
     * Offset: 0
     */
    uint8_t vcright_temp_evaporator_target;

    /**
     * Range: 0..1023 (0..5115 RPM)
     * Scale: 5
     * Offset: 0
     */
    uint16_t vcright_hvac_blower_speed_rpm_req;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcright_demand_evap_skip_rate_limit;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcright_evap_performance_low;
};

/**
 * Signals in message ID2B3VCRIGHT_logging1Hz.
 *
 * All signal values are as on the CAN bus.
 */
struct model3_can_id2_b3_vcright_logging1_hz_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcright_logging1_hz_index;

    /**
     * Range: -
     * Scale: 0.3
     * Offset: -40
     */
    uint16_t vcright_temp_duct_left;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcright_hvac_estimate_windshield_rh;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcright_ptc_heater_temp_duct_high;

    /**
     * Range: -
     * Scale: 0.3
     * Offset: -40
     */
    uint16_t vcright_temp_duct_modeled_left;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcright_ptc_heater_temp_duct_fault;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcright_ptc_heater_no_airflow;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcright_ptc_heater_hvac_act_not_ready;

    /**
     * Range: -
     * Scale: 0.5
     * Offset: -40
     */
    uint8_t vcright_cabin_temp_glass_roof;

    /**
     * Range: -
     * Scale: 0.1
     * Offset: 15
     */
    uint8_t vcright_hvac_set_temp_actual_left;

    /**
     * Range: -
     * Scale: 2
     * Offset: -254
     */
    uint8_t vcright_convection_target_left;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcright_ptc_heater_no_ui_request;

    /**
     * Range: -
     * Scale: 0.02
     * Offset: 0
     */
    uint8_t vcright_hvac_lh_bleed_voltage;

    /**
     * Range: -
     * Scale: 0.02
     * Offset: 0
     */
    uint8_t vcright_hvac_lh_bleed_end_stop;

    /**
     * Range: -
     * Scale: 0.02
     * Offset: 0
     */
    uint8_t vcright_hvac_lh_bleed_zero_stop;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcright_time_left_to_cabin_model_init;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcright_ptc_heater_no_high_voltage;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcright_ptc_heater_l_air_path_blocked;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcright_ptc_heater_r_air_path_blocked;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcright_hvac_fogging_risk_level;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcright_ptc_heater_req_airpath_blocked;

    /**
     * Range: -
     * Scale: 0.3
     * Offset: -40
     */
    uint16_t vcright_temp_duct_right;

    /**
     * Range: -
     * Scale: 0.5
     * Offset: -40
     */
    uint8_t vcright_hvac_duct_target_left;

    /**
     * Range: -
     * Scale: 0.3
     * Offset: -40
     */
    uint16_t vcright_temp_duct_modeled_right;

    /**
     * Range: -
     * Scale: 0.5
     * Offset: -40
     */
    uint8_t vcright_cabin_temp_windshield;

    /**
     * Range: -
     * Scale: 0.1
     * Offset: 15
     */
    uint8_t vcright_hvac_set_temp_actual_right;

    /**
     * Range: -
     * Scale: 2
     * Offset: -254
     */
    uint8_t vcright_convection_target_right;

    /**
     * Range: -
     * Scale: 0.02
     * Offset: 0
     */
    uint8_t vcright_hvac_rh_bleed_voltage;

    /**
     * Range: -
     * Scale: 0.02
     * Offset: 0
     */
    uint8_t vcright_hvac_rh_bleed_end_stop;

    /**
     * Range: -
     * Scale: 0.02
     * Offset: 0
     */
    uint8_t vcright_hvac_rh_bleed_zero_stop;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcright_hvac_flash_fogging_detected;

    /**
     * Range: -
     * Scale: 4
     * Offset: 0
     */
    uint8_t vcright_solar_load_on_veh_filtered;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcright_hvac_cabin_humidity_level;

    /**
     * Range: -
     * Scale: 0.5
     * Offset: -40
     */
    uint8_t vcright_hvac_duct_target_right;

    /**
     * Range: -
     * Scale: 0.3
     * Offset: -40
     */
    uint16_t vcright_temp_htr_surface_modeled_l;

    /**
     * Range: -
     * Scale: 0.5
     * Offset: -40
     */
    uint8_t vcright_temp_incar_cabin_probe;

    /**
     * Range: -
     * Scale: 0.5
     * Offset: -40
     */
    uint8_t vcright_cabin_temp_interior;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcright_hvac_auto_transition_reason;

    /**
     * Range: -
     * Scale: 2
     * Offset: -254
     */
    uint8_t vcright_convection_delivered_left;

    /**
     * Range: -
     * Scale: 0.02
     * Offset: 0
     */
    uint8_t vcright_hvac_lh_vane_voltage;

    /**
     * Range: -
     * Scale: 0.02
     * Offset: 0
     */
    uint8_t vcright_hvac_lh_vane_end_stop;

    /**
     * Range: -
     * Scale: 0.02
     * Offset: 0
     */
    uint8_t vcright_hvac_lh_vane_zero_stop;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcright_hvac_cabin_purge_active;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcright_hvac_cab_ovrheat_prot_active;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcright_hvac_cabin_purge_allowed;

    /**
     * Range: 0..1023 (0..5115 W)
     * Scale: 5
     * Offset: 0
     */
    uint16_t vcright_watts_heater_left_total;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcright_hvac_cab_ovrheat_prot_allowed;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcright_hvac_air_flow_mode_row1;

    /**
     * Range: 0..65535 (-32767..32768 W)
     * Scale: 1
     * Offset: -32767
     */
    uint16_t vcright_hvac_qdot_feedforward;

    /**
     * Range: 0..127 (0..127 %)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcright_cloudiness_probability;

    /**
     * Range: -
     * Scale: 0.3
     * Offset: -40
     */
    uint16_t vcright_temp_htr_surface_modeled_r;

    /**
     * Range: -
     * Scale: 0.5
     * Offset: -40
     */
    uint8_t vcright_temp_incar_cabin_mid;

    /**
     * Range: -
     * Scale: 0.6
     * Offset: -40
     */
    uint8_t vcright_cabin_temp_interior_sunny;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcright_hvac_air_flow_mode_row2;

    /**
     * Range: -
     * Scale: 2
     * Offset: -254
     */
    uint8_t vcright_convection_delivered_right;

    /**
     * Range: -
     * Scale: 0.02
     * Offset: 0
     */
    uint8_t vcright_hvac_rh_vane_voltage;

    /**
     * Range: -
     * Scale: 0.02
     * Offset: 0
     */
    uint8_t vcright_hvac_rh_vane_end_stop;

    /**
     * Range: -
     * Scale: 0.02
     * Offset: 0
     */
    uint8_t vcright_hvac_rh_vane_zero_stop;

    /**
     * Range: -
     * Scale: 0.5
     * Offset: -40
     */
    uint8_t vcright_cabin_temp_interior_l3;

    /**
     * Range: 0..1023 (0..5115 W)
     * Scale: 5
     * Offset: 0
     */
    uint16_t vcright_watts_heater_right_total;

    /**
     * Range: -
     * Scale: 0.5
     * Offset: -40
     */
    uint8_t vcright_temp_incar_cabin_deep;

    /**
     * Range: -
     * Scale: 0.5
     * Offset: -40
     */
    uint8_t vcright_cabin_temp_side_glass_left;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcright_hvac_massflow_target;

    /**
     * Range: -
     * Scale: 2
     * Offset: 0
     */
    uint8_t vcright_solar_load_right_occupant;

    /**
     * Range: -
     * Scale: 0.02
     * Offset: 0
     */
    uint8_t vcright_hvac_upper_mode_voltage;

    /**
     * Range: -
     * Scale: 0.02
     * Offset: 0
     */
    uint8_t vcright_hvac_upper_mode_end_stop;

    /**
     * Range: -
     * Scale: 0.02
     * Offset: 0
     */
    uint8_t vcright_hvac_upper_mode_zero_stop;

    /**
     * Range: -
     * Scale: 0.6
     * Offset: -40
     */
    uint8_t vcright_cabin_temp_interior_sunny_l3;

    /**
     * Range: -
     * Scale: 35
     * Offset: 0
     */
    uint8_t vcright_evap_load_in_fresh;

    /**
     * Range: -
     * Scale: 0.5
     * Offset: -40
     */
    uint8_t vcright_cabin_temp_interior_l2;

    /**
     * Range: -
     * Scale: 0.5
     * Offset: -40
     */
    uint8_t vcright_cabin_temp_side_glass_right;

    /**
     * Range: -
     * Scale: 20
     * Offset: 0
     */
    uint8_t vcright_ptc_heater_pwr_demand_left;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcright_hvac_airflow_reason;

    /**
     * Range: -
     * Scale: 2
     * Offset: 0
     */
    uint8_t vcright_solar_load_left_occupant;

    /**
     * Range: -
     * Scale: 0.02
     * Offset: 0
     */
    uint8_t vcright_hvac_lower_mode_voltage;

    /**
     * Range: -
     * Scale: 0.02
     * Offset: 0
     */
    uint8_t vcright_hvac_lower_mode_end_stop;

    /**
     * Range: -
     * Scale: 0.02
     * Offset: 0
     */
    uint8_t vcright_hvac_lower_mode_zero_stop;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcright_hvac_qdot_limited_left;

    /**
     * Range: -
     * Scale: 0.6
     * Offset: -40
     */
    uint8_t vcright_cabin_temp_top_pad_air;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcright_hvac_qdot_limited_right;

    /**
     * Range: -
     * Scale: 35
     * Offset: 0
     */
    uint8_t vcright_evap_load_in_recirc;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcright_lh_panel_airflow_blocked;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcright_rh_panel_airflow_blocked;

    /**
     * Range: -
     * Scale: 0.6
     * Offset: -40
     */
    uint8_t vcright_cabin_temp_interior_sunny_l2;

    /**
     * Range: -
     * Scale: 0.5
     * Offset: -40
     */
    uint8_t vcright_cabin_temp_breath_level;

    /**
     * Range: -
     * Scale: 20
     * Offset: 0
     */
    uint8_t vcright_ptc_heater_pwr_demand_right;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcright_floor_airflow_blocked;

    /**
     * Range: -
     * Scale: 4
     * Offset: 0
     */
    uint8_t vcright_solar_load_on_vehicle;

    /**
     * Range: -
     * Scale: 0.02
     * Offset: 0
     */
    uint8_t vcright_hvac_intake_voltage;

    /**
     * Range: -
     * Scale: 0.02
     * Offset: 0
     */
    uint8_t vcright_hvac_intake_end_stop;

    /**
     * Range: -
     * Scale: 0.02
     * Offset: 0
     */
    uint8_t vcright_hvac_intake_zero_stop;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcright_defrost_airflow_blocked;
};

/**
 * Signals in message ID2C1VCFront10hz.
 *
 * All signal values are as on the CAN bus.
 */
struct model3_can_id2_c1_vc_front10hz_t {
    /**
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vc_front10_hz_index;

    /**
     * Range: 0..1023 (0..10230 rpm)
     * Scale: 10
     * Offset: 0
     */
    uint16_t v_cfrontpump_battery_rpm_actual;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t v_cfrontfive_way_valve_mode;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t v_cfrontrefrigerant_has_been_filled;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t v_cfrontcoolant_temp_based_mode;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t v_cfrontfive_way_valve_mode_wrong;

    /**
     * Range: -
     * Scale: 0.25
     * Offset: -70
     */
    uint16_t v_cfrontfive_way_valve_angle_actual;

    /**
     * Range: -
     * Scale: 0.2
     * Offset: 0
     */
    uint8_t v_cfrontradiator_fan_out_voltage;

    /**
     * Range: -
     * Scale: 0.5
     * Offset: -40
     */
    uint8_t v_cfronttemp_refrig_suction;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t v_cfrontcomp_demand_chiller;

    /**
     * Range: -
     * Scale: 10
     * Offset: 0
     */
    uint16_t v_cfrontpump_battery_rpm_target;

    /**
     * Range: -
     * Scale: 10
     * Offset: 0
     */
    uint16_t v_cfrontradiator_fan_rpm_target;

    /**
     * Range: -
     * Scale: 0.25
     * Offset: -10
     */
    uint16_t v_cfrontfive_way_valve_angle_target;

    /**
     * Range: -
     * Scale: 0.125
     * Offset: -40
     */
    uint16_t v_cfronttemp_refrig_discharge;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t v_cfrontcomp_demand_evap;

    /**
     * Range: -
     * Scale: 10
     * Offset: 0
     */
    uint16_t v_cfrontpump_powertrain_rpm_actual;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t v_cfrontcompressor_state;

    /**
     * Range: -
     * Scale: 10
     * Offset: 0
     */
    uint16_t v_cfrontradiator_fan_rpm_actual;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t v_cfrontfive_way_valve_rad_bypass;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t v_cfrontcomp_limit_pres_discharge_hi;

    /**
     * Range: -
     * Scale: 0.1
     * Offset: -20
     */
    uint16_t v_cfronttemp_superheat_actual;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t v_cfrontcomp_limit_temp_discharge_hi;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t v_cfrontcomp_limit_scroll_sep_region;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t v_cfrontcomp_limit_nvh;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t v_cfrontcomp_limit_scroll_sep_ramp;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t v_cfrontcomp_limit_deadband;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t v_cfrontcomp_standby_self_not_ready;

    /**
     * Range: -
     * Scale: 10
     * Offset: 0
     */
    uint16_t v_cfrontpump_powertrain_rpm_target;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t v_cfrontfive_way_valve_state;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t v_cfrontcomp_standby_communication;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t v_cfrontcomp_standby_hv_not_ready;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    int8_t v_cfrontfive_way_valve_duty;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t v_cfrontcomp_standby_low_ambient;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t v_cfrontradiator_fan_initd;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t v_cfrontcomp_standby_low_disch_press;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t v_cfrontradiator_fan_enabled;

    /**
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t v_cfronttemp_superheat_target;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t v_cfrontcomp_standby_refrig_not_ok;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t v_cfrontradiator_fan_power_on;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t v_cfrontcomp_limit_temp_discharge_sim;

    /**
     * Range: -
     * Scale: 0.5
     * Offset: -25
     */
    uint8_t v_cfrontradiator_fan_phase_current;

    /**
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    uint8_t v_cfrontcomp_ramp_rate_up_max;

    /**
     * Range: -
     * Scale: 0.2
     * Offset: 0
     */
    uint8_t v_cfrontpump_battery_out_voltage;

    /**
     * Range: -
     * Scale: 5
     * Offset: 0
     */
    uint16_t v_cfrontfive_way_valve_angle_travel;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t v_cfrontrefrigerant_valves_closed;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t v_cfrontpump_bat_spi_error;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t v_cfrontpump_pt_spi_error;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t v_cfrontthml_fan_spi_error;

    /**
     * Range: -
     * Scale: 0.2
     * Offset: 0
     */
    uint8_t v_cfrontpump_powertrain_out_voltage;

    /**
     * Range: -
     * Scale: 0.125
     * Offset: -40
     */
    uint16_t v_cfronttemp_discharge_simulated;

    /**
     * Range: -
     * Scale: 0.01
     * Offset: 0
     */
    uint8_t v_cfrontfive_way_valve_i_sense;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t v_cfrontpump_battery_initd;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t v_cfrontpump_powertrain_initd;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t v_cfrontpump_battery_enabled;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t v_cfrontpump_powertrain_enabled;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t v_cfrontpump_battery_power_on;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t v_cfrontis_only_suct_temp_not_ready;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t v_cfrontpump_powertrain_power_on;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t v_cfrontusing_simulated_disch_temp;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t v_cfrontpumps_wake;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t v_cfrontusing_simulated_amb_temp;
};

/**
 * Signals in message ID2E1VCFrontStatus.
 *
 * All signal values are as on the CAN bus.
 */
struct model3_can_id2_e1_vc_front_status_t {
    /**
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vc_front_status_index;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t v_cfrontfrunk_latch_status;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t v_cfront5_va_rail_stable;

    /**
     * Range: -
     * Scale: 0.01
     * Offset: 9
     */
    uint16_t v_cfronttemp_comp_target_voltage;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t v_cfront5_vb_rail_stable;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t v_cfront12_va_rail_stable;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t v_cfront12_vb_rail_stable;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t v_cfrontrail_a_state;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t v_cfrontwiper_speed;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t v_cfrontrail_b_state;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t v_cfronthomelink_v2_response0;

    /**
     * Range: -
     * Scale: 32
     * Offset: 0
     */
    uint8_t v_cfrontmax_evap_heat_rejection;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t v_cfront_charge_pump_voltage_stable;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t v_cfronti_booster_wake_line;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t v_cfrontepas_wake_line;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t v_cfrontwiper_position;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t v_cfronti_booster_state_dbg;

    /**
     * Range: -
     * Scale: 0.00544368
     * Offset: 0
     */
    uint16_t v_cfront_as8510_voltage;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t v_cfrontwiper_state;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t v_cfrontvehicle_status_dbg;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t v_cfronthomelink_v2_response1;

    /**
     * Range: -
     * Scale: 10
     * Offset: 0
     */
    uint8_t v_cfrontmin_evap_heat_rejection;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t v_cfrontcrash_detected_type;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t v_cfrontreverse_battery_fault;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t v_cfrontcrash_state;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t v_cfrontbattery_sm_state;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t v_cfrontcrash_unlock_override_set;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t v_cfronthomelink_v2_response2;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t v_cfrontfreeze_evap_i_term;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t v_cfrontair_compressor_status;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t v_cfronttime_spent_charging;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t v_cfrontis_evap_operation_allowed;

    /**
     * Range: -
     * Scale: 0.00544368
     * Offset: 0
     */
    uint16_t v_cfrontcalibrated_as8510_volts;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t v_cfrontchiller_demand_active;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t v_cfrontcomp_perf_recovery_limited;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t v_cfrontheadlight_left_v_position;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t v_cfronthas_low_refrigerant;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t v_cfronthomelink_v2_response3;

    /**
     * Range: -
     * Scale: 0.125
     * Offset: 0
     */
    uint8_t v_cfrontpressure_refrig_suction;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t v_cfronttime_spent_discharging;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t v_cfrontcharge_needed;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t v_cfrontheadlight_right_v_position;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t v_cfront_pcs_mia;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t v_cfront_dcdc_noop;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t v_cfronthomelink_v2_response4;

    /**
     * Range: -
     * Scale: 0.125
     * Offset: 0
     */
    uint8_t v_cfrontpressure_refrig_discharge;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t v_cfront_ibs_fault;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t v_cfront_pe_reset_line_state;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t v_cfront_hsd_init_complete_u13;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t v_cfront_hsd_init_complete_u16;

    /**
     * Range: -
     * Scale: 0.01
     * Offset: 0
     */
    int16_t v_cfront_ibs_unfiltered_temperature;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t v_cfronttime_spent_sleeping;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t v_cfrontfrunk_interior_rel_switch;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t v_cfronthomelink_comm_status;

    /**
     * Range: -
     * Scale: 100
     * Offset: 0
     */
    uint16_t v_cfrontwiper_cycles;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t v_cfrontany_closure_open;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t v_cfrontany_door_open;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t v_cfronthorn_on;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t v_cfrontwiper_position_deg;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    int16_t v_cfrontsleep_current;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t v_cfrontheadlamp_left_fan_status;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t v_cfront12_v_overcharge_counter;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t v_cfrontheadlamp_right_fan_status;
};

/**
 * Signals in message ID381VCFront1Hz.
 *
 * All signal values are as on the CAN bus.
 */
struct model3_can_id381_vc_front1_hz_t {
    /**
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vc_front1_hz_index;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t vc_frontmode_transition_id;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t vc_frontactive_louver_state;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t vc_frontfive_way_valve_recal_reason;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t vc_frontactive_louver_is_calibrated;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t vc_frontmode_desired;

    /**
     * Range: -
     * Scale: 0.1
     * Offset: 10
     */
    uint8_t vc_frontcondenser_pressure_limit;

    /**
     * Range: -
     * Scale: 1
     * Offset: -100
     */
    uint16_t vc_frontactive_louver_motor_counts;

    /**
     * Range: -
     * Scale: 1
     * Offset: 375
     */
    uint8_t vc_frontfive_way_valve_count_range;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t vc_frontactive_louver_abnormal_kt;

    /**
     * Range: -
     * Scale: 1
     * Offset: -40
     */
    uint8_t vc_fronttarget_pt_active_cool;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t vc_frontactive_louver_over_current;

    /**
     * Range: -
     * Scale: 0.25
     * Offset: -127
     */
    uint16_t vc_frontfive_way_valve_angle_drift;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t vc_frontactive_louver_over_temp;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t vc_frontactive_louver_motor_state;

    /**
     * Range: -
     * Scale: 1
     * Offset: -40
     */
    uint8_t vc_fronttarget_pt_passive;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t vc_frontactive_louver_open_pos_targ;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t vc_fronttarget_bat_active_cool;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t vc_frontactive_louver_open_pos;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t vc_frontfive_way_valve_recal_count;

    /**
     * Range: -
     * Scale: 1
     * Offset: -20
     */
    uint8_t vc_fronttarget_bat_passive;

    /**
     * Range: -
     * Scale: 1
     * Offset: -40
     */
    uint8_t vc_frontpump_battery_fet_temp;

    /**
     * Range: -
     * Scale: 1
     * Offset: -40
     */
    uint8_t vc_fronttarget_bat_active_heat;

    /**
     * Range: -
     * Scale: 1
     * Offset: -40
     */
    uint8_t vc_frontpump_powertrain_fet_temp;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t vc_frontfive_way_valve_windup_est_l;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t vc_frontfive_way_valve_windup_est_r;

    /**
     * Range: -
     * Scale: 1
     * Offset: -40
     */
    uint8_t vc_frontradiator_fan_fet_temp;
};

/**
 * Signals in message ID318SystemTimeUTC.
 *
 * All signal values are as on the CAN bus.
 */
struct model3_can_id318_system_time_utc_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t ut_cyear318;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t ut_cmonth318;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t ut_cseconds318;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t ut_chour318;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t ut_cday318;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t ut_cminutes318;
};

/**
 * Signals in message ID528UnixTime.
 *
 * All signal values are as on the CAN bus.
 */
struct model3_can_id528_unix_time_t {
    /**
     * Range: 0..4294967295 (0..4294967295 sec)
     * Scale: 1
     * Offset: 0
     */
    uint32_t unix_time_seconds528;
};

/**
 * Signals in message ID229GearLever.
 *
 * All signal values are as on the CAN bus.
 */
struct model3_can_id229_gear_lever_t {
    /**
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t gear_lever_position229;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t gear_lever_button229;
};

/**
 * Signals in message ID249LeftStalk.
 *
 * All signal values are as on the CAN bus.
 */
struct model3_can_id249_left_stalk_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t left_stalk_f_rpos249;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t left_stalk_button249;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t left_stalk_u_dpos249;
};

/**
 * Signals in message ID628UDSPCStoMCU.
 *
 * All signal values are as on the CAN bus.
 */
struct model3_can_id628_udspc_sto_mcu_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Signals in message ID628UDSMCUtoPCS.
 *
 * All signal values are as on the CAN bus.
 */
struct model3_can_id628_udsmc_uto_pcs_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Signals in message ID186FrontDriveTorqueRPM.
 *
 * All signal values are as on the CAN bus.
 */
struct model3_can_id186_front_drive_torque_rpm_t {
    /**
     * Torque at axle
     *
     * Range: -4096..4095 (-8192..8190 NM)
     * Scale: 2
     * Offset: 0
     */
    int16_t front_torque_request186;

    /**
     * Torque at axle
     *
     * Range: -4096..4095 (-8192..8190 NM)
     * Scale: 2
     * Offset: 0
     */
    int16_t front_torque_actual186;

    /**
     * Range: -32768..32767 (-3276.8..3276.7 RPM)
     * Scale: 0.1
     * Offset: 0
     */
    int16_t front_axle_rpm186;
};

/**
 * Signals in message ID395FrontOilPump.
 *
 * All signal values are as on the CAN bus.
 */
struct model3_can_id395_front_oil_pump_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t front_oil_pump_state395;

    /**
     * Range: -
     * Scale: 0.06
     * Offset: 0
     */
    uint8_t front_oil_flow_target395;

    /**
     * Range: -
     * Scale: 0.06
     * Offset: 0
     */
    uint8_t front_oil_flow_actual395;

    /**
     * Range: -
     * Scale: 1
     * Offset: -40
     */
    uint8_t front_oil_pc_btemp395;

    /**
     * Range: -
     * Scale: 1
     * Offset: -40
     */
    uint8_t front_oil_temp395;

    /**
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    uint8_t front_oil_voltage395;

    /**
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    uint8_t front_oil_current395;

    /**
     * Range: -
     * Scale: 0.005
     * Offset: 0
     */
    uint8_t front_oil_current_offset395;
};

/**
 * Signals in message ID396RearOilPump.
 *
 * All signal values are as on the CAN bus.
 */
struct model3_can_id396_rear_oil_pump_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t rear_oil_pump_state396;

    /**
     * Range: -
     * Scale: 0.06
     * Offset: 0
     */
    uint8_t rear_oil_flow_target396;

    /**
     * Range: -
     * Scale: 0.06
     * Offset: 0
     */
    uint8_t rear_oil_flow_actual396;

    /**
     * Range: -
     * Scale: 1
     * Offset: -40
     */
    uint8_t rear_oil_pc_btemp396;

    /**
     * Range: -
     * Scale: 1
     * Offset: -40
     */
    uint8_t rear_oil_temp396;

    /**
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    uint8_t rear_oil_voltage396;

    /**
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    uint8_t rear_oil_current396;

    /**
     * Range: -
     * Scale: 0.005
     * Offset: 0
     */
    uint8_t rear_oil_current_offset396;
};

/**
 * Signals in message ID5D5RearTempReq.
 *
 * All signal values are as on the CAN bus.
 */
struct model3_can_id5_d5_rear_temp_req_t {
    /**
     * Range: 0..255 (-40..215 C)
     * Scale: 1
     * Offset: -40
     */
    uint8_t test_temp5_d5_a;

    /**
     * Range: 0..255 (-40..215 C)
     * Scale: 1
     * Offset: -40
     */
    uint8_t test_temp5_d5_b;

    /**
     * Range: -
     * Scale: 0.2
     * Offset: 0
     */
    uint8_t test_temp5_d5_c;
};

/**
 * Signals in message ID556FrontTempReq.
 *
 * All signal values are as on the CAN bus.
 */
struct model3_can_id556_front_temp_req_t {
    /**
     * Range: 0..255 (-40..215 C)
     * Scale: 1
     * Offset: -40
     */
    uint8_t test_temp556_a;

    /**
     * Range: 0..255 (-40..215 C)
     * Scale: 1
     * Offset: -40
     */
    uint8_t test_temp556_b;

    /**
     * Range: -
     * Scale: 0.2
     * Offset: 0
     */
    uint8_t test_temp556_c;
};

/**
 * Signals in message ID1D8RearTorque.
 *
 * All signal values are as on the CAN bus.
 */
struct model3_can_id1_d8_rear_torque_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t torque_flags1_d8;

    /**
     * driver requested torque
     *
     * Range: -16384..16383 (-1638.4..1638.3 NM)
     * Scale: 0.1
     * Offset: 0
     */
    int16_t rear_torque_request1_d8;

    /**
     * torque at motor
     *
     * Range: -4096..4095 (-1024..1023.75 NM)
     * Scale: 0.25
     * Offset: 0
     */
    int16_t rear_torque1_d8;
};

/**
 * Signals in message ID155WheelAngles.
 *
 * All signal values are as on the CAN bus.
 */
struct model3_can_id155_wheel_angles_t {
    /**
     * Range: 0..255 (0..358.59375 deg)
     * Scale: 1.40625
     * Offset: 0
     */
    uint8_t wheel_angle_tics_fl155;

    /**
     * Range: 0..255 (0..358.59375 deg)
     * Scale: 1.40625
     * Offset: 0
     */
    uint8_t wheel_angle_tics_fr155;

    /**
     * Range: 0..255 (0..358.59375 deg)
     * Scale: 1.40625
     * Offset: 0
     */
    uint8_t wheel_angle_tics_rl155;

    /**
     * Range: 0..255 (0..358.59375 deg)
     * Scale: 1.40625
     * Offset: 0
     */
    uint8_t wheel_angle_tics_rr155;
};

/**
 * Signals in message ID175WheelSpeed.
 *
 * All signal values are as on the CAN bus.
 */
struct model3_can_id175_wheel_speed_t {
    /**
     * Range: 0..8191 (0..327.64 rpm)
     * Scale: 0.04
     * Offset: 0
     */
    uint16_t wheel_speed_fl175;

    /**
     * Range: 0..8191 (0..327.64 rpm)
     * Scale: 0.04
     * Offset: 0
     */
    uint16_t wheel_speed_fr175;

    /**
     * Range: 0..8191 (0..327.64 rpm)
     * Scale: 0.04
     * Offset: 0
     */
    uint16_t wheel_speed_rl175;

    /**
     * Range: 0..8191 (0..327.64 rpm)
     * Scale: 0.04
     * Offset: 0
     */
    uint16_t wheel_speed_rr175;
};

/**
 * Signals in message ID1D4FrontTorqueOld.
 *
 * All signal values are as on the CAN bus.
 */
struct model3_can_id1_d4_front_torque_old_t {
    /**
     * Axle torque 2 with 9/1 gearing
     *
     * Range: -2048..2047 (-512..511.75 NM)
     * Scale: 0.25
     * Offset: 0
     */
    int16_t raw_torque_front1_d4;
};

/**
 * Signals in message ID1D5FrontTorque.
 *
 * All signal values are as on the CAN bus.
 */
struct model3_can_id1_d5_front_torque_t {
    /**
     * torque at motor
     *
     * Range: -16384..16383 (-1638.4..1638.3 NM)
     * Scale: 0.1
     * Offset: 0
     */
    int16_t front_torque_request1_d5;

    /**
     * torque at motor
     *
     * Range: -4096..4095 (-1024..1023.75 NM)
     * Scale: 0.25
     * Offset: 0
     */
    int16_t front_torque1_d5;
};

/**
 * Signals in message ID2E5FrontInverterPower.
 *
 * All signal values are as on the CAN bus.
 */
struct model3_can_id2_e5_front_inverter_power_t {
    /**
     * Range: -1024..1023 (-512..511.5 kW)
     * Scale: 0.5
     * Offset: 0
     */
    int16_t front_power2_e5;

    /**
     * should offset be there?
     *
     * Range: 0..255 (-0.5..31.375 kW)
     * Scale: 0.125
     * Offset: -0.5
     */
    uint8_t front_power_dissipation2_e5;

    /**
     * Range: 0..398437.5 (0..31875 kW)
     * Scale: 0.08
     * Offset: 0
     */
    uint8_t front_heat_power_optimal2_e5;

    /**
     * Range: 0..398437.5 (0..31875 kW)
     * Scale: 0.08
     * Offset: 0
     */
    uint8_t front_heat_power_max2_e5;

    /**
     * Range: 0..511 (0..40.88 kW)
     * Scale: 0.08
     * Offset: 0
     */
    uint16_t front_heat_power2_e5;
};

/**
 * Signals in message ID3C2VCLswitches.
 *
 * All signal values are as on the CAN bus.
 */
struct model3_can_id3_c2_vc_lswitches_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Signals in message ID336MaxPowerRating.
 *
 * All signal values are as on the CAN bus.
 */
struct model3_can_id336_max_power_rating_t {
    /**
     * Range: 0..511 (0..511 kW)
     * Scale: 1
     * Offset: 0
     */
    uint16_t drive_power_rating336;

    /**
     * Range: 0..255 (-100..155 kW)
     * Scale: 1
     * Offset: -100
     */
    uint8_t drive_regen_rating336;
};

/**
 * Signals in message ID333UIcharging.
 *
 * All signal values are as on the CAN bus.
 */
struct model3_can_id333_u_icharging_t {
    /**
     * Range: 0..127 (0..127 A)
     * Scale: 1
     * Offset: 0
     */
    uint8_t u_icharge_current_limit333;

    /**
     * Range: 0..1023 (0..102.3 %)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t u_icharge_to_soc333;
};

/**
 * Signals in message ID241Coolant.
 *
 * All signal values are as on the CAN bus.
 */
struct model3_can_id241_coolant_t {
    /**
     * Range: 0..511 (0..51.1 LPM)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t vc_fbatt_coolant_flow241;

    /**
     * Range: 0..511 (0..51.1 LPM)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t vcfpt_coolant_flow241;
};

/**
 * Signals in message ID293chassisControls.
 *
 * All signal values are as on the CAN bus.
 */
struct model3_can_id293chassis_controls_t {
    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t uic_csteering_mode293;

    /**
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t uic_ctraction_control_mode293;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t uic_cnarrow_garages293;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t uicc_winch_mode293;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t uic_ctrailer_mode293;

    /**
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t uicc_suspension_level293;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t uicc_units293;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t uic_cdebug_enable293;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t uic_covertake_enable293;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t uic_ctraffic_light_stop_signs293;
};

/**
 * Signals in message ID268SystemPower.
 *
 * All signal values are as on the CAN bus.
 */
struct model3_can_id268_system_power_t {
    /**
     * Range: 0..398437.5 (0..31875 kW)
     * Scale: 0.08
     * Offset: 0
     */
    uint8_t system_heat_power_max268;

    /**
     * Range: 0..398437.5 (0..31875 kW)
     * Scale: 0.08
     * Offset: 0
     */
    uint8_t system_heat_power268;

    /**
     * Range: 0..511 (0..511 kW)
     * Scale: 1
     * Offset: 0
     */
    uint16_t system_drive_power_max268;

    /**
     * Range: 0..255 (-100..155 kW)
     * Scale: 1
     * Offset: -100
     */
    uint8_t system_regen_power_max268;
};

/**
 * Signals in message ID04FGPSLatLong.
 *
 * All signal values are as on the CAN bus.
 */
struct model3_can_id04_fgps_lat_long_t {
    /**
     * Range: -134217728..134217727 (-134.217728..134.217727 Deg)
     * Scale: 1e-06
     * Offset: 0
     */
    int32_t gps_lattitude04_f;

    /**
     * Range: -1342177280..1342177270 (-1342.17728..1342.17727 Deg)
     * Scale: 1e-06
     * Offset: 0
     */
    int32_t gps_longitude04_f;
};

/**
 * Signals in message ID3D2TotalChargeDischarge.
 *
 * All signal values are as on the CAN bus.
 */
struct model3_can_id3_d2_total_charge_discharge_t {
    /**
     * Range: 0..4294967295 (0..4294967.295 kWh)
     * Scale: 0.001
     * Offset: 0
     */
    uint32_t total_discharge_k_wh3_d2;

    /**
     * Range: 0..4294967295 (0..4294967.295 kWh)
     * Scale: 0.001
     * Offset: 0
     */
    uint32_t total_charge_k_wh3_d2;
};

/**
 * Signals in message ID3F2BMSCounters.
 *
 * All signal values are as on the CAN bus.
 */
struct model3_can_id3_f2_bms_counters_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_counters_index3_f2;

    /**
     * Range: 0..4294967295 (0..4294967.295 KWh)
     * Scale: 0.001
     * Offset: 0
     */
    uint32_t bm_stotal_a_ccharge3_f2;

    /**
     * Range: 0..4294967295 (0..4294967.295 KWh)
     * Scale: 0.001
     * Offset: 0
     */
    uint32_t bm_stotal_d_ccharge3_f2;

    /**
     * Range: 0..4294967295 (0..4294967.295 KWh)
     * Scale: 0.001
     * Offset: 0
     */
    uint32_t bm_stotal_regen_charge3_f2;

    /**
     * Range: 0..4294967295 (0..4294967.295 KWh)
     * Scale: 0.001
     * Offset: 0
     */
    uint32_t bm_stotal_drive_discharge3_f2;
};

/**
 * Signals in message ID2D2BMSVAlimits.
 *
 * All signal values are as on the CAN bus.
 */
struct model3_can_id2_d2_bmsv_alimits_t {
    /**
     * test
     *
     * Range: 0..65535 (0..655.35 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t min_voltage2_d2;

    /**
     * Range: 0..65535 (0..655.35 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t max_voltage2_d2;

    /**
     * Range: 0..16383 (0..1638.3 A)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t max_charge_current2_d2;

    /**
     * Range: 0..16383 (0..2097.024 A)
     * Scale: 0.128
     * Offset: 0
     */
    uint16_t max_discharge_current2_d2;
};

/**
 * Signals in message ID541FastChargeMaxLimits.
 *
 * All signal values are as on the CAN bus.
 */
struct model3_can_id541_fast_charge_max_limits_t {
    /**
     * Range: 0..8191 (0..509.938896 kW)
     * Scale: 0.062256
     * Offset: 0
     */
    uint16_t fc_max_power_limit541;

    /**
     * Range: 0..8191 (0..599.925222 A)
     * Scale: 0.073242
     * Offset: 0
     */
    uint16_t fc_max_current_limit541;
};

/**
 * Signals in message ID244FastChargeLimits.
 *
 * All signal values are as on the CAN bus.
 */
struct model3_can_id244_fast_charge_limits_t {
    /**
     * Range: 0..8191 (0..509.938896 kW)
     * Scale: 0.062256
     * Offset: 0
     */
    uint16_t fc_power_limit244;

    /**
     * Range: 0..8191 (0..599.925222 A)
     * Scale: 0.073242
     * Offset: 0
     */
    uint16_t fc_current_limit244;

    /**
     * Range: 0..8191 (0..599.925222 V)
     * Scale: 0.073242
     * Offset: 0
     */
    uint16_t fc_max_vlimit244;

    /**
     * Range: 0..8191 (0..599.925222 V)
     * Scale: 0.073242
     * Offset: 0
     */
    uint16_t fc_min_vlimit244;
};

/**
 * Signals in message ID214FastChargeVA.
 *
 * All signal values are as on the CAN bus.
 */
struct model3_can_id214_fast_charge_va_t {
    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t f_cprotocol_version214;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t f_cstatus_code214;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t f_ccurrent_limit_achieved214;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t f_cpower_limit_achieved214;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t f_cvoltage_limit_achieved214;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t f_cadapter_locked214;

    /**
     * Range: 0..8191 (0..819.1 A)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t f_cmin_current_limit214;

    /**
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t f_ctype214;

    /**
     * Range: -8192..8191 (-600.0001024..599.9268602 A)
     * Scale: 0.0732422
     * Offset: 0
     */
    int16_t fc_current214;

    /**
     * Range: 0..3 (0..6 -)
     * Scale: 2
     * Offset: 0
     */
    uint8_t f_cpost_id214;

    /**
     * Range: 0..8191 (0..599.9268602 V)
     * Scale: 0.0732422
     * Offset: 0
     */
    uint16_t fc_voltage214;
};

/**
 * Signals in message ID215FCisolation.
 *
 * All signal values are as on the CAN bus.
 */
struct model3_can_id215_f_cisolation_t {
    /**
     * Range: 0..255 (0..10200 kOhm)
     * Scale: 40
     * Offset: 0
     */
    uint8_t fc_isolation215;
};

/**
 * Signals in message ID217FCinfo.
 *
 * All signal values are as on the CAN bus.
 */
struct model3_can_id217_f_cinfo_t {
    /**
     * Range: 0..127 (0..127 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t f_cinfo_mux217;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t f_cclass217;

    /**
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t f_cbrand217;

    /**
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t f_ccooling_type217;

    /**
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t f_cui_stop_type217;
};

/**
 * Signals in message ID321VCFrontTempsLevels.
 *
 * All signal values are as on the CAN bus.
 */
struct model3_can_id321_vc_front_temps_levels_t {
    /**
     * Range: 0..1023 (-40..87.875 C)
     * Scale: 0.125
     * Offset: -40
     */
    uint16_t temp_coolant_batt_inlet321;

    /**
     * Range: 0..1023 (-40..87.875 C)
     * Scale: 0.125
     * Offset: -40
     */
    uint16_t temp_coolant_p_tinlet321;

    /**
     * Range: 0..255 (-40..87.5 C)
     * Scale: 0.5
     * Offset: -40
     */
    uint8_t temp_ambient_raw321;

    /**
     * Range: 0..255 (-40..87.5 C)
     * Scale: 0.5
     * Offset: -40
     */
    uint8_t temp_ambient321;
};

/**
 * Signals in message ID3D8Elevation.
 *
 * All signal values are as on the CAN bus.
 */
struct model3_can_id3_d8_elevation_t {
    /**
     * Range: -32768..32767 (-32768..32767 M)
     * Scale: 1
     * Offset: 0
     */
    int16_t elevation3_d8;
};

/**
 * Signals in message ID261_12vBattStatus.
 *
 * All signal values are as on the CAN bus.
 */
struct model3_can_id261_12v_batt_status_t {
    /**
     * Range: 0..4095 (0..22.2918696 V)
     * Scale: 0.00544368
     * Offset: 0
     */
    uint16_t v12v_batt_voltage261;

    /**
     * Range: -32768..32767 (-327.68..327.67 C)
     * Scale: 0.01
     * Offset: 0
     */
    int16_t v12v_batt_temp261;

    /**
     * Range: 0..16383 (0..163.83 AH)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t v12v_batt_ah261;

    /**
     * Range: -32768..32767 (-163.84..163.835 A)
     * Scale: 0.005
     * Offset: 0
     */
    int16_t v12v_batt_current261;
};

/**
 * Signals in message ID129SteeringAngle.
 *
 * All signal values are as on the CAN bus.
 */
struct model3_can_id129_steering_angle_t {
    /**
     * Range: 0..16383 (-819.2..819.1 Deg)
     * Scale: 0.1
     * Offset: -819.2
     */
    uint16_t steering_angle129;

    /**
     * Range: 0..16383 (-4096..4095.5 D/S)
     * Scale: 0.5
     * Offset: -4096
     */
    uint16_t steering_speed129;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t steering_sensor_a129;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t steering_sensor_b129;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t steering_sensor_c129;
};

/**
 * Signals in message ID264ChargeLineStatus.
 *
 * All signal values are as on the CAN bus.
 */
struct model3_can_id264_charge_line_status_t {
    /**
     * 0 12 .1
     *
     * Range: 0..16383 (0..545.5539 V)
     * Scale: 0.0333
     * Offset: 0
     */
    uint16_t charge_line_voltage264;

    /**
     * 24 8 .5
     *
     * Range: 0..511 (0..51.1 A)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t charge_line_current264;

    /**
     * 16 8 .08
     *
     * Range: 0..255 (0..25.5 kW)
     * Scale: 0.1
     * Offset: 0
     */
    uint8_t charge_line_power264;

    /**
     * 32 8 .5
     *
     * Range: 0..1023 (0..102.3 A)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t charge_line_current_limit264;
};

/**
 * Signals in message ID224PCSDCDCstatus.
 *
 * All signal values are as on the CAN bus.
 */
struct model3_can_id224_pcsdcd_cstatus_t {
    /**
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t dcd_cstate224;

    /**
     * Range: -2048..2047 (-204.8..204.7 A)
     * Scale: 0.1
     * Offset: 0
     */
    int16_t dcd_coutput_current224;

    /**
     * Range: 0..4095 (0..409.5 A)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t dcd_coutput_current_max224;
};

/**
 * Signals in message ID118DriveSystemStatus.
 *
 * All signal values are as on the CAN bus.
 */
struct model3_can_id118_drive_system_status_t {
    /**
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t drive_state118;

    /**
     * 19 1
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t brake_pedal118;

    /**
     * 20 4
     *
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t d_igear118;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t brake_state118;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t immobilizer118;

    /**
     * Range: 0..255 (0..102 %)
     * Scale: 0.4
     * Offset: 0
     */
    uint8_t pedal_position118;

    /**
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t traction_control118;

    /**
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t parking_brake118;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t track_mode118;
};

/**
 * Signals in message ID212BMSstatus.
 *
 * All signal values are as on the CAN bus.
 */
struct model3_can_id212_bm_sstatus_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t bm_shvac_power_request212;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t bm_snot_enough_power_for_drive212;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t bm_snot_enough_power_for_support212;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t bm_sprecondition_allowed212;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t bm_supdate_allowed212;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t bm_sactive_heating_worthwhile212;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t bm_scp_mia_on_hvs212;

    /**
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bm_scontactors212;

    /**
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bm_sstate212;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t bmsh_vstate212;

    /**
     * Range: 0..1023 (0..1023 kOhm)
     * Scale: 1
     * Offset: 0
     */
    uint16_t isolation_r212;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t bm_scharge_request212;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t bm_skeep_warm_request212;

    /**
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bm_scharge_status212;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t bm_sdi_limp_request212;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t bm_sok_to_ship_by_air212;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t bm_sok_to_ship_by_land212;

    /**
     * Range: 0..2047 (0..255.875 kW)
     * Scale: 0.125
     * Offset: 0
     */
    uint16_t bm_scharge_power_available212;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t bm_scharge_retry_count212;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t bm_spcs_pwm_enabled212;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t bm_secu_log_upload_request212;

    /**
     * Range: 0..255 (-40..87.5 C)
     * Scale: 0.5
     * Offset: -40
     */
    uint8_t min_batt_temp212;
};

/**
 * Signals in message ID352BMSenergy.
 *
 * All signal values are as on the CAN bus.
 */
struct model3_can_id352_bm_senergy_t {
    /**
     * Range: 0..1023 (0..102.3 kWh)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t bfull_k_wh_nom352;

    /**
     * Range: 0..1023 (0..102.3 kWh)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t bremaining_k_wh_nom352;

    /**
     * Range: 0..1023 (0..102.3 kWh)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t bexpectedremain_k_wh352;

    /**
     * Range: 0..1023 (0..102.3 kWh)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t bidealremain_k_wh352;

    /**
     * Range: 0..1023 (0..102.3 kWh)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t btochargecomplete_k_wh352;

    /**
     * Range: 0..255 (0..25.5 kWh)
     * Scale: 0.1
     * Offset: 0
     */
    uint8_t bbuffer_k_wh352;
};

/**
 * Signals in message ID252PowerLimits.
 *
 * All signal values are as on the CAN bus.
 */
struct model3_can_id252_power_limits_t {
    /**
     * Range: 0..65535 (0..655.35 kW)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t max_regen252;

    /**
     * Range: 0..65535 (0..655.35 kW)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t max_discharge252;

    /**
     * test
     *
     * Range: 0..1023 (0..102.3 kW)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t max_heat_parked252;

    /**
     * Range: 0..1023 (0..20.46 kW)
     * Scale: 0.02
     * Offset: 0
     */
    uint16_t hva_cpower_max252;
};

/**
 * Signals in message ID312BMSthermal.
 *
 * All signal values are as on the CAN bus.
 */
struct model3_can_id312_bm_sthermal_t {
    /**
     * Range: 0..1023 (0..20.46 kW)
     * Scale: 0.02
     * Offset: 0
     */
    uint16_t bm_sdissipation312;

    /**
     * Range: 0..127 (0..38.1 LPM)
     * Scale: 0.3
     * Offset: 0
     */
    uint8_t bm_sflow_request312;

    /**
     * Range: 0..255 (10..73.75 C)
     * Scale: 0.25
     * Offset: 10
     */
    uint8_t bm_sinlet_active_cool_target312;

    /**
     * Range: 0..255 (0..63.75 C)
     * Scale: 0.25
     * Offset: 0
     */
    uint8_t bm_sinlet_passive_target312;

    /**
     * Range: 0..255 (-25..38.75 C)
     * Scale: 0.25
     * Offset: -25
     */
    uint8_t bm_sinlet_active_heat_target312;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bm_spcs_no_flow_request312;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bm_sno_flow_request312;
};

/**
 * Signals in message ID292BMS_SOC.
 *
 * All signal values are as on the CAN bus.
 */
struct model3_can_id292_bms_soc_t {
    /**
     * Range: 0..1023 (0..102.3 -)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t socui292;

    /**
     * Range: 0..1023 (0..102.3 -)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t so_cmin292;

    /**
     * Range: 0..1023 (0..102.3 -)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t so_cmax292;

    /**
     * Range: 0..1023 (0..102.3 -)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t so_cave292;
};

/**
 * Signals in message ID257UIspeed.
 *
 * All signal values are as on the CAN bus.
 */
struct model3_can_id257_u_ispeed_t {
    /**
     * .05 -25 x.08 -40 for kph
     *
     * Range: 0..4095 (-25..179.75 MPHKPH)
     * Scale: 0.05
     * Offset: -25
     */
    uint16_t u_ispeed_signed257;

    /**
     * Range: 0..255 (0..255 MPHKPH)
     * Scale: 1
     * Offset: 0
     */
    uint8_t u_ispeed_abs257;

    /**
     * 0-mph 1-kph
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t u_ispeed_units257;
};

/**
 * Signals in message ID405VIN.
 *
 * All signal values are as on the CAN bus.
 */
struct model3_can_id405_vin_t {
    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t mux405;

    /**
     * last 7 of VIN (ASCII)
     *
     * Range: 0..72057594038000000 (0..7.2057594038E+16 -)
     * Scale: 1
     * Offset: 0
     */
    uint64_t vinb405;

    /**
     * part two of VIN (ASCII)
     *
     * Range: 0..72057594038000000 (0..7.2057594038E+16 -)
     * Scale: 1
     * Offset: 0
     */
    uint64_t vinc405;

    /**
     * four zeros then first 3 characters of VIN
     *
     * Range: 0..72057594038000000 (0..7.2057594038E+16 -)
     * Scale: 1
     * Offset: 0
     */
    uint64_t vina405;
};

/**
 * Signals in message ID51EChgConnectorInfo.
 *
 * All signal values are as on the CAN bus.
 */
struct model3_can_id51_e_chg_connector_info_t {
    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t mux51_e;

    /**
     * Range: 0..72057594038000000 (0..7.2057594038E+16 -)
     * Scale: 1
     * Offset: 0
     */
    uint64_t ch_gmodel_a51_e;

    /**
     * Range: 0..72057594037927900 (0..7.20575940379279E+16 -)
     * Scale: 1
     * Offset: 0
     */
    uint64_t ch_gmodel_b51_e;
};

/**
 * Signals in message ID376FrontInverterTemps.
 *
 * All signal values are as on the CAN bus.
 */
struct model3_can_id376_front_inverter_temps_t {
    /**
     * .5 -20
     *
     * Range: 0..255 (-40..215 C)
     * Scale: 1
     * Offset: -40
     */
    uint8_t temp_inv_pcb376;

    /**
     * Range: 0..255 (-40..215 C)
     * Scale: 1
     * Offset: -40
     */
    uint8_t temp_inverter376;

    /**
     * Range: 0..255 (-40..215 C)
     * Scale: 1
     * Offset: -40
     */
    uint8_t temp_stator376;

    /**
     * .5 -20
     *
     * Range: 0..255 (-40..215 C)
     * Scale: 1
     * Offset: -40
     */
    uint8_t temp_inv_capbank376;

    /**
     * Range: 0..255 (-40..215 C)
     * Scale: 1
     * Offset: -40
     */
    uint8_t temp_inv_heatsink376;

    /**
     * Range: 0..255 (0..102 %)
     * Scale: 0.4
     * Offset: 0
     */
    uint8_t temp_pct_inverter376;

    /**
     * Range: 0..255 (0..102 %)
     * Scale: 0.4
     * Offset: 0
     */
    uint8_t temp_pct_stator376;
};

/**
 * Signals in message ID315RearInverterTemps.
 *
 * All signal values are as on the CAN bus.
 */
struct model3_can_id315_rear_inverter_temps_t {
    /**
     * Range: 0..255 (-40..215 C)
     * Scale: 1
     * Offset: -40
     */
    uint8_t rear_temp_inv_pcb315;

    /**
     * Range: 0..255 (-40..215 C)
     * Scale: 1
     * Offset: -40
     */
    uint8_t rear_temp_inverter315;

    /**
     * Range: 0..255 (-40..215 C)
     * Scale: 1
     * Offset: -40
     */
    uint8_t rear_temp_stator315;

    /**
     * Range: 0..255 (-40..215 C)
     * Scale: 1
     * Offset: -40
     */
    uint8_t rear_temp_inv_capbank315;

    /**
     * Range: 0..255 (-40..215 C)
     * Scale: 1
     * Offset: -40
     */
    uint8_t rear_temp_inv_heatsink315;

    /**
     * Range: 0..255 (0..102 %)
     * Scale: 0.4
     * Offset: 0
     */
    uint8_t rear_temp_pct_inverter315;

    /**
     * Range: 0..255 (0..102 %)
     * Scale: 0.4
     * Offset: 0
     */
    uint8_t rear_temp_pct_stator315;
};

/**
 * Signals in message ID154RearTorqueOld.
 *
 * All signal values are as on the CAN bus.
 */
struct model3_can_id154_rear_torque_old_t {
    /**
     * Axle torque 2 with 9/1 gearing
     *
     * Range: -2048..2047 (-512..511.75 NM)
     * Scale: 0.25
     * Offset: 0
     */
    int16_t raw_torque_rear154;
};

/**
 * Signals in message ID3B6odometer.
 *
 * All signal values are as on the CAN bus.
 */
struct model3_can_id3_b6odometer_t {
    /**
     * Range: 0..4294967295 (0..4294967.295 KM)
     * Scale: 0.001
     * Offset: 0
     */
    uint32_t odometer3_b6;
};

/**
 * Signals in message ID266RearInverterPower.
 *
 * All signal values are as on the CAN bus.
 */
struct model3_can_id266_rear_inverter_power_t {
    /**
     * electrical power
     *
     * Range: -1024..1023 (-512..511.5 kW)
     * Scale: 0.5
     * Offset: 0
     */
    int16_t rear_power266;

    /**
     * should offset be there?
     *
     * Range: 0..255 (0..255 kW)
     * Scale: 1
     * Offset: 0
     */
    uint8_t rear_power_dissipation266;

    /**
     * Range: 0..255 (0..255 kW)
     * Scale: 1
     * Offset: 0
     */
    uint8_t rear_heat_power266;

    /**
     * Range: 0..255 (0..255 kW)
     * Scale: 1
     * Offset: 0
     */
    uint8_t rear_heat_power_optimal266;

    /**
     * Range: 0..511 (0..255.5 kW)
     * Scale: 0.5
     * Offset: 0
     */
    uint16_t rear_heat_power_max266;
};

/**
 * Signals in message ID108RearDriveTorqueRPM.
 *
 * All signal values are as on the CAN bus.
 */
struct model3_can_id108_rear_drive_torque_rpm_t {
    /**
     * Torque at axle
     *
     * Range: -4096..4095 (-8192..8190 NM)
     * Scale: 2
     * Offset: 0
     */
    int16_t rear_torque_request108;

    /**
     * Torque at axle
     *
     * Range: -4096..4095 (-8192..8190 NM)
     * Scale: 2
     * Offset: 0
     */
    int16_t rear_torque_actual108;

    /**
     * Range: -32768..32767 (-3276.8..3276.7 RPM)
     * Scale: 0.1
     * Offset: 0
     */
    int16_t rear_axle_rpm108;
};

/**
 * Signals in message ID132HVBattAmpVolt.
 *
 * All signal values are as on the CAN bus.
 */
struct model3_can_id132_hv_batt_amp_volt_t {
    /**
     * Range: 0..65535 (0..655.35 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t batt_voltage132;

    /**
     * old offset 1000
     *
     * Range: 16383..-16384 (-1638.3..1638.4 A)
     * Scale: -0.1
     * Offset: 0
     */
    int16_t smooth_batt_current132;

    /**
     * old offset 1000
     *
     * Range: 32767..-32768 (-1138.35..2138.4 A)
     * Scale: -0.05
     * Offset: 500
     */
    int16_t raw_batt_current132;

    /**
     * Range: 0..4095 (0..4095 Min)
     * Scale: 1
     * Offset: 0
     */
    uint16_t charge_hours_remaining132;
};

/**
 * Signals in message ID126.
 *
 * All signal values are as on the CAN bus.
 */
struct model3_can_id126_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t test_byte0126;

    /**
     * Range: 0..65535 (0..6553.5 -)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t test_data126;

    /**
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t demand126;
};

/**
 * Signals in message ID31FTPMSsensors.
 *
 * All signal values are as on the CAN bus.
 */
struct model3_can_id31_ftpm_ssensors_t {
    /**
     * Range: -
     * Scale: 0.025
     * Offset: 0
     */
    uint8_t tpmsf_lpressure31_f;

    /**
     * Range: -
     * Scale: 1
     * Offset: -40
     */
    uint8_t tpmsf_ltemp31_f;

    /**
     * Range: -
     * Scale: 0.025
     * Offset: 0
     */
    uint8_t tpmsf_rpressure31_f;

    /**
     * Range: -
     * Scale: 1
     * Offset: -40
     */
    uint8_t tpmsf_rtemp31_f;

    /**
     * Range: -
     * Scale: 0.025
     * Offset: 0
     */
    uint8_t tpmsr_lpressure31_f;

    /**
     * Range: -
     * Scale: 1
     * Offset: -40
     */
    uint8_t tpmsr_ltemp31_f;

    /**
     * Range: -
     * Scale: 0.025
     * Offset: 0
     */
    uint8_t tpmsr_rpressure31_f;

    /**
     * Range: -
     * Scale: 1
     * Offset: -40
     */
    uint8_t tpmsr_rtemp31_f;
};

/**
 * Signals in message ID3FEbrakeTemps.
 *
 * All signal values are as on the CAN bus.
 */
struct model3_can_id3_f_ebrake_temps_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: -40
     */
    uint16_t brake_temp_fl3_fe;

    /**
     * Range: -
     * Scale: 1
     * Offset: -40
     */
    uint16_t brake_temp_fr3_fe;

    /**
     * Range: -
     * Scale: 1
     * Offset: -40
     */
    uint16_t brake_temp_rl3_fe;

    /**
     * Range: -
     * Scale: 1
     * Offset: -40
     */
    uint16_t brake_temp_rr3_fe;
};

/**
 * Signals in message ID228EPBrightStatus.
 *
 * All signal values are as on the CAN bus.
 */
struct model3_can_id228_ep_bright_status_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t epb_runit_status228;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t epb_runit_fault_status228;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t epb_rsummon_state228;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t epb_rdisconnected228;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t epb_rlockout_unlock_count228;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t epb_resm_caliper_request228;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t epb_rcsm_fault_reason228;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t epb_resm_operation_trigger228;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t epb_rsummon_fault_reason228;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t epb_rlocal_service_mode_active228;

    /**
     * Range: -
     * Scale: 0.00544368
     * Offset: 0
     */
    uint16_t epbr12_v_filt228;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t epbrcdp_qualified228;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t epb_rinternal_cdp_request228;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t epb_rinternal_status_counter228;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t epb_rinternal_status_checksum228;
};

/**
 * Signals in message ID288EPBleftStatus.
 *
 * All signal values are as on the CAN bus.
 */
struct model3_can_id288_ep_bleft_status_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t epb_lunit_status288;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t epb_lunit_fault_status288;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t epb_lsummon_state288;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t epb_ldisconnected288;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t epb_llockout_unlock_count288;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t epb_lesm_caliper_request288;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t epb_lcsm_fault_reason288;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t epb_lesm_operation_trigger288;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t epb_lsummon_fault_reason288;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t epb_llocal_service_mode_active288;

    /**
     * Range: -
     * Scale: 0.00544368
     * Offset: 0
     */
    uint16_t epbl12_v_filt288;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t epblcdp_qualified288;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t epb_linternal_cdp_request288;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t epb_linternal_status_counter288;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t epb_linternal_status_checksum288;
};

/**
 * Signals in message ID7FFcarConfig.
 *
 * All signal values are as on the CAN bus.
 */
struct model3_can_id7_f_fcar_config_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t cf_gmuxindex7_ff;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t cf_gair_suspension7_ff;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t cf_gheated_wipers7_ff;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t cf_gepas_type7_ff;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t cf_gfront_seat_heaters7_ff;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t cf_gdrivetrain_type7_ff;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t cf_grear_seat_heaters7_ff;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t cf_gright_hand_drive7_ff;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t cf_gpack_energy7_ff;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t cf_gbrake_hw_type7_ff;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t cf_ghomelink_type7_ff;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t cf_gvdc_type7_ff;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t cf_gxcp_ibst7_ff;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t cf_gcountry7_ff;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t cf_gxcp_esp7_ff;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t cf_gmemory_mirrors7_ff;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t cf_gpower_steering_column7_ff;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t cf_ginterior_lighting7_ff;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t cf_gfront_fog_lamps7_ff;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t cf_gheadlamps7_ff;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t cf_gaudio_type7_ff;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t cf_glumbar_ecu_type7_ff;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t cf_gibst_wake_type7_ff;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t cf_gfront_seat_type7_ff;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t cf_gaux_park_lamps7_ff;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t cf_gpedestrian_warning_sound7_ff;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t cf_ghvac_quiet_snorkel_type7_ff;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t cf_ghvac_panel_vane_type7_ff;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t cfg_cabin_blower_ctrl_type7_ff;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t cf_gperformance_package7_ff;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t cf_ge_buck_config7_ff;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t cf_gwindshield_type7_ff;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t cf_gactive_high_beam7_ff;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t cf_gairbag_cutoff_switch7_ff;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t cf_gintrusion_sensor_type7_ff;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t cf_gspoiler_type7_ff;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t cf_grear_glass_type7_ff;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t cf_grear_fog_lamps7_ff;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t cf_groof_type7_ff;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t cf_gautopilot7_ff;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t cf_gsupercharging_access7_ff;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t cf_gwheel_type7_ff;

    /**
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t cf_gexterior_color7_ff;

    /**
     * Range: 0..7 (1..8 -)
     * Scale: 1
     * Offset: 1
     */
    uint8_t cf_gnumber_hvil_nodes7_ff;

    /**
     * Range: 0..31 (0..31 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t cf_grestraints_hardware_type7_ff;
};

/**
 * Signals in message ID332BattCellMinMax.
 *
 * All signal values are as on the CAN bus.
 */
struct model3_can_id332_batt_cell_min_max_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t batt_cell_multiplexer332;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t batt_cell_temp_max_num332;

    /**
     * Range: -
     * Scale: 0.002
     * Offset: 0
     */
    uint16_t batt_cell_brick_voltage_max332;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t batt_cell_temp_min_num332;

    /**
     * Range: -
     * Scale: 0.5
     * Offset: -40
     */
    uint8_t batt_cell_temp_max332;

    /**
     * Range: -
     * Scale: 0.002
     * Offset: 0
     */
    uint16_t batt_cell_brick_voltage_min332;

    /**
     * Range: -
     * Scale: 0.5
     * Offset: -40
     */
    uint8_t batt_cell_temp_min332;

    /**
     * Range: -
     * Scale: 0.5
     * Offset: -40
     */
    uint8_t batt_cell_model_t_max332;

    /**
     * Range: -
     * Scale: 1
     * Offset: 1
     */
    uint8_t batt_cell_brick_voltage_max_num332;

    /**
     * Range: -
     * Scale: 0.5
     * Offset: -40
     */
    uint8_t batt_cell_model_t_min332;

    /**
     * Range: -
     * Scale: 1
     * Offset: 1
     */
    uint8_t batt_cell_brick_voltage_min_num332;
};

/**
 * Signals in message ID401CellVoltages.
 *
 * All signal values are as on the CAN bus.
 */
struct model3_can_id401_cell_voltages_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t multiplex_selector;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t status_flags;

    /**
     * Range: -
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t cell0;

    /**
     * Range: -
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t cell3;

    /**
     * Range: -
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t cell6;

    /**
     * Range: -
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t cell9;

    /**
     * Range: -
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t cell12;

    /**
     * Range: -
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t cell15;

    /**
     * Range: -
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t cell18;

    /**
     * Range: -
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t cell21;

    /**
     * Range: -
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t cell24;

    /**
     * Range: -
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t cell27;

    /**
     * Range: -
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t cell30;

    /**
     * Range: -
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t cell34;

    /**
     * Range: -
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t cell36;

    /**
     * Range: -
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t cell39;

    /**
     * Range: -
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t cell42;

    /**
     * Range: -
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t cell45;

    /**
     * Range: -
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t cell48;

    /**
     * Range: -
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t cell51;

    /**
     * Range: -
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t cell54;

    /**
     * Range: -
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t cell57;

    /**
     * Range: -
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t cell60;

    /**
     * Range: -
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t cell63;

    /**
     * Range: -
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t cell66;

    /**
     * Range: -
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t cell69;

    /**
     * Range: -
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t cell72;

    /**
     * Range: -
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t cell75;

    /**
     * Range: -
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t cell78;

    /**
     * Range: -
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t cell81;

    /**
     * Range: -
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t cell84;

    /**
     * Range: -
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t cell87;

    /**
     * Range: -
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t cell90;

    /**
     * Range: -
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t cell93;

    /**
     * Range: -
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t cell96;

    /**
     * Range: -
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t cell99;

    /**
     * Range: -
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t cell102;

    /**
     * Range: -
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t cell105;

    /**
     * Range: -
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t cell1;

    /**
     * Range: -
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t cell4;

    /**
     * Range: -
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t cell7;

    /**
     * Range: -
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t cell10;

    /**
     * Range: -
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t cell13;

    /**
     * Range: -
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t cell16;

    /**
     * Range: -
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t cell19;

    /**
     * Range: -
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t cell22;

    /**
     * Range: -
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t cell25;

    /**
     * Range: -
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t cell28;

    /**
     * Range: -
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t cell31;

    /**
     * Range: -
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t cell33;

    /**
     * Range: -
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t cell37;

    /**
     * Range: -
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t cell40;

    /**
     * Range: -
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t cell43;

    /**
     * Range: -
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t cell46;

    /**
     * Range: -
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t cell49;

    /**
     * Range: -
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t cell52;

    /**
     * Range: -
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t cell55;

    /**
     * Range: -
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t cell58;

    /**
     * Range: -
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t cell61;

    /**
     * Range: -
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t cell64;

    /**
     * Range: -
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t cell67;

    /**
     * Range: -
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t cell70;

    /**
     * Range: -
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t cell73;

    /**
     * Range: -
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t cell76;

    /**
     * Range: -
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t cell79;

    /**
     * Range: -
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t cell82;

    /**
     * Range: -
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t cell85;

    /**
     * Range: -
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t cell88;

    /**
     * Range: -
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t cell91;

    /**
     * Range: -
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t cell94;

    /**
     * Range: -
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t cell97;

    /**
     * Range: -
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t cell100;

    /**
     * Range: -
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t cell103;

    /**
     * Range: -
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t cell106;

    /**
     * Range: -
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t cell2;

    /**
     * Range: -
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t cell5;

    /**
     * Range: -
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t cell8;

    /**
     * Range: -
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t cell11;

    /**
     * Range: -
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t cell14;

    /**
     * Range: -
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t cell17;

    /**
     * Range: -
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t cell20;

    /**
     * Range: -
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t cell23;

    /**
     * Range: -
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t cell26;

    /**
     * Range: -
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t cell29;

    /**
     * Range: -
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t cell32;

    /**
     * Range: -
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t cell35;

    /**
     * Range: -
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t cell38;

    /**
     * Range: -
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t cell41;

    /**
     * Range: -
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t cell44;

    /**
     * Range: -
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t cell47;

    /**
     * Range: -
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t cell50;

    /**
     * Range: -
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t cell53;

    /**
     * Range: -
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t cell56;

    /**
     * Range: -
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t cell59;

    /**
     * Range: -
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t cell62;

    /**
     * Range: -
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t cell65;

    /**
     * Range: -
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t cell68;

    /**
     * Range: -
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t cell71;

    /**
     * Range: -
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t cell74;

    /**
     * Range: -
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t cell77;

    /**
     * Range: -
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t cell80;

    /**
     * Range: -
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t cell83;

    /**
     * Range: -
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t cell86;

    /**
     * Range: -
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t cell89;

    /**
     * Range: -
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t cell92;

    /**
     * Range: -
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t cell95;

    /**
     * Range: -
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t cell98;

    /**
     * Range: -
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t cell101;

    /**
     * Range: -
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t cell104;

    /**
     * Range: -
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t cell107;
};

/**
 * Pack message ID243VCRIGHT_hvacFeedback.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int model3_can_id243_vcright_hvac_feedback_pack(
    uint8_t *dst_p,
    const struct model3_can_id243_vcright_hvac_feedback_t *src_p,
    size_t size);

/**
 * Unpack message ID243VCRIGHT_hvacFeedback.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int model3_can_id243_vcright_hvac_feedback_unpack(
    struct model3_can_id243_vcright_hvac_feedback_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id243_vcright_hvac_feedback_vcright_hvac_qdot_left_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id243_vcright_hvac_feedback_vcright_hvac_qdot_left_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id243_vcright_hvac_feedback_vcright_hvac_qdot_left_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id243_vcright_hvac_feedback_vcright_hvac_qdot_right_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id243_vcright_hvac_feedback_vcright_hvac_qdot_right_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id243_vcright_hvac_feedback_vcright_hvac_qdot_right_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id243_vcright_hvac_feedback_vcright_hvac_cabin_temp_est_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id243_vcright_hvac_feedback_vcright_hvac_cabin_temp_est_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id243_vcright_hvac_feedback_vcright_hvac_cabin_temp_est_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id243_vcright_hvac_feedback_vcright_hvac_air_distribution_mode_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id243_vcright_hvac_feedback_vcright_hvac_air_distribution_mode_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id243_vcright_hvac_feedback_vcright_hvac_air_distribution_mode_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id243_vcright_hvac_feedback_vcright_hvac_blower_segment_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id243_vcright_hvac_feedback_vcright_hvac_blower_segment_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id243_vcright_hvac_feedback_vcright_hvac_blower_segment_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id243_vcright_hvac_feedback_vcright_hvac_recirc_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id243_vcright_hvac_feedback_vcright_hvac_recirc_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id243_vcright_hvac_feedback_vcright_hvac_recirc_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id243_vcright_hvac_feedback_vcright_hvac_ac_running_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id243_vcright_hvac_feedback_vcright_hvac_ac_running_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id243_vcright_hvac_feedback_vcright_hvac_ac_running_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id243_vcright_hvac_feedback_vcright_hvac_power_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id243_vcright_hvac_feedback_vcright_hvac_power_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id243_vcright_hvac_feedback_vcright_hvac_power_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id243_vcright_hvac_feedback_vcright_hvac_second_row_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id243_vcright_hvac_feedback_vcright_hvac_second_row_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id243_vcright_hvac_feedback_vcright_hvac_second_row_state_is_in_range(uint8_t value);

/**
 * Pack message ID20CVCRIGHT_hvacRequest.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int model3_can_id20_cvcright_hvac_request_pack(
    uint8_t *dst_p,
    const struct model3_can_id20_cvcright_hvac_request_t *src_p,
    size_t size);

/**
 * Unpack message ID20CVCRIGHT_hvacRequest.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int model3_can_id20_cvcright_hvac_request_unpack(
    struct model3_can_id20_cvcright_hvac_request_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id20_cvcright_hvac_request_vcright_watts_demand_evap_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id20_cvcright_hvac_request_vcright_watts_demand_evap_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id20_cvcright_hvac_request_vcright_watts_demand_evap_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id20_cvcright_hvac_request_vcright_hvac_evap_enabled_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id20_cvcright_hvac_request_vcright_hvac_evap_enabled_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id20_cvcright_hvac_request_vcright_hvac_evap_enabled_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id20_cvcright_hvac_request_vcright_conditioning_request_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id20_cvcright_hvac_request_vcright_conditioning_request_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id20_cvcright_hvac_request_vcright_conditioning_request_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id20_cvcright_hvac_request_vcright_temp_evaporator_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id20_cvcright_hvac_request_vcright_temp_evaporator_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id20_cvcright_hvac_request_vcright_temp_evaporator_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id20_cvcright_hvac_request_vcright_temp_evaporator_target_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id20_cvcright_hvac_request_vcright_temp_evaporator_target_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id20_cvcright_hvac_request_vcright_temp_evaporator_target_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id20_cvcright_hvac_request_vcright_hvac_blower_speed_rpm_req_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id20_cvcright_hvac_request_vcright_hvac_blower_speed_rpm_req_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id20_cvcright_hvac_request_vcright_hvac_blower_speed_rpm_req_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id20_cvcright_hvac_request_vcright_demand_evap_skip_rate_limit_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id20_cvcright_hvac_request_vcright_demand_evap_skip_rate_limit_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id20_cvcright_hvac_request_vcright_demand_evap_skip_rate_limit_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id20_cvcright_hvac_request_vcright_evap_performance_low_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id20_cvcright_hvac_request_vcright_evap_performance_low_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id20_cvcright_hvac_request_vcright_evap_performance_low_is_in_range(uint8_t value);

/**
 * Pack message ID2B3VCRIGHT_logging1Hz.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int model3_can_id2_b3_vcright_logging1_hz_pack(
    uint8_t *dst_p,
    const struct model3_can_id2_b3_vcright_logging1_hz_t *src_p,
    size_t size);

/**
 * Unpack message ID2B3VCRIGHT_logging1Hz.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int model3_can_id2_b3_vcright_logging1_hz_unpack(
    struct model3_can_id2_b3_vcright_logging1_hz_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_b3_vcright_logging1_hz_vcright_logging1_hz_index_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_b3_vcright_logging1_hz_vcright_logging1_hz_index_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_b3_vcright_logging1_hz_vcright_logging1_hz_index_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id2_b3_vcright_logging1_hz_vcright_temp_duct_left_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_b3_vcright_logging1_hz_vcright_temp_duct_left_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_b3_vcright_logging1_hz_vcright_temp_duct_left_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_b3_vcright_logging1_hz_vcright_hvac_estimate_windshield_rh_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_b3_vcright_logging1_hz_vcright_hvac_estimate_windshield_rh_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_b3_vcright_logging1_hz_vcright_hvac_estimate_windshield_rh_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_b3_vcright_logging1_hz_vcright_ptc_heater_temp_duct_high_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_b3_vcright_logging1_hz_vcright_ptc_heater_temp_duct_high_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_b3_vcright_logging1_hz_vcright_ptc_heater_temp_duct_high_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id2_b3_vcright_logging1_hz_vcright_temp_duct_modeled_left_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_b3_vcright_logging1_hz_vcright_temp_duct_modeled_left_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_b3_vcright_logging1_hz_vcright_temp_duct_modeled_left_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_b3_vcright_logging1_hz_vcright_ptc_heater_temp_duct_fault_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_b3_vcright_logging1_hz_vcright_ptc_heater_temp_duct_fault_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_b3_vcright_logging1_hz_vcright_ptc_heater_temp_duct_fault_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_b3_vcright_logging1_hz_vcright_ptc_heater_no_airflow_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_b3_vcright_logging1_hz_vcright_ptc_heater_no_airflow_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_b3_vcright_logging1_hz_vcright_ptc_heater_no_airflow_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_b3_vcright_logging1_hz_vcright_ptc_heater_hvac_act_not_ready_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_b3_vcright_logging1_hz_vcright_ptc_heater_hvac_act_not_ready_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_b3_vcright_logging1_hz_vcright_ptc_heater_hvac_act_not_ready_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_b3_vcright_logging1_hz_vcright_cabin_temp_glass_roof_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_b3_vcright_logging1_hz_vcright_cabin_temp_glass_roof_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_b3_vcright_logging1_hz_vcright_cabin_temp_glass_roof_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_b3_vcright_logging1_hz_vcright_hvac_set_temp_actual_left_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_b3_vcright_logging1_hz_vcright_hvac_set_temp_actual_left_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_b3_vcright_logging1_hz_vcright_hvac_set_temp_actual_left_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_b3_vcright_logging1_hz_vcright_convection_target_left_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_b3_vcright_logging1_hz_vcright_convection_target_left_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_b3_vcright_logging1_hz_vcright_convection_target_left_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_b3_vcright_logging1_hz_vcright_ptc_heater_no_ui_request_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_b3_vcright_logging1_hz_vcright_ptc_heater_no_ui_request_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_b3_vcright_logging1_hz_vcright_ptc_heater_no_ui_request_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_b3_vcright_logging1_hz_vcright_hvac_lh_bleed_voltage_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_b3_vcright_logging1_hz_vcright_hvac_lh_bleed_voltage_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_b3_vcright_logging1_hz_vcright_hvac_lh_bleed_voltage_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_b3_vcright_logging1_hz_vcright_hvac_lh_bleed_end_stop_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_b3_vcright_logging1_hz_vcright_hvac_lh_bleed_end_stop_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_b3_vcright_logging1_hz_vcright_hvac_lh_bleed_end_stop_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_b3_vcright_logging1_hz_vcright_hvac_lh_bleed_zero_stop_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_b3_vcright_logging1_hz_vcright_hvac_lh_bleed_zero_stop_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_b3_vcright_logging1_hz_vcright_hvac_lh_bleed_zero_stop_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_b3_vcright_logging1_hz_vcright_time_left_to_cabin_model_init_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_b3_vcright_logging1_hz_vcright_time_left_to_cabin_model_init_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_b3_vcright_logging1_hz_vcright_time_left_to_cabin_model_init_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_b3_vcright_logging1_hz_vcright_ptc_heater_no_high_voltage_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_b3_vcright_logging1_hz_vcright_ptc_heater_no_high_voltage_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_b3_vcright_logging1_hz_vcright_ptc_heater_no_high_voltage_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_b3_vcright_logging1_hz_vcright_ptc_heater_l_air_path_blocked_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_b3_vcright_logging1_hz_vcright_ptc_heater_l_air_path_blocked_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_b3_vcright_logging1_hz_vcright_ptc_heater_l_air_path_blocked_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_b3_vcright_logging1_hz_vcright_ptc_heater_r_air_path_blocked_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_b3_vcright_logging1_hz_vcright_ptc_heater_r_air_path_blocked_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_b3_vcright_logging1_hz_vcright_ptc_heater_r_air_path_blocked_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_b3_vcright_logging1_hz_vcright_hvac_fogging_risk_level_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_b3_vcright_logging1_hz_vcright_hvac_fogging_risk_level_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_b3_vcright_logging1_hz_vcright_hvac_fogging_risk_level_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_b3_vcright_logging1_hz_vcright_ptc_heater_req_airpath_blocked_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_b3_vcright_logging1_hz_vcright_ptc_heater_req_airpath_blocked_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_b3_vcright_logging1_hz_vcright_ptc_heater_req_airpath_blocked_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id2_b3_vcright_logging1_hz_vcright_temp_duct_right_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_b3_vcright_logging1_hz_vcright_temp_duct_right_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_b3_vcright_logging1_hz_vcright_temp_duct_right_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_b3_vcright_logging1_hz_vcright_hvac_duct_target_left_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_b3_vcright_logging1_hz_vcright_hvac_duct_target_left_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_b3_vcright_logging1_hz_vcright_hvac_duct_target_left_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id2_b3_vcright_logging1_hz_vcright_temp_duct_modeled_right_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_b3_vcright_logging1_hz_vcright_temp_duct_modeled_right_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_b3_vcright_logging1_hz_vcright_temp_duct_modeled_right_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_b3_vcright_logging1_hz_vcright_cabin_temp_windshield_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_b3_vcright_logging1_hz_vcright_cabin_temp_windshield_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_b3_vcright_logging1_hz_vcright_cabin_temp_windshield_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_b3_vcright_logging1_hz_vcright_hvac_set_temp_actual_right_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_b3_vcright_logging1_hz_vcright_hvac_set_temp_actual_right_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_b3_vcright_logging1_hz_vcright_hvac_set_temp_actual_right_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_b3_vcright_logging1_hz_vcright_convection_target_right_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_b3_vcright_logging1_hz_vcright_convection_target_right_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_b3_vcright_logging1_hz_vcright_convection_target_right_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_b3_vcright_logging1_hz_vcright_hvac_rh_bleed_voltage_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_b3_vcright_logging1_hz_vcright_hvac_rh_bleed_voltage_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_b3_vcright_logging1_hz_vcright_hvac_rh_bleed_voltage_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_b3_vcright_logging1_hz_vcright_hvac_rh_bleed_end_stop_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_b3_vcright_logging1_hz_vcright_hvac_rh_bleed_end_stop_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_b3_vcright_logging1_hz_vcright_hvac_rh_bleed_end_stop_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_b3_vcright_logging1_hz_vcright_hvac_rh_bleed_zero_stop_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_b3_vcright_logging1_hz_vcright_hvac_rh_bleed_zero_stop_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_b3_vcright_logging1_hz_vcright_hvac_rh_bleed_zero_stop_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_b3_vcright_logging1_hz_vcright_hvac_flash_fogging_detected_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_b3_vcright_logging1_hz_vcright_hvac_flash_fogging_detected_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_b3_vcright_logging1_hz_vcright_hvac_flash_fogging_detected_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_b3_vcright_logging1_hz_vcright_solar_load_on_veh_filtered_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_b3_vcright_logging1_hz_vcright_solar_load_on_veh_filtered_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_b3_vcright_logging1_hz_vcright_solar_load_on_veh_filtered_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_b3_vcright_logging1_hz_vcright_hvac_cabin_humidity_level_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_b3_vcright_logging1_hz_vcright_hvac_cabin_humidity_level_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_b3_vcright_logging1_hz_vcright_hvac_cabin_humidity_level_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_b3_vcright_logging1_hz_vcright_hvac_duct_target_right_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_b3_vcright_logging1_hz_vcright_hvac_duct_target_right_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_b3_vcright_logging1_hz_vcright_hvac_duct_target_right_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id2_b3_vcright_logging1_hz_vcright_temp_htr_surface_modeled_l_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_b3_vcright_logging1_hz_vcright_temp_htr_surface_modeled_l_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_b3_vcright_logging1_hz_vcright_temp_htr_surface_modeled_l_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_b3_vcright_logging1_hz_vcright_temp_incar_cabin_probe_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_b3_vcright_logging1_hz_vcright_temp_incar_cabin_probe_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_b3_vcright_logging1_hz_vcright_temp_incar_cabin_probe_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_b3_vcright_logging1_hz_vcright_cabin_temp_interior_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_b3_vcright_logging1_hz_vcright_cabin_temp_interior_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_b3_vcright_logging1_hz_vcright_cabin_temp_interior_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_b3_vcright_logging1_hz_vcright_hvac_auto_transition_reason_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_b3_vcright_logging1_hz_vcright_hvac_auto_transition_reason_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_b3_vcright_logging1_hz_vcright_hvac_auto_transition_reason_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_b3_vcright_logging1_hz_vcright_convection_delivered_left_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_b3_vcright_logging1_hz_vcright_convection_delivered_left_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_b3_vcright_logging1_hz_vcright_convection_delivered_left_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_b3_vcright_logging1_hz_vcright_hvac_lh_vane_voltage_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_b3_vcright_logging1_hz_vcright_hvac_lh_vane_voltage_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_b3_vcright_logging1_hz_vcright_hvac_lh_vane_voltage_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_b3_vcright_logging1_hz_vcright_hvac_lh_vane_end_stop_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_b3_vcright_logging1_hz_vcright_hvac_lh_vane_end_stop_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_b3_vcright_logging1_hz_vcright_hvac_lh_vane_end_stop_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_b3_vcright_logging1_hz_vcright_hvac_lh_vane_zero_stop_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_b3_vcright_logging1_hz_vcright_hvac_lh_vane_zero_stop_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_b3_vcright_logging1_hz_vcright_hvac_lh_vane_zero_stop_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_b3_vcright_logging1_hz_vcright_hvac_cabin_purge_active_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_b3_vcright_logging1_hz_vcright_hvac_cabin_purge_active_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_b3_vcright_logging1_hz_vcright_hvac_cabin_purge_active_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_b3_vcright_logging1_hz_vcright_hvac_cab_ovrheat_prot_active_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_b3_vcright_logging1_hz_vcright_hvac_cab_ovrheat_prot_active_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_b3_vcright_logging1_hz_vcright_hvac_cab_ovrheat_prot_active_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_b3_vcright_logging1_hz_vcright_hvac_cabin_purge_allowed_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_b3_vcright_logging1_hz_vcright_hvac_cabin_purge_allowed_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_b3_vcright_logging1_hz_vcright_hvac_cabin_purge_allowed_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id2_b3_vcright_logging1_hz_vcright_watts_heater_left_total_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_b3_vcright_logging1_hz_vcright_watts_heater_left_total_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_b3_vcright_logging1_hz_vcright_watts_heater_left_total_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_b3_vcright_logging1_hz_vcright_hvac_cab_ovrheat_prot_allowed_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_b3_vcright_logging1_hz_vcright_hvac_cab_ovrheat_prot_allowed_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_b3_vcright_logging1_hz_vcright_hvac_cab_ovrheat_prot_allowed_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_b3_vcright_logging1_hz_vcright_hvac_air_flow_mode_row1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_b3_vcright_logging1_hz_vcright_hvac_air_flow_mode_row1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_b3_vcright_logging1_hz_vcright_hvac_air_flow_mode_row1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id2_b3_vcright_logging1_hz_vcright_hvac_qdot_feedforward_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_b3_vcright_logging1_hz_vcright_hvac_qdot_feedforward_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_b3_vcright_logging1_hz_vcright_hvac_qdot_feedforward_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_b3_vcright_logging1_hz_vcright_cloudiness_probability_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_b3_vcright_logging1_hz_vcright_cloudiness_probability_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_b3_vcright_logging1_hz_vcright_cloudiness_probability_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id2_b3_vcright_logging1_hz_vcright_temp_htr_surface_modeled_r_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_b3_vcright_logging1_hz_vcright_temp_htr_surface_modeled_r_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_b3_vcright_logging1_hz_vcright_temp_htr_surface_modeled_r_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_b3_vcright_logging1_hz_vcright_temp_incar_cabin_mid_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_b3_vcright_logging1_hz_vcright_temp_incar_cabin_mid_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_b3_vcright_logging1_hz_vcright_temp_incar_cabin_mid_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_b3_vcright_logging1_hz_vcright_cabin_temp_interior_sunny_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_b3_vcright_logging1_hz_vcright_cabin_temp_interior_sunny_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_b3_vcright_logging1_hz_vcright_cabin_temp_interior_sunny_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_b3_vcright_logging1_hz_vcright_hvac_air_flow_mode_row2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_b3_vcright_logging1_hz_vcright_hvac_air_flow_mode_row2_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_b3_vcright_logging1_hz_vcright_hvac_air_flow_mode_row2_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_b3_vcright_logging1_hz_vcright_convection_delivered_right_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_b3_vcright_logging1_hz_vcright_convection_delivered_right_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_b3_vcright_logging1_hz_vcright_convection_delivered_right_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_b3_vcright_logging1_hz_vcright_hvac_rh_vane_voltage_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_b3_vcright_logging1_hz_vcright_hvac_rh_vane_voltage_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_b3_vcright_logging1_hz_vcright_hvac_rh_vane_voltage_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_b3_vcright_logging1_hz_vcright_hvac_rh_vane_end_stop_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_b3_vcright_logging1_hz_vcright_hvac_rh_vane_end_stop_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_b3_vcright_logging1_hz_vcright_hvac_rh_vane_end_stop_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_b3_vcright_logging1_hz_vcright_hvac_rh_vane_zero_stop_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_b3_vcright_logging1_hz_vcright_hvac_rh_vane_zero_stop_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_b3_vcright_logging1_hz_vcright_hvac_rh_vane_zero_stop_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_b3_vcright_logging1_hz_vcright_cabin_temp_interior_l3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_b3_vcright_logging1_hz_vcright_cabin_temp_interior_l3_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_b3_vcright_logging1_hz_vcright_cabin_temp_interior_l3_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id2_b3_vcright_logging1_hz_vcright_watts_heater_right_total_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_b3_vcright_logging1_hz_vcright_watts_heater_right_total_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_b3_vcright_logging1_hz_vcright_watts_heater_right_total_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_b3_vcright_logging1_hz_vcright_temp_incar_cabin_deep_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_b3_vcright_logging1_hz_vcright_temp_incar_cabin_deep_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_b3_vcright_logging1_hz_vcright_temp_incar_cabin_deep_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_b3_vcright_logging1_hz_vcright_cabin_temp_side_glass_left_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_b3_vcright_logging1_hz_vcright_cabin_temp_side_glass_left_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_b3_vcright_logging1_hz_vcright_cabin_temp_side_glass_left_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_b3_vcright_logging1_hz_vcright_hvac_massflow_target_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_b3_vcright_logging1_hz_vcright_hvac_massflow_target_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_b3_vcright_logging1_hz_vcright_hvac_massflow_target_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_b3_vcright_logging1_hz_vcright_solar_load_right_occupant_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_b3_vcright_logging1_hz_vcright_solar_load_right_occupant_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_b3_vcright_logging1_hz_vcright_solar_load_right_occupant_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_b3_vcright_logging1_hz_vcright_hvac_upper_mode_voltage_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_b3_vcright_logging1_hz_vcright_hvac_upper_mode_voltage_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_b3_vcright_logging1_hz_vcright_hvac_upper_mode_voltage_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_b3_vcright_logging1_hz_vcright_hvac_upper_mode_end_stop_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_b3_vcright_logging1_hz_vcright_hvac_upper_mode_end_stop_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_b3_vcright_logging1_hz_vcright_hvac_upper_mode_end_stop_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_b3_vcright_logging1_hz_vcright_hvac_upper_mode_zero_stop_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_b3_vcright_logging1_hz_vcright_hvac_upper_mode_zero_stop_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_b3_vcright_logging1_hz_vcright_hvac_upper_mode_zero_stop_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_b3_vcright_logging1_hz_vcright_cabin_temp_interior_sunny_l3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_b3_vcright_logging1_hz_vcright_cabin_temp_interior_sunny_l3_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_b3_vcright_logging1_hz_vcright_cabin_temp_interior_sunny_l3_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_b3_vcright_logging1_hz_vcright_evap_load_in_fresh_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_b3_vcright_logging1_hz_vcright_evap_load_in_fresh_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_b3_vcright_logging1_hz_vcright_evap_load_in_fresh_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_b3_vcright_logging1_hz_vcright_cabin_temp_interior_l2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_b3_vcright_logging1_hz_vcright_cabin_temp_interior_l2_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_b3_vcright_logging1_hz_vcright_cabin_temp_interior_l2_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_b3_vcright_logging1_hz_vcright_cabin_temp_side_glass_right_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_b3_vcright_logging1_hz_vcright_cabin_temp_side_glass_right_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_b3_vcright_logging1_hz_vcright_cabin_temp_side_glass_right_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_b3_vcright_logging1_hz_vcright_ptc_heater_pwr_demand_left_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_b3_vcright_logging1_hz_vcright_ptc_heater_pwr_demand_left_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_b3_vcright_logging1_hz_vcright_ptc_heater_pwr_demand_left_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_b3_vcright_logging1_hz_vcright_hvac_airflow_reason_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_b3_vcright_logging1_hz_vcright_hvac_airflow_reason_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_b3_vcright_logging1_hz_vcright_hvac_airflow_reason_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_b3_vcright_logging1_hz_vcright_solar_load_left_occupant_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_b3_vcright_logging1_hz_vcright_solar_load_left_occupant_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_b3_vcright_logging1_hz_vcright_solar_load_left_occupant_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_b3_vcright_logging1_hz_vcright_hvac_lower_mode_voltage_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_b3_vcright_logging1_hz_vcright_hvac_lower_mode_voltage_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_b3_vcright_logging1_hz_vcright_hvac_lower_mode_voltage_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_b3_vcright_logging1_hz_vcright_hvac_lower_mode_end_stop_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_b3_vcright_logging1_hz_vcright_hvac_lower_mode_end_stop_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_b3_vcright_logging1_hz_vcright_hvac_lower_mode_end_stop_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_b3_vcright_logging1_hz_vcright_hvac_lower_mode_zero_stop_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_b3_vcright_logging1_hz_vcright_hvac_lower_mode_zero_stop_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_b3_vcright_logging1_hz_vcright_hvac_lower_mode_zero_stop_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_b3_vcright_logging1_hz_vcright_hvac_qdot_limited_left_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_b3_vcright_logging1_hz_vcright_hvac_qdot_limited_left_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_b3_vcright_logging1_hz_vcright_hvac_qdot_limited_left_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_b3_vcright_logging1_hz_vcright_cabin_temp_top_pad_air_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_b3_vcright_logging1_hz_vcright_cabin_temp_top_pad_air_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_b3_vcright_logging1_hz_vcright_cabin_temp_top_pad_air_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_b3_vcright_logging1_hz_vcright_hvac_qdot_limited_right_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_b3_vcright_logging1_hz_vcright_hvac_qdot_limited_right_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_b3_vcright_logging1_hz_vcright_hvac_qdot_limited_right_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_b3_vcright_logging1_hz_vcright_evap_load_in_recirc_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_b3_vcright_logging1_hz_vcright_evap_load_in_recirc_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_b3_vcright_logging1_hz_vcright_evap_load_in_recirc_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_b3_vcright_logging1_hz_vcright_lh_panel_airflow_blocked_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_b3_vcright_logging1_hz_vcright_lh_panel_airflow_blocked_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_b3_vcright_logging1_hz_vcright_lh_panel_airflow_blocked_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_b3_vcright_logging1_hz_vcright_rh_panel_airflow_blocked_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_b3_vcright_logging1_hz_vcright_rh_panel_airflow_blocked_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_b3_vcright_logging1_hz_vcright_rh_panel_airflow_blocked_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_b3_vcright_logging1_hz_vcright_cabin_temp_interior_sunny_l2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_b3_vcright_logging1_hz_vcright_cabin_temp_interior_sunny_l2_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_b3_vcright_logging1_hz_vcright_cabin_temp_interior_sunny_l2_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_b3_vcright_logging1_hz_vcright_cabin_temp_breath_level_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_b3_vcright_logging1_hz_vcright_cabin_temp_breath_level_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_b3_vcright_logging1_hz_vcright_cabin_temp_breath_level_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_b3_vcright_logging1_hz_vcright_ptc_heater_pwr_demand_right_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_b3_vcright_logging1_hz_vcright_ptc_heater_pwr_demand_right_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_b3_vcright_logging1_hz_vcright_ptc_heater_pwr_demand_right_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_b3_vcright_logging1_hz_vcright_floor_airflow_blocked_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_b3_vcright_logging1_hz_vcright_floor_airflow_blocked_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_b3_vcright_logging1_hz_vcright_floor_airflow_blocked_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_b3_vcright_logging1_hz_vcright_solar_load_on_vehicle_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_b3_vcright_logging1_hz_vcright_solar_load_on_vehicle_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_b3_vcright_logging1_hz_vcright_solar_load_on_vehicle_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_b3_vcright_logging1_hz_vcright_hvac_intake_voltage_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_b3_vcright_logging1_hz_vcright_hvac_intake_voltage_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_b3_vcright_logging1_hz_vcright_hvac_intake_voltage_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_b3_vcright_logging1_hz_vcright_hvac_intake_end_stop_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_b3_vcright_logging1_hz_vcright_hvac_intake_end_stop_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_b3_vcright_logging1_hz_vcright_hvac_intake_end_stop_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_b3_vcright_logging1_hz_vcright_hvac_intake_zero_stop_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_b3_vcright_logging1_hz_vcright_hvac_intake_zero_stop_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_b3_vcright_logging1_hz_vcright_hvac_intake_zero_stop_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_b3_vcright_logging1_hz_vcright_defrost_airflow_blocked_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_b3_vcright_logging1_hz_vcright_defrost_airflow_blocked_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_b3_vcright_logging1_hz_vcright_defrost_airflow_blocked_is_in_range(uint8_t value);

/**
 * Pack message ID2C1VCFront10hz.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int model3_can_id2_c1_vc_front10hz_pack(
    uint8_t *dst_p,
    const struct model3_can_id2_c1_vc_front10hz_t *src_p,
    size_t size);

/**
 * Unpack message ID2C1VCFront10hz.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int model3_can_id2_c1_vc_front10hz_unpack(
    struct model3_can_id2_c1_vc_front10hz_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_c1_vc_front10hz_vc_front10_hz_index_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_c1_vc_front10hz_vc_front10_hz_index_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_c1_vc_front10hz_vc_front10_hz_index_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id2_c1_vc_front10hz_v_cfrontpump_battery_rpm_actual_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_c1_vc_front10hz_v_cfrontpump_battery_rpm_actual_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_c1_vc_front10hz_v_cfrontpump_battery_rpm_actual_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_c1_vc_front10hz_v_cfrontfive_way_valve_mode_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_c1_vc_front10hz_v_cfrontfive_way_valve_mode_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_c1_vc_front10hz_v_cfrontfive_way_valve_mode_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_c1_vc_front10hz_v_cfrontrefrigerant_has_been_filled_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_c1_vc_front10hz_v_cfrontrefrigerant_has_been_filled_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_c1_vc_front10hz_v_cfrontrefrigerant_has_been_filled_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_c1_vc_front10hz_v_cfrontcoolant_temp_based_mode_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_c1_vc_front10hz_v_cfrontcoolant_temp_based_mode_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_c1_vc_front10hz_v_cfrontcoolant_temp_based_mode_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_c1_vc_front10hz_v_cfrontfive_way_valve_mode_wrong_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_c1_vc_front10hz_v_cfrontfive_way_valve_mode_wrong_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_c1_vc_front10hz_v_cfrontfive_way_valve_mode_wrong_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id2_c1_vc_front10hz_v_cfrontfive_way_valve_angle_actual_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_c1_vc_front10hz_v_cfrontfive_way_valve_angle_actual_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_c1_vc_front10hz_v_cfrontfive_way_valve_angle_actual_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_c1_vc_front10hz_v_cfrontradiator_fan_out_voltage_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_c1_vc_front10hz_v_cfrontradiator_fan_out_voltage_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_c1_vc_front10hz_v_cfrontradiator_fan_out_voltage_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_c1_vc_front10hz_v_cfronttemp_refrig_suction_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_c1_vc_front10hz_v_cfronttemp_refrig_suction_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_c1_vc_front10hz_v_cfronttemp_refrig_suction_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_c1_vc_front10hz_v_cfrontcomp_demand_chiller_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_c1_vc_front10hz_v_cfrontcomp_demand_chiller_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_c1_vc_front10hz_v_cfrontcomp_demand_chiller_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id2_c1_vc_front10hz_v_cfrontpump_battery_rpm_target_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_c1_vc_front10hz_v_cfrontpump_battery_rpm_target_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_c1_vc_front10hz_v_cfrontpump_battery_rpm_target_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id2_c1_vc_front10hz_v_cfrontradiator_fan_rpm_target_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_c1_vc_front10hz_v_cfrontradiator_fan_rpm_target_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_c1_vc_front10hz_v_cfrontradiator_fan_rpm_target_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id2_c1_vc_front10hz_v_cfrontfive_way_valve_angle_target_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_c1_vc_front10hz_v_cfrontfive_way_valve_angle_target_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_c1_vc_front10hz_v_cfrontfive_way_valve_angle_target_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id2_c1_vc_front10hz_v_cfronttemp_refrig_discharge_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_c1_vc_front10hz_v_cfronttemp_refrig_discharge_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_c1_vc_front10hz_v_cfronttemp_refrig_discharge_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_c1_vc_front10hz_v_cfrontcomp_demand_evap_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_c1_vc_front10hz_v_cfrontcomp_demand_evap_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_c1_vc_front10hz_v_cfrontcomp_demand_evap_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id2_c1_vc_front10hz_v_cfrontpump_powertrain_rpm_actual_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_c1_vc_front10hz_v_cfrontpump_powertrain_rpm_actual_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_c1_vc_front10hz_v_cfrontpump_powertrain_rpm_actual_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_c1_vc_front10hz_v_cfrontcompressor_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_c1_vc_front10hz_v_cfrontcompressor_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_c1_vc_front10hz_v_cfrontcompressor_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id2_c1_vc_front10hz_v_cfrontradiator_fan_rpm_actual_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_c1_vc_front10hz_v_cfrontradiator_fan_rpm_actual_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_c1_vc_front10hz_v_cfrontradiator_fan_rpm_actual_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_c1_vc_front10hz_v_cfrontfive_way_valve_rad_bypass_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_c1_vc_front10hz_v_cfrontfive_way_valve_rad_bypass_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_c1_vc_front10hz_v_cfrontfive_way_valve_rad_bypass_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_c1_vc_front10hz_v_cfrontcomp_limit_pres_discharge_hi_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_c1_vc_front10hz_v_cfrontcomp_limit_pres_discharge_hi_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_c1_vc_front10hz_v_cfrontcomp_limit_pres_discharge_hi_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id2_c1_vc_front10hz_v_cfronttemp_superheat_actual_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_c1_vc_front10hz_v_cfronttemp_superheat_actual_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_c1_vc_front10hz_v_cfronttemp_superheat_actual_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_c1_vc_front10hz_v_cfrontcomp_limit_temp_discharge_hi_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_c1_vc_front10hz_v_cfrontcomp_limit_temp_discharge_hi_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_c1_vc_front10hz_v_cfrontcomp_limit_temp_discharge_hi_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_c1_vc_front10hz_v_cfrontcomp_limit_scroll_sep_region_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_c1_vc_front10hz_v_cfrontcomp_limit_scroll_sep_region_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_c1_vc_front10hz_v_cfrontcomp_limit_scroll_sep_region_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_c1_vc_front10hz_v_cfrontcomp_limit_nvh_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_c1_vc_front10hz_v_cfrontcomp_limit_nvh_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_c1_vc_front10hz_v_cfrontcomp_limit_nvh_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_c1_vc_front10hz_v_cfrontcomp_limit_scroll_sep_ramp_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_c1_vc_front10hz_v_cfrontcomp_limit_scroll_sep_ramp_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_c1_vc_front10hz_v_cfrontcomp_limit_scroll_sep_ramp_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_c1_vc_front10hz_v_cfrontcomp_limit_deadband_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_c1_vc_front10hz_v_cfrontcomp_limit_deadband_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_c1_vc_front10hz_v_cfrontcomp_limit_deadband_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_c1_vc_front10hz_v_cfrontcomp_standby_self_not_ready_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_c1_vc_front10hz_v_cfrontcomp_standby_self_not_ready_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_c1_vc_front10hz_v_cfrontcomp_standby_self_not_ready_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id2_c1_vc_front10hz_v_cfrontpump_powertrain_rpm_target_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_c1_vc_front10hz_v_cfrontpump_powertrain_rpm_target_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_c1_vc_front10hz_v_cfrontpump_powertrain_rpm_target_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_c1_vc_front10hz_v_cfrontfive_way_valve_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_c1_vc_front10hz_v_cfrontfive_way_valve_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_c1_vc_front10hz_v_cfrontfive_way_valve_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_c1_vc_front10hz_v_cfrontcomp_standby_communication_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_c1_vc_front10hz_v_cfrontcomp_standby_communication_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_c1_vc_front10hz_v_cfrontcomp_standby_communication_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_c1_vc_front10hz_v_cfrontcomp_standby_hv_not_ready_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_c1_vc_front10hz_v_cfrontcomp_standby_hv_not_ready_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_c1_vc_front10hz_v_cfrontcomp_standby_hv_not_ready_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t model3_can_id2_c1_vc_front10hz_v_cfrontfive_way_valve_duty_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_c1_vc_front10hz_v_cfrontfive_way_valve_duty_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_c1_vc_front10hz_v_cfrontfive_way_valve_duty_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_c1_vc_front10hz_v_cfrontcomp_standby_low_ambient_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_c1_vc_front10hz_v_cfrontcomp_standby_low_ambient_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_c1_vc_front10hz_v_cfrontcomp_standby_low_ambient_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_c1_vc_front10hz_v_cfrontradiator_fan_initd_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_c1_vc_front10hz_v_cfrontradiator_fan_initd_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_c1_vc_front10hz_v_cfrontradiator_fan_initd_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_c1_vc_front10hz_v_cfrontcomp_standby_low_disch_press_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_c1_vc_front10hz_v_cfrontcomp_standby_low_disch_press_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_c1_vc_front10hz_v_cfrontcomp_standby_low_disch_press_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_c1_vc_front10hz_v_cfrontradiator_fan_enabled_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_c1_vc_front10hz_v_cfrontradiator_fan_enabled_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_c1_vc_front10hz_v_cfrontradiator_fan_enabled_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id2_c1_vc_front10hz_v_cfronttemp_superheat_target_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_c1_vc_front10hz_v_cfronttemp_superheat_target_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_c1_vc_front10hz_v_cfronttemp_superheat_target_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_c1_vc_front10hz_v_cfrontcomp_standby_refrig_not_ok_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_c1_vc_front10hz_v_cfrontcomp_standby_refrig_not_ok_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_c1_vc_front10hz_v_cfrontcomp_standby_refrig_not_ok_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_c1_vc_front10hz_v_cfrontradiator_fan_power_on_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_c1_vc_front10hz_v_cfrontradiator_fan_power_on_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_c1_vc_front10hz_v_cfrontradiator_fan_power_on_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_c1_vc_front10hz_v_cfrontcomp_limit_temp_discharge_sim_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_c1_vc_front10hz_v_cfrontcomp_limit_temp_discharge_sim_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_c1_vc_front10hz_v_cfrontcomp_limit_temp_discharge_sim_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_c1_vc_front10hz_v_cfrontradiator_fan_phase_current_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_c1_vc_front10hz_v_cfrontradiator_fan_phase_current_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_c1_vc_front10hz_v_cfrontradiator_fan_phase_current_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_c1_vc_front10hz_v_cfrontcomp_ramp_rate_up_max_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_c1_vc_front10hz_v_cfrontcomp_ramp_rate_up_max_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_c1_vc_front10hz_v_cfrontcomp_ramp_rate_up_max_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_c1_vc_front10hz_v_cfrontpump_battery_out_voltage_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_c1_vc_front10hz_v_cfrontpump_battery_out_voltage_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_c1_vc_front10hz_v_cfrontpump_battery_out_voltage_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id2_c1_vc_front10hz_v_cfrontfive_way_valve_angle_travel_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_c1_vc_front10hz_v_cfrontfive_way_valve_angle_travel_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_c1_vc_front10hz_v_cfrontfive_way_valve_angle_travel_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_c1_vc_front10hz_v_cfrontrefrigerant_valves_closed_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_c1_vc_front10hz_v_cfrontrefrigerant_valves_closed_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_c1_vc_front10hz_v_cfrontrefrigerant_valves_closed_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_c1_vc_front10hz_v_cfrontpump_bat_spi_error_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_c1_vc_front10hz_v_cfrontpump_bat_spi_error_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_c1_vc_front10hz_v_cfrontpump_bat_spi_error_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_c1_vc_front10hz_v_cfrontpump_pt_spi_error_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_c1_vc_front10hz_v_cfrontpump_pt_spi_error_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_c1_vc_front10hz_v_cfrontpump_pt_spi_error_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_c1_vc_front10hz_v_cfrontthml_fan_spi_error_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_c1_vc_front10hz_v_cfrontthml_fan_spi_error_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_c1_vc_front10hz_v_cfrontthml_fan_spi_error_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_c1_vc_front10hz_v_cfrontpump_powertrain_out_voltage_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_c1_vc_front10hz_v_cfrontpump_powertrain_out_voltage_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_c1_vc_front10hz_v_cfrontpump_powertrain_out_voltage_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id2_c1_vc_front10hz_v_cfronttemp_discharge_simulated_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_c1_vc_front10hz_v_cfronttemp_discharge_simulated_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_c1_vc_front10hz_v_cfronttemp_discharge_simulated_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_c1_vc_front10hz_v_cfrontfive_way_valve_i_sense_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_c1_vc_front10hz_v_cfrontfive_way_valve_i_sense_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_c1_vc_front10hz_v_cfrontfive_way_valve_i_sense_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_c1_vc_front10hz_v_cfrontpump_battery_initd_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_c1_vc_front10hz_v_cfrontpump_battery_initd_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_c1_vc_front10hz_v_cfrontpump_battery_initd_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_c1_vc_front10hz_v_cfrontpump_powertrain_initd_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_c1_vc_front10hz_v_cfrontpump_powertrain_initd_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_c1_vc_front10hz_v_cfrontpump_powertrain_initd_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_c1_vc_front10hz_v_cfrontpump_battery_enabled_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_c1_vc_front10hz_v_cfrontpump_battery_enabled_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_c1_vc_front10hz_v_cfrontpump_battery_enabled_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_c1_vc_front10hz_v_cfrontpump_powertrain_enabled_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_c1_vc_front10hz_v_cfrontpump_powertrain_enabled_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_c1_vc_front10hz_v_cfrontpump_powertrain_enabled_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_c1_vc_front10hz_v_cfrontpump_battery_power_on_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_c1_vc_front10hz_v_cfrontpump_battery_power_on_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_c1_vc_front10hz_v_cfrontpump_battery_power_on_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_c1_vc_front10hz_v_cfrontis_only_suct_temp_not_ready_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_c1_vc_front10hz_v_cfrontis_only_suct_temp_not_ready_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_c1_vc_front10hz_v_cfrontis_only_suct_temp_not_ready_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_c1_vc_front10hz_v_cfrontpump_powertrain_power_on_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_c1_vc_front10hz_v_cfrontpump_powertrain_power_on_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_c1_vc_front10hz_v_cfrontpump_powertrain_power_on_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_c1_vc_front10hz_v_cfrontusing_simulated_disch_temp_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_c1_vc_front10hz_v_cfrontusing_simulated_disch_temp_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_c1_vc_front10hz_v_cfrontusing_simulated_disch_temp_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_c1_vc_front10hz_v_cfrontpumps_wake_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_c1_vc_front10hz_v_cfrontpumps_wake_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_c1_vc_front10hz_v_cfrontpumps_wake_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_c1_vc_front10hz_v_cfrontusing_simulated_amb_temp_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_c1_vc_front10hz_v_cfrontusing_simulated_amb_temp_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_c1_vc_front10hz_v_cfrontusing_simulated_amb_temp_is_in_range(uint8_t value);

/**
 * Pack message ID2E1VCFrontStatus.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int model3_can_id2_e1_vc_front_status_pack(
    uint8_t *dst_p,
    const struct model3_can_id2_e1_vc_front_status_t *src_p,
    size_t size);

/**
 * Unpack message ID2E1VCFrontStatus.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int model3_can_id2_e1_vc_front_status_unpack(
    struct model3_can_id2_e1_vc_front_status_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_e1_vc_front_status_vc_front_status_index_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_e1_vc_front_status_vc_front_status_index_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_e1_vc_front_status_vc_front_status_index_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_e1_vc_front_status_v_cfrontfrunk_latch_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_e1_vc_front_status_v_cfrontfrunk_latch_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_e1_vc_front_status_v_cfrontfrunk_latch_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_e1_vc_front_status_v_cfront5_va_rail_stable_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_e1_vc_front_status_v_cfront5_va_rail_stable_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_e1_vc_front_status_v_cfront5_va_rail_stable_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id2_e1_vc_front_status_v_cfronttemp_comp_target_voltage_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_e1_vc_front_status_v_cfronttemp_comp_target_voltage_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_e1_vc_front_status_v_cfronttemp_comp_target_voltage_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_e1_vc_front_status_v_cfront5_vb_rail_stable_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_e1_vc_front_status_v_cfront5_vb_rail_stable_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_e1_vc_front_status_v_cfront5_vb_rail_stable_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_e1_vc_front_status_v_cfront12_va_rail_stable_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_e1_vc_front_status_v_cfront12_va_rail_stable_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_e1_vc_front_status_v_cfront12_va_rail_stable_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_e1_vc_front_status_v_cfront12_vb_rail_stable_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_e1_vc_front_status_v_cfront12_vb_rail_stable_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_e1_vc_front_status_v_cfront12_vb_rail_stable_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_e1_vc_front_status_v_cfrontrail_a_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_e1_vc_front_status_v_cfrontrail_a_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_e1_vc_front_status_v_cfrontrail_a_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_e1_vc_front_status_v_cfrontwiper_speed_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_e1_vc_front_status_v_cfrontwiper_speed_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_e1_vc_front_status_v_cfrontwiper_speed_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_e1_vc_front_status_v_cfrontrail_b_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_e1_vc_front_status_v_cfrontrail_b_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_e1_vc_front_status_v_cfrontrail_b_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_e1_vc_front_status_v_cfronthomelink_v2_response0_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_e1_vc_front_status_v_cfronthomelink_v2_response0_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_e1_vc_front_status_v_cfronthomelink_v2_response0_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_e1_vc_front_status_v_cfrontmax_evap_heat_rejection_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_e1_vc_front_status_v_cfrontmax_evap_heat_rejection_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_e1_vc_front_status_v_cfrontmax_evap_heat_rejection_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_e1_vc_front_status_v_cfront_charge_pump_voltage_stable_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_e1_vc_front_status_v_cfront_charge_pump_voltage_stable_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_e1_vc_front_status_v_cfront_charge_pump_voltage_stable_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_e1_vc_front_status_v_cfronti_booster_wake_line_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_e1_vc_front_status_v_cfronti_booster_wake_line_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_e1_vc_front_status_v_cfronti_booster_wake_line_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_e1_vc_front_status_v_cfrontepas_wake_line_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_e1_vc_front_status_v_cfrontepas_wake_line_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_e1_vc_front_status_v_cfrontepas_wake_line_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_e1_vc_front_status_v_cfrontwiper_position_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_e1_vc_front_status_v_cfrontwiper_position_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_e1_vc_front_status_v_cfrontwiper_position_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_e1_vc_front_status_v_cfronti_booster_state_dbg_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_e1_vc_front_status_v_cfronti_booster_state_dbg_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_e1_vc_front_status_v_cfronti_booster_state_dbg_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id2_e1_vc_front_status_v_cfront_as8510_voltage_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_e1_vc_front_status_v_cfront_as8510_voltage_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_e1_vc_front_status_v_cfront_as8510_voltage_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_e1_vc_front_status_v_cfrontwiper_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_e1_vc_front_status_v_cfrontwiper_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_e1_vc_front_status_v_cfrontwiper_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_e1_vc_front_status_v_cfrontvehicle_status_dbg_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_e1_vc_front_status_v_cfrontvehicle_status_dbg_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_e1_vc_front_status_v_cfrontvehicle_status_dbg_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_e1_vc_front_status_v_cfronthomelink_v2_response1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_e1_vc_front_status_v_cfronthomelink_v2_response1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_e1_vc_front_status_v_cfronthomelink_v2_response1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_e1_vc_front_status_v_cfrontmin_evap_heat_rejection_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_e1_vc_front_status_v_cfrontmin_evap_heat_rejection_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_e1_vc_front_status_v_cfrontmin_evap_heat_rejection_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_e1_vc_front_status_v_cfrontcrash_detected_type_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_e1_vc_front_status_v_cfrontcrash_detected_type_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_e1_vc_front_status_v_cfrontcrash_detected_type_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_e1_vc_front_status_v_cfrontreverse_battery_fault_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_e1_vc_front_status_v_cfrontreverse_battery_fault_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_e1_vc_front_status_v_cfrontreverse_battery_fault_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_e1_vc_front_status_v_cfrontcrash_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_e1_vc_front_status_v_cfrontcrash_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_e1_vc_front_status_v_cfrontcrash_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_e1_vc_front_status_v_cfrontbattery_sm_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_e1_vc_front_status_v_cfrontbattery_sm_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_e1_vc_front_status_v_cfrontbattery_sm_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_e1_vc_front_status_v_cfrontcrash_unlock_override_set_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_e1_vc_front_status_v_cfrontcrash_unlock_override_set_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_e1_vc_front_status_v_cfrontcrash_unlock_override_set_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_e1_vc_front_status_v_cfronthomelink_v2_response2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_e1_vc_front_status_v_cfronthomelink_v2_response2_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_e1_vc_front_status_v_cfronthomelink_v2_response2_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_e1_vc_front_status_v_cfrontfreeze_evap_i_term_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_e1_vc_front_status_v_cfrontfreeze_evap_i_term_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_e1_vc_front_status_v_cfrontfreeze_evap_i_term_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_e1_vc_front_status_v_cfrontair_compressor_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_e1_vc_front_status_v_cfrontair_compressor_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_e1_vc_front_status_v_cfrontair_compressor_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id2_e1_vc_front_status_v_cfronttime_spent_charging_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_e1_vc_front_status_v_cfronttime_spent_charging_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_e1_vc_front_status_v_cfronttime_spent_charging_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_e1_vc_front_status_v_cfrontis_evap_operation_allowed_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_e1_vc_front_status_v_cfrontis_evap_operation_allowed_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_e1_vc_front_status_v_cfrontis_evap_operation_allowed_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id2_e1_vc_front_status_v_cfrontcalibrated_as8510_volts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_e1_vc_front_status_v_cfrontcalibrated_as8510_volts_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_e1_vc_front_status_v_cfrontcalibrated_as8510_volts_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_e1_vc_front_status_v_cfrontchiller_demand_active_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_e1_vc_front_status_v_cfrontchiller_demand_active_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_e1_vc_front_status_v_cfrontchiller_demand_active_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_e1_vc_front_status_v_cfrontcomp_perf_recovery_limited_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_e1_vc_front_status_v_cfrontcomp_perf_recovery_limited_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_e1_vc_front_status_v_cfrontcomp_perf_recovery_limited_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id2_e1_vc_front_status_v_cfrontheadlight_left_v_position_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_e1_vc_front_status_v_cfrontheadlight_left_v_position_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_e1_vc_front_status_v_cfrontheadlight_left_v_position_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_e1_vc_front_status_v_cfronthas_low_refrigerant_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_e1_vc_front_status_v_cfronthas_low_refrigerant_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_e1_vc_front_status_v_cfronthas_low_refrigerant_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_e1_vc_front_status_v_cfronthomelink_v2_response3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_e1_vc_front_status_v_cfronthomelink_v2_response3_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_e1_vc_front_status_v_cfronthomelink_v2_response3_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_e1_vc_front_status_v_cfrontpressure_refrig_suction_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_e1_vc_front_status_v_cfrontpressure_refrig_suction_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_e1_vc_front_status_v_cfrontpressure_refrig_suction_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id2_e1_vc_front_status_v_cfronttime_spent_discharging_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_e1_vc_front_status_v_cfronttime_spent_discharging_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_e1_vc_front_status_v_cfronttime_spent_discharging_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_e1_vc_front_status_v_cfrontcharge_needed_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_e1_vc_front_status_v_cfrontcharge_needed_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_e1_vc_front_status_v_cfrontcharge_needed_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id2_e1_vc_front_status_v_cfrontheadlight_right_v_position_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_e1_vc_front_status_v_cfrontheadlight_right_v_position_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_e1_vc_front_status_v_cfrontheadlight_right_v_position_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_e1_vc_front_status_v_cfront_pcs_mia_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_e1_vc_front_status_v_cfront_pcs_mia_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_e1_vc_front_status_v_cfront_pcs_mia_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_e1_vc_front_status_v_cfront_dcdc_noop_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_e1_vc_front_status_v_cfront_dcdc_noop_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_e1_vc_front_status_v_cfront_dcdc_noop_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_e1_vc_front_status_v_cfronthomelink_v2_response4_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_e1_vc_front_status_v_cfronthomelink_v2_response4_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_e1_vc_front_status_v_cfronthomelink_v2_response4_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_e1_vc_front_status_v_cfrontpressure_refrig_discharge_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_e1_vc_front_status_v_cfrontpressure_refrig_discharge_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_e1_vc_front_status_v_cfrontpressure_refrig_discharge_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_e1_vc_front_status_v_cfront_ibs_fault_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_e1_vc_front_status_v_cfront_ibs_fault_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_e1_vc_front_status_v_cfront_ibs_fault_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_e1_vc_front_status_v_cfront_pe_reset_line_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_e1_vc_front_status_v_cfront_pe_reset_line_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_e1_vc_front_status_v_cfront_pe_reset_line_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_e1_vc_front_status_v_cfront_hsd_init_complete_u13_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_e1_vc_front_status_v_cfront_hsd_init_complete_u13_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_e1_vc_front_status_v_cfront_hsd_init_complete_u13_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_e1_vc_front_status_v_cfront_hsd_init_complete_u16_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_e1_vc_front_status_v_cfront_hsd_init_complete_u16_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_e1_vc_front_status_v_cfront_hsd_init_complete_u16_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t model3_can_id2_e1_vc_front_status_v_cfront_ibs_unfiltered_temperature_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_e1_vc_front_status_v_cfront_ibs_unfiltered_temperature_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_e1_vc_front_status_v_cfront_ibs_unfiltered_temperature_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_e1_vc_front_status_v_cfronttime_spent_sleeping_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_e1_vc_front_status_v_cfronttime_spent_sleeping_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_e1_vc_front_status_v_cfronttime_spent_sleeping_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_e1_vc_front_status_v_cfrontfrunk_interior_rel_switch_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_e1_vc_front_status_v_cfrontfrunk_interior_rel_switch_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_e1_vc_front_status_v_cfrontfrunk_interior_rel_switch_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_e1_vc_front_status_v_cfronthomelink_comm_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_e1_vc_front_status_v_cfronthomelink_comm_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_e1_vc_front_status_v_cfronthomelink_comm_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id2_e1_vc_front_status_v_cfrontwiper_cycles_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_e1_vc_front_status_v_cfrontwiper_cycles_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_e1_vc_front_status_v_cfrontwiper_cycles_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_e1_vc_front_status_v_cfrontany_closure_open_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_e1_vc_front_status_v_cfrontany_closure_open_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_e1_vc_front_status_v_cfrontany_closure_open_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_e1_vc_front_status_v_cfrontany_door_open_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_e1_vc_front_status_v_cfrontany_door_open_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_e1_vc_front_status_v_cfrontany_door_open_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_e1_vc_front_status_v_cfronthorn_on_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_e1_vc_front_status_v_cfronthorn_on_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_e1_vc_front_status_v_cfronthorn_on_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_e1_vc_front_status_v_cfrontwiper_position_deg_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_e1_vc_front_status_v_cfrontwiper_position_deg_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_e1_vc_front_status_v_cfrontwiper_position_deg_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t model3_can_id2_e1_vc_front_status_v_cfrontsleep_current_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_e1_vc_front_status_v_cfrontsleep_current_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_e1_vc_front_status_v_cfrontsleep_current_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_e1_vc_front_status_v_cfrontheadlamp_left_fan_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_e1_vc_front_status_v_cfrontheadlamp_left_fan_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_e1_vc_front_status_v_cfrontheadlamp_left_fan_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_e1_vc_front_status_v_cfront12_v_overcharge_counter_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_e1_vc_front_status_v_cfront12_v_overcharge_counter_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_e1_vc_front_status_v_cfront12_v_overcharge_counter_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_e1_vc_front_status_v_cfrontheadlamp_right_fan_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_e1_vc_front_status_v_cfrontheadlamp_right_fan_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_e1_vc_front_status_v_cfrontheadlamp_right_fan_status_is_in_range(uint8_t value);

/**
 * Pack message ID381VCFront1Hz.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int model3_can_id381_vc_front1_hz_pack(
    uint8_t *dst_p,
    const struct model3_can_id381_vc_front1_hz_t *src_p,
    size_t size);

/**
 * Unpack message ID381VCFront1Hz.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int model3_can_id381_vc_front1_hz_unpack(
    struct model3_can_id381_vc_front1_hz_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id381_vc_front1_hz_vc_front1_hz_index_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id381_vc_front1_hz_vc_front1_hz_index_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id381_vc_front1_hz_vc_front1_hz_index_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id381_vc_front1_hz_vc_frontmode_transition_id_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id381_vc_front1_hz_vc_frontmode_transition_id_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id381_vc_front1_hz_vc_frontmode_transition_id_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id381_vc_front1_hz_vc_frontactive_louver_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id381_vc_front1_hz_vc_frontactive_louver_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id381_vc_front1_hz_vc_frontactive_louver_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id381_vc_front1_hz_vc_frontfive_way_valve_recal_reason_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id381_vc_front1_hz_vc_frontfive_way_valve_recal_reason_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id381_vc_front1_hz_vc_frontfive_way_valve_recal_reason_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id381_vc_front1_hz_vc_frontactive_louver_is_calibrated_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id381_vc_front1_hz_vc_frontactive_louver_is_calibrated_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id381_vc_front1_hz_vc_frontactive_louver_is_calibrated_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id381_vc_front1_hz_vc_frontmode_desired_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id381_vc_front1_hz_vc_frontmode_desired_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id381_vc_front1_hz_vc_frontmode_desired_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id381_vc_front1_hz_vc_frontcondenser_pressure_limit_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id381_vc_front1_hz_vc_frontcondenser_pressure_limit_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id381_vc_front1_hz_vc_frontcondenser_pressure_limit_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id381_vc_front1_hz_vc_frontactive_louver_motor_counts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id381_vc_front1_hz_vc_frontactive_louver_motor_counts_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id381_vc_front1_hz_vc_frontactive_louver_motor_counts_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id381_vc_front1_hz_vc_frontfive_way_valve_count_range_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id381_vc_front1_hz_vc_frontfive_way_valve_count_range_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id381_vc_front1_hz_vc_frontfive_way_valve_count_range_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id381_vc_front1_hz_vc_frontactive_louver_abnormal_kt_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id381_vc_front1_hz_vc_frontactive_louver_abnormal_kt_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id381_vc_front1_hz_vc_frontactive_louver_abnormal_kt_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id381_vc_front1_hz_vc_fronttarget_pt_active_cool_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id381_vc_front1_hz_vc_fronttarget_pt_active_cool_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id381_vc_front1_hz_vc_fronttarget_pt_active_cool_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id381_vc_front1_hz_vc_frontactive_louver_over_current_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id381_vc_front1_hz_vc_frontactive_louver_over_current_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id381_vc_front1_hz_vc_frontactive_louver_over_current_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id381_vc_front1_hz_vc_frontfive_way_valve_angle_drift_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id381_vc_front1_hz_vc_frontfive_way_valve_angle_drift_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id381_vc_front1_hz_vc_frontfive_way_valve_angle_drift_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id381_vc_front1_hz_vc_frontactive_louver_over_temp_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id381_vc_front1_hz_vc_frontactive_louver_over_temp_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id381_vc_front1_hz_vc_frontactive_louver_over_temp_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id381_vc_front1_hz_vc_frontactive_louver_motor_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id381_vc_front1_hz_vc_frontactive_louver_motor_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id381_vc_front1_hz_vc_frontactive_louver_motor_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id381_vc_front1_hz_vc_fronttarget_pt_passive_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id381_vc_front1_hz_vc_fronttarget_pt_passive_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id381_vc_front1_hz_vc_fronttarget_pt_passive_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id381_vc_front1_hz_vc_frontactive_louver_open_pos_targ_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id381_vc_front1_hz_vc_frontactive_louver_open_pos_targ_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id381_vc_front1_hz_vc_frontactive_louver_open_pos_targ_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id381_vc_front1_hz_vc_fronttarget_bat_active_cool_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id381_vc_front1_hz_vc_fronttarget_bat_active_cool_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id381_vc_front1_hz_vc_fronttarget_bat_active_cool_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id381_vc_front1_hz_vc_frontactive_louver_open_pos_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id381_vc_front1_hz_vc_frontactive_louver_open_pos_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id381_vc_front1_hz_vc_frontactive_louver_open_pos_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id381_vc_front1_hz_vc_frontfive_way_valve_recal_count_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id381_vc_front1_hz_vc_frontfive_way_valve_recal_count_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id381_vc_front1_hz_vc_frontfive_way_valve_recal_count_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id381_vc_front1_hz_vc_fronttarget_bat_passive_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id381_vc_front1_hz_vc_fronttarget_bat_passive_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id381_vc_front1_hz_vc_fronttarget_bat_passive_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id381_vc_front1_hz_vc_frontpump_battery_fet_temp_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id381_vc_front1_hz_vc_frontpump_battery_fet_temp_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id381_vc_front1_hz_vc_frontpump_battery_fet_temp_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id381_vc_front1_hz_vc_fronttarget_bat_active_heat_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id381_vc_front1_hz_vc_fronttarget_bat_active_heat_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id381_vc_front1_hz_vc_fronttarget_bat_active_heat_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id381_vc_front1_hz_vc_frontpump_powertrain_fet_temp_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id381_vc_front1_hz_vc_frontpump_powertrain_fet_temp_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id381_vc_front1_hz_vc_frontpump_powertrain_fet_temp_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id381_vc_front1_hz_vc_frontfive_way_valve_windup_est_l_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id381_vc_front1_hz_vc_frontfive_way_valve_windup_est_l_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id381_vc_front1_hz_vc_frontfive_way_valve_windup_est_l_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id381_vc_front1_hz_vc_frontfive_way_valve_windup_est_r_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id381_vc_front1_hz_vc_frontfive_way_valve_windup_est_r_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id381_vc_front1_hz_vc_frontfive_way_valve_windup_est_r_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id381_vc_front1_hz_vc_frontradiator_fan_fet_temp_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id381_vc_front1_hz_vc_frontradiator_fan_fet_temp_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id381_vc_front1_hz_vc_frontradiator_fan_fet_temp_is_in_range(uint8_t value);

/**
 * Pack message ID318SystemTimeUTC.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int model3_can_id318_system_time_utc_pack(
    uint8_t *dst_p,
    const struct model3_can_id318_system_time_utc_t *src_p,
    size_t size);

/**
 * Unpack message ID318SystemTimeUTC.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int model3_can_id318_system_time_utc_unpack(
    struct model3_can_id318_system_time_utc_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id318_system_time_utc_ut_cyear318_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id318_system_time_utc_ut_cyear318_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id318_system_time_utc_ut_cyear318_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id318_system_time_utc_ut_cmonth318_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id318_system_time_utc_ut_cmonth318_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id318_system_time_utc_ut_cmonth318_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id318_system_time_utc_ut_cseconds318_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id318_system_time_utc_ut_cseconds318_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id318_system_time_utc_ut_cseconds318_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id318_system_time_utc_ut_chour318_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id318_system_time_utc_ut_chour318_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id318_system_time_utc_ut_chour318_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id318_system_time_utc_ut_cday318_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id318_system_time_utc_ut_cday318_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id318_system_time_utc_ut_cday318_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id318_system_time_utc_ut_cminutes318_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id318_system_time_utc_ut_cminutes318_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id318_system_time_utc_ut_cminutes318_is_in_range(uint8_t value);

/**
 * Pack message ID528UnixTime.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int model3_can_id528_unix_time_pack(
    uint8_t *dst_p,
    const struct model3_can_id528_unix_time_t *src_p,
    size_t size);

/**
 * Unpack message ID528UnixTime.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int model3_can_id528_unix_time_unpack(
    struct model3_can_id528_unix_time_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t model3_can_id528_unix_time_unix_time_seconds528_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id528_unix_time_unix_time_seconds528_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id528_unix_time_unix_time_seconds528_is_in_range(uint32_t value);

/**
 * Pack message ID229GearLever.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int model3_can_id229_gear_lever_pack(
    uint8_t *dst_p,
    const struct model3_can_id229_gear_lever_t *src_p,
    size_t size);

/**
 * Unpack message ID229GearLever.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int model3_can_id229_gear_lever_unpack(
    struct model3_can_id229_gear_lever_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id229_gear_lever_gear_lever_position229_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id229_gear_lever_gear_lever_position229_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id229_gear_lever_gear_lever_position229_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id229_gear_lever_gear_lever_button229_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id229_gear_lever_gear_lever_button229_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id229_gear_lever_gear_lever_button229_is_in_range(uint8_t value);

/**
 * Pack message ID249LeftStalk.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int model3_can_id249_left_stalk_pack(
    uint8_t *dst_p,
    const struct model3_can_id249_left_stalk_t *src_p,
    size_t size);

/**
 * Unpack message ID249LeftStalk.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int model3_can_id249_left_stalk_unpack(
    struct model3_can_id249_left_stalk_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id249_left_stalk_left_stalk_f_rpos249_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id249_left_stalk_left_stalk_f_rpos249_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id249_left_stalk_left_stalk_f_rpos249_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id249_left_stalk_left_stalk_button249_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id249_left_stalk_left_stalk_button249_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id249_left_stalk_left_stalk_button249_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id249_left_stalk_left_stalk_u_dpos249_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id249_left_stalk_left_stalk_u_dpos249_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id249_left_stalk_left_stalk_u_dpos249_is_in_range(uint8_t value);

/**
 * Pack message ID628UDSPCStoMCU.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int model3_can_id628_udspc_sto_mcu_pack(
    uint8_t *dst_p,
    const struct model3_can_id628_udspc_sto_mcu_t *src_p,
    size_t size);

/**
 * Unpack message ID628UDSPCStoMCU.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int model3_can_id628_udspc_sto_mcu_unpack(
    struct model3_can_id628_udspc_sto_mcu_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Pack message ID628UDSMCUtoPCS.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int model3_can_id628_udsmc_uto_pcs_pack(
    uint8_t *dst_p,
    const struct model3_can_id628_udsmc_uto_pcs_t *src_p,
    size_t size);

/**
 * Unpack message ID628UDSMCUtoPCS.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int model3_can_id628_udsmc_uto_pcs_unpack(
    struct model3_can_id628_udsmc_uto_pcs_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Pack message ID186FrontDriveTorqueRPM.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int model3_can_id186_front_drive_torque_rpm_pack(
    uint8_t *dst_p,
    const struct model3_can_id186_front_drive_torque_rpm_t *src_p,
    size_t size);

/**
 * Unpack message ID186FrontDriveTorqueRPM.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int model3_can_id186_front_drive_torque_rpm_unpack(
    struct model3_can_id186_front_drive_torque_rpm_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t model3_can_id186_front_drive_torque_rpm_front_torque_request186_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id186_front_drive_torque_rpm_front_torque_request186_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id186_front_drive_torque_rpm_front_torque_request186_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t model3_can_id186_front_drive_torque_rpm_front_torque_actual186_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id186_front_drive_torque_rpm_front_torque_actual186_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id186_front_drive_torque_rpm_front_torque_actual186_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t model3_can_id186_front_drive_torque_rpm_front_axle_rpm186_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id186_front_drive_torque_rpm_front_axle_rpm186_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id186_front_drive_torque_rpm_front_axle_rpm186_is_in_range(int16_t value);

/**
 * Pack message ID395FrontOilPump.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int model3_can_id395_front_oil_pump_pack(
    uint8_t *dst_p,
    const struct model3_can_id395_front_oil_pump_t *src_p,
    size_t size);

/**
 * Unpack message ID395FrontOilPump.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int model3_can_id395_front_oil_pump_unpack(
    struct model3_can_id395_front_oil_pump_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id395_front_oil_pump_front_oil_pump_state395_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id395_front_oil_pump_front_oil_pump_state395_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id395_front_oil_pump_front_oil_pump_state395_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id395_front_oil_pump_front_oil_flow_target395_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id395_front_oil_pump_front_oil_flow_target395_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id395_front_oil_pump_front_oil_flow_target395_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id395_front_oil_pump_front_oil_flow_actual395_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id395_front_oil_pump_front_oil_flow_actual395_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id395_front_oil_pump_front_oil_flow_actual395_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id395_front_oil_pump_front_oil_pc_btemp395_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id395_front_oil_pump_front_oil_pc_btemp395_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id395_front_oil_pump_front_oil_pc_btemp395_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id395_front_oil_pump_front_oil_temp395_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id395_front_oil_pump_front_oil_temp395_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id395_front_oil_pump_front_oil_temp395_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id395_front_oil_pump_front_oil_voltage395_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id395_front_oil_pump_front_oil_voltage395_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id395_front_oil_pump_front_oil_voltage395_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id395_front_oil_pump_front_oil_current395_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id395_front_oil_pump_front_oil_current395_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id395_front_oil_pump_front_oil_current395_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id395_front_oil_pump_front_oil_current_offset395_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id395_front_oil_pump_front_oil_current_offset395_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id395_front_oil_pump_front_oil_current_offset395_is_in_range(uint8_t value);

/**
 * Pack message ID396RearOilPump.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int model3_can_id396_rear_oil_pump_pack(
    uint8_t *dst_p,
    const struct model3_can_id396_rear_oil_pump_t *src_p,
    size_t size);

/**
 * Unpack message ID396RearOilPump.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int model3_can_id396_rear_oil_pump_unpack(
    struct model3_can_id396_rear_oil_pump_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id396_rear_oil_pump_rear_oil_pump_state396_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id396_rear_oil_pump_rear_oil_pump_state396_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id396_rear_oil_pump_rear_oil_pump_state396_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id396_rear_oil_pump_rear_oil_flow_target396_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id396_rear_oil_pump_rear_oil_flow_target396_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id396_rear_oil_pump_rear_oil_flow_target396_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id396_rear_oil_pump_rear_oil_flow_actual396_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id396_rear_oil_pump_rear_oil_flow_actual396_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id396_rear_oil_pump_rear_oil_flow_actual396_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id396_rear_oil_pump_rear_oil_pc_btemp396_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id396_rear_oil_pump_rear_oil_pc_btemp396_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id396_rear_oil_pump_rear_oil_pc_btemp396_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id396_rear_oil_pump_rear_oil_temp396_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id396_rear_oil_pump_rear_oil_temp396_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id396_rear_oil_pump_rear_oil_temp396_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id396_rear_oil_pump_rear_oil_voltage396_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id396_rear_oil_pump_rear_oil_voltage396_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id396_rear_oil_pump_rear_oil_voltage396_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id396_rear_oil_pump_rear_oil_current396_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id396_rear_oil_pump_rear_oil_current396_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id396_rear_oil_pump_rear_oil_current396_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id396_rear_oil_pump_rear_oil_current_offset396_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id396_rear_oil_pump_rear_oil_current_offset396_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id396_rear_oil_pump_rear_oil_current_offset396_is_in_range(uint8_t value);

/**
 * Pack message ID5D5RearTempReq.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int model3_can_id5_d5_rear_temp_req_pack(
    uint8_t *dst_p,
    const struct model3_can_id5_d5_rear_temp_req_t *src_p,
    size_t size);

/**
 * Unpack message ID5D5RearTempReq.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int model3_can_id5_d5_rear_temp_req_unpack(
    struct model3_can_id5_d5_rear_temp_req_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id5_d5_rear_temp_req_test_temp5_d5_a_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id5_d5_rear_temp_req_test_temp5_d5_a_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id5_d5_rear_temp_req_test_temp5_d5_a_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id5_d5_rear_temp_req_test_temp5_d5_b_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id5_d5_rear_temp_req_test_temp5_d5_b_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id5_d5_rear_temp_req_test_temp5_d5_b_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id5_d5_rear_temp_req_test_temp5_d5_c_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id5_d5_rear_temp_req_test_temp5_d5_c_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id5_d5_rear_temp_req_test_temp5_d5_c_is_in_range(uint8_t value);

/**
 * Pack message ID556FrontTempReq.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int model3_can_id556_front_temp_req_pack(
    uint8_t *dst_p,
    const struct model3_can_id556_front_temp_req_t *src_p,
    size_t size);

/**
 * Unpack message ID556FrontTempReq.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int model3_can_id556_front_temp_req_unpack(
    struct model3_can_id556_front_temp_req_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id556_front_temp_req_test_temp556_a_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id556_front_temp_req_test_temp556_a_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id556_front_temp_req_test_temp556_a_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id556_front_temp_req_test_temp556_b_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id556_front_temp_req_test_temp556_b_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id556_front_temp_req_test_temp556_b_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id556_front_temp_req_test_temp556_c_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id556_front_temp_req_test_temp556_c_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id556_front_temp_req_test_temp556_c_is_in_range(uint8_t value);

/**
 * Pack message ID1D8RearTorque.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int model3_can_id1_d8_rear_torque_pack(
    uint8_t *dst_p,
    const struct model3_can_id1_d8_rear_torque_t *src_p,
    size_t size);

/**
 * Unpack message ID1D8RearTorque.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int model3_can_id1_d8_rear_torque_unpack(
    struct model3_can_id1_d8_rear_torque_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id1_d8_rear_torque_torque_flags1_d8_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id1_d8_rear_torque_torque_flags1_d8_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id1_d8_rear_torque_torque_flags1_d8_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t model3_can_id1_d8_rear_torque_rear_torque_request1_d8_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id1_d8_rear_torque_rear_torque_request1_d8_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id1_d8_rear_torque_rear_torque_request1_d8_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t model3_can_id1_d8_rear_torque_rear_torque1_d8_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id1_d8_rear_torque_rear_torque1_d8_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id1_d8_rear_torque_rear_torque1_d8_is_in_range(int16_t value);

/**
 * Pack message ID155WheelAngles.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int model3_can_id155_wheel_angles_pack(
    uint8_t *dst_p,
    const struct model3_can_id155_wheel_angles_t *src_p,
    size_t size);

/**
 * Unpack message ID155WheelAngles.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int model3_can_id155_wheel_angles_unpack(
    struct model3_can_id155_wheel_angles_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id155_wheel_angles_wheel_angle_tics_fl155_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id155_wheel_angles_wheel_angle_tics_fl155_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id155_wheel_angles_wheel_angle_tics_fl155_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id155_wheel_angles_wheel_angle_tics_fr155_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id155_wheel_angles_wheel_angle_tics_fr155_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id155_wheel_angles_wheel_angle_tics_fr155_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id155_wheel_angles_wheel_angle_tics_rl155_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id155_wheel_angles_wheel_angle_tics_rl155_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id155_wheel_angles_wheel_angle_tics_rl155_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id155_wheel_angles_wheel_angle_tics_rr155_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id155_wheel_angles_wheel_angle_tics_rr155_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id155_wheel_angles_wheel_angle_tics_rr155_is_in_range(uint8_t value);

/**
 * Pack message ID175WheelSpeed.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int model3_can_id175_wheel_speed_pack(
    uint8_t *dst_p,
    const struct model3_can_id175_wheel_speed_t *src_p,
    size_t size);

/**
 * Unpack message ID175WheelSpeed.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int model3_can_id175_wheel_speed_unpack(
    struct model3_can_id175_wheel_speed_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id175_wheel_speed_wheel_speed_fl175_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id175_wheel_speed_wheel_speed_fl175_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id175_wheel_speed_wheel_speed_fl175_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id175_wheel_speed_wheel_speed_fr175_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id175_wheel_speed_wheel_speed_fr175_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id175_wheel_speed_wheel_speed_fr175_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id175_wheel_speed_wheel_speed_rl175_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id175_wheel_speed_wheel_speed_rl175_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id175_wheel_speed_wheel_speed_rl175_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id175_wheel_speed_wheel_speed_rr175_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id175_wheel_speed_wheel_speed_rr175_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id175_wheel_speed_wheel_speed_rr175_is_in_range(uint16_t value);

/**
 * Pack message ID1D4FrontTorqueOld.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int model3_can_id1_d4_front_torque_old_pack(
    uint8_t *dst_p,
    const struct model3_can_id1_d4_front_torque_old_t *src_p,
    size_t size);

/**
 * Unpack message ID1D4FrontTorqueOld.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int model3_can_id1_d4_front_torque_old_unpack(
    struct model3_can_id1_d4_front_torque_old_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t model3_can_id1_d4_front_torque_old_raw_torque_front1_d4_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id1_d4_front_torque_old_raw_torque_front1_d4_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id1_d4_front_torque_old_raw_torque_front1_d4_is_in_range(int16_t value);

/**
 * Pack message ID1D5FrontTorque.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int model3_can_id1_d5_front_torque_pack(
    uint8_t *dst_p,
    const struct model3_can_id1_d5_front_torque_t *src_p,
    size_t size);

/**
 * Unpack message ID1D5FrontTorque.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int model3_can_id1_d5_front_torque_unpack(
    struct model3_can_id1_d5_front_torque_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t model3_can_id1_d5_front_torque_front_torque_request1_d5_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id1_d5_front_torque_front_torque_request1_d5_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id1_d5_front_torque_front_torque_request1_d5_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t model3_can_id1_d5_front_torque_front_torque1_d5_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id1_d5_front_torque_front_torque1_d5_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id1_d5_front_torque_front_torque1_d5_is_in_range(int16_t value);

/**
 * Pack message ID2E5FrontInverterPower.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int model3_can_id2_e5_front_inverter_power_pack(
    uint8_t *dst_p,
    const struct model3_can_id2_e5_front_inverter_power_t *src_p,
    size_t size);

/**
 * Unpack message ID2E5FrontInverterPower.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int model3_can_id2_e5_front_inverter_power_unpack(
    struct model3_can_id2_e5_front_inverter_power_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t model3_can_id2_e5_front_inverter_power_front_power2_e5_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_e5_front_inverter_power_front_power2_e5_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_e5_front_inverter_power_front_power2_e5_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_e5_front_inverter_power_front_power_dissipation2_e5_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_e5_front_inverter_power_front_power_dissipation2_e5_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_e5_front_inverter_power_front_power_dissipation2_e5_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_e5_front_inverter_power_front_heat_power_optimal2_e5_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_e5_front_inverter_power_front_heat_power_optimal2_e5_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_e5_front_inverter_power_front_heat_power_optimal2_e5_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_e5_front_inverter_power_front_heat_power_max2_e5_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_e5_front_inverter_power_front_heat_power_max2_e5_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_e5_front_inverter_power_front_heat_power_max2_e5_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id2_e5_front_inverter_power_front_heat_power2_e5_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_e5_front_inverter_power_front_heat_power2_e5_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_e5_front_inverter_power_front_heat_power2_e5_is_in_range(uint16_t value);

/**
 * Pack message ID3C2VCLswitches.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int model3_can_id3_c2_vc_lswitches_pack(
    uint8_t *dst_p,
    const struct model3_can_id3_c2_vc_lswitches_t *src_p,
    size_t size);

/**
 * Unpack message ID3C2VCLswitches.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int model3_can_id3_c2_vc_lswitches_unpack(
    struct model3_can_id3_c2_vc_lswitches_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Pack message ID336MaxPowerRating.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int model3_can_id336_max_power_rating_pack(
    uint8_t *dst_p,
    const struct model3_can_id336_max_power_rating_t *src_p,
    size_t size);

/**
 * Unpack message ID336MaxPowerRating.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int model3_can_id336_max_power_rating_unpack(
    struct model3_can_id336_max_power_rating_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id336_max_power_rating_drive_power_rating336_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id336_max_power_rating_drive_power_rating336_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id336_max_power_rating_drive_power_rating336_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id336_max_power_rating_drive_regen_rating336_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id336_max_power_rating_drive_regen_rating336_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id336_max_power_rating_drive_regen_rating336_is_in_range(uint8_t value);

/**
 * Pack message ID333UIcharging.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int model3_can_id333_u_icharging_pack(
    uint8_t *dst_p,
    const struct model3_can_id333_u_icharging_t *src_p,
    size_t size);

/**
 * Unpack message ID333UIcharging.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int model3_can_id333_u_icharging_unpack(
    struct model3_can_id333_u_icharging_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id333_u_icharging_u_icharge_current_limit333_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id333_u_icharging_u_icharge_current_limit333_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id333_u_icharging_u_icharge_current_limit333_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id333_u_icharging_u_icharge_to_soc333_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id333_u_icharging_u_icharge_to_soc333_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id333_u_icharging_u_icharge_to_soc333_is_in_range(uint16_t value);

/**
 * Pack message ID241Coolant.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int model3_can_id241_coolant_pack(
    uint8_t *dst_p,
    const struct model3_can_id241_coolant_t *src_p,
    size_t size);

/**
 * Unpack message ID241Coolant.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int model3_can_id241_coolant_unpack(
    struct model3_can_id241_coolant_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id241_coolant_vc_fbatt_coolant_flow241_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id241_coolant_vc_fbatt_coolant_flow241_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id241_coolant_vc_fbatt_coolant_flow241_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id241_coolant_vcfpt_coolant_flow241_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id241_coolant_vcfpt_coolant_flow241_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id241_coolant_vcfpt_coolant_flow241_is_in_range(uint16_t value);

/**
 * Pack message ID293chassisControls.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int model3_can_id293chassis_controls_pack(
    uint8_t *dst_p,
    const struct model3_can_id293chassis_controls_t *src_p,
    size_t size);

/**
 * Unpack message ID293chassisControls.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int model3_can_id293chassis_controls_unpack(
    struct model3_can_id293chassis_controls_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id293chassis_controls_uic_csteering_mode293_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id293chassis_controls_uic_csteering_mode293_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id293chassis_controls_uic_csteering_mode293_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id293chassis_controls_uic_ctraction_control_mode293_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id293chassis_controls_uic_ctraction_control_mode293_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id293chassis_controls_uic_ctraction_control_mode293_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id293chassis_controls_uic_cnarrow_garages293_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id293chassis_controls_uic_cnarrow_garages293_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id293chassis_controls_uic_cnarrow_garages293_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id293chassis_controls_uicc_winch_mode293_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id293chassis_controls_uicc_winch_mode293_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id293chassis_controls_uicc_winch_mode293_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id293chassis_controls_uic_ctrailer_mode293_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id293chassis_controls_uic_ctrailer_mode293_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id293chassis_controls_uic_ctrailer_mode293_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id293chassis_controls_uicc_suspension_level293_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id293chassis_controls_uicc_suspension_level293_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id293chassis_controls_uicc_suspension_level293_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id293chassis_controls_uicc_units293_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id293chassis_controls_uicc_units293_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id293chassis_controls_uicc_units293_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id293chassis_controls_uic_cdebug_enable293_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id293chassis_controls_uic_cdebug_enable293_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id293chassis_controls_uic_cdebug_enable293_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id293chassis_controls_uic_covertake_enable293_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id293chassis_controls_uic_covertake_enable293_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id293chassis_controls_uic_covertake_enable293_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id293chassis_controls_uic_ctraffic_light_stop_signs293_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id293chassis_controls_uic_ctraffic_light_stop_signs293_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id293chassis_controls_uic_ctraffic_light_stop_signs293_is_in_range(uint8_t value);

/**
 * Pack message ID268SystemPower.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int model3_can_id268_system_power_pack(
    uint8_t *dst_p,
    const struct model3_can_id268_system_power_t *src_p,
    size_t size);

/**
 * Unpack message ID268SystemPower.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int model3_can_id268_system_power_unpack(
    struct model3_can_id268_system_power_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id268_system_power_system_heat_power_max268_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id268_system_power_system_heat_power_max268_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id268_system_power_system_heat_power_max268_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id268_system_power_system_heat_power268_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id268_system_power_system_heat_power268_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id268_system_power_system_heat_power268_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id268_system_power_system_drive_power_max268_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id268_system_power_system_drive_power_max268_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id268_system_power_system_drive_power_max268_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id268_system_power_system_regen_power_max268_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id268_system_power_system_regen_power_max268_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id268_system_power_system_regen_power_max268_is_in_range(uint8_t value);

/**
 * Pack message ID04FGPSLatLong.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int model3_can_id04_fgps_lat_long_pack(
    uint8_t *dst_p,
    const struct model3_can_id04_fgps_lat_long_t *src_p,
    size_t size);

/**
 * Unpack message ID04FGPSLatLong.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int model3_can_id04_fgps_lat_long_unpack(
    struct model3_can_id04_fgps_lat_long_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int32_t model3_can_id04_fgps_lat_long_gps_lattitude04_f_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id04_fgps_lat_long_gps_lattitude04_f_decode(int32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id04_fgps_lat_long_gps_lattitude04_f_is_in_range(int32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int32_t model3_can_id04_fgps_lat_long_gps_longitude04_f_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id04_fgps_lat_long_gps_longitude04_f_decode(int32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id04_fgps_lat_long_gps_longitude04_f_is_in_range(int32_t value);

/**
 * Pack message ID3D2TotalChargeDischarge.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int model3_can_id3_d2_total_charge_discharge_pack(
    uint8_t *dst_p,
    const struct model3_can_id3_d2_total_charge_discharge_t *src_p,
    size_t size);

/**
 * Unpack message ID3D2TotalChargeDischarge.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int model3_can_id3_d2_total_charge_discharge_unpack(
    struct model3_can_id3_d2_total_charge_discharge_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t model3_can_id3_d2_total_charge_discharge_total_discharge_k_wh3_d2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id3_d2_total_charge_discharge_total_discharge_k_wh3_d2_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id3_d2_total_charge_discharge_total_discharge_k_wh3_d2_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t model3_can_id3_d2_total_charge_discharge_total_charge_k_wh3_d2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id3_d2_total_charge_discharge_total_charge_k_wh3_d2_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id3_d2_total_charge_discharge_total_charge_k_wh3_d2_is_in_range(uint32_t value);

/**
 * Pack message ID3F2BMSCounters.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int model3_can_id3_f2_bms_counters_pack(
    uint8_t *dst_p,
    const struct model3_can_id3_f2_bms_counters_t *src_p,
    size_t size);

/**
 * Unpack message ID3F2BMSCounters.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int model3_can_id3_f2_bms_counters_unpack(
    struct model3_can_id3_f2_bms_counters_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id3_f2_bms_counters_bms_counters_index3_f2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id3_f2_bms_counters_bms_counters_index3_f2_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id3_f2_bms_counters_bms_counters_index3_f2_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t model3_can_id3_f2_bms_counters_bm_stotal_a_ccharge3_f2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id3_f2_bms_counters_bm_stotal_a_ccharge3_f2_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id3_f2_bms_counters_bm_stotal_a_ccharge3_f2_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t model3_can_id3_f2_bms_counters_bm_stotal_d_ccharge3_f2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id3_f2_bms_counters_bm_stotal_d_ccharge3_f2_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id3_f2_bms_counters_bm_stotal_d_ccharge3_f2_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t model3_can_id3_f2_bms_counters_bm_stotal_regen_charge3_f2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id3_f2_bms_counters_bm_stotal_regen_charge3_f2_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id3_f2_bms_counters_bm_stotal_regen_charge3_f2_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t model3_can_id3_f2_bms_counters_bm_stotal_drive_discharge3_f2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id3_f2_bms_counters_bm_stotal_drive_discharge3_f2_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id3_f2_bms_counters_bm_stotal_drive_discharge3_f2_is_in_range(uint32_t value);

/**
 * Pack message ID2D2BMSVAlimits.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int model3_can_id2_d2_bmsv_alimits_pack(
    uint8_t *dst_p,
    const struct model3_can_id2_d2_bmsv_alimits_t *src_p,
    size_t size);

/**
 * Unpack message ID2D2BMSVAlimits.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int model3_can_id2_d2_bmsv_alimits_unpack(
    struct model3_can_id2_d2_bmsv_alimits_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id2_d2_bmsv_alimits_min_voltage2_d2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_d2_bmsv_alimits_min_voltage2_d2_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_d2_bmsv_alimits_min_voltage2_d2_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id2_d2_bmsv_alimits_max_voltage2_d2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_d2_bmsv_alimits_max_voltage2_d2_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_d2_bmsv_alimits_max_voltage2_d2_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id2_d2_bmsv_alimits_max_charge_current2_d2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_d2_bmsv_alimits_max_charge_current2_d2_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_d2_bmsv_alimits_max_charge_current2_d2_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id2_d2_bmsv_alimits_max_discharge_current2_d2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_d2_bmsv_alimits_max_discharge_current2_d2_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_d2_bmsv_alimits_max_discharge_current2_d2_is_in_range(uint16_t value);

/**
 * Pack message ID541FastChargeMaxLimits.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int model3_can_id541_fast_charge_max_limits_pack(
    uint8_t *dst_p,
    const struct model3_can_id541_fast_charge_max_limits_t *src_p,
    size_t size);

/**
 * Unpack message ID541FastChargeMaxLimits.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int model3_can_id541_fast_charge_max_limits_unpack(
    struct model3_can_id541_fast_charge_max_limits_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id541_fast_charge_max_limits_fc_max_power_limit541_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id541_fast_charge_max_limits_fc_max_power_limit541_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id541_fast_charge_max_limits_fc_max_power_limit541_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id541_fast_charge_max_limits_fc_max_current_limit541_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id541_fast_charge_max_limits_fc_max_current_limit541_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id541_fast_charge_max_limits_fc_max_current_limit541_is_in_range(uint16_t value);

/**
 * Pack message ID244FastChargeLimits.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int model3_can_id244_fast_charge_limits_pack(
    uint8_t *dst_p,
    const struct model3_can_id244_fast_charge_limits_t *src_p,
    size_t size);

/**
 * Unpack message ID244FastChargeLimits.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int model3_can_id244_fast_charge_limits_unpack(
    struct model3_can_id244_fast_charge_limits_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id244_fast_charge_limits_fc_power_limit244_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id244_fast_charge_limits_fc_power_limit244_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id244_fast_charge_limits_fc_power_limit244_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id244_fast_charge_limits_fc_current_limit244_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id244_fast_charge_limits_fc_current_limit244_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id244_fast_charge_limits_fc_current_limit244_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id244_fast_charge_limits_fc_max_vlimit244_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id244_fast_charge_limits_fc_max_vlimit244_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id244_fast_charge_limits_fc_max_vlimit244_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id244_fast_charge_limits_fc_min_vlimit244_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id244_fast_charge_limits_fc_min_vlimit244_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id244_fast_charge_limits_fc_min_vlimit244_is_in_range(uint16_t value);

/**
 * Pack message ID214FastChargeVA.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int model3_can_id214_fast_charge_va_pack(
    uint8_t *dst_p,
    const struct model3_can_id214_fast_charge_va_t *src_p,
    size_t size);

/**
 * Unpack message ID214FastChargeVA.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int model3_can_id214_fast_charge_va_unpack(
    struct model3_can_id214_fast_charge_va_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id214_fast_charge_va_f_cprotocol_version214_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id214_fast_charge_va_f_cprotocol_version214_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id214_fast_charge_va_f_cprotocol_version214_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id214_fast_charge_va_f_cstatus_code214_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id214_fast_charge_va_f_cstatus_code214_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id214_fast_charge_va_f_cstatus_code214_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id214_fast_charge_va_f_ccurrent_limit_achieved214_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id214_fast_charge_va_f_ccurrent_limit_achieved214_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id214_fast_charge_va_f_ccurrent_limit_achieved214_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id214_fast_charge_va_f_cpower_limit_achieved214_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id214_fast_charge_va_f_cpower_limit_achieved214_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id214_fast_charge_va_f_cpower_limit_achieved214_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id214_fast_charge_va_f_cvoltage_limit_achieved214_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id214_fast_charge_va_f_cvoltage_limit_achieved214_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id214_fast_charge_va_f_cvoltage_limit_achieved214_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id214_fast_charge_va_f_cadapter_locked214_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id214_fast_charge_va_f_cadapter_locked214_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id214_fast_charge_va_f_cadapter_locked214_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id214_fast_charge_va_f_cmin_current_limit214_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id214_fast_charge_va_f_cmin_current_limit214_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id214_fast_charge_va_f_cmin_current_limit214_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id214_fast_charge_va_f_ctype214_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id214_fast_charge_va_f_ctype214_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id214_fast_charge_va_f_ctype214_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t model3_can_id214_fast_charge_va_fc_current214_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id214_fast_charge_va_fc_current214_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id214_fast_charge_va_fc_current214_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id214_fast_charge_va_f_cpost_id214_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id214_fast_charge_va_f_cpost_id214_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id214_fast_charge_va_f_cpost_id214_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id214_fast_charge_va_fc_voltage214_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id214_fast_charge_va_fc_voltage214_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id214_fast_charge_va_fc_voltage214_is_in_range(uint16_t value);

/**
 * Pack message ID215FCisolation.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int model3_can_id215_f_cisolation_pack(
    uint8_t *dst_p,
    const struct model3_can_id215_f_cisolation_t *src_p,
    size_t size);

/**
 * Unpack message ID215FCisolation.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int model3_can_id215_f_cisolation_unpack(
    struct model3_can_id215_f_cisolation_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id215_f_cisolation_fc_isolation215_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id215_f_cisolation_fc_isolation215_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id215_f_cisolation_fc_isolation215_is_in_range(uint8_t value);

/**
 * Pack message ID217FCinfo.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int model3_can_id217_f_cinfo_pack(
    uint8_t *dst_p,
    const struct model3_can_id217_f_cinfo_t *src_p,
    size_t size);

/**
 * Unpack message ID217FCinfo.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int model3_can_id217_f_cinfo_unpack(
    struct model3_can_id217_f_cinfo_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id217_f_cinfo_f_cinfo_mux217_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id217_f_cinfo_f_cinfo_mux217_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id217_f_cinfo_f_cinfo_mux217_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id217_f_cinfo_f_cclass217_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id217_f_cinfo_f_cclass217_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id217_f_cinfo_f_cclass217_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id217_f_cinfo_f_cbrand217_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id217_f_cinfo_f_cbrand217_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id217_f_cinfo_f_cbrand217_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id217_f_cinfo_f_ccooling_type217_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id217_f_cinfo_f_ccooling_type217_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id217_f_cinfo_f_ccooling_type217_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id217_f_cinfo_f_cui_stop_type217_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id217_f_cinfo_f_cui_stop_type217_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id217_f_cinfo_f_cui_stop_type217_is_in_range(uint8_t value);

/**
 * Pack message ID321VCFrontTempsLevels.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int model3_can_id321_vc_front_temps_levels_pack(
    uint8_t *dst_p,
    const struct model3_can_id321_vc_front_temps_levels_t *src_p,
    size_t size);

/**
 * Unpack message ID321VCFrontTempsLevels.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int model3_can_id321_vc_front_temps_levels_unpack(
    struct model3_can_id321_vc_front_temps_levels_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id321_vc_front_temps_levels_temp_coolant_batt_inlet321_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id321_vc_front_temps_levels_temp_coolant_batt_inlet321_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id321_vc_front_temps_levels_temp_coolant_batt_inlet321_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id321_vc_front_temps_levels_temp_coolant_p_tinlet321_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id321_vc_front_temps_levels_temp_coolant_p_tinlet321_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id321_vc_front_temps_levels_temp_coolant_p_tinlet321_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id321_vc_front_temps_levels_temp_ambient_raw321_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id321_vc_front_temps_levels_temp_ambient_raw321_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id321_vc_front_temps_levels_temp_ambient_raw321_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id321_vc_front_temps_levels_temp_ambient321_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id321_vc_front_temps_levels_temp_ambient321_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id321_vc_front_temps_levels_temp_ambient321_is_in_range(uint8_t value);

/**
 * Pack message ID3D8Elevation.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int model3_can_id3_d8_elevation_pack(
    uint8_t *dst_p,
    const struct model3_can_id3_d8_elevation_t *src_p,
    size_t size);

/**
 * Unpack message ID3D8Elevation.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int model3_can_id3_d8_elevation_unpack(
    struct model3_can_id3_d8_elevation_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t model3_can_id3_d8_elevation_elevation3_d8_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id3_d8_elevation_elevation3_d8_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id3_d8_elevation_elevation3_d8_is_in_range(int16_t value);

/**
 * Pack message ID261_12vBattStatus.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int model3_can_id261_12v_batt_status_pack(
    uint8_t *dst_p,
    const struct model3_can_id261_12v_batt_status_t *src_p,
    size_t size);

/**
 * Unpack message ID261_12vBattStatus.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int model3_can_id261_12v_batt_status_unpack(
    struct model3_can_id261_12v_batt_status_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id261_12v_batt_status_v12v_batt_voltage261_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id261_12v_batt_status_v12v_batt_voltage261_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id261_12v_batt_status_v12v_batt_voltage261_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t model3_can_id261_12v_batt_status_v12v_batt_temp261_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id261_12v_batt_status_v12v_batt_temp261_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id261_12v_batt_status_v12v_batt_temp261_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id261_12v_batt_status_v12v_batt_ah261_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id261_12v_batt_status_v12v_batt_ah261_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id261_12v_batt_status_v12v_batt_ah261_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t model3_can_id261_12v_batt_status_v12v_batt_current261_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id261_12v_batt_status_v12v_batt_current261_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id261_12v_batt_status_v12v_batt_current261_is_in_range(int16_t value);

/**
 * Pack message ID129SteeringAngle.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int model3_can_id129_steering_angle_pack(
    uint8_t *dst_p,
    const struct model3_can_id129_steering_angle_t *src_p,
    size_t size);

/**
 * Unpack message ID129SteeringAngle.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int model3_can_id129_steering_angle_unpack(
    struct model3_can_id129_steering_angle_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id129_steering_angle_steering_angle129_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id129_steering_angle_steering_angle129_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id129_steering_angle_steering_angle129_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id129_steering_angle_steering_speed129_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id129_steering_angle_steering_speed129_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id129_steering_angle_steering_speed129_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id129_steering_angle_steering_sensor_a129_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id129_steering_angle_steering_sensor_a129_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id129_steering_angle_steering_sensor_a129_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id129_steering_angle_steering_sensor_b129_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id129_steering_angle_steering_sensor_b129_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id129_steering_angle_steering_sensor_b129_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id129_steering_angle_steering_sensor_c129_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id129_steering_angle_steering_sensor_c129_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id129_steering_angle_steering_sensor_c129_is_in_range(uint8_t value);

/**
 * Pack message ID264ChargeLineStatus.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int model3_can_id264_charge_line_status_pack(
    uint8_t *dst_p,
    const struct model3_can_id264_charge_line_status_t *src_p,
    size_t size);

/**
 * Unpack message ID264ChargeLineStatus.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int model3_can_id264_charge_line_status_unpack(
    struct model3_can_id264_charge_line_status_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id264_charge_line_status_charge_line_voltage264_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id264_charge_line_status_charge_line_voltage264_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id264_charge_line_status_charge_line_voltage264_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id264_charge_line_status_charge_line_current264_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id264_charge_line_status_charge_line_current264_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id264_charge_line_status_charge_line_current264_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id264_charge_line_status_charge_line_power264_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id264_charge_line_status_charge_line_power264_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id264_charge_line_status_charge_line_power264_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id264_charge_line_status_charge_line_current_limit264_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id264_charge_line_status_charge_line_current_limit264_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id264_charge_line_status_charge_line_current_limit264_is_in_range(uint16_t value);

/**
 * Pack message ID224PCSDCDCstatus.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int model3_can_id224_pcsdcd_cstatus_pack(
    uint8_t *dst_p,
    const struct model3_can_id224_pcsdcd_cstatus_t *src_p,
    size_t size);

/**
 * Unpack message ID224PCSDCDCstatus.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int model3_can_id224_pcsdcd_cstatus_unpack(
    struct model3_can_id224_pcsdcd_cstatus_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id224_pcsdcd_cstatus_dcd_cstate224_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id224_pcsdcd_cstatus_dcd_cstate224_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id224_pcsdcd_cstatus_dcd_cstate224_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t model3_can_id224_pcsdcd_cstatus_dcd_coutput_current224_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id224_pcsdcd_cstatus_dcd_coutput_current224_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id224_pcsdcd_cstatus_dcd_coutput_current224_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id224_pcsdcd_cstatus_dcd_coutput_current_max224_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id224_pcsdcd_cstatus_dcd_coutput_current_max224_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id224_pcsdcd_cstatus_dcd_coutput_current_max224_is_in_range(uint16_t value);

/**
 * Pack message ID118DriveSystemStatus.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int model3_can_id118_drive_system_status_pack(
    uint8_t *dst_p,
    const struct model3_can_id118_drive_system_status_t *src_p,
    size_t size);

/**
 * Unpack message ID118DriveSystemStatus.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int model3_can_id118_drive_system_status_unpack(
    struct model3_can_id118_drive_system_status_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id118_drive_system_status_drive_state118_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id118_drive_system_status_drive_state118_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id118_drive_system_status_drive_state118_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id118_drive_system_status_brake_pedal118_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id118_drive_system_status_brake_pedal118_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id118_drive_system_status_brake_pedal118_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id118_drive_system_status_d_igear118_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id118_drive_system_status_d_igear118_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id118_drive_system_status_d_igear118_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id118_drive_system_status_brake_state118_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id118_drive_system_status_brake_state118_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id118_drive_system_status_brake_state118_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id118_drive_system_status_immobilizer118_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id118_drive_system_status_immobilizer118_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id118_drive_system_status_immobilizer118_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id118_drive_system_status_pedal_position118_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id118_drive_system_status_pedal_position118_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id118_drive_system_status_pedal_position118_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id118_drive_system_status_traction_control118_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id118_drive_system_status_traction_control118_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id118_drive_system_status_traction_control118_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id118_drive_system_status_parking_brake118_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id118_drive_system_status_parking_brake118_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id118_drive_system_status_parking_brake118_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id118_drive_system_status_track_mode118_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id118_drive_system_status_track_mode118_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id118_drive_system_status_track_mode118_is_in_range(uint8_t value);

/**
 * Pack message ID212BMSstatus.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int model3_can_id212_bm_sstatus_pack(
    uint8_t *dst_p,
    const struct model3_can_id212_bm_sstatus_t *src_p,
    size_t size);

/**
 * Unpack message ID212BMSstatus.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int model3_can_id212_bm_sstatus_unpack(
    struct model3_can_id212_bm_sstatus_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id212_bm_sstatus_bm_shvac_power_request212_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id212_bm_sstatus_bm_shvac_power_request212_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id212_bm_sstatus_bm_shvac_power_request212_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id212_bm_sstatus_bm_snot_enough_power_for_drive212_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id212_bm_sstatus_bm_snot_enough_power_for_drive212_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id212_bm_sstatus_bm_snot_enough_power_for_drive212_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id212_bm_sstatus_bm_snot_enough_power_for_support212_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id212_bm_sstatus_bm_snot_enough_power_for_support212_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id212_bm_sstatus_bm_snot_enough_power_for_support212_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id212_bm_sstatus_bm_sprecondition_allowed212_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id212_bm_sstatus_bm_sprecondition_allowed212_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id212_bm_sstatus_bm_sprecondition_allowed212_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id212_bm_sstatus_bm_supdate_allowed212_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id212_bm_sstatus_bm_supdate_allowed212_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id212_bm_sstatus_bm_supdate_allowed212_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id212_bm_sstatus_bm_sactive_heating_worthwhile212_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id212_bm_sstatus_bm_sactive_heating_worthwhile212_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id212_bm_sstatus_bm_sactive_heating_worthwhile212_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id212_bm_sstatus_bm_scp_mia_on_hvs212_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id212_bm_sstatus_bm_scp_mia_on_hvs212_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id212_bm_sstatus_bm_scp_mia_on_hvs212_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id212_bm_sstatus_bm_scontactors212_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id212_bm_sstatus_bm_scontactors212_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id212_bm_sstatus_bm_scontactors212_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id212_bm_sstatus_bm_sstate212_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id212_bm_sstatus_bm_sstate212_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id212_bm_sstatus_bm_sstate212_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id212_bm_sstatus_bmsh_vstate212_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id212_bm_sstatus_bmsh_vstate212_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id212_bm_sstatus_bmsh_vstate212_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id212_bm_sstatus_isolation_r212_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id212_bm_sstatus_isolation_r212_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id212_bm_sstatus_isolation_r212_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id212_bm_sstatus_bm_scharge_request212_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id212_bm_sstatus_bm_scharge_request212_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id212_bm_sstatus_bm_scharge_request212_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id212_bm_sstatus_bm_skeep_warm_request212_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id212_bm_sstatus_bm_skeep_warm_request212_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id212_bm_sstatus_bm_skeep_warm_request212_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id212_bm_sstatus_bm_scharge_status212_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id212_bm_sstatus_bm_scharge_status212_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id212_bm_sstatus_bm_scharge_status212_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id212_bm_sstatus_bm_sdi_limp_request212_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id212_bm_sstatus_bm_sdi_limp_request212_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id212_bm_sstatus_bm_sdi_limp_request212_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id212_bm_sstatus_bm_sok_to_ship_by_air212_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id212_bm_sstatus_bm_sok_to_ship_by_air212_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id212_bm_sstatus_bm_sok_to_ship_by_air212_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id212_bm_sstatus_bm_sok_to_ship_by_land212_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id212_bm_sstatus_bm_sok_to_ship_by_land212_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id212_bm_sstatus_bm_sok_to_ship_by_land212_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id212_bm_sstatus_bm_scharge_power_available212_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id212_bm_sstatus_bm_scharge_power_available212_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id212_bm_sstatus_bm_scharge_power_available212_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id212_bm_sstatus_bm_scharge_retry_count212_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id212_bm_sstatus_bm_scharge_retry_count212_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id212_bm_sstatus_bm_scharge_retry_count212_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id212_bm_sstatus_bm_spcs_pwm_enabled212_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id212_bm_sstatus_bm_spcs_pwm_enabled212_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id212_bm_sstatus_bm_spcs_pwm_enabled212_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id212_bm_sstatus_bm_secu_log_upload_request212_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id212_bm_sstatus_bm_secu_log_upload_request212_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id212_bm_sstatus_bm_secu_log_upload_request212_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id212_bm_sstatus_min_batt_temp212_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id212_bm_sstatus_min_batt_temp212_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id212_bm_sstatus_min_batt_temp212_is_in_range(uint8_t value);

/**
 * Pack message ID352BMSenergy.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int model3_can_id352_bm_senergy_pack(
    uint8_t *dst_p,
    const struct model3_can_id352_bm_senergy_t *src_p,
    size_t size);

/**
 * Unpack message ID352BMSenergy.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int model3_can_id352_bm_senergy_unpack(
    struct model3_can_id352_bm_senergy_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id352_bm_senergy_bfull_k_wh_nom352_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id352_bm_senergy_bfull_k_wh_nom352_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id352_bm_senergy_bfull_k_wh_nom352_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id352_bm_senergy_bremaining_k_wh_nom352_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id352_bm_senergy_bremaining_k_wh_nom352_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id352_bm_senergy_bremaining_k_wh_nom352_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id352_bm_senergy_bexpectedremain_k_wh352_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id352_bm_senergy_bexpectedremain_k_wh352_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id352_bm_senergy_bexpectedremain_k_wh352_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id352_bm_senergy_bidealremain_k_wh352_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id352_bm_senergy_bidealremain_k_wh352_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id352_bm_senergy_bidealremain_k_wh352_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id352_bm_senergy_btochargecomplete_k_wh352_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id352_bm_senergy_btochargecomplete_k_wh352_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id352_bm_senergy_btochargecomplete_k_wh352_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id352_bm_senergy_bbuffer_k_wh352_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id352_bm_senergy_bbuffer_k_wh352_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id352_bm_senergy_bbuffer_k_wh352_is_in_range(uint8_t value);

/**
 * Pack message ID252PowerLimits.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int model3_can_id252_power_limits_pack(
    uint8_t *dst_p,
    const struct model3_can_id252_power_limits_t *src_p,
    size_t size);

/**
 * Unpack message ID252PowerLimits.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int model3_can_id252_power_limits_unpack(
    struct model3_can_id252_power_limits_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id252_power_limits_max_regen252_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id252_power_limits_max_regen252_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id252_power_limits_max_regen252_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id252_power_limits_max_discharge252_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id252_power_limits_max_discharge252_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id252_power_limits_max_discharge252_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id252_power_limits_max_heat_parked252_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id252_power_limits_max_heat_parked252_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id252_power_limits_max_heat_parked252_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id252_power_limits_hva_cpower_max252_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id252_power_limits_hva_cpower_max252_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id252_power_limits_hva_cpower_max252_is_in_range(uint16_t value);

/**
 * Pack message ID312BMSthermal.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int model3_can_id312_bm_sthermal_pack(
    uint8_t *dst_p,
    const struct model3_can_id312_bm_sthermal_t *src_p,
    size_t size);

/**
 * Unpack message ID312BMSthermal.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int model3_can_id312_bm_sthermal_unpack(
    struct model3_can_id312_bm_sthermal_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id312_bm_sthermal_bm_sdissipation312_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id312_bm_sthermal_bm_sdissipation312_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id312_bm_sthermal_bm_sdissipation312_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id312_bm_sthermal_bm_sflow_request312_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id312_bm_sthermal_bm_sflow_request312_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id312_bm_sthermal_bm_sflow_request312_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id312_bm_sthermal_bm_sinlet_active_cool_target312_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id312_bm_sthermal_bm_sinlet_active_cool_target312_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id312_bm_sthermal_bm_sinlet_active_cool_target312_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id312_bm_sthermal_bm_sinlet_passive_target312_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id312_bm_sthermal_bm_sinlet_passive_target312_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id312_bm_sthermal_bm_sinlet_passive_target312_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id312_bm_sthermal_bm_sinlet_active_heat_target312_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id312_bm_sthermal_bm_sinlet_active_heat_target312_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id312_bm_sthermal_bm_sinlet_active_heat_target312_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id312_bm_sthermal_bm_spcs_no_flow_request312_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id312_bm_sthermal_bm_spcs_no_flow_request312_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id312_bm_sthermal_bm_spcs_no_flow_request312_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id312_bm_sthermal_bm_sno_flow_request312_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id312_bm_sthermal_bm_sno_flow_request312_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id312_bm_sthermal_bm_sno_flow_request312_is_in_range(uint8_t value);

/**
 * Pack message ID292BMS_SOC.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int model3_can_id292_bms_soc_pack(
    uint8_t *dst_p,
    const struct model3_can_id292_bms_soc_t *src_p,
    size_t size);

/**
 * Unpack message ID292BMS_SOC.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int model3_can_id292_bms_soc_unpack(
    struct model3_can_id292_bms_soc_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id292_bms_soc_socui292_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id292_bms_soc_socui292_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id292_bms_soc_socui292_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id292_bms_soc_so_cmin292_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id292_bms_soc_so_cmin292_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id292_bms_soc_so_cmin292_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id292_bms_soc_so_cmax292_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id292_bms_soc_so_cmax292_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id292_bms_soc_so_cmax292_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id292_bms_soc_so_cave292_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id292_bms_soc_so_cave292_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id292_bms_soc_so_cave292_is_in_range(uint16_t value);

/**
 * Pack message ID257UIspeed.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int model3_can_id257_u_ispeed_pack(
    uint8_t *dst_p,
    const struct model3_can_id257_u_ispeed_t *src_p,
    size_t size);

/**
 * Unpack message ID257UIspeed.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int model3_can_id257_u_ispeed_unpack(
    struct model3_can_id257_u_ispeed_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id257_u_ispeed_u_ispeed_signed257_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id257_u_ispeed_u_ispeed_signed257_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id257_u_ispeed_u_ispeed_signed257_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id257_u_ispeed_u_ispeed_abs257_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id257_u_ispeed_u_ispeed_abs257_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id257_u_ispeed_u_ispeed_abs257_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id257_u_ispeed_u_ispeed_units257_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id257_u_ispeed_u_ispeed_units257_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id257_u_ispeed_u_ispeed_units257_is_in_range(uint8_t value);

/**
 * Pack message ID405VIN.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int model3_can_id405_vin_pack(
    uint8_t *dst_p,
    const struct model3_can_id405_vin_t *src_p,
    size_t size);

/**
 * Unpack message ID405VIN.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int model3_can_id405_vin_unpack(
    struct model3_can_id405_vin_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id405_vin_mux405_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id405_vin_mux405_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id405_vin_mux405_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint64_t model3_can_id405_vin_vinb405_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id405_vin_vinb405_decode(uint64_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id405_vin_vinb405_is_in_range(uint64_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint64_t model3_can_id405_vin_vinc405_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id405_vin_vinc405_decode(uint64_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id405_vin_vinc405_is_in_range(uint64_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint64_t model3_can_id405_vin_vina405_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id405_vin_vina405_decode(uint64_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id405_vin_vina405_is_in_range(uint64_t value);

/**
 * Pack message ID51EChgConnectorInfo.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int model3_can_id51_e_chg_connector_info_pack(
    uint8_t *dst_p,
    const struct model3_can_id51_e_chg_connector_info_t *src_p,
    size_t size);

/**
 * Unpack message ID51EChgConnectorInfo.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int model3_can_id51_e_chg_connector_info_unpack(
    struct model3_can_id51_e_chg_connector_info_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id51_e_chg_connector_info_mux51_e_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id51_e_chg_connector_info_mux51_e_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id51_e_chg_connector_info_mux51_e_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint64_t model3_can_id51_e_chg_connector_info_ch_gmodel_a51_e_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id51_e_chg_connector_info_ch_gmodel_a51_e_decode(uint64_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id51_e_chg_connector_info_ch_gmodel_a51_e_is_in_range(uint64_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint64_t model3_can_id51_e_chg_connector_info_ch_gmodel_b51_e_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id51_e_chg_connector_info_ch_gmodel_b51_e_decode(uint64_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id51_e_chg_connector_info_ch_gmodel_b51_e_is_in_range(uint64_t value);

/**
 * Pack message ID376FrontInverterTemps.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int model3_can_id376_front_inverter_temps_pack(
    uint8_t *dst_p,
    const struct model3_can_id376_front_inverter_temps_t *src_p,
    size_t size);

/**
 * Unpack message ID376FrontInverterTemps.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int model3_can_id376_front_inverter_temps_unpack(
    struct model3_can_id376_front_inverter_temps_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id376_front_inverter_temps_temp_inv_pcb376_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id376_front_inverter_temps_temp_inv_pcb376_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id376_front_inverter_temps_temp_inv_pcb376_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id376_front_inverter_temps_temp_inverter376_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id376_front_inverter_temps_temp_inverter376_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id376_front_inverter_temps_temp_inverter376_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id376_front_inverter_temps_temp_stator376_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id376_front_inverter_temps_temp_stator376_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id376_front_inverter_temps_temp_stator376_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id376_front_inverter_temps_temp_inv_capbank376_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id376_front_inverter_temps_temp_inv_capbank376_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id376_front_inverter_temps_temp_inv_capbank376_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id376_front_inverter_temps_temp_inv_heatsink376_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id376_front_inverter_temps_temp_inv_heatsink376_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id376_front_inverter_temps_temp_inv_heatsink376_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id376_front_inverter_temps_temp_pct_inverter376_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id376_front_inverter_temps_temp_pct_inverter376_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id376_front_inverter_temps_temp_pct_inverter376_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id376_front_inverter_temps_temp_pct_stator376_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id376_front_inverter_temps_temp_pct_stator376_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id376_front_inverter_temps_temp_pct_stator376_is_in_range(uint8_t value);

/**
 * Pack message ID315RearInverterTemps.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int model3_can_id315_rear_inverter_temps_pack(
    uint8_t *dst_p,
    const struct model3_can_id315_rear_inverter_temps_t *src_p,
    size_t size);

/**
 * Unpack message ID315RearInverterTemps.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int model3_can_id315_rear_inverter_temps_unpack(
    struct model3_can_id315_rear_inverter_temps_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id315_rear_inverter_temps_rear_temp_inv_pcb315_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id315_rear_inverter_temps_rear_temp_inv_pcb315_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id315_rear_inverter_temps_rear_temp_inv_pcb315_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id315_rear_inverter_temps_rear_temp_inverter315_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id315_rear_inverter_temps_rear_temp_inverter315_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id315_rear_inverter_temps_rear_temp_inverter315_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id315_rear_inverter_temps_rear_temp_stator315_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id315_rear_inverter_temps_rear_temp_stator315_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id315_rear_inverter_temps_rear_temp_stator315_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id315_rear_inverter_temps_rear_temp_inv_capbank315_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id315_rear_inverter_temps_rear_temp_inv_capbank315_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id315_rear_inverter_temps_rear_temp_inv_capbank315_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id315_rear_inverter_temps_rear_temp_inv_heatsink315_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id315_rear_inverter_temps_rear_temp_inv_heatsink315_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id315_rear_inverter_temps_rear_temp_inv_heatsink315_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id315_rear_inverter_temps_rear_temp_pct_inverter315_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id315_rear_inverter_temps_rear_temp_pct_inverter315_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id315_rear_inverter_temps_rear_temp_pct_inverter315_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id315_rear_inverter_temps_rear_temp_pct_stator315_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id315_rear_inverter_temps_rear_temp_pct_stator315_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id315_rear_inverter_temps_rear_temp_pct_stator315_is_in_range(uint8_t value);

/**
 * Pack message ID154RearTorqueOld.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int model3_can_id154_rear_torque_old_pack(
    uint8_t *dst_p,
    const struct model3_can_id154_rear_torque_old_t *src_p,
    size_t size);

/**
 * Unpack message ID154RearTorqueOld.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int model3_can_id154_rear_torque_old_unpack(
    struct model3_can_id154_rear_torque_old_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t model3_can_id154_rear_torque_old_raw_torque_rear154_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id154_rear_torque_old_raw_torque_rear154_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id154_rear_torque_old_raw_torque_rear154_is_in_range(int16_t value);

/**
 * Pack message ID3B6odometer.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int model3_can_id3_b6odometer_pack(
    uint8_t *dst_p,
    const struct model3_can_id3_b6odometer_t *src_p,
    size_t size);

/**
 * Unpack message ID3B6odometer.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int model3_can_id3_b6odometer_unpack(
    struct model3_can_id3_b6odometer_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t model3_can_id3_b6odometer_odometer3_b6_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id3_b6odometer_odometer3_b6_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id3_b6odometer_odometer3_b6_is_in_range(uint32_t value);

/**
 * Pack message ID266RearInverterPower.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int model3_can_id266_rear_inverter_power_pack(
    uint8_t *dst_p,
    const struct model3_can_id266_rear_inverter_power_t *src_p,
    size_t size);

/**
 * Unpack message ID266RearInverterPower.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int model3_can_id266_rear_inverter_power_unpack(
    struct model3_can_id266_rear_inverter_power_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t model3_can_id266_rear_inverter_power_rear_power266_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id266_rear_inverter_power_rear_power266_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id266_rear_inverter_power_rear_power266_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id266_rear_inverter_power_rear_power_dissipation266_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id266_rear_inverter_power_rear_power_dissipation266_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id266_rear_inverter_power_rear_power_dissipation266_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id266_rear_inverter_power_rear_heat_power266_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id266_rear_inverter_power_rear_heat_power266_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id266_rear_inverter_power_rear_heat_power266_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id266_rear_inverter_power_rear_heat_power_optimal266_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id266_rear_inverter_power_rear_heat_power_optimal266_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id266_rear_inverter_power_rear_heat_power_optimal266_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id266_rear_inverter_power_rear_heat_power_max266_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id266_rear_inverter_power_rear_heat_power_max266_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id266_rear_inverter_power_rear_heat_power_max266_is_in_range(uint16_t value);

/**
 * Pack message ID108RearDriveTorqueRPM.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int model3_can_id108_rear_drive_torque_rpm_pack(
    uint8_t *dst_p,
    const struct model3_can_id108_rear_drive_torque_rpm_t *src_p,
    size_t size);

/**
 * Unpack message ID108RearDriveTorqueRPM.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int model3_can_id108_rear_drive_torque_rpm_unpack(
    struct model3_can_id108_rear_drive_torque_rpm_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t model3_can_id108_rear_drive_torque_rpm_rear_torque_request108_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id108_rear_drive_torque_rpm_rear_torque_request108_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id108_rear_drive_torque_rpm_rear_torque_request108_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t model3_can_id108_rear_drive_torque_rpm_rear_torque_actual108_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id108_rear_drive_torque_rpm_rear_torque_actual108_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id108_rear_drive_torque_rpm_rear_torque_actual108_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t model3_can_id108_rear_drive_torque_rpm_rear_axle_rpm108_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id108_rear_drive_torque_rpm_rear_axle_rpm108_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id108_rear_drive_torque_rpm_rear_axle_rpm108_is_in_range(int16_t value);

/**
 * Pack message ID132HVBattAmpVolt.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int model3_can_id132_hv_batt_amp_volt_pack(
    uint8_t *dst_p,
    const struct model3_can_id132_hv_batt_amp_volt_t *src_p,
    size_t size);

/**
 * Unpack message ID132HVBattAmpVolt.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int model3_can_id132_hv_batt_amp_volt_unpack(
    struct model3_can_id132_hv_batt_amp_volt_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id132_hv_batt_amp_volt_batt_voltage132_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id132_hv_batt_amp_volt_batt_voltage132_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id132_hv_batt_amp_volt_batt_voltage132_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t model3_can_id132_hv_batt_amp_volt_smooth_batt_current132_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id132_hv_batt_amp_volt_smooth_batt_current132_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id132_hv_batt_amp_volt_smooth_batt_current132_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t model3_can_id132_hv_batt_amp_volt_raw_batt_current132_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id132_hv_batt_amp_volt_raw_batt_current132_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id132_hv_batt_amp_volt_raw_batt_current132_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id132_hv_batt_amp_volt_charge_hours_remaining132_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id132_hv_batt_amp_volt_charge_hours_remaining132_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id132_hv_batt_amp_volt_charge_hours_remaining132_is_in_range(uint16_t value);

/**
 * Pack message ID126.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int model3_can_id126_pack(
    uint8_t *dst_p,
    const struct model3_can_id126_t *src_p,
    size_t size);

/**
 * Unpack message ID126.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int model3_can_id126_unpack(
    struct model3_can_id126_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id126_test_byte0126_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id126_test_byte0126_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id126_test_byte0126_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id126_test_data126_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id126_test_data126_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id126_test_data126_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id126_demand126_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id126_demand126_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id126_demand126_is_in_range(uint16_t value);

/**
 * Pack message ID31FTPMSsensors.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int model3_can_id31_ftpm_ssensors_pack(
    uint8_t *dst_p,
    const struct model3_can_id31_ftpm_ssensors_t *src_p,
    size_t size);

/**
 * Unpack message ID31FTPMSsensors.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int model3_can_id31_ftpm_ssensors_unpack(
    struct model3_can_id31_ftpm_ssensors_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id31_ftpm_ssensors_tpmsf_lpressure31_f_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id31_ftpm_ssensors_tpmsf_lpressure31_f_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id31_ftpm_ssensors_tpmsf_lpressure31_f_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id31_ftpm_ssensors_tpmsf_ltemp31_f_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id31_ftpm_ssensors_tpmsf_ltemp31_f_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id31_ftpm_ssensors_tpmsf_ltemp31_f_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id31_ftpm_ssensors_tpmsf_rpressure31_f_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id31_ftpm_ssensors_tpmsf_rpressure31_f_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id31_ftpm_ssensors_tpmsf_rpressure31_f_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id31_ftpm_ssensors_tpmsf_rtemp31_f_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id31_ftpm_ssensors_tpmsf_rtemp31_f_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id31_ftpm_ssensors_tpmsf_rtemp31_f_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id31_ftpm_ssensors_tpmsr_lpressure31_f_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id31_ftpm_ssensors_tpmsr_lpressure31_f_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id31_ftpm_ssensors_tpmsr_lpressure31_f_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id31_ftpm_ssensors_tpmsr_ltemp31_f_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id31_ftpm_ssensors_tpmsr_ltemp31_f_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id31_ftpm_ssensors_tpmsr_ltemp31_f_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id31_ftpm_ssensors_tpmsr_rpressure31_f_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id31_ftpm_ssensors_tpmsr_rpressure31_f_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id31_ftpm_ssensors_tpmsr_rpressure31_f_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id31_ftpm_ssensors_tpmsr_rtemp31_f_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id31_ftpm_ssensors_tpmsr_rtemp31_f_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id31_ftpm_ssensors_tpmsr_rtemp31_f_is_in_range(uint8_t value);

/**
 * Pack message ID3FEbrakeTemps.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int model3_can_id3_f_ebrake_temps_pack(
    uint8_t *dst_p,
    const struct model3_can_id3_f_ebrake_temps_t *src_p,
    size_t size);

/**
 * Unpack message ID3FEbrakeTemps.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int model3_can_id3_f_ebrake_temps_unpack(
    struct model3_can_id3_f_ebrake_temps_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id3_f_ebrake_temps_brake_temp_fl3_fe_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id3_f_ebrake_temps_brake_temp_fl3_fe_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id3_f_ebrake_temps_brake_temp_fl3_fe_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id3_f_ebrake_temps_brake_temp_fr3_fe_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id3_f_ebrake_temps_brake_temp_fr3_fe_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id3_f_ebrake_temps_brake_temp_fr3_fe_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id3_f_ebrake_temps_brake_temp_rl3_fe_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id3_f_ebrake_temps_brake_temp_rl3_fe_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id3_f_ebrake_temps_brake_temp_rl3_fe_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id3_f_ebrake_temps_brake_temp_rr3_fe_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id3_f_ebrake_temps_brake_temp_rr3_fe_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id3_f_ebrake_temps_brake_temp_rr3_fe_is_in_range(uint16_t value);

/**
 * Pack message ID228EPBrightStatus.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int model3_can_id228_ep_bright_status_pack(
    uint8_t *dst_p,
    const struct model3_can_id228_ep_bright_status_t *src_p,
    size_t size);

/**
 * Unpack message ID228EPBrightStatus.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int model3_can_id228_ep_bright_status_unpack(
    struct model3_can_id228_ep_bright_status_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id228_ep_bright_status_epb_runit_status228_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id228_ep_bright_status_epb_runit_status228_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id228_ep_bright_status_epb_runit_status228_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id228_ep_bright_status_epb_runit_fault_status228_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id228_ep_bright_status_epb_runit_fault_status228_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id228_ep_bright_status_epb_runit_fault_status228_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id228_ep_bright_status_epb_rsummon_state228_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id228_ep_bright_status_epb_rsummon_state228_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id228_ep_bright_status_epb_rsummon_state228_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id228_ep_bright_status_epb_rdisconnected228_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id228_ep_bright_status_epb_rdisconnected228_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id228_ep_bright_status_epb_rdisconnected228_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id228_ep_bright_status_epb_rlockout_unlock_count228_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id228_ep_bright_status_epb_rlockout_unlock_count228_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id228_ep_bright_status_epb_rlockout_unlock_count228_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id228_ep_bright_status_epb_resm_caliper_request228_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id228_ep_bright_status_epb_resm_caliper_request228_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id228_ep_bright_status_epb_resm_caliper_request228_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id228_ep_bright_status_epb_rcsm_fault_reason228_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id228_ep_bright_status_epb_rcsm_fault_reason228_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id228_ep_bright_status_epb_rcsm_fault_reason228_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id228_ep_bright_status_epb_resm_operation_trigger228_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id228_ep_bright_status_epb_resm_operation_trigger228_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id228_ep_bright_status_epb_resm_operation_trigger228_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id228_ep_bright_status_epb_rsummon_fault_reason228_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id228_ep_bright_status_epb_rsummon_fault_reason228_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id228_ep_bright_status_epb_rsummon_fault_reason228_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id228_ep_bright_status_epb_rlocal_service_mode_active228_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id228_ep_bright_status_epb_rlocal_service_mode_active228_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id228_ep_bright_status_epb_rlocal_service_mode_active228_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id228_ep_bright_status_epbr12_v_filt228_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id228_ep_bright_status_epbr12_v_filt228_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id228_ep_bright_status_epbr12_v_filt228_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id228_ep_bright_status_epbrcdp_qualified228_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id228_ep_bright_status_epbrcdp_qualified228_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id228_ep_bright_status_epbrcdp_qualified228_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id228_ep_bright_status_epb_rinternal_cdp_request228_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id228_ep_bright_status_epb_rinternal_cdp_request228_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id228_ep_bright_status_epb_rinternal_cdp_request228_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id228_ep_bright_status_epb_rinternal_status_counter228_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id228_ep_bright_status_epb_rinternal_status_counter228_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id228_ep_bright_status_epb_rinternal_status_counter228_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id228_ep_bright_status_epb_rinternal_status_checksum228_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id228_ep_bright_status_epb_rinternal_status_checksum228_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id228_ep_bright_status_epb_rinternal_status_checksum228_is_in_range(uint8_t value);

/**
 * Pack message ID288EPBleftStatus.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int model3_can_id288_ep_bleft_status_pack(
    uint8_t *dst_p,
    const struct model3_can_id288_ep_bleft_status_t *src_p,
    size_t size);

/**
 * Unpack message ID288EPBleftStatus.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int model3_can_id288_ep_bleft_status_unpack(
    struct model3_can_id288_ep_bleft_status_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id288_ep_bleft_status_epb_lunit_status288_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id288_ep_bleft_status_epb_lunit_status288_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id288_ep_bleft_status_epb_lunit_status288_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id288_ep_bleft_status_epb_lunit_fault_status288_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id288_ep_bleft_status_epb_lunit_fault_status288_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id288_ep_bleft_status_epb_lunit_fault_status288_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id288_ep_bleft_status_epb_lsummon_state288_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id288_ep_bleft_status_epb_lsummon_state288_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id288_ep_bleft_status_epb_lsummon_state288_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id288_ep_bleft_status_epb_ldisconnected288_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id288_ep_bleft_status_epb_ldisconnected288_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id288_ep_bleft_status_epb_ldisconnected288_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id288_ep_bleft_status_epb_llockout_unlock_count288_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id288_ep_bleft_status_epb_llockout_unlock_count288_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id288_ep_bleft_status_epb_llockout_unlock_count288_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id288_ep_bleft_status_epb_lesm_caliper_request288_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id288_ep_bleft_status_epb_lesm_caliper_request288_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id288_ep_bleft_status_epb_lesm_caliper_request288_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id288_ep_bleft_status_epb_lcsm_fault_reason288_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id288_ep_bleft_status_epb_lcsm_fault_reason288_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id288_ep_bleft_status_epb_lcsm_fault_reason288_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id288_ep_bleft_status_epb_lesm_operation_trigger288_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id288_ep_bleft_status_epb_lesm_operation_trigger288_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id288_ep_bleft_status_epb_lesm_operation_trigger288_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id288_ep_bleft_status_epb_lsummon_fault_reason288_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id288_ep_bleft_status_epb_lsummon_fault_reason288_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id288_ep_bleft_status_epb_lsummon_fault_reason288_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id288_ep_bleft_status_epb_llocal_service_mode_active288_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id288_ep_bleft_status_epb_llocal_service_mode_active288_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id288_ep_bleft_status_epb_llocal_service_mode_active288_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id288_ep_bleft_status_epbl12_v_filt288_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id288_ep_bleft_status_epbl12_v_filt288_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id288_ep_bleft_status_epbl12_v_filt288_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id288_ep_bleft_status_epblcdp_qualified288_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id288_ep_bleft_status_epblcdp_qualified288_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id288_ep_bleft_status_epblcdp_qualified288_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id288_ep_bleft_status_epb_linternal_cdp_request288_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id288_ep_bleft_status_epb_linternal_cdp_request288_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id288_ep_bleft_status_epb_linternal_cdp_request288_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id288_ep_bleft_status_epb_linternal_status_counter288_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id288_ep_bleft_status_epb_linternal_status_counter288_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id288_ep_bleft_status_epb_linternal_status_counter288_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id288_ep_bleft_status_epb_linternal_status_checksum288_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id288_ep_bleft_status_epb_linternal_status_checksum288_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id288_ep_bleft_status_epb_linternal_status_checksum288_is_in_range(uint8_t value);

/**
 * Pack message ID7FFcarConfig.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int model3_can_id7_f_fcar_config_pack(
    uint8_t *dst_p,
    const struct model3_can_id7_f_fcar_config_t *src_p,
    size_t size);

/**
 * Unpack message ID7FFcarConfig.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int model3_can_id7_f_fcar_config_unpack(
    struct model3_can_id7_f_fcar_config_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id7_f_fcar_config_cf_gmuxindex7_ff_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id7_f_fcar_config_cf_gmuxindex7_ff_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id7_f_fcar_config_cf_gmuxindex7_ff_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id7_f_fcar_config_cf_gair_suspension7_ff_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id7_f_fcar_config_cf_gair_suspension7_ff_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id7_f_fcar_config_cf_gair_suspension7_ff_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id7_f_fcar_config_cf_gheated_wipers7_ff_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id7_f_fcar_config_cf_gheated_wipers7_ff_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id7_f_fcar_config_cf_gheated_wipers7_ff_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id7_f_fcar_config_cf_gepas_type7_ff_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id7_f_fcar_config_cf_gepas_type7_ff_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id7_f_fcar_config_cf_gepas_type7_ff_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id7_f_fcar_config_cf_gfront_seat_heaters7_ff_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id7_f_fcar_config_cf_gfront_seat_heaters7_ff_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id7_f_fcar_config_cf_gfront_seat_heaters7_ff_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id7_f_fcar_config_cf_gdrivetrain_type7_ff_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id7_f_fcar_config_cf_gdrivetrain_type7_ff_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id7_f_fcar_config_cf_gdrivetrain_type7_ff_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id7_f_fcar_config_cf_grear_seat_heaters7_ff_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id7_f_fcar_config_cf_grear_seat_heaters7_ff_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id7_f_fcar_config_cf_grear_seat_heaters7_ff_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id7_f_fcar_config_cf_gright_hand_drive7_ff_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id7_f_fcar_config_cf_gright_hand_drive7_ff_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id7_f_fcar_config_cf_gright_hand_drive7_ff_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id7_f_fcar_config_cf_gpack_energy7_ff_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id7_f_fcar_config_cf_gpack_energy7_ff_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id7_f_fcar_config_cf_gpack_energy7_ff_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id7_f_fcar_config_cf_gbrake_hw_type7_ff_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id7_f_fcar_config_cf_gbrake_hw_type7_ff_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id7_f_fcar_config_cf_gbrake_hw_type7_ff_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id7_f_fcar_config_cf_ghomelink_type7_ff_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id7_f_fcar_config_cf_ghomelink_type7_ff_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id7_f_fcar_config_cf_ghomelink_type7_ff_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id7_f_fcar_config_cf_gvdc_type7_ff_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id7_f_fcar_config_cf_gvdc_type7_ff_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id7_f_fcar_config_cf_gvdc_type7_ff_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id7_f_fcar_config_cf_gxcp_ibst7_ff_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id7_f_fcar_config_cf_gxcp_ibst7_ff_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id7_f_fcar_config_cf_gxcp_ibst7_ff_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id7_f_fcar_config_cf_gcountry7_ff_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id7_f_fcar_config_cf_gcountry7_ff_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id7_f_fcar_config_cf_gcountry7_ff_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id7_f_fcar_config_cf_gxcp_esp7_ff_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id7_f_fcar_config_cf_gxcp_esp7_ff_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id7_f_fcar_config_cf_gxcp_esp7_ff_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id7_f_fcar_config_cf_gmemory_mirrors7_ff_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id7_f_fcar_config_cf_gmemory_mirrors7_ff_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id7_f_fcar_config_cf_gmemory_mirrors7_ff_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id7_f_fcar_config_cf_gpower_steering_column7_ff_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id7_f_fcar_config_cf_gpower_steering_column7_ff_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id7_f_fcar_config_cf_gpower_steering_column7_ff_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id7_f_fcar_config_cf_ginterior_lighting7_ff_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id7_f_fcar_config_cf_ginterior_lighting7_ff_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id7_f_fcar_config_cf_ginterior_lighting7_ff_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id7_f_fcar_config_cf_gfront_fog_lamps7_ff_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id7_f_fcar_config_cf_gfront_fog_lamps7_ff_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id7_f_fcar_config_cf_gfront_fog_lamps7_ff_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id7_f_fcar_config_cf_gheadlamps7_ff_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id7_f_fcar_config_cf_gheadlamps7_ff_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id7_f_fcar_config_cf_gheadlamps7_ff_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id7_f_fcar_config_cf_gaudio_type7_ff_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id7_f_fcar_config_cf_gaudio_type7_ff_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id7_f_fcar_config_cf_gaudio_type7_ff_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id7_f_fcar_config_cf_glumbar_ecu_type7_ff_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id7_f_fcar_config_cf_glumbar_ecu_type7_ff_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id7_f_fcar_config_cf_glumbar_ecu_type7_ff_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id7_f_fcar_config_cf_gibst_wake_type7_ff_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id7_f_fcar_config_cf_gibst_wake_type7_ff_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id7_f_fcar_config_cf_gibst_wake_type7_ff_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id7_f_fcar_config_cf_gfront_seat_type7_ff_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id7_f_fcar_config_cf_gfront_seat_type7_ff_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id7_f_fcar_config_cf_gfront_seat_type7_ff_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id7_f_fcar_config_cf_gaux_park_lamps7_ff_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id7_f_fcar_config_cf_gaux_park_lamps7_ff_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id7_f_fcar_config_cf_gaux_park_lamps7_ff_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id7_f_fcar_config_cf_gpedestrian_warning_sound7_ff_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id7_f_fcar_config_cf_gpedestrian_warning_sound7_ff_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id7_f_fcar_config_cf_gpedestrian_warning_sound7_ff_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id7_f_fcar_config_cf_ghvac_quiet_snorkel_type7_ff_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id7_f_fcar_config_cf_ghvac_quiet_snorkel_type7_ff_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id7_f_fcar_config_cf_ghvac_quiet_snorkel_type7_ff_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id7_f_fcar_config_cf_ghvac_panel_vane_type7_ff_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id7_f_fcar_config_cf_ghvac_panel_vane_type7_ff_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id7_f_fcar_config_cf_ghvac_panel_vane_type7_ff_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id7_f_fcar_config_cfg_cabin_blower_ctrl_type7_ff_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id7_f_fcar_config_cfg_cabin_blower_ctrl_type7_ff_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id7_f_fcar_config_cfg_cabin_blower_ctrl_type7_ff_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id7_f_fcar_config_cf_gperformance_package7_ff_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id7_f_fcar_config_cf_gperformance_package7_ff_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id7_f_fcar_config_cf_gperformance_package7_ff_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id7_f_fcar_config_cf_ge_buck_config7_ff_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id7_f_fcar_config_cf_ge_buck_config7_ff_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id7_f_fcar_config_cf_ge_buck_config7_ff_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id7_f_fcar_config_cf_gwindshield_type7_ff_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id7_f_fcar_config_cf_gwindshield_type7_ff_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id7_f_fcar_config_cf_gwindshield_type7_ff_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id7_f_fcar_config_cf_gactive_high_beam7_ff_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id7_f_fcar_config_cf_gactive_high_beam7_ff_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id7_f_fcar_config_cf_gactive_high_beam7_ff_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id7_f_fcar_config_cf_gairbag_cutoff_switch7_ff_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id7_f_fcar_config_cf_gairbag_cutoff_switch7_ff_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id7_f_fcar_config_cf_gairbag_cutoff_switch7_ff_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id7_f_fcar_config_cf_gintrusion_sensor_type7_ff_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id7_f_fcar_config_cf_gintrusion_sensor_type7_ff_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id7_f_fcar_config_cf_gintrusion_sensor_type7_ff_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id7_f_fcar_config_cf_gspoiler_type7_ff_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id7_f_fcar_config_cf_gspoiler_type7_ff_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id7_f_fcar_config_cf_gspoiler_type7_ff_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id7_f_fcar_config_cf_grear_glass_type7_ff_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id7_f_fcar_config_cf_grear_glass_type7_ff_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id7_f_fcar_config_cf_grear_glass_type7_ff_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id7_f_fcar_config_cf_grear_fog_lamps7_ff_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id7_f_fcar_config_cf_grear_fog_lamps7_ff_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id7_f_fcar_config_cf_grear_fog_lamps7_ff_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id7_f_fcar_config_cf_groof_type7_ff_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id7_f_fcar_config_cf_groof_type7_ff_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id7_f_fcar_config_cf_groof_type7_ff_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id7_f_fcar_config_cf_gautopilot7_ff_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id7_f_fcar_config_cf_gautopilot7_ff_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id7_f_fcar_config_cf_gautopilot7_ff_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id7_f_fcar_config_cf_gsupercharging_access7_ff_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id7_f_fcar_config_cf_gsupercharging_access7_ff_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id7_f_fcar_config_cf_gsupercharging_access7_ff_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id7_f_fcar_config_cf_gwheel_type7_ff_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id7_f_fcar_config_cf_gwheel_type7_ff_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id7_f_fcar_config_cf_gwheel_type7_ff_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id7_f_fcar_config_cf_gexterior_color7_ff_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id7_f_fcar_config_cf_gexterior_color7_ff_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id7_f_fcar_config_cf_gexterior_color7_ff_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id7_f_fcar_config_cf_gnumber_hvil_nodes7_ff_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id7_f_fcar_config_cf_gnumber_hvil_nodes7_ff_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id7_f_fcar_config_cf_gnumber_hvil_nodes7_ff_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id7_f_fcar_config_cf_grestraints_hardware_type7_ff_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id7_f_fcar_config_cf_grestraints_hardware_type7_ff_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id7_f_fcar_config_cf_grestraints_hardware_type7_ff_is_in_range(uint8_t value);

/**
 * Pack message ID332BattCellMinMax.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int model3_can_id332_batt_cell_min_max_pack(
    uint8_t *dst_p,
    const struct model3_can_id332_batt_cell_min_max_t *src_p,
    size_t size);

/**
 * Unpack message ID332BattCellMinMax.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int model3_can_id332_batt_cell_min_max_unpack(
    struct model3_can_id332_batt_cell_min_max_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id332_batt_cell_min_max_batt_cell_multiplexer332_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id332_batt_cell_min_max_batt_cell_multiplexer332_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id332_batt_cell_min_max_batt_cell_multiplexer332_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id332_batt_cell_min_max_batt_cell_temp_max_num332_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id332_batt_cell_min_max_batt_cell_temp_max_num332_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id332_batt_cell_min_max_batt_cell_temp_max_num332_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id332_batt_cell_min_max_batt_cell_brick_voltage_max332_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id332_batt_cell_min_max_batt_cell_brick_voltage_max332_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id332_batt_cell_min_max_batt_cell_brick_voltage_max332_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id332_batt_cell_min_max_batt_cell_temp_min_num332_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id332_batt_cell_min_max_batt_cell_temp_min_num332_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id332_batt_cell_min_max_batt_cell_temp_min_num332_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id332_batt_cell_min_max_batt_cell_temp_max332_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id332_batt_cell_min_max_batt_cell_temp_max332_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id332_batt_cell_min_max_batt_cell_temp_max332_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id332_batt_cell_min_max_batt_cell_brick_voltage_min332_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id332_batt_cell_min_max_batt_cell_brick_voltage_min332_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id332_batt_cell_min_max_batt_cell_brick_voltage_min332_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id332_batt_cell_min_max_batt_cell_temp_min332_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id332_batt_cell_min_max_batt_cell_temp_min332_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id332_batt_cell_min_max_batt_cell_temp_min332_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id332_batt_cell_min_max_batt_cell_model_t_max332_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id332_batt_cell_min_max_batt_cell_model_t_max332_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id332_batt_cell_min_max_batt_cell_model_t_max332_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id332_batt_cell_min_max_batt_cell_brick_voltage_max_num332_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id332_batt_cell_min_max_batt_cell_brick_voltage_max_num332_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id332_batt_cell_min_max_batt_cell_brick_voltage_max_num332_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id332_batt_cell_min_max_batt_cell_model_t_min332_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id332_batt_cell_min_max_batt_cell_model_t_min332_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id332_batt_cell_min_max_batt_cell_model_t_min332_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id332_batt_cell_min_max_batt_cell_brick_voltage_min_num332_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id332_batt_cell_min_max_batt_cell_brick_voltage_min_num332_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id332_batt_cell_min_max_batt_cell_brick_voltage_min_num332_is_in_range(uint8_t value);

/**
 * Pack message ID401CellVoltages.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int model3_can_id401_cell_voltages_pack(
    uint8_t *dst_p,
    const struct model3_can_id401_cell_voltages_t *src_p,
    size_t size);

/**
 * Unpack message ID401CellVoltages.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int model3_can_id401_cell_voltages_unpack(
    struct model3_can_id401_cell_voltages_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id401_cell_voltages_multiplex_selector_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id401_cell_voltages_multiplex_selector_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id401_cell_voltages_multiplex_selector_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id401_cell_voltages_status_flags_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id401_cell_voltages_status_flags_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id401_cell_voltages_status_flags_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id401_cell_voltages_cell0_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id401_cell_voltages_cell0_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id401_cell_voltages_cell0_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id401_cell_voltages_cell3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id401_cell_voltages_cell3_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id401_cell_voltages_cell3_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id401_cell_voltages_cell6_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id401_cell_voltages_cell6_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id401_cell_voltages_cell6_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id401_cell_voltages_cell9_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id401_cell_voltages_cell9_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id401_cell_voltages_cell9_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id401_cell_voltages_cell12_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id401_cell_voltages_cell12_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id401_cell_voltages_cell12_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id401_cell_voltages_cell15_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id401_cell_voltages_cell15_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id401_cell_voltages_cell15_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id401_cell_voltages_cell18_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id401_cell_voltages_cell18_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id401_cell_voltages_cell18_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id401_cell_voltages_cell21_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id401_cell_voltages_cell21_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id401_cell_voltages_cell21_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id401_cell_voltages_cell24_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id401_cell_voltages_cell24_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id401_cell_voltages_cell24_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id401_cell_voltages_cell27_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id401_cell_voltages_cell27_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id401_cell_voltages_cell27_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id401_cell_voltages_cell30_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id401_cell_voltages_cell30_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id401_cell_voltages_cell30_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id401_cell_voltages_cell34_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id401_cell_voltages_cell34_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id401_cell_voltages_cell34_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id401_cell_voltages_cell36_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id401_cell_voltages_cell36_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id401_cell_voltages_cell36_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id401_cell_voltages_cell39_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id401_cell_voltages_cell39_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id401_cell_voltages_cell39_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id401_cell_voltages_cell42_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id401_cell_voltages_cell42_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id401_cell_voltages_cell42_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id401_cell_voltages_cell45_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id401_cell_voltages_cell45_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id401_cell_voltages_cell45_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id401_cell_voltages_cell48_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id401_cell_voltages_cell48_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id401_cell_voltages_cell48_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id401_cell_voltages_cell51_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id401_cell_voltages_cell51_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id401_cell_voltages_cell51_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id401_cell_voltages_cell54_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id401_cell_voltages_cell54_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id401_cell_voltages_cell54_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id401_cell_voltages_cell57_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id401_cell_voltages_cell57_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id401_cell_voltages_cell57_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id401_cell_voltages_cell60_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id401_cell_voltages_cell60_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id401_cell_voltages_cell60_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id401_cell_voltages_cell63_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id401_cell_voltages_cell63_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id401_cell_voltages_cell63_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id401_cell_voltages_cell66_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id401_cell_voltages_cell66_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id401_cell_voltages_cell66_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id401_cell_voltages_cell69_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id401_cell_voltages_cell69_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id401_cell_voltages_cell69_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id401_cell_voltages_cell72_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id401_cell_voltages_cell72_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id401_cell_voltages_cell72_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id401_cell_voltages_cell75_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id401_cell_voltages_cell75_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id401_cell_voltages_cell75_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id401_cell_voltages_cell78_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id401_cell_voltages_cell78_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id401_cell_voltages_cell78_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id401_cell_voltages_cell81_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id401_cell_voltages_cell81_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id401_cell_voltages_cell81_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id401_cell_voltages_cell84_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id401_cell_voltages_cell84_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id401_cell_voltages_cell84_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id401_cell_voltages_cell87_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id401_cell_voltages_cell87_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id401_cell_voltages_cell87_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id401_cell_voltages_cell90_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id401_cell_voltages_cell90_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id401_cell_voltages_cell90_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id401_cell_voltages_cell93_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id401_cell_voltages_cell93_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id401_cell_voltages_cell93_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id401_cell_voltages_cell96_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id401_cell_voltages_cell96_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id401_cell_voltages_cell96_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id401_cell_voltages_cell99_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id401_cell_voltages_cell99_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id401_cell_voltages_cell99_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id401_cell_voltages_cell102_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id401_cell_voltages_cell102_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id401_cell_voltages_cell102_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id401_cell_voltages_cell105_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id401_cell_voltages_cell105_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id401_cell_voltages_cell105_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id401_cell_voltages_cell1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id401_cell_voltages_cell1_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id401_cell_voltages_cell1_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id401_cell_voltages_cell4_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id401_cell_voltages_cell4_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id401_cell_voltages_cell4_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id401_cell_voltages_cell7_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id401_cell_voltages_cell7_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id401_cell_voltages_cell7_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id401_cell_voltages_cell10_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id401_cell_voltages_cell10_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id401_cell_voltages_cell10_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id401_cell_voltages_cell13_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id401_cell_voltages_cell13_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id401_cell_voltages_cell13_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id401_cell_voltages_cell16_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id401_cell_voltages_cell16_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id401_cell_voltages_cell16_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id401_cell_voltages_cell19_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id401_cell_voltages_cell19_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id401_cell_voltages_cell19_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id401_cell_voltages_cell22_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id401_cell_voltages_cell22_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id401_cell_voltages_cell22_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id401_cell_voltages_cell25_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id401_cell_voltages_cell25_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id401_cell_voltages_cell25_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id401_cell_voltages_cell28_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id401_cell_voltages_cell28_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id401_cell_voltages_cell28_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id401_cell_voltages_cell31_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id401_cell_voltages_cell31_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id401_cell_voltages_cell31_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id401_cell_voltages_cell33_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id401_cell_voltages_cell33_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id401_cell_voltages_cell33_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id401_cell_voltages_cell37_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id401_cell_voltages_cell37_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id401_cell_voltages_cell37_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id401_cell_voltages_cell40_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id401_cell_voltages_cell40_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id401_cell_voltages_cell40_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id401_cell_voltages_cell43_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id401_cell_voltages_cell43_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id401_cell_voltages_cell43_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id401_cell_voltages_cell46_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id401_cell_voltages_cell46_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id401_cell_voltages_cell46_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id401_cell_voltages_cell49_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id401_cell_voltages_cell49_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id401_cell_voltages_cell49_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id401_cell_voltages_cell52_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id401_cell_voltages_cell52_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id401_cell_voltages_cell52_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id401_cell_voltages_cell55_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id401_cell_voltages_cell55_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id401_cell_voltages_cell55_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id401_cell_voltages_cell58_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id401_cell_voltages_cell58_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id401_cell_voltages_cell58_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id401_cell_voltages_cell61_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id401_cell_voltages_cell61_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id401_cell_voltages_cell61_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id401_cell_voltages_cell64_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id401_cell_voltages_cell64_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id401_cell_voltages_cell64_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id401_cell_voltages_cell67_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id401_cell_voltages_cell67_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id401_cell_voltages_cell67_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id401_cell_voltages_cell70_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id401_cell_voltages_cell70_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id401_cell_voltages_cell70_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id401_cell_voltages_cell73_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id401_cell_voltages_cell73_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id401_cell_voltages_cell73_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id401_cell_voltages_cell76_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id401_cell_voltages_cell76_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id401_cell_voltages_cell76_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id401_cell_voltages_cell79_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id401_cell_voltages_cell79_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id401_cell_voltages_cell79_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id401_cell_voltages_cell82_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id401_cell_voltages_cell82_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id401_cell_voltages_cell82_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id401_cell_voltages_cell85_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id401_cell_voltages_cell85_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id401_cell_voltages_cell85_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id401_cell_voltages_cell88_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id401_cell_voltages_cell88_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id401_cell_voltages_cell88_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id401_cell_voltages_cell91_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id401_cell_voltages_cell91_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id401_cell_voltages_cell91_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id401_cell_voltages_cell94_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id401_cell_voltages_cell94_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id401_cell_voltages_cell94_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id401_cell_voltages_cell97_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id401_cell_voltages_cell97_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id401_cell_voltages_cell97_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id401_cell_voltages_cell100_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id401_cell_voltages_cell100_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id401_cell_voltages_cell100_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id401_cell_voltages_cell103_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id401_cell_voltages_cell103_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id401_cell_voltages_cell103_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id401_cell_voltages_cell106_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id401_cell_voltages_cell106_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id401_cell_voltages_cell106_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id401_cell_voltages_cell2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id401_cell_voltages_cell2_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id401_cell_voltages_cell2_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id401_cell_voltages_cell5_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id401_cell_voltages_cell5_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id401_cell_voltages_cell5_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id401_cell_voltages_cell8_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id401_cell_voltages_cell8_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id401_cell_voltages_cell8_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id401_cell_voltages_cell11_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id401_cell_voltages_cell11_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id401_cell_voltages_cell11_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id401_cell_voltages_cell14_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id401_cell_voltages_cell14_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id401_cell_voltages_cell14_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id401_cell_voltages_cell17_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id401_cell_voltages_cell17_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id401_cell_voltages_cell17_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id401_cell_voltages_cell20_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id401_cell_voltages_cell20_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id401_cell_voltages_cell20_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id401_cell_voltages_cell23_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id401_cell_voltages_cell23_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id401_cell_voltages_cell23_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id401_cell_voltages_cell26_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id401_cell_voltages_cell26_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id401_cell_voltages_cell26_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id401_cell_voltages_cell29_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id401_cell_voltages_cell29_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id401_cell_voltages_cell29_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id401_cell_voltages_cell32_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id401_cell_voltages_cell32_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id401_cell_voltages_cell32_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id401_cell_voltages_cell35_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id401_cell_voltages_cell35_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id401_cell_voltages_cell35_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id401_cell_voltages_cell38_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id401_cell_voltages_cell38_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id401_cell_voltages_cell38_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id401_cell_voltages_cell41_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id401_cell_voltages_cell41_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id401_cell_voltages_cell41_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id401_cell_voltages_cell44_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id401_cell_voltages_cell44_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id401_cell_voltages_cell44_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id401_cell_voltages_cell47_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id401_cell_voltages_cell47_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id401_cell_voltages_cell47_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id401_cell_voltages_cell50_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id401_cell_voltages_cell50_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id401_cell_voltages_cell50_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id401_cell_voltages_cell53_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id401_cell_voltages_cell53_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id401_cell_voltages_cell53_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id401_cell_voltages_cell56_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id401_cell_voltages_cell56_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id401_cell_voltages_cell56_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id401_cell_voltages_cell59_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id401_cell_voltages_cell59_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id401_cell_voltages_cell59_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id401_cell_voltages_cell62_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id401_cell_voltages_cell62_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id401_cell_voltages_cell62_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id401_cell_voltages_cell65_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id401_cell_voltages_cell65_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id401_cell_voltages_cell65_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id401_cell_voltages_cell68_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id401_cell_voltages_cell68_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id401_cell_voltages_cell68_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id401_cell_voltages_cell71_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id401_cell_voltages_cell71_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id401_cell_voltages_cell71_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id401_cell_voltages_cell74_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id401_cell_voltages_cell74_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id401_cell_voltages_cell74_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id401_cell_voltages_cell77_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id401_cell_voltages_cell77_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id401_cell_voltages_cell77_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id401_cell_voltages_cell80_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id401_cell_voltages_cell80_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id401_cell_voltages_cell80_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id401_cell_voltages_cell83_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id401_cell_voltages_cell83_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id401_cell_voltages_cell83_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id401_cell_voltages_cell86_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id401_cell_voltages_cell86_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id401_cell_voltages_cell86_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id401_cell_voltages_cell89_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id401_cell_voltages_cell89_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id401_cell_voltages_cell89_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id401_cell_voltages_cell92_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id401_cell_voltages_cell92_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id401_cell_voltages_cell92_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id401_cell_voltages_cell95_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id401_cell_voltages_cell95_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id401_cell_voltages_cell95_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id401_cell_voltages_cell98_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id401_cell_voltages_cell98_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id401_cell_voltages_cell98_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id401_cell_voltages_cell101_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id401_cell_voltages_cell101_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id401_cell_voltages_cell101_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id401_cell_voltages_cell104_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id401_cell_voltages_cell104_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id401_cell_voltages_cell104_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id401_cell_voltages_cell107_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id401_cell_voltages_cell107_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id401_cell_voltages_cell107_is_in_range(uint16_t value);

#endif
