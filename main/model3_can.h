/**
 * The MIT License (MIT)
 *
 * Copyright (c) 2018-2019 Erik Moqvist
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use, copy,
 * modify, merge, publish, distribute, sublicense, and/or sell copies
 * of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

/**
 * This file was generated by cantools version 33.1.1 Wed Feb 19 19:10:04 2020.
 */

#ifndef MODEL3_CAN_H
#define MODEL3_CAN_H

#ifdef __cplusplus
extern "C" {
#endif

#include <stdint.h>
#include <stdbool.h>
#include <stddef.h>

#ifndef EINVAL
#    define EINVAL 22
#endif

/* Frame ids. */
#define MODEL3_CAN_ID00_CUI_STATUS_FRAME_ID (0x0cu)
#define MODEL3_CAN_ID082_UI_TRIP_PLANNING_FRAME_ID (0x82u)
#define MODEL3_CAN_ID102_VCLEFT_DOOR_STATUS_FRAME_ID (0x102u)
#define MODEL3_CAN_ID103_VCRIGHT_DOOR_STATUS_FRAME_ID (0x103u)
#define MODEL3_CAN_ID123_UI_ALERT_MATRIX1_FRAME_ID (0x123u)
#define MODEL3_CAN_ID247_DAS_AUTOPILOT_DEBUG_FRAME_ID (0x247u)
#define MODEL3_CAN_ID2_B4_PCS_DCDC_RAIL_STATUS_FRAME_ID (0x2b4u)
#define MODEL3_CAN_ID3_F5_VCFRONT_LIGHTING_FRAME_ID (0x3f5u)
#define MODEL3_CAN_ID3_E9_DAS_BODY_CONTROLS_FRAME_ID (0x3e9u)
#define MODEL3_CAN_ID267_DI_VEHICLE_ESTIMATES_FRAME_ID (0x267u)
#define MODEL3_CAN_ID335_REAR_D_IINFO_FRAME_ID (0x335u)
#define MODEL3_CAN_ID656_FRONT_D_IINFO_FRAME_ID (0x656u)
#define MODEL3_CAN_ID300_BMS_INFO_FRAME_ID (0x300u)
#define MODEL3_CAN_ID212_BMS_STATUS_FRAME_ID (0x212u)
#define MODEL3_CAN_ID3_B2_BMS_LOG2_FRAME_ID (0x3b2u)
#define MODEL3_CAN_ID320_BMS_ALERT_MATRIX_FRAME_ID (0x320u)
#define MODEL3_CAN_ID31_CCC_CHG_STATUS_FRAME_ID (0x31cu)
#define MODEL3_CAN_ID31_DCC_CHG_STATUS2_FRAME_ID (0x31du)
#define MODEL3_CAN_ID32_CCC_LOG_DATA_FRAME_ID (0x32cu)
#define MODEL3_CAN_ID23_DCP_CHARGE_STATUS_FRAME_ID (0x23du)
#define MODEL3_CAN_ID43_DCP_CHARGE_STATUS_LOG_FRAME_ID (0x43du)
#define MODEL3_CAN_ID21_DCP_EVSE_STATUS_FRAME_ID (0x21du)
#define MODEL3_CAN_ID75_DCP_SENSOR_DATA_FRAME_ID (0x75du)
#define MODEL3_CAN_ID287_PT_CCABIN_HEAT_SENSOR_STATUS_FRAME_ID (0x287u)
#define MODEL3_CAN_ID333_UI_CHARGE_REQUEST_FRAME_ID (0x333u)
#define MODEL3_CAN_ID334_UI_POWERTRAIN_CONTROL_FRAME_ID (0x334u)
#define MODEL3_CAN_ID33_AUI_RANGE_SOC_FRAME_ID (0x33au)
#define MODEL3_CAN_ID241_VCFRONT_COOLANT_FRAME_ID (0x241u)
#define MODEL3_CAN_ID2_C4_PCS_LOGGING_FRAME_ID (0x2c4u)
#define MODEL3_CAN_ID3_BBUI_POWER_FRAME_ID (0x3bbu)
#define MODEL3_CAN_ID5_D5_REAR_TBD_FRAME_ID (0x5d5u)
#define MODEL3_CAN_ID556_FRONT_TBD_FRAME_ID (0x556u)
#define MODEL3_CAN_ID557_FRONT_THERMAL_CONTROL_FRAME_ID (0x557u)
#define MODEL3_CAN_ID5_D7_REAR_THERMAL_CONTROL_FRAME_ID (0x5d7u)
#define MODEL3_CAN_ID7_D5_DIR_DEBUG_FRAME_ID (0x7d5u)
#define MODEL3_CAN_ID757_DIF_DEBUG_FRAME_ID (0x757u)
#define MODEL3_CAN_ID2_B6_DI_CHASSIS_CONTROL_STATUS_FRAME_ID (0x2b6u)
#define MODEL3_CAN_ID284_U_IVEHICLE_MODES_FRAME_ID (0x284u)
#define MODEL3_CAN_ID221_VCFRONT_LV_POWER_STATE_FRAME_ID (0x221u)
#define MODEL3_CAN_ID2_F1_VCFRONT_E_FUSE_DEBUG_STATUS_FRAME_ID (0x2f1u)
#define MODEL3_CAN_ID243_VC_RIGHTHVAC_FEEDBACK_FRAME_ID (0x243u)
#define MODEL3_CAN_ID20_CVC_RIGHTHVAC_REQUEST_FRAME_ID (0x20cu)
#define MODEL3_CAN_ID2_B3_VC_RIGHTLOGGING1_HZ_FRAME_ID (0x2b3u)
#define MODEL3_CAN_ID2_C1_VC_FRONT10HZ_FRAME_ID (0x2c1u)
#define MODEL3_CAN_ID2_E1_VCFRONT_STATUS_FRAME_ID (0x2e1u)
#define MODEL3_CAN_ID381_VCFRONT_LOGGING1_HZ_FRAME_ID (0x381u)
#define MODEL3_CAN_ID318_SYSTEM_TIME_UTC_FRAME_ID (0x318u)
#define MODEL3_CAN_ID528_UNIX_TIME_FRAME_ID (0x528u)
#define MODEL3_CAN_ID229_GEAR_LEVER_FRAME_ID (0x229u)
#define MODEL3_CAN_ID249_LEFT_STALK_FRAME_ID (0x249u)
#define MODEL3_CAN_ID628_UDSPC_STO_MCU_FRAME_ID (0x629u)
#define MODEL3_CAN_ID628_UDSMC_UTO_PCS_FRAME_ID (0x628u)
#define MODEL3_CAN_ID186_FRONT_DRIVE_TORQUE_RPM_FRAME_ID (0x186u)
#define MODEL3_CAN_ID396_FRONT_OIL_PUMP_FRAME_ID (0x396u)
#define MODEL3_CAN_ID395_REAR_OIL_PUMP_FRAME_ID (0x395u)
#define MODEL3_CAN_ID1_D8_REAR_TORQUE_FRAME_ID (0x1d8u)
#define MODEL3_CAN_ID155_WHEEL_ANGLES_FRAME_ID (0x155u)
#define MODEL3_CAN_ID175_WHEEL_SPEED_FRAME_ID (0x175u)
#define MODEL3_CAN_ID1_D4_FRONT_TORQUE_OLD_FRAME_ID (0x1d4u)
#define MODEL3_CAN_ID1_D5_FRONT_TORQUE_FRAME_ID (0x1d5u)
#define MODEL3_CAN_ID2_E5_FRONT_INVERTER_POWER_FRAME_ID (0x2e5u)
#define MODEL3_CAN_ID3_C2_VC_LEFTSWITCHES_FRAME_ID (0x3c2u)
#define MODEL3_CAN_ID336_MAX_POWER_RATING_FRAME_ID (0x336u)
#define MODEL3_CAN_ID293_UI_CHASSIS_CONTROL_FRAME_ID (0x293u)
#define MODEL3_CAN_ID268_SYSTEM_POWER_FRAME_ID (0x268u)
#define MODEL3_CAN_ID04_FGPS_LAT_LONG_FRAME_ID (0x4fu)
#define MODEL3_CAN_ID3_D2_TOTAL_CHARGE_DISCHARGE_FRAME_ID (0x3d2u)
#define MODEL3_CAN_ID3_F2_BMS_COUNTERS_FRAME_ID (0x3f2u)
#define MODEL3_CAN_ID2_D2_BMSV_ALIMITS_FRAME_ID (0x2d2u)
#define MODEL3_CAN_ID541_FAST_CHARGE_MAX_LIMITS_FRAME_ID (0x541u)
#define MODEL3_CAN_ID244_FAST_CHARGE_LIMITS_FRAME_ID (0x244u)
#define MODEL3_CAN_ID214_FAST_CHARGE_VA_FRAME_ID (0x214u)
#define MODEL3_CAN_ID215_F_CISOLATION_FRAME_ID (0x215u)
#define MODEL3_CAN_ID217_F_CINFO_FRAME_ID (0x217u)
#define MODEL3_CAN_ID321_VCFRONT_SENSORS_FRAME_ID (0x321u)
#define MODEL3_CAN_ID301_VCFRONT_INFO_FRAME_ID (0x301u)
#define MODEL3_CAN_ID201_VCFRONT_LOGGING_AND_VITALS10_HZ_FRAME_ID (0x201u)
#define MODEL3_CAN_ID3_D8_ELEVATION_FRAME_ID (0x3d8u)
#define MODEL3_CAN_ID261_12V_BATT_STATUS_FRAME_ID (0x261u)
#define MODEL3_CAN_ID129_STEERING_ANGLE_FRAME_ID (0x129u)
#define MODEL3_CAN_ID264_CHARGE_LINE_STATUS_FRAME_ID (0x264u)
#define MODEL3_CAN_ID224_PCSDCD_CSTATUS_FRAME_ID (0x224u)
#define MODEL3_CAN_ID118_DRIVE_SYSTEM_STATUS_FRAME_ID (0x118u)
#define MODEL3_CAN_ID352_BM_SENERGY_FRAME_ID (0x352u)
#define MODEL3_CAN_ID252_BMS_POWER_AVAILABLE_FRAME_ID (0x252u)
#define MODEL3_CAN_ID312_BM_STHERMAL_FRAME_ID (0x312u)
#define MODEL3_CAN_ID292_BMS_SOC_FRAME_ID (0x292u)
#define MODEL3_CAN_ID257_U_ISPEED_FRAME_ID (0x257u)
#define MODEL3_CAN_ID405_VIN_FRAME_ID (0x405u)
#define MODEL3_CAN_ID51_EFC_INFO_FRAME_ID (0x51eu)
#define MODEL3_CAN_ID376_FRONT_INVERTER_TEMPS_FRAME_ID (0x376u)
#define MODEL3_CAN_ID315_REAR_INVERTER_TEMPS_FRAME_ID (0x315u)
#define MODEL3_CAN_ID154_REAR_TORQUE_OLD_FRAME_ID (0x154u)
#define MODEL3_CAN_ID3_B6ODOMETER_FRAME_ID (0x3b6u)
#define MODEL3_CAN_ID266_REAR_INVERTER_POWER_FRAME_ID (0x266u)
#define MODEL3_CAN_ID108_REAR_DRIVE_TORQUE_RPM_FRAME_ID (0x108u)
#define MODEL3_CAN_ID132_HV_BATT_AMP_VOLT_FRAME_ID (0x132u)
#define MODEL3_CAN_ID126_REAR_HV_STATUS_FRAME_ID (0x126u)
#define MODEL3_CAN_ID1_A5_FRONT_HV_STATUS_FRAME_ID (0x1a5u)
#define MODEL3_CAN_ID31_FTPM_SSENSORS_FRAME_ID (0x31fu)
#define MODEL3_CAN_ID3_F_EBRAKE_TEMPS_FRAME_ID (0x3feu)
#define MODEL3_CAN_ID228_EP_BRIGHT_STATUS_FRAME_ID (0x228u)
#define MODEL3_CAN_ID288_EP_BLEFT_STATUS_FRAME_ID (0x288u)
#define MODEL3_CAN_ID7_F_FCAR_CONFIG_FRAME_ID (0x7ffu)
#define MODEL3_CAN_ID332_BATT_CELL_MIN_MAX_FRAME_ID (0x332u)
#define MODEL3_CAN_ID401_CELL_VOLTAGES_FRAME_ID (0x401u)

/* Frame lengths in bytes. */
#define MODEL3_CAN_ID00_CUI_STATUS_LENGTH (8u)
#define MODEL3_CAN_ID082_UI_TRIP_PLANNING_LENGTH (8u)
#define MODEL3_CAN_ID102_VCLEFT_DOOR_STATUS_LENGTH (8u)
#define MODEL3_CAN_ID103_VCRIGHT_DOOR_STATUS_LENGTH (8u)
#define MODEL3_CAN_ID123_UI_ALERT_MATRIX1_LENGTH (8u)
#define MODEL3_CAN_ID247_DAS_AUTOPILOT_DEBUG_LENGTH (8u)
#define MODEL3_CAN_ID2_B4_PCS_DCDC_RAIL_STATUS_LENGTH (5u)
#define MODEL3_CAN_ID3_F5_VCFRONT_LIGHTING_LENGTH (8u)
#define MODEL3_CAN_ID3_E9_DAS_BODY_CONTROLS_LENGTH (8u)
#define MODEL3_CAN_ID267_DI_VEHICLE_ESTIMATES_LENGTH (8u)
#define MODEL3_CAN_ID335_REAR_D_IINFO_LENGTH (8u)
#define MODEL3_CAN_ID656_FRONT_D_IINFO_LENGTH (8u)
#define MODEL3_CAN_ID300_BMS_INFO_LENGTH (8u)
#define MODEL3_CAN_ID212_BMS_STATUS_LENGTH (8u)
#define MODEL3_CAN_ID3_B2_BMS_LOG2_LENGTH (8u)
#define MODEL3_CAN_ID320_BMS_ALERT_MATRIX_LENGTH (8u)
#define MODEL3_CAN_ID31_CCC_CHG_STATUS_LENGTH (8u)
#define MODEL3_CAN_ID31_DCC_CHG_STATUS2_LENGTH (8u)
#define MODEL3_CAN_ID32_CCC_LOG_DATA_LENGTH (8u)
#define MODEL3_CAN_ID23_DCP_CHARGE_STATUS_LENGTH (4u)
#define MODEL3_CAN_ID43_DCP_CHARGE_STATUS_LOG_LENGTH (6u)
#define MODEL3_CAN_ID21_DCP_EVSE_STATUS_LENGTH (8u)
#define MODEL3_CAN_ID75_DCP_SENSOR_DATA_LENGTH (8u)
#define MODEL3_CAN_ID287_PT_CCABIN_HEAT_SENSOR_STATUS_LENGTH (8u)
#define MODEL3_CAN_ID333_UI_CHARGE_REQUEST_LENGTH (4u)
#define MODEL3_CAN_ID334_UI_POWERTRAIN_CONTROL_LENGTH (8u)
#define MODEL3_CAN_ID33_AUI_RANGE_SOC_LENGTH (8u)
#define MODEL3_CAN_ID241_VCFRONT_COOLANT_LENGTH (7u)
#define MODEL3_CAN_ID2_C4_PCS_LOGGING_LENGTH (8u)
#define MODEL3_CAN_ID3_BBUI_POWER_LENGTH (2u)
#define MODEL3_CAN_ID5_D5_REAR_TBD_LENGTH (5u)
#define MODEL3_CAN_ID556_FRONT_TBD_LENGTH (5u)
#define MODEL3_CAN_ID557_FRONT_THERMAL_CONTROL_LENGTH (4u)
#define MODEL3_CAN_ID5_D7_REAR_THERMAL_CONTROL_LENGTH (4u)
#define MODEL3_CAN_ID7_D5_DIR_DEBUG_LENGTH (8u)
#define MODEL3_CAN_ID757_DIF_DEBUG_LENGTH (8u)
#define MODEL3_CAN_ID2_B6_DI_CHASSIS_CONTROL_STATUS_LENGTH (2u)
#define MODEL3_CAN_ID284_U_IVEHICLE_MODES_LENGTH (5u)
#define MODEL3_CAN_ID221_VCFRONT_LV_POWER_STATE_LENGTH (8u)
#define MODEL3_CAN_ID2_F1_VCFRONT_E_FUSE_DEBUG_STATUS_LENGTH (8u)
#define MODEL3_CAN_ID243_VC_RIGHTHVAC_FEEDBACK_LENGTH (8u)
#define MODEL3_CAN_ID20_CVC_RIGHTHVAC_REQUEST_LENGTH (6u)
#define MODEL3_CAN_ID2_B3_VC_RIGHTLOGGING1_HZ_LENGTH (8u)
#define MODEL3_CAN_ID2_C1_VC_FRONT10HZ_LENGTH (8u)
#define MODEL3_CAN_ID2_E1_VCFRONT_STATUS_LENGTH (8u)
#define MODEL3_CAN_ID381_VCFRONT_LOGGING1_HZ_LENGTH (8u)
#define MODEL3_CAN_ID318_SYSTEM_TIME_UTC_LENGTH (8u)
#define MODEL3_CAN_ID528_UNIX_TIME_LENGTH (4u)
#define MODEL3_CAN_ID229_GEAR_LEVER_LENGTH (3u)
#define MODEL3_CAN_ID249_LEFT_STALK_LENGTH (3u)
#define MODEL3_CAN_ID628_UDSPC_STO_MCU_LENGTH (8u)
#define MODEL3_CAN_ID628_UDSMC_UTO_PCS_LENGTH (8u)
#define MODEL3_CAN_ID186_FRONT_DRIVE_TORQUE_RPM_LENGTH (8u)
#define MODEL3_CAN_ID396_FRONT_OIL_PUMP_LENGTH (8u)
#define MODEL3_CAN_ID395_REAR_OIL_PUMP_LENGTH (8u)
#define MODEL3_CAN_ID1_D8_REAR_TORQUE_LENGTH (8u)
#define MODEL3_CAN_ID155_WHEEL_ANGLES_LENGTH (8u)
#define MODEL3_CAN_ID175_WHEEL_SPEED_LENGTH (8u)
#define MODEL3_CAN_ID1_D4_FRONT_TORQUE_OLD_LENGTH (8u)
#define MODEL3_CAN_ID1_D5_FRONT_TORQUE_LENGTH (8u)
#define MODEL3_CAN_ID2_E5_FRONT_INVERTER_POWER_LENGTH (8u)
#define MODEL3_CAN_ID3_C2_VC_LEFTSWITCHES_LENGTH (8u)
#define MODEL3_CAN_ID336_MAX_POWER_RATING_LENGTH (3u)
#define MODEL3_CAN_ID293_UI_CHASSIS_CONTROL_LENGTH (8u)
#define MODEL3_CAN_ID268_SYSTEM_POWER_LENGTH (5u)
#define MODEL3_CAN_ID04_FGPS_LAT_LONG_LENGTH (8u)
#define MODEL3_CAN_ID3_D2_TOTAL_CHARGE_DISCHARGE_LENGTH (8u)
#define MODEL3_CAN_ID3_F2_BMS_COUNTERS_LENGTH (8u)
#define MODEL3_CAN_ID2_D2_BMSV_ALIMITS_LENGTH (8u)
#define MODEL3_CAN_ID541_FAST_CHARGE_MAX_LIMITS_LENGTH (8u)
#define MODEL3_CAN_ID244_FAST_CHARGE_LIMITS_LENGTH (8u)
#define MODEL3_CAN_ID214_FAST_CHARGE_VA_LENGTH (8u)
#define MODEL3_CAN_ID215_F_CISOLATION_LENGTH (1u)
#define MODEL3_CAN_ID217_F_CINFO_LENGTH (8u)
#define MODEL3_CAN_ID321_VCFRONT_SENSORS_LENGTH (8u)
#define MODEL3_CAN_ID301_VCFRONT_INFO_LENGTH (8u)
#define MODEL3_CAN_ID201_VCFRONT_LOGGING_AND_VITALS10_HZ_LENGTH (8u)
#define MODEL3_CAN_ID3_D8_ELEVATION_LENGTH (8u)
#define MODEL3_CAN_ID261_12V_BATT_STATUS_LENGTH (8u)
#define MODEL3_CAN_ID129_STEERING_ANGLE_LENGTH (8u)
#define MODEL3_CAN_ID264_CHARGE_LINE_STATUS_LENGTH (8u)
#define MODEL3_CAN_ID224_PCSDCD_CSTATUS_LENGTH (8u)
#define MODEL3_CAN_ID118_DRIVE_SYSTEM_STATUS_LENGTH (8u)
#define MODEL3_CAN_ID352_BM_SENERGY_LENGTH (8u)
#define MODEL3_CAN_ID252_BMS_POWER_AVAILABLE_LENGTH (8u)
#define MODEL3_CAN_ID312_BM_STHERMAL_LENGTH (8u)
#define MODEL3_CAN_ID292_BMS_SOC_LENGTH (8u)
#define MODEL3_CAN_ID257_U_ISPEED_LENGTH (8u)
#define MODEL3_CAN_ID405_VIN_LENGTH (8u)
#define MODEL3_CAN_ID51_EFC_INFO_LENGTH (8u)
#define MODEL3_CAN_ID376_FRONT_INVERTER_TEMPS_LENGTH (8u)
#define MODEL3_CAN_ID315_REAR_INVERTER_TEMPS_LENGTH (8u)
#define MODEL3_CAN_ID154_REAR_TORQUE_OLD_LENGTH (8u)
#define MODEL3_CAN_ID3_B6ODOMETER_LENGTH (4u)
#define MODEL3_CAN_ID266_REAR_INVERTER_POWER_LENGTH (8u)
#define MODEL3_CAN_ID108_REAR_DRIVE_TORQUE_RPM_LENGTH (8u)
#define MODEL3_CAN_ID132_HV_BATT_AMP_VOLT_LENGTH (8u)
#define MODEL3_CAN_ID126_REAR_HV_STATUS_LENGTH (3u)
#define MODEL3_CAN_ID1_A5_FRONT_HV_STATUS_LENGTH (3u)
#define MODEL3_CAN_ID31_FTPM_SSENSORS_LENGTH (8u)
#define MODEL3_CAN_ID3_F_EBRAKE_TEMPS_LENGTH (5u)
#define MODEL3_CAN_ID228_EP_BRIGHT_STATUS_LENGTH (8u)
#define MODEL3_CAN_ID288_EP_BLEFT_STATUS_LENGTH (8u)
#define MODEL3_CAN_ID7_F_FCAR_CONFIG_LENGTH (8u)
#define MODEL3_CAN_ID332_BATT_CELL_MIN_MAX_LENGTH (6u)
#define MODEL3_CAN_ID401_CELL_VOLTAGES_LENGTH (8u)

/* Extended or standard frame types. */
#define MODEL3_CAN_ID00_CUI_STATUS_IS_EXTENDED (0)
#define MODEL3_CAN_ID082_UI_TRIP_PLANNING_IS_EXTENDED (0)
#define MODEL3_CAN_ID102_VCLEFT_DOOR_STATUS_IS_EXTENDED (0)
#define MODEL3_CAN_ID103_VCRIGHT_DOOR_STATUS_IS_EXTENDED (0)
#define MODEL3_CAN_ID123_UI_ALERT_MATRIX1_IS_EXTENDED (0)
#define MODEL3_CAN_ID247_DAS_AUTOPILOT_DEBUG_IS_EXTENDED (0)
#define MODEL3_CAN_ID2_B4_PCS_DCDC_RAIL_STATUS_IS_EXTENDED (0)
#define MODEL3_CAN_ID3_F5_VCFRONT_LIGHTING_IS_EXTENDED (0)
#define MODEL3_CAN_ID3_E9_DAS_BODY_CONTROLS_IS_EXTENDED (0)
#define MODEL3_CAN_ID267_DI_VEHICLE_ESTIMATES_IS_EXTENDED (0)
#define MODEL3_CAN_ID335_REAR_D_IINFO_IS_EXTENDED (0)
#define MODEL3_CAN_ID656_FRONT_D_IINFO_IS_EXTENDED (0)
#define MODEL3_CAN_ID300_BMS_INFO_IS_EXTENDED (0)
#define MODEL3_CAN_ID212_BMS_STATUS_IS_EXTENDED (0)
#define MODEL3_CAN_ID3_B2_BMS_LOG2_IS_EXTENDED (0)
#define MODEL3_CAN_ID320_BMS_ALERT_MATRIX_IS_EXTENDED (0)
#define MODEL3_CAN_ID31_CCC_CHG_STATUS_IS_EXTENDED (0)
#define MODEL3_CAN_ID31_DCC_CHG_STATUS2_IS_EXTENDED (0)
#define MODEL3_CAN_ID32_CCC_LOG_DATA_IS_EXTENDED (0)
#define MODEL3_CAN_ID23_DCP_CHARGE_STATUS_IS_EXTENDED (0)
#define MODEL3_CAN_ID43_DCP_CHARGE_STATUS_LOG_IS_EXTENDED (0)
#define MODEL3_CAN_ID21_DCP_EVSE_STATUS_IS_EXTENDED (0)
#define MODEL3_CAN_ID75_DCP_SENSOR_DATA_IS_EXTENDED (0)
#define MODEL3_CAN_ID287_PT_CCABIN_HEAT_SENSOR_STATUS_IS_EXTENDED (0)
#define MODEL3_CAN_ID333_UI_CHARGE_REQUEST_IS_EXTENDED (0)
#define MODEL3_CAN_ID334_UI_POWERTRAIN_CONTROL_IS_EXTENDED (0)
#define MODEL3_CAN_ID33_AUI_RANGE_SOC_IS_EXTENDED (0)
#define MODEL3_CAN_ID241_VCFRONT_COOLANT_IS_EXTENDED (0)
#define MODEL3_CAN_ID2_C4_PCS_LOGGING_IS_EXTENDED (0)
#define MODEL3_CAN_ID3_BBUI_POWER_IS_EXTENDED (0)
#define MODEL3_CAN_ID5_D5_REAR_TBD_IS_EXTENDED (0)
#define MODEL3_CAN_ID556_FRONT_TBD_IS_EXTENDED (0)
#define MODEL3_CAN_ID557_FRONT_THERMAL_CONTROL_IS_EXTENDED (0)
#define MODEL3_CAN_ID5_D7_REAR_THERMAL_CONTROL_IS_EXTENDED (0)
#define MODEL3_CAN_ID7_D5_DIR_DEBUG_IS_EXTENDED (0)
#define MODEL3_CAN_ID757_DIF_DEBUG_IS_EXTENDED (0)
#define MODEL3_CAN_ID2_B6_DI_CHASSIS_CONTROL_STATUS_IS_EXTENDED (0)
#define MODEL3_CAN_ID284_U_IVEHICLE_MODES_IS_EXTENDED (0)
#define MODEL3_CAN_ID221_VCFRONT_LV_POWER_STATE_IS_EXTENDED (0)
#define MODEL3_CAN_ID2_F1_VCFRONT_E_FUSE_DEBUG_STATUS_IS_EXTENDED (0)
#define MODEL3_CAN_ID243_VC_RIGHTHVAC_FEEDBACK_IS_EXTENDED (0)
#define MODEL3_CAN_ID20_CVC_RIGHTHVAC_REQUEST_IS_EXTENDED (0)
#define MODEL3_CAN_ID2_B3_VC_RIGHTLOGGING1_HZ_IS_EXTENDED (0)
#define MODEL3_CAN_ID2_C1_VC_FRONT10HZ_IS_EXTENDED (0)
#define MODEL3_CAN_ID2_E1_VCFRONT_STATUS_IS_EXTENDED (0)
#define MODEL3_CAN_ID381_VCFRONT_LOGGING1_HZ_IS_EXTENDED (0)
#define MODEL3_CAN_ID318_SYSTEM_TIME_UTC_IS_EXTENDED (0)
#define MODEL3_CAN_ID528_UNIX_TIME_IS_EXTENDED (0)
#define MODEL3_CAN_ID229_GEAR_LEVER_IS_EXTENDED (0)
#define MODEL3_CAN_ID249_LEFT_STALK_IS_EXTENDED (0)
#define MODEL3_CAN_ID628_UDSPC_STO_MCU_IS_EXTENDED (0)
#define MODEL3_CAN_ID628_UDSMC_UTO_PCS_IS_EXTENDED (0)
#define MODEL3_CAN_ID186_FRONT_DRIVE_TORQUE_RPM_IS_EXTENDED (0)
#define MODEL3_CAN_ID396_FRONT_OIL_PUMP_IS_EXTENDED (0)
#define MODEL3_CAN_ID395_REAR_OIL_PUMP_IS_EXTENDED (0)
#define MODEL3_CAN_ID1_D8_REAR_TORQUE_IS_EXTENDED (0)
#define MODEL3_CAN_ID155_WHEEL_ANGLES_IS_EXTENDED (0)
#define MODEL3_CAN_ID175_WHEEL_SPEED_IS_EXTENDED (0)
#define MODEL3_CAN_ID1_D4_FRONT_TORQUE_OLD_IS_EXTENDED (0)
#define MODEL3_CAN_ID1_D5_FRONT_TORQUE_IS_EXTENDED (0)
#define MODEL3_CAN_ID2_E5_FRONT_INVERTER_POWER_IS_EXTENDED (0)
#define MODEL3_CAN_ID3_C2_VC_LEFTSWITCHES_IS_EXTENDED (0)
#define MODEL3_CAN_ID336_MAX_POWER_RATING_IS_EXTENDED (0)
#define MODEL3_CAN_ID293_UI_CHASSIS_CONTROL_IS_EXTENDED (0)
#define MODEL3_CAN_ID268_SYSTEM_POWER_IS_EXTENDED (0)
#define MODEL3_CAN_ID04_FGPS_LAT_LONG_IS_EXTENDED (0)
#define MODEL3_CAN_ID3_D2_TOTAL_CHARGE_DISCHARGE_IS_EXTENDED (0)
#define MODEL3_CAN_ID3_F2_BMS_COUNTERS_IS_EXTENDED (0)
#define MODEL3_CAN_ID2_D2_BMSV_ALIMITS_IS_EXTENDED (0)
#define MODEL3_CAN_ID541_FAST_CHARGE_MAX_LIMITS_IS_EXTENDED (0)
#define MODEL3_CAN_ID244_FAST_CHARGE_LIMITS_IS_EXTENDED (0)
#define MODEL3_CAN_ID214_FAST_CHARGE_VA_IS_EXTENDED (0)
#define MODEL3_CAN_ID215_F_CISOLATION_IS_EXTENDED (0)
#define MODEL3_CAN_ID217_F_CINFO_IS_EXTENDED (0)
#define MODEL3_CAN_ID321_VCFRONT_SENSORS_IS_EXTENDED (0)
#define MODEL3_CAN_ID301_VCFRONT_INFO_IS_EXTENDED (0)
#define MODEL3_CAN_ID201_VCFRONT_LOGGING_AND_VITALS10_HZ_IS_EXTENDED (0)
#define MODEL3_CAN_ID3_D8_ELEVATION_IS_EXTENDED (0)
#define MODEL3_CAN_ID261_12V_BATT_STATUS_IS_EXTENDED (0)
#define MODEL3_CAN_ID129_STEERING_ANGLE_IS_EXTENDED (0)
#define MODEL3_CAN_ID264_CHARGE_LINE_STATUS_IS_EXTENDED (0)
#define MODEL3_CAN_ID224_PCSDCD_CSTATUS_IS_EXTENDED (0)
#define MODEL3_CAN_ID118_DRIVE_SYSTEM_STATUS_IS_EXTENDED (0)
#define MODEL3_CAN_ID352_BM_SENERGY_IS_EXTENDED (0)
#define MODEL3_CAN_ID252_BMS_POWER_AVAILABLE_IS_EXTENDED (0)
#define MODEL3_CAN_ID312_BM_STHERMAL_IS_EXTENDED (0)
#define MODEL3_CAN_ID292_BMS_SOC_IS_EXTENDED (0)
#define MODEL3_CAN_ID257_U_ISPEED_IS_EXTENDED (0)
#define MODEL3_CAN_ID405_VIN_IS_EXTENDED (0)
#define MODEL3_CAN_ID51_EFC_INFO_IS_EXTENDED (0)
#define MODEL3_CAN_ID376_FRONT_INVERTER_TEMPS_IS_EXTENDED (0)
#define MODEL3_CAN_ID315_REAR_INVERTER_TEMPS_IS_EXTENDED (0)
#define MODEL3_CAN_ID154_REAR_TORQUE_OLD_IS_EXTENDED (0)
#define MODEL3_CAN_ID3_B6ODOMETER_IS_EXTENDED (0)
#define MODEL3_CAN_ID266_REAR_INVERTER_POWER_IS_EXTENDED (0)
#define MODEL3_CAN_ID108_REAR_DRIVE_TORQUE_RPM_IS_EXTENDED (0)
#define MODEL3_CAN_ID132_HV_BATT_AMP_VOLT_IS_EXTENDED (0)
#define MODEL3_CAN_ID126_REAR_HV_STATUS_IS_EXTENDED (0)
#define MODEL3_CAN_ID1_A5_FRONT_HV_STATUS_IS_EXTENDED (0)
#define MODEL3_CAN_ID31_FTPM_SSENSORS_IS_EXTENDED (0)
#define MODEL3_CAN_ID3_F_EBRAKE_TEMPS_IS_EXTENDED (0)
#define MODEL3_CAN_ID228_EP_BRIGHT_STATUS_IS_EXTENDED (0)
#define MODEL3_CAN_ID288_EP_BLEFT_STATUS_IS_EXTENDED (0)
#define MODEL3_CAN_ID7_F_FCAR_CONFIG_IS_EXTENDED (0)
#define MODEL3_CAN_ID332_BATT_CELL_MIN_MAX_IS_EXTENDED (0)
#define MODEL3_CAN_ID401_CELL_VOLTAGES_IS_EXTENDED (0)

/* Frame cycle times in milliseconds. */
#define MODEL3_CAN_ID00_CUI_STATUS_CYCLE_TIME_MS (0u)
#define MODEL3_CAN_ID082_UI_TRIP_PLANNING_CYCLE_TIME_MS (0u)
#define MODEL3_CAN_ID102_VCLEFT_DOOR_STATUS_CYCLE_TIME_MS (0u)
#define MODEL3_CAN_ID103_VCRIGHT_DOOR_STATUS_CYCLE_TIME_MS (0u)
#define MODEL3_CAN_ID123_UI_ALERT_MATRIX1_CYCLE_TIME_MS (0u)
#define MODEL3_CAN_ID247_DAS_AUTOPILOT_DEBUG_CYCLE_TIME_MS (0u)
#define MODEL3_CAN_ID2_B4_PCS_DCDC_RAIL_STATUS_CYCLE_TIME_MS (0u)
#define MODEL3_CAN_ID3_F5_VCFRONT_LIGHTING_CYCLE_TIME_MS (0u)
#define MODEL3_CAN_ID3_E9_DAS_BODY_CONTROLS_CYCLE_TIME_MS (0u)
#define MODEL3_CAN_ID267_DI_VEHICLE_ESTIMATES_CYCLE_TIME_MS (0u)
#define MODEL3_CAN_ID335_REAR_D_IINFO_CYCLE_TIME_MS (0u)
#define MODEL3_CAN_ID656_FRONT_D_IINFO_CYCLE_TIME_MS (0u)
#define MODEL3_CAN_ID300_BMS_INFO_CYCLE_TIME_MS (0u)
#define MODEL3_CAN_ID212_BMS_STATUS_CYCLE_TIME_MS (100u)
#define MODEL3_CAN_ID3_B2_BMS_LOG2_CYCLE_TIME_MS (0u)
#define MODEL3_CAN_ID320_BMS_ALERT_MATRIX_CYCLE_TIME_MS (0u)
#define MODEL3_CAN_ID31_CCC_CHG_STATUS_CYCLE_TIME_MS (0u)
#define MODEL3_CAN_ID31_DCC_CHG_STATUS2_CYCLE_TIME_MS (0u)
#define MODEL3_CAN_ID32_CCC_LOG_DATA_CYCLE_TIME_MS (0u)
#define MODEL3_CAN_ID23_DCP_CHARGE_STATUS_CYCLE_TIME_MS (0u)
#define MODEL3_CAN_ID43_DCP_CHARGE_STATUS_LOG_CYCLE_TIME_MS (0u)
#define MODEL3_CAN_ID21_DCP_EVSE_STATUS_CYCLE_TIME_MS (0u)
#define MODEL3_CAN_ID75_DCP_SENSOR_DATA_CYCLE_TIME_MS (0u)
#define MODEL3_CAN_ID287_PT_CCABIN_HEAT_SENSOR_STATUS_CYCLE_TIME_MS (0u)
#define MODEL3_CAN_ID333_UI_CHARGE_REQUEST_CYCLE_TIME_MS (500u)
#define MODEL3_CAN_ID334_UI_POWERTRAIN_CONTROL_CYCLE_TIME_MS (0u)
#define MODEL3_CAN_ID33_AUI_RANGE_SOC_CYCLE_TIME_MS (0u)
#define MODEL3_CAN_ID241_VCFRONT_COOLANT_CYCLE_TIME_MS (100u)
#define MODEL3_CAN_ID2_C4_PCS_LOGGING_CYCLE_TIME_MS (0u)
#define MODEL3_CAN_ID3_BBUI_POWER_CYCLE_TIME_MS (0u)
#define MODEL3_CAN_ID5_D5_REAR_TBD_CYCLE_TIME_MS (0u)
#define MODEL3_CAN_ID556_FRONT_TBD_CYCLE_TIME_MS (0u)
#define MODEL3_CAN_ID557_FRONT_THERMAL_CONTROL_CYCLE_TIME_MS (0u)
#define MODEL3_CAN_ID5_D7_REAR_THERMAL_CONTROL_CYCLE_TIME_MS (0u)
#define MODEL3_CAN_ID7_D5_DIR_DEBUG_CYCLE_TIME_MS (0u)
#define MODEL3_CAN_ID757_DIF_DEBUG_CYCLE_TIME_MS (0u)
#define MODEL3_CAN_ID2_B6_DI_CHASSIS_CONTROL_STATUS_CYCLE_TIME_MS (0u)
#define MODEL3_CAN_ID284_U_IVEHICLE_MODES_CYCLE_TIME_MS (0u)
#define MODEL3_CAN_ID221_VCFRONT_LV_POWER_STATE_CYCLE_TIME_MS (0u)
#define MODEL3_CAN_ID2_F1_VCFRONT_E_FUSE_DEBUG_STATUS_CYCLE_TIME_MS (0u)
#define MODEL3_CAN_ID243_VC_RIGHTHVAC_FEEDBACK_CYCLE_TIME_MS (0u)
#define MODEL3_CAN_ID20_CVC_RIGHTHVAC_REQUEST_CYCLE_TIME_MS (0u)
#define MODEL3_CAN_ID2_B3_VC_RIGHTLOGGING1_HZ_CYCLE_TIME_MS (0u)
#define MODEL3_CAN_ID2_C1_VC_FRONT10HZ_CYCLE_TIME_MS (0u)
#define MODEL3_CAN_ID2_E1_VCFRONT_STATUS_CYCLE_TIME_MS (0u)
#define MODEL3_CAN_ID381_VCFRONT_LOGGING1_HZ_CYCLE_TIME_MS (0u)
#define MODEL3_CAN_ID318_SYSTEM_TIME_UTC_CYCLE_TIME_MS (0u)
#define MODEL3_CAN_ID528_UNIX_TIME_CYCLE_TIME_MS (0u)
#define MODEL3_CAN_ID229_GEAR_LEVER_CYCLE_TIME_MS (0u)
#define MODEL3_CAN_ID249_LEFT_STALK_CYCLE_TIME_MS (0u)
#define MODEL3_CAN_ID628_UDSPC_STO_MCU_CYCLE_TIME_MS (0u)
#define MODEL3_CAN_ID628_UDSMC_UTO_PCS_CYCLE_TIME_MS (0u)
#define MODEL3_CAN_ID186_FRONT_DRIVE_TORQUE_RPM_CYCLE_TIME_MS (0u)
#define MODEL3_CAN_ID396_FRONT_OIL_PUMP_CYCLE_TIME_MS (0u)
#define MODEL3_CAN_ID395_REAR_OIL_PUMP_CYCLE_TIME_MS (0u)
#define MODEL3_CAN_ID1_D8_REAR_TORQUE_CYCLE_TIME_MS (0u)
#define MODEL3_CAN_ID155_WHEEL_ANGLES_CYCLE_TIME_MS (0u)
#define MODEL3_CAN_ID175_WHEEL_SPEED_CYCLE_TIME_MS (0u)
#define MODEL3_CAN_ID1_D4_FRONT_TORQUE_OLD_CYCLE_TIME_MS (10u)
#define MODEL3_CAN_ID1_D5_FRONT_TORQUE_CYCLE_TIME_MS (0u)
#define MODEL3_CAN_ID2_E5_FRONT_INVERTER_POWER_CYCLE_TIME_MS (1000u)
#define MODEL3_CAN_ID3_C2_VC_LEFTSWITCHES_CYCLE_TIME_MS (50u)
#define MODEL3_CAN_ID336_MAX_POWER_RATING_CYCLE_TIME_MS (1000u)
#define MODEL3_CAN_ID293_UI_CHASSIS_CONTROL_CYCLE_TIME_MS (500u)
#define MODEL3_CAN_ID268_SYSTEM_POWER_CYCLE_TIME_MS (100u)
#define MODEL3_CAN_ID04_FGPS_LAT_LONG_CYCLE_TIME_MS (1000u)
#define MODEL3_CAN_ID3_D2_TOTAL_CHARGE_DISCHARGE_CYCLE_TIME_MS (1000u)
#define MODEL3_CAN_ID3_F2_BMS_COUNTERS_CYCLE_TIME_MS (0u)
#define MODEL3_CAN_ID2_D2_BMSV_ALIMITS_CYCLE_TIME_MS (100u)
#define MODEL3_CAN_ID541_FAST_CHARGE_MAX_LIMITS_CYCLE_TIME_MS (100u)
#define MODEL3_CAN_ID244_FAST_CHARGE_LIMITS_CYCLE_TIME_MS (100u)
#define MODEL3_CAN_ID214_FAST_CHARGE_VA_CYCLE_TIME_MS (100u)
#define MODEL3_CAN_ID215_F_CISOLATION_CYCLE_TIME_MS (1000u)
#define MODEL3_CAN_ID217_F_CINFO_CYCLE_TIME_MS (1000u)
#define MODEL3_CAN_ID321_VCFRONT_SENSORS_CYCLE_TIME_MS (1000u)
#define MODEL3_CAN_ID301_VCFRONT_INFO_CYCLE_TIME_MS (0u)
#define MODEL3_CAN_ID201_VCFRONT_LOGGING_AND_VITALS10_HZ_CYCLE_TIME_MS (0u)
#define MODEL3_CAN_ID3_D8_ELEVATION_CYCLE_TIME_MS (1000u)
#define MODEL3_CAN_ID261_12V_BATT_STATUS_CYCLE_TIME_MS (100u)
#define MODEL3_CAN_ID129_STEERING_ANGLE_CYCLE_TIME_MS (10u)
#define MODEL3_CAN_ID264_CHARGE_LINE_STATUS_CYCLE_TIME_MS (100u)
#define MODEL3_CAN_ID224_PCSDCD_CSTATUS_CYCLE_TIME_MS (100u)
#define MODEL3_CAN_ID118_DRIVE_SYSTEM_STATUS_CYCLE_TIME_MS (10u)
#define MODEL3_CAN_ID352_BM_SENERGY_CYCLE_TIME_MS (1000u)
#define MODEL3_CAN_ID252_BMS_POWER_AVAILABLE_CYCLE_TIME_MS (100u)
#define MODEL3_CAN_ID312_BM_STHERMAL_CYCLE_TIME_MS (1000u)
#define MODEL3_CAN_ID292_BMS_SOC_CYCLE_TIME_MS (100u)
#define MODEL3_CAN_ID257_U_ISPEED_CYCLE_TIME_MS (20u)
#define MODEL3_CAN_ID405_VIN_CYCLE_TIME_MS (205u)
#define MODEL3_CAN_ID51_EFC_INFO_CYCLE_TIME_MS (0u)
#define MODEL3_CAN_ID376_FRONT_INVERTER_TEMPS_CYCLE_TIME_MS (1000u)
#define MODEL3_CAN_ID315_REAR_INVERTER_TEMPS_CYCLE_TIME_MS (0u)
#define MODEL3_CAN_ID154_REAR_TORQUE_OLD_CYCLE_TIME_MS (10u)
#define MODEL3_CAN_ID3_B6ODOMETER_CYCLE_TIME_MS (1000u)
#define MODEL3_CAN_ID266_REAR_INVERTER_POWER_CYCLE_TIME_MS (10u)
#define MODEL3_CAN_ID108_REAR_DRIVE_TORQUE_RPM_CYCLE_TIME_MS (10u)
#define MODEL3_CAN_ID132_HV_BATT_AMP_VOLT_CYCLE_TIME_MS (10u)
#define MODEL3_CAN_ID126_REAR_HV_STATUS_CYCLE_TIME_MS (100u)
#define MODEL3_CAN_ID1_A5_FRONT_HV_STATUS_CYCLE_TIME_MS (0u)
#define MODEL3_CAN_ID31_FTPM_SSENSORS_CYCLE_TIME_MS (1000u)
#define MODEL3_CAN_ID3_F_EBRAKE_TEMPS_CYCLE_TIME_MS (1000u)
#define MODEL3_CAN_ID228_EP_BRIGHT_STATUS_CYCLE_TIME_MS (0u)
#define MODEL3_CAN_ID288_EP_BLEFT_STATUS_CYCLE_TIME_MS (0u)
#define MODEL3_CAN_ID7_F_FCAR_CONFIG_CYCLE_TIME_MS (100u)
#define MODEL3_CAN_ID332_BATT_CELL_MIN_MAX_CYCLE_TIME_MS (0u)
#define MODEL3_CAN_ID401_CELL_VOLTAGES_CYCLE_TIME_MS (0u)

/* Signal choices. */
#define MODEL3_CAN_ID00_CUI_STATUS_UI_AUTOPILOT_TRIAL_NONE_CHOICE (0u)
#define MODEL3_CAN_ID00_CUI_STATUS_UI_AUTOPILOT_TRIAL_START_CHOICE (1u)
#define MODEL3_CAN_ID00_CUI_STATUS_UI_AUTOPILOT_TRIAL_STOP_CHOICE (2u)
#define MODEL3_CAN_ID00_CUI_STATUS_UI_AUTOPILOT_TRIAL_ACTIVE_CHOICE (3u)

#define MODEL3_CAN_ID00_CUI_STATUS_UI_FACTORY_RESET_NONE_SNA_CHOICE (0u)
#define MODEL3_CAN_ID00_CUI_STATUS_UI_FACTORY_RESET_DEVELOPER_CHOICE (1u)
#define MODEL3_CAN_ID00_CUI_STATUS_UI_FACTORY_RESET_DIAGNOSTIC_CHOICE (2u)
#define MODEL3_CAN_ID00_CUI_STATUS_UI_FACTORY_RESET_CUSTOMER_CHOICE (3u)

#define MODEL3_CAN_ID00_CUI_STATUS_UI_CELL_NETWORK_TECHNOLOGY_CELL_NETWORK_NONE_CHOICE (0u)
#define MODEL3_CAN_ID00_CUI_STATUS_UI_CELL_NETWORK_TECHNOLOGY_CELL_NETWORK_GPRS_CHOICE (1u)
#define MODEL3_CAN_ID00_CUI_STATUS_UI_CELL_NETWORK_TECHNOLOGY_CELL_NETWORK_EDGE_CHOICE (2u)
#define MODEL3_CAN_ID00_CUI_STATUS_UI_CELL_NETWORK_TECHNOLOGY_CELL_NETWORK_UMTS_CHOICE (3u)
#define MODEL3_CAN_ID00_CUI_STATUS_UI_CELL_NETWORK_TECHNOLOGY_CELL_NETWORK_HSDPA_CHOICE (4u)
#define MODEL3_CAN_ID00_CUI_STATUS_UI_CELL_NETWORK_TECHNOLOGY_CELL_NETWORK_HSUPA_CHOICE (5u)
#define MODEL3_CAN_ID00_CUI_STATUS_UI_CELL_NETWORK_TECHNOLOGY_CELL_NETWORK_HSPA_CHOICE (6u)
#define MODEL3_CAN_ID00_CUI_STATUS_UI_CELL_NETWORK_TECHNOLOGY_CELL_NETWORK_LTE_CHOICE (7u)
#define MODEL3_CAN_ID00_CUI_STATUS_UI_CELL_NETWORK_TECHNOLOGY_CELL_NETWORK_GSM_CHOICE (8u)
#define MODEL3_CAN_ID00_CUI_STATUS_UI_CELL_NETWORK_TECHNOLOGY_CELL_NETWORK_CDMA_CHOICE (9u)
#define MODEL3_CAN_ID00_CUI_STATUS_UI_CELL_NETWORK_TECHNOLOGY_CELL_NETWORK_WCDMA_CHOICE (10u)
#define MODEL3_CAN_ID00_CUI_STATUS_UI_CELL_NETWORK_TECHNOLOGY_CELL_NETWORK_SNA_CHOICE (15u)

#define MODEL3_CAN_ID00_CUI_STATUS_UI_CELL_SIGNAL_BARS_ZERO_CHOICE (0u)
#define MODEL3_CAN_ID00_CUI_STATUS_UI_CELL_SIGNAL_BARS_ONE_CHOICE (1u)
#define MODEL3_CAN_ID00_CUI_STATUS_UI_CELL_SIGNAL_BARS_TWO_CHOICE (2u)
#define MODEL3_CAN_ID00_CUI_STATUS_UI_CELL_SIGNAL_BARS_THREE_CHOICE (3u)
#define MODEL3_CAN_ID00_CUI_STATUS_UI_CELL_SIGNAL_BARS_FOUR_CHOICE (4u)
#define MODEL3_CAN_ID00_CUI_STATUS_UI_CELL_SIGNAL_BARS_FIVE_CHOICE (5u)
#define MODEL3_CAN_ID00_CUI_STATUS_UI_CELL_SIGNAL_BARS_SNA_CHOICE (7u)

#define MODEL3_CAN_ID082_UI_TRIP_PLANNING_UI_PREDICTED_ENERGY_SNA_CHOICE (-32768)
#define MODEL3_CAN_ID082_UI_TRIP_PLANNING_UI_PREDICTED_ENERGY_TRIP_TOO_LONG_CHOICE (-32767)

#define MODEL3_CAN_ID082_UI_TRIP_PLANNING_UI_HINDSIGHT_ENERGY_SNA_CHOICE (-32768)
#define MODEL3_CAN_ID082_UI_TRIP_PLANNING_UI_HINDSIGHT_ENERGY_TRIP_TOO_LONG_CHOICE (-32767)

#define MODEL3_CAN_ID082_UI_TRIP_PLANNING_UI_ENERGY_AT_DESTINATION_SNA_CHOICE (-32768)
#define MODEL3_CAN_ID082_UI_TRIP_PLANNING_UI_ENERGY_AT_DESTINATION_TRIP_TOO_LONG_CHOICE (-32767)

#define MODEL3_CAN_ID102_VCLEFT_DOOR_STATUS_VCLEFT_FRONT_LATCH_STATUS_LATCH_SNA_CHOICE (0u)
#define MODEL3_CAN_ID102_VCLEFT_DOOR_STATUS_VCLEFT_FRONT_LATCH_STATUS_LATCH_OPENED_CHOICE (1u)
#define MODEL3_CAN_ID102_VCLEFT_DOOR_STATUS_VCLEFT_FRONT_LATCH_STATUS_LATCH_CLOSED_CHOICE (2u)
#define MODEL3_CAN_ID102_VCLEFT_DOOR_STATUS_VCLEFT_FRONT_LATCH_STATUS_LATCH_CLOSING_CHOICE (3u)
#define MODEL3_CAN_ID102_VCLEFT_DOOR_STATUS_VCLEFT_FRONT_LATCH_STATUS_LATCH_OPENING_CHOICE (4u)
#define MODEL3_CAN_ID102_VCLEFT_DOOR_STATUS_VCLEFT_FRONT_LATCH_STATUS_LATCH_AJAR_CHOICE (5u)
#define MODEL3_CAN_ID102_VCLEFT_DOOR_STATUS_VCLEFT_FRONT_LATCH_STATUS_LATCH_TIMEOUT_CHOICE (6u)
#define MODEL3_CAN_ID102_VCLEFT_DOOR_STATUS_VCLEFT_FRONT_LATCH_STATUS_LATCH_DEFAULT_CHOICE (7u)
#define MODEL3_CAN_ID102_VCLEFT_DOOR_STATUS_VCLEFT_FRONT_LATCH_STATUS_LATCH_FAULT_CHOICE (8u)

#define MODEL3_CAN_ID102_VCLEFT_DOOR_STATUS_VCLEFT_REAR_LATCH_STATUS_LATCH_SNA_CHOICE (0u)
#define MODEL3_CAN_ID102_VCLEFT_DOOR_STATUS_VCLEFT_REAR_LATCH_STATUS_LATCH_OPENED_CHOICE (1u)
#define MODEL3_CAN_ID102_VCLEFT_DOOR_STATUS_VCLEFT_REAR_LATCH_STATUS_LATCH_CLOSED_CHOICE (2u)
#define MODEL3_CAN_ID102_VCLEFT_DOOR_STATUS_VCLEFT_REAR_LATCH_STATUS_LATCH_CLOSING_CHOICE (3u)
#define MODEL3_CAN_ID102_VCLEFT_DOOR_STATUS_VCLEFT_REAR_LATCH_STATUS_LATCH_OPENING_CHOICE (4u)
#define MODEL3_CAN_ID102_VCLEFT_DOOR_STATUS_VCLEFT_REAR_LATCH_STATUS_LATCH_AJAR_CHOICE (5u)
#define MODEL3_CAN_ID102_VCLEFT_DOOR_STATUS_VCLEFT_REAR_LATCH_STATUS_LATCH_TIMEOUT_CHOICE (6u)
#define MODEL3_CAN_ID102_VCLEFT_DOOR_STATUS_VCLEFT_REAR_LATCH_STATUS_LATCH_DEFAULT_CHOICE (7u)
#define MODEL3_CAN_ID102_VCLEFT_DOOR_STATUS_VCLEFT_REAR_LATCH_STATUS_LATCH_FAULT_CHOICE (8u)

#define MODEL3_CAN_ID102_VCLEFT_DOOR_STATUS_VCLEFT_MIRROR_STATE_MIRROR_STATE_IDLE_CHOICE (0u)
#define MODEL3_CAN_ID102_VCLEFT_DOOR_STATUS_VCLEFT_MIRROR_STATE_MIRROR_STATE_TILT_X_CHOICE (1u)
#define MODEL3_CAN_ID102_VCLEFT_DOOR_STATUS_VCLEFT_MIRROR_STATE_MIRROR_STATE_TILT_Y_CHOICE (2u)
#define MODEL3_CAN_ID102_VCLEFT_DOOR_STATUS_VCLEFT_MIRROR_STATE_MIRROR_STATE_FOLD_UNFOLD_CHOICE (3u)
#define MODEL3_CAN_ID102_VCLEFT_DOOR_STATUS_VCLEFT_MIRROR_STATE_MIRROR_STATE_RECALL_CHOICE (4u)

#define MODEL3_CAN_ID102_VCLEFT_DOOR_STATUS_VCLEFT_MIRROR_FOLD_STATE_MIRROR_FOLD_STATE_UNKNOWN_CHOICE (0u)
#define MODEL3_CAN_ID102_VCLEFT_DOOR_STATUS_VCLEFT_MIRROR_FOLD_STATE_MIRROR_FOLD_STATE_FOLDED_CHOICE (1u)
#define MODEL3_CAN_ID102_VCLEFT_DOOR_STATUS_VCLEFT_MIRROR_FOLD_STATE_MIRROR_FOLD_STATE_UNFOLDED_CHOICE (2u)
#define MODEL3_CAN_ID102_VCLEFT_DOOR_STATUS_VCLEFT_MIRROR_FOLD_STATE_MIRROR_FOLD_STATE_FOLDING_CHOICE (3u)
#define MODEL3_CAN_ID102_VCLEFT_DOOR_STATUS_VCLEFT_MIRROR_FOLD_STATE_MIRROR_FOLD_STATE_UNFOLDING_CHOICE (4u)

#define MODEL3_CAN_ID102_VCLEFT_DOOR_STATUS_VCLEFT_MIRROR_RECALL_STATE_MIRROR_RECALL_STATE_INIT_CHOICE (0u)
#define MODEL3_CAN_ID102_VCLEFT_DOOR_STATUS_VCLEFT_MIRROR_RECALL_STATE_MIRROR_RECALL_STATE_RECALLING_AXIS_1_CHOICE (1u)
#define MODEL3_CAN_ID102_VCLEFT_DOOR_STATUS_VCLEFT_MIRROR_RECALL_STATE_MIRROR_RECALL_STATE_RECALLING_AXIS_2_CHOICE (2u)
#define MODEL3_CAN_ID102_VCLEFT_DOOR_STATUS_VCLEFT_MIRROR_RECALL_STATE_MIRROR_RECALL_STATE_RECALLING_COMPLETE_CHOICE (3u)
#define MODEL3_CAN_ID102_VCLEFT_DOOR_STATUS_VCLEFT_MIRROR_RECALL_STATE_MIRROR_RECALL_STATE_RECALLING_FAILED_CHOICE (4u)
#define MODEL3_CAN_ID102_VCLEFT_DOOR_STATUS_VCLEFT_MIRROR_RECALL_STATE_MIRROR_RECALL_STATE_RECALLING_STOPPED_CHOICE (5u)

#define MODEL3_CAN_ID102_VCLEFT_DOOR_STATUS_VCLEFT_MIRROR_HEAT_STATE_HEATER_STATE_SNA_CHOICE (0u)
#define MODEL3_CAN_ID102_VCLEFT_DOOR_STATUS_VCLEFT_MIRROR_HEAT_STATE_HEATER_STATE_ON_CHOICE (1u)
#define MODEL3_CAN_ID102_VCLEFT_DOOR_STATUS_VCLEFT_MIRROR_HEAT_STATE_HEATER_STATE_OFF_CHOICE (2u)
#define MODEL3_CAN_ID102_VCLEFT_DOOR_STATUS_VCLEFT_MIRROR_HEAT_STATE_HEATER_STATE_OFF_UNAVAILABLE_CHOICE (3u)
#define MODEL3_CAN_ID102_VCLEFT_DOOR_STATUS_VCLEFT_MIRROR_HEAT_STATE_HEATER_STATE_FAULT_CHOICE (4u)

#define MODEL3_CAN_ID103_VCRIGHT_DOOR_STATUS_VCRIGHT_FRONT_LATCH_STATUS_LATCH_SNA_CHOICE (0u)
#define MODEL3_CAN_ID103_VCRIGHT_DOOR_STATUS_VCRIGHT_FRONT_LATCH_STATUS_LATCH_OPENED_CHOICE (1u)
#define MODEL3_CAN_ID103_VCRIGHT_DOOR_STATUS_VCRIGHT_FRONT_LATCH_STATUS_LATCH_CLOSED_CHOICE (2u)
#define MODEL3_CAN_ID103_VCRIGHT_DOOR_STATUS_VCRIGHT_FRONT_LATCH_STATUS_LATCH_CLOSING_CHOICE (3u)
#define MODEL3_CAN_ID103_VCRIGHT_DOOR_STATUS_VCRIGHT_FRONT_LATCH_STATUS_LATCH_OPENING_CHOICE (4u)
#define MODEL3_CAN_ID103_VCRIGHT_DOOR_STATUS_VCRIGHT_FRONT_LATCH_STATUS_LATCH_AJAR_CHOICE (5u)
#define MODEL3_CAN_ID103_VCRIGHT_DOOR_STATUS_VCRIGHT_FRONT_LATCH_STATUS_LATCH_TIMEOUT_CHOICE (6u)
#define MODEL3_CAN_ID103_VCRIGHT_DOOR_STATUS_VCRIGHT_FRONT_LATCH_STATUS_LATCH_DEFAULT_CHOICE (7u)
#define MODEL3_CAN_ID103_VCRIGHT_DOOR_STATUS_VCRIGHT_FRONT_LATCH_STATUS_LATCH_FAULT_CHOICE (8u)

#define MODEL3_CAN_ID103_VCRIGHT_DOOR_STATUS_VCRIGHT_REAR_LATCH_STATUS_LATCH_SNA_CHOICE (0u)
#define MODEL3_CAN_ID103_VCRIGHT_DOOR_STATUS_VCRIGHT_REAR_LATCH_STATUS_LATCH_OPENED_CHOICE (1u)
#define MODEL3_CAN_ID103_VCRIGHT_DOOR_STATUS_VCRIGHT_REAR_LATCH_STATUS_LATCH_CLOSED_CHOICE (2u)
#define MODEL3_CAN_ID103_VCRIGHT_DOOR_STATUS_VCRIGHT_REAR_LATCH_STATUS_LATCH_CLOSING_CHOICE (3u)
#define MODEL3_CAN_ID103_VCRIGHT_DOOR_STATUS_VCRIGHT_REAR_LATCH_STATUS_LATCH_OPENING_CHOICE (4u)
#define MODEL3_CAN_ID103_VCRIGHT_DOOR_STATUS_VCRIGHT_REAR_LATCH_STATUS_LATCH_AJAR_CHOICE (5u)
#define MODEL3_CAN_ID103_VCRIGHT_DOOR_STATUS_VCRIGHT_REAR_LATCH_STATUS_LATCH_TIMEOUT_CHOICE (6u)
#define MODEL3_CAN_ID103_VCRIGHT_DOOR_STATUS_VCRIGHT_REAR_LATCH_STATUS_LATCH_DEFAULT_CHOICE (7u)
#define MODEL3_CAN_ID103_VCRIGHT_DOOR_STATUS_VCRIGHT_REAR_LATCH_STATUS_LATCH_FAULT_CHOICE (8u)

#define MODEL3_CAN_ID103_VCRIGHT_DOOR_STATUS_VCRIGHT_MIRROR_STATE_MIRROR_STATE_IDLE_CHOICE (0u)
#define MODEL3_CAN_ID103_VCRIGHT_DOOR_STATUS_VCRIGHT_MIRROR_STATE_MIRROR_STATE_TILT_X_CHOICE (1u)
#define MODEL3_CAN_ID103_VCRIGHT_DOOR_STATUS_VCRIGHT_MIRROR_STATE_MIRROR_STATE_TILT_Y_CHOICE (2u)
#define MODEL3_CAN_ID103_VCRIGHT_DOOR_STATUS_VCRIGHT_MIRROR_STATE_MIRROR_STATE_FOLD_UNFOLD_CHOICE (3u)
#define MODEL3_CAN_ID103_VCRIGHT_DOOR_STATUS_VCRIGHT_MIRROR_STATE_MIRROR_STATE_RECALL_CHOICE (4u)

#define MODEL3_CAN_ID103_VCRIGHT_DOOR_STATUS_VCRIGHT_MIRROR_FOLD_STATE_MIRROR_FOLD_STATE_UNKNOWN_CHOICE (0u)
#define MODEL3_CAN_ID103_VCRIGHT_DOOR_STATUS_VCRIGHT_MIRROR_FOLD_STATE_MIRROR_FOLD_STATE_FOLDED_CHOICE (1u)
#define MODEL3_CAN_ID103_VCRIGHT_DOOR_STATUS_VCRIGHT_MIRROR_FOLD_STATE_MIRROR_FOLD_STATE_UNFOLDED_CHOICE (2u)
#define MODEL3_CAN_ID103_VCRIGHT_DOOR_STATUS_VCRIGHT_MIRROR_FOLD_STATE_MIRROR_FOLD_STATE_FOLDING_CHOICE (3u)
#define MODEL3_CAN_ID103_VCRIGHT_DOOR_STATUS_VCRIGHT_MIRROR_FOLD_STATE_MIRROR_FOLD_STATE_UNFOLDING_CHOICE (4u)

#define MODEL3_CAN_ID103_VCRIGHT_DOOR_STATUS_VCRIGHT_TRUNK_LATCH_STATUS_LATCH_SNA_CHOICE (0u)
#define MODEL3_CAN_ID103_VCRIGHT_DOOR_STATUS_VCRIGHT_TRUNK_LATCH_STATUS_LATCH_OPENED_CHOICE (1u)
#define MODEL3_CAN_ID103_VCRIGHT_DOOR_STATUS_VCRIGHT_TRUNK_LATCH_STATUS_LATCH_CLOSED_CHOICE (2u)
#define MODEL3_CAN_ID103_VCRIGHT_DOOR_STATUS_VCRIGHT_TRUNK_LATCH_STATUS_LATCH_CLOSING_CHOICE (3u)
#define MODEL3_CAN_ID103_VCRIGHT_DOOR_STATUS_VCRIGHT_TRUNK_LATCH_STATUS_LATCH_OPENING_CHOICE (4u)
#define MODEL3_CAN_ID103_VCRIGHT_DOOR_STATUS_VCRIGHT_TRUNK_LATCH_STATUS_LATCH_AJAR_CHOICE (5u)
#define MODEL3_CAN_ID103_VCRIGHT_DOOR_STATUS_VCRIGHT_TRUNK_LATCH_STATUS_LATCH_TIMEOUT_CHOICE (6u)
#define MODEL3_CAN_ID103_VCRIGHT_DOOR_STATUS_VCRIGHT_TRUNK_LATCH_STATUS_LATCH_DEFAULT_CHOICE (7u)
#define MODEL3_CAN_ID103_VCRIGHT_DOOR_STATUS_VCRIGHT_TRUNK_LATCH_STATUS_LATCH_FAULT_CHOICE (8u)

#define MODEL3_CAN_ID103_VCRIGHT_DOOR_STATUS_VCRIGHT_MIRROR_RECALL_STATE_MIRROR_RECALL_STATE_INIT_CHOICE (0u)
#define MODEL3_CAN_ID103_VCRIGHT_DOOR_STATUS_VCRIGHT_MIRROR_RECALL_STATE_MIRROR_RECALL_STATE_RECALLING_AXIS_1_CHOICE (1u)
#define MODEL3_CAN_ID103_VCRIGHT_DOOR_STATUS_VCRIGHT_MIRROR_RECALL_STATE_MIRROR_RECALL_STATE_RECALLING_AXIS_2_CHOICE (2u)
#define MODEL3_CAN_ID103_VCRIGHT_DOOR_STATUS_VCRIGHT_MIRROR_RECALL_STATE_MIRROR_RECALL_STATE_RECALLING_COMPLETE_CHOICE (3u)
#define MODEL3_CAN_ID103_VCRIGHT_DOOR_STATUS_VCRIGHT_MIRROR_RECALL_STATE_MIRROR_RECALL_STATE_RECALLING_FAILED_CHOICE (4u)
#define MODEL3_CAN_ID103_VCRIGHT_DOOR_STATUS_VCRIGHT_MIRROR_RECALL_STATE_MIRROR_RECALL_STATE_RECALLING_STOPPED_CHOICE (5u)

#define MODEL3_CAN_ID247_DAS_AUTOPILOT_DEBUG_DAS_MISSION_PLAN_MISSION_PLAN_MAP_ONLY_CHOICE (0u)
#define MODEL3_CAN_ID247_DAS_AUTOPILOT_DEBUG_DAS_MISSION_PLAN_MISSION_PLAN_VISION_ONLY_CHOICE (1u)
#define MODEL3_CAN_ID247_DAS_AUTOPILOT_DEBUG_DAS_MISSION_PLAN_MISSION_PLAN_MAP_AND_VISION_CHOICE (2u)
#define MODEL3_CAN_ID247_DAS_AUTOPILOT_DEBUG_DAS_MISSION_PLAN_MISSION_PLAN_INVALID_CHOICE (3u)

#define MODEL3_CAN_ID247_DAS_AUTOPILOT_DEBUG_DAS_ROAD_ESTIMATOR_ROAD_ESTIMATOR_HEALTHY_CHOICE (0u)
#define MODEL3_CAN_ID247_DAS_AUTOPILOT_DEBUG_DAS_ROAD_ESTIMATOR_ROAD_ESTIMATOR_UNSTABLE_MEASUREMENTS_CHOICE (1u)
#define MODEL3_CAN_ID247_DAS_AUTOPILOT_DEBUG_DAS_ROAD_ESTIMATOR_ROAD_ESTIMATOR_DEGRADED_CHOICE (2u)
#define MODEL3_CAN_ID247_DAS_AUTOPILOT_DEBUG_DAS_ROAD_ESTIMATOR_ROAD_ESTIMATOR_CRITICAL_CHOICE (3u)

#define MODEL3_CAN_ID247_DAS_AUTOPILOT_DEBUG_DAS_LOCALIZER_HEALTH_LOCALIZER_CRITICAL_CHOICE (0u)
#define MODEL3_CAN_ID247_DAS_AUTOPILOT_DEBUG_DAS_LOCALIZER_HEALTH_LOCALIZER_DEGRADED_CHOICE (1u)
#define MODEL3_CAN_ID247_DAS_AUTOPILOT_DEBUG_DAS_LOCALIZER_HEALTH_LOCALIZER_RECOVERING_CHOICE (2u)
#define MODEL3_CAN_ID247_DAS_AUTOPILOT_DEBUG_DAS_LOCALIZER_HEALTH_LOCALIZER_NO_LANE_LOCALIZED_CHOICE (3u)
#define MODEL3_CAN_ID247_DAS_AUTOPILOT_DEBUG_DAS_LOCALIZER_HEALTH_LOCALIZER_SHADOW_CHOICE (4u)
#define MODEL3_CAN_ID247_DAS_AUTOPILOT_DEBUG_DAS_LOCALIZER_HEALTH_LOCALIZER_NEAR_LANE_LOCALIZED_CHOICE (5u)
#define MODEL3_CAN_ID247_DAS_AUTOPILOT_DEBUG_DAS_LOCALIZER_HEALTH_LOCALIZER_LANE_LOCALIZED_CHOICE (6u)
#define MODEL3_CAN_ID247_DAS_AUTOPILOT_DEBUG_DAS_LOCALIZER_HEALTH_LOCALIZER_FINE_LOCALIZED_STICKING_CHOICE (7u)
#define MODEL3_CAN_ID247_DAS_AUTOPILOT_DEBUG_DAS_LOCALIZER_HEALTH_LOCALIZER_FINE_LOCALIZED_CONFIRMED_CHOICE (8u)

#define MODEL3_CAN_ID247_DAS_AUTOPILOT_DEBUG_DAS_MAP_AVAILABILITY_APM_MAP_NOT_AVAILABLE_CHOICE (0u)
#define MODEL3_CAN_ID247_DAS_AUTOPILOT_DEBUG_DAS_MAP_AVAILABILITY_APM_MAP_AVAILABLE_CHOICE (1u)

#define MODEL3_CAN_ID247_DAS_AUTOPILOT_DEBUG_DAS_CONTROLLER_REF_CONTROLLER_REFERENCE_HEALTHY_CHOICE (0u)
#define MODEL3_CAN_ID247_DAS_AUTOPILOT_DEBUG_DAS_CONTROLLER_REF_CONTROLLER_REFERENCE_UNHEALTHY_CHOICE (1u)
#define MODEL3_CAN_ID247_DAS_AUTOPILOT_DEBUG_DAS_CONTROLLER_REF_CONTROLLER_REFERENCE_STALE_REFERENCE_CHOICE (2u)
#define MODEL3_CAN_ID247_DAS_AUTOPILOT_DEBUG_DAS_CONTROLLER_REF_CONTROLLER_REFERENCE_STALE_LOCALIZATION_CHOICE (3u)
#define MODEL3_CAN_ID247_DAS_AUTOPILOT_DEBUG_DAS_CONTROLLER_REF_CONTROLLER_REFERENCE_BAD_REF_UPDATE_CHOICE (4u)
#define MODEL3_CAN_ID247_DAS_AUTOPILOT_DEBUG_DAS_CONTROLLER_REF_CONTROLLER_REFERENCE_REF_TOO_SHORT_CHOICE (5u)
#define MODEL3_CAN_ID247_DAS_AUTOPILOT_DEBUG_DAS_CONTROLLER_REF_CONTROLLER_REFERENCE_INDETERMINATE_CHOICE (6u)

#define MODEL3_CAN_ID247_DAS_AUTOPILOT_DEBUG_DAS_ALC_INTERNAL_STATE_ALC_DISABLED_CHOICE (0u)
#define MODEL3_CAN_ID247_DAS_AUTOPILOT_DEBUG_DAS_ALC_INTERNAL_STATE_ALC_IDLE_CHOICE (1u)
#define MODEL3_CAN_ID247_DAS_AUTOPILOT_DEBUG_DAS_ALC_INTERNAL_STATE_ALC_ABORTING_CHOICE (2u)
#define MODEL3_CAN_ID247_DAS_AUTOPILOT_DEBUG_DAS_ALC_INTERNAL_STATE_ALC_BEHAVIOR_CHECK_CHOICE (3u)
#define MODEL3_CAN_ID247_DAS_AUTOPILOT_DEBUG_DAS_ALC_INTERNAL_STATE_ALC_PRE_ACTIVE_LEFT_CHOICE (4u)
#define MODEL3_CAN_ID247_DAS_AUTOPILOT_DEBUG_DAS_ALC_INTERNAL_STATE_ALC_PRE_ACTIVE_RIGHT_CHOICE (5u)
#define MODEL3_CAN_ID247_DAS_AUTOPILOT_DEBUG_DAS_ALC_INTERNAL_STATE_ALC_ACTIVE_LEFT_CHOICE (6u)
#define MODEL3_CAN_ID247_DAS_AUTOPILOT_DEBUG_DAS_ALC_INTERNAL_STATE_ALC_ACTIVE_RIGHT_CHOICE (7u)
#define MODEL3_CAN_ID247_DAS_AUTOPILOT_DEBUG_DAS_ALC_INTERNAL_STATE_ALC_ACTIVE_ACC_LEFT_CHOICE (8u)
#define MODEL3_CAN_ID247_DAS_AUTOPILOT_DEBUG_DAS_ALC_INTERNAL_STATE_ALC_ACTIVE_ACC_RIGHT_CHOICE (9u)
#define MODEL3_CAN_ID247_DAS_AUTOPILOT_DEBUG_DAS_ALC_INTERNAL_STATE_ALC_SOFT_ABORTING_LEFT_CHOICE (10u)
#define MODEL3_CAN_ID247_DAS_AUTOPILOT_DEBUG_DAS_ALC_INTERNAL_STATE_ALC_SOFT_ABORTING_RIGHT_CHOICE (11u)
#define MODEL3_CAN_ID247_DAS_AUTOPILOT_DEBUG_DAS_ALC_INTERNAL_STATE_ALC_RETRY_CHOICE (12u)

#define MODEL3_CAN_ID247_DAS_AUTOPILOT_DEBUG_DAS_BEHAVIOR_REPORT_BEHAVIOR_VIEW_RANGE_CHOICE (1u)
#define MODEL3_CAN_ID247_DAS_AUTOPILOT_DEBUG_DAS_BEHAVIOR_REPORT_BEHAVIOR_CURVE_SPEED_ADAPTATION_CHOICE (2u)
#define MODEL3_CAN_ID247_DAS_AUTOPILOT_DEBUG_DAS_BEHAVIOR_REPORT_BEHAVIOR_RADAR_ONLY_BRAKING_CHOICE (3u)
#define MODEL3_CAN_ID247_DAS_AUTOPILOT_DEBUG_DAS_BEHAVIOR_REPORT_BEHAVIOR_KEEP_CALM_CHOICE (4u)
#define MODEL3_CAN_ID247_DAS_AUTOPILOT_DEBUG_DAS_BEHAVIOR_REPORT_BEHAVIOR_FLEET_SPEEDS_CHOICE (5u)
#define MODEL3_CAN_ID247_DAS_AUTOPILOT_DEBUG_DAS_BEHAVIOR_REPORT_BEHAVIOR_TRAFFIC_CONTROL_STOPPED_STATE_CHOICE (6u)
#define MODEL3_CAN_ID247_DAS_AUTOPILOT_DEBUG_DAS_BEHAVIOR_REPORT_BEHAVIOR_UNDERTAKE_ASSIST_KEEP_CALM_CHOICE (7u)
#define MODEL3_CAN_ID247_DAS_AUTOPILOT_DEBUG_DAS_BEHAVIOR_REPORT_BEHAVIOR_IN_LANE_VEHICLE_CHOICE (8u)
#define MODEL3_CAN_ID247_DAS_AUTOPILOT_DEBUG_DAS_BEHAVIOR_REPORT_BEHAVIOR_TARGET_LANE_VEHICLE_CHOICE (9u)
#define MODEL3_CAN_ID247_DAS_AUTOPILOT_DEBUG_DAS_BEHAVIOR_REPORT_BEHAVIOR_UNDERTAKE_VEHICLE_CHOICE (10u)
#define MODEL3_CAN_ID247_DAS_AUTOPILOT_DEBUG_DAS_BEHAVIOR_REPORT_BEHAVIOR_TRAFFIC_CONTROL_CHOICE (11u)
#define MODEL3_CAN_ID247_DAS_AUTOPILOT_DEBUG_DAS_BEHAVIOR_REPORT_BEHAVIOR_VISION_LANE_GEOMETRY_CHOICE (12u)
#define MODEL3_CAN_ID247_DAS_AUTOPILOT_DEBUG_DAS_BEHAVIOR_REPORT_BEHAVIOR_MAP_LANE_GEOMETRY_CHOICE (13u)
#define MODEL3_CAN_ID247_DAS_AUTOPILOT_DEBUG_DAS_BEHAVIOR_REPORT_BEHAVIOR_DRIVABLE_SPACE_VIOLATION_CHOICE (14u)
#define MODEL3_CAN_ID247_DAS_AUTOPILOT_DEBUG_DAS_BEHAVIOR_REPORT_BEHAVIOR_SLOWING_FOR_TARGET_LANE_CHOICE (15u)
#define MODEL3_CAN_ID247_DAS_AUTOPILOT_DEBUG_DAS_BEHAVIOR_REPORT_BEHAVIOR_VISION_SPEEDS_CHOICE (16u)
#define MODEL3_CAN_ID247_DAS_AUTOPILOT_DEBUG_DAS_BEHAVIOR_REPORT_BEHAVIOR_NAV_FLEET_SPEEDS_CHOICE (17u)
#define MODEL3_CAN_ID247_DAS_AUTOPILOT_DEBUG_DAS_BEHAVIOR_REPORT_BEHAVIOR_NAV_PATH_CSA_CHOICE (18u)
#define MODEL3_CAN_ID247_DAS_AUTOPILOT_DEBUG_DAS_BEHAVIOR_REPORT_BEHAVIOR_MERGE_VEHICLE_LEFT_CHOICE (19u)
#define MODEL3_CAN_ID247_DAS_AUTOPILOT_DEBUG_DAS_BEHAVIOR_REPORT_BEHAVIOR_MERGE_VEHICLE_RIGHT_CHOICE (20u)
#define MODEL3_CAN_ID247_DAS_AUTOPILOT_DEBUG_DAS_BEHAVIOR_REPORT_BEHAVIOR_CUTIN_VEHICLE_LEFT_CHOICE (21u)
#define MODEL3_CAN_ID247_DAS_AUTOPILOT_DEBUG_DAS_BEHAVIOR_REPORT_BEHAVIOR_CUTIN_VEHICLE_RIGHT_CHOICE (22u)
#define MODEL3_CAN_ID247_DAS_AUTOPILOT_DEBUG_DAS_BEHAVIOR_REPORT_BEHAVIOR_MP_AP_RESTRICTION_CHOICE (23u)
#define MODEL3_CAN_ID247_DAS_AUTOPILOT_DEBUG_DAS_BEHAVIOR_REPORT_BEHAVIOR_MP_NOT_BUCKLED_CHOICE (24u)
#define MODEL3_CAN_ID247_DAS_AUTOPILOT_DEBUG_DAS_BEHAVIOR_REPORT_BEHAVIOR_MP_DRIVER_MONITOR_CHOICE (25u)
#define MODEL3_CAN_ID247_DAS_AUTOPILOT_DEBUG_DAS_BEHAVIOR_REPORT_BEHAVIOR_MP_AP_STATE_MACHINE_CHOICE (26u)
#define MODEL3_CAN_ID247_DAS_AUTOPILOT_DEBUG_DAS_BEHAVIOR_REPORT_BEHAVIOR_MP_DI_CRUISE_CHOICE (27u)
#define MODEL3_CAN_ID247_DAS_AUTOPILOT_DEBUG_DAS_BEHAVIOR_REPORT_BEHAVIOR_MP_ULC_CHOICE (28u)
#define MODEL3_CAN_ID247_DAS_AUTOPILOT_DEBUG_DAS_BEHAVIOR_REPORT_BEHAVIOR_MP_AP_INACTIVE_CHOICE (29u)
#define MODEL3_CAN_ID247_DAS_AUTOPILOT_DEBUG_DAS_BEHAVIOR_REPORT_BEHAVIOR_ACTIVE_SAFETY_SLOWDOWN_CHOICE (30u)
#define MODEL3_CAN_ID247_DAS_AUTOPILOT_DEBUG_DAS_BEHAVIOR_REPORT_BEHAVIOR_STEERING_SATURATED_CHOICE (31u)
#define MODEL3_CAN_ID247_DAS_AUTOPILOT_DEBUG_DAS_BEHAVIOR_REPORT_BEHAVIOR_END_OF_NAV_ROUTE_CHOICE (32u)
#define MODEL3_CAN_ID247_DAS_AUTOPILOT_DEBUG_DAS_BEHAVIOR_REPORT_BEHAVIOR_LANE_SPEED_DIFF_CHOICE (33u)
#define MODEL3_CAN_ID247_DAS_AUTOPILOT_DEBUG_DAS_BEHAVIOR_REPORT_BEHAVIOR_STATIC_OBJECT_CHOICE (34u)
#define MODEL3_CAN_ID247_DAS_AUTOPILOT_DEBUG_DAS_BEHAVIOR_REPORT_BEHAVIOR_CUTIN_VEHICLE_CHOICE (35u)
#define MODEL3_CAN_ID247_DAS_AUTOPILOT_DEBUG_DAS_BEHAVIOR_REPORT_BEHAVIOR_STATIC_OBJECT_MERGE_LEFT_CHOICE (36u)
#define MODEL3_CAN_ID247_DAS_AUTOPILOT_DEBUG_DAS_BEHAVIOR_REPORT_BEHAVIOR_STATIC_OBJECT_MERGE_RIGHT_CHOICE (37u)
#define MODEL3_CAN_ID247_DAS_AUTOPILOT_DEBUG_DAS_BEHAVIOR_REPORT_BEHAVIOR_RISK_MANAGER_CHOICE (38u)

#define MODEL3_CAN_ID247_DAS_AUTOPILOT_DEBUG_DAS_CONTROLLER_HEALTH_CONTROLLER_HEALTHY_CHOICE (0u)
#define MODEL3_CAN_ID247_DAS_AUTOPILOT_DEBUG_DAS_CONTROLLER_HEALTH_CONTROLLER_DEGRADED_CHOICE (1u)
#define MODEL3_CAN_ID247_DAS_AUTOPILOT_DEBUG_DAS_CONTROLLER_HEALTH_CONTROLLER_CRITICAL_CHOICE (2u)
#define MODEL3_CAN_ID247_DAS_AUTOPILOT_DEBUG_DAS_CONTROLLER_HEALTH_CONTROLLER_SOLVER_FAILURE_CHOICE (3u)

#define MODEL3_CAN_ID247_DAS_AUTOPILOT_DEBUG_DAS_AUTOPILOT_ABORT_REASON_ABORT_NONE_CHOICE (0u)
#define MODEL3_CAN_ID247_DAS_AUTOPILOT_DEBUG_DAS_AUTOPILOT_ABORT_REASON_ABORT_WATCHDOG_HEALTH_CHOICE (1u)
#define MODEL3_CAN_ID247_DAS_AUTOPILOT_DEBUG_DAS_AUTOPILOT_ABORT_REASON_ABORT_DI_MIA_CHOICE (2u)
#define MODEL3_CAN_ID247_DAS_AUTOPILOT_DEBUG_DAS_AUTOPILOT_ABORT_REASON_ABORT_ESP_MIA_CHOICE (3u)
#define MODEL3_CAN_ID247_DAS_AUTOPILOT_DEBUG_DAS_AUTOPILOT_ABORT_REASON_ABORT_EPAS_MIA_CHOICE (4u)
#define MODEL3_CAN_ID247_DAS_AUTOPILOT_DEBUG_DAS_AUTOPILOT_ABORT_REASON_ABORT_GTW_MIA_CHOICE (5u)
#define MODEL3_CAN_ID247_DAS_AUTOPILOT_DEBUG_DAS_AUTOPILOT_ABORT_REASON_ABORT_SCCM_MIA_CHOICE (6u)
#define MODEL3_CAN_ID247_DAS_AUTOPILOT_DEBUG_DAS_AUTOPILOT_ABORT_REASON_ABORT_RADAR_MIA_CHOICE (7u)
#define MODEL3_CAN_ID247_DAS_AUTOPILOT_DEBUG_DAS_AUTOPILOT_ABORT_REASON_ABORT_VCFRONT_MIA_CHOICE (8u)
#define MODEL3_CAN_ID247_DAS_AUTOPILOT_DEBUG_DAS_AUTOPILOT_ABORT_REASON_ABORT_VCRIGHT_MIA_CHOICE (9u)
#define MODEL3_CAN_ID247_DAS_AUTOPILOT_DEBUG_DAS_AUTOPILOT_ABORT_REASON_ABORT_CRUISE_FAULT_CHOICE (10u)
#define MODEL3_CAN_ID247_DAS_AUTOPILOT_DEBUG_DAS_AUTOPILOT_ABORT_REASON_ABORT_CRUISE_NOT_ACTIVE_CHOICE (11u)
#define MODEL3_CAN_ID247_DAS_AUTOPILOT_DEBUG_DAS_AUTOPILOT_ABORT_REASON_ABORT_USER_DISABLED_CHOICE (12u)
#define MODEL3_CAN_ID247_DAS_AUTOPILOT_DEBUG_DAS_AUTOPILOT_ABORT_REASON_ABORT_TRAILER_MODE_ACTIVE_CHOICE (13u)
#define MODEL3_CAN_ID247_DAS_AUTOPILOT_DEBUG_DAS_AUTOPILOT_ABORT_REASON_ABORT_VEHICLE_SPEED_ABOVE_MAX_CHOICE (14u)
#define MODEL3_CAN_ID247_DAS_AUTOPILOT_DEBUG_DAS_AUTOPILOT_ABORT_REASON_ABORT_EPAS_EAC_NOT_ACTIVE_CHOICE (15u)
#define MODEL3_CAN_ID247_DAS_AUTOPILOT_DEBUG_DAS_AUTOPILOT_ABORT_REASON_ABORT_EPAS_EAC_ERROR_CHOICE (16u)
#define MODEL3_CAN_ID247_DAS_AUTOPILOT_DEBUG_DAS_AUTOPILOT_ABORT_REASON_ABORT_CAMERA_FAILSAFES_CHOICE (17u)
#define MODEL3_CAN_ID247_DAS_AUTOPILOT_DEBUG_DAS_AUTOPILOT_ABORT_REASON_ABORT_CAMERA_CALIBRATION_CHOICE (18u)
#define MODEL3_CAN_ID247_DAS_AUTOPILOT_DEBUG_DAS_AUTOPILOT_ABORT_REASON_ABORT_RADAR_BLIND_CHOICE (19u)
#define MODEL3_CAN_ID247_DAS_AUTOPILOT_DEBUG_DAS_AUTOPILOT_ABORT_REASON_ABORT_RADAR_FAULT_CHOICE (20u)
#define MODEL3_CAN_ID247_DAS_AUTOPILOT_DEBUG_DAS_AUTOPILOT_ABORT_REASON_ABORT_ACC_CANCEL_GENERIC_CHOICE (21u)
#define MODEL3_CAN_ID247_DAS_AUTOPILOT_DEBUG_DAS_AUTOPILOT_ABORT_REASON_ABORT_ACC_CANCEL_SILENT_CHOICE (22u)
#define MODEL3_CAN_ID247_DAS_AUTOPILOT_DEBUG_DAS_AUTOPILOT_ABORT_REASON_ABORT_ACC_FAULT_CHOICE (23u)
#define MODEL3_CAN_ID247_DAS_AUTOPILOT_DEBUG_DAS_AUTOPILOT_ABORT_REASON_ABORT_ROAD_ESTIMATOR_HEALTH_CHOICE (24u)
#define MODEL3_CAN_ID247_DAS_AUTOPILOT_DEBUG_DAS_AUTOPILOT_ABORT_REASON_ABORT_CONTROLLER_REFERENCE_CHOICE (25u)
#define MODEL3_CAN_ID247_DAS_AUTOPILOT_DEBUG_DAS_AUTOPILOT_ABORT_REASON_ABORT_CONTROLLER_SOLVER_CHOICE (26u)
#define MODEL3_CAN_ID247_DAS_AUTOPILOT_DEBUG_DAS_AUTOPILOT_ABORT_REASON_ABORT_CONTROLLER_NOT_ALLOWED_CHOICE (27u)
#define MODEL3_CAN_ID247_DAS_AUTOPILOT_DEBUG_DAS_AUTOPILOT_ABORT_REASON_ABORT_THERMAL_ISSUE_CHOICE (28u)
#define MODEL3_CAN_ID247_DAS_AUTOPILOT_DEBUG_DAS_AUTOPILOT_ABORT_REASON_ABORT_MAP_HEALTH_CHOICE (29u)
#define MODEL3_CAN_ID247_DAS_AUTOPILOT_DEBUG_DAS_AUTOPILOT_ABORT_REASON_ABORT_CONTROLLER_STALE_REFERENCE_CHOICE (30u)
#define MODEL3_CAN_ID247_DAS_AUTOPILOT_DEBUG_DAS_AUTOPILOT_ABORT_REASON_ABORT_CONTROLLER_STALE_LOCALIZATION_CHOICE (31u)
#define MODEL3_CAN_ID247_DAS_AUTOPILOT_DEBUG_DAS_AUTOPILOT_ABORT_REASON_ABORT_CONTROLLER_BAD_REF_UPDATE_CHOICE (32u)
#define MODEL3_CAN_ID247_DAS_AUTOPILOT_DEBUG_DAS_AUTOPILOT_ABORT_REASON_ABORT_AEB_CHOICE (33u)
#define MODEL3_CAN_ID247_DAS_AUTOPILOT_DEBUG_DAS_AUTOPILOT_ABORT_REASON_ABORT_CONTROLLER_REF_TOO_SHORT_CHOICE (34u)
#define MODEL3_CAN_ID247_DAS_AUTOPILOT_DEBUG_DAS_AUTOPILOT_ABORT_REASON_ABORT_MISSION_PLANNER_NO_VISION_LANES_FOUND_CHOICE (35u)
#define MODEL3_CAN_ID247_DAS_AUTOPILOT_DEBUG_DAS_AUTOPILOT_ABORT_REASON_ABORT_GORE_INCURSION_CHOICE (36u)
#define MODEL3_CAN_ID247_DAS_AUTOPILOT_DEBUG_DAS_AUTOPILOT_ABORT_REASON_ABORT_REACHED_END_OF_NAV_STOP_CHOICE (37u)
#define MODEL3_CAN_ID247_DAS_AUTOPILOT_DEBUG_DAS_AUTOPILOT_ABORT_REASON_ABORT_STEERING_SATURATED_LANE_DEPARTURE_CHOICE (38u)
#define MODEL3_CAN_ID247_DAS_AUTOPILOT_DEBUG_DAS_AUTOPILOT_ABORT_REASON_ABORT_EPAS_STEERING_ANGLE_INVALID_CHOICE (39u)
#define MODEL3_CAN_ID247_DAS_AUTOPILOT_DEBUG_DAS_AUTOPILOT_ABORT_REASON_ABORT_W048_FEATURES_DISABLED_CHOICE (40u)
#define MODEL3_CAN_ID247_DAS_AUTOPILOT_DEBUG_DAS_AUTOPILOT_ABORT_REASON_ABORT_INVALID_DI_PEDAL_POS_CHOICE (41u)
#define MODEL3_CAN_ID247_DAS_AUTOPILOT_DEBUG_DAS_AUTOPILOT_ABORT_REASON_ABORT_INVALID_VEHICLE_SPEED_CHOICE (42u)
#define MODEL3_CAN_ID247_DAS_AUTOPILOT_DEBUG_DAS_AUTOPILOT_ABORT_REASON_ABORT_PERCEPTION_HEALTH_VISION_CHOICE (43u)
#define MODEL3_CAN_ID247_DAS_AUTOPILOT_DEBUG_DAS_AUTOPILOT_ABORT_REASON_ABORT_SEATBELT_UNBUCKLED_CHOICE (44u)
#define MODEL3_CAN_ID247_DAS_AUTOPILOT_DEBUG_DAS_AUTOPILOT_ABORT_REASON_ABORT_USER_OVERRIDE_STRIKEOUT_CHOICE (45u)
#define MODEL3_CAN_ID247_DAS_AUTOPILOT_DEBUG_DAS_AUTOPILOT_ABORT_REASON_ABORT_INTEGRATOR_HEALTH_CRITICAL_CHOICE (46u)
#define MODEL3_CAN_ID247_DAS_AUTOPILOT_DEBUG_DAS_AUTOPILOT_ABORT_REASON_ABORT_REASON_MAX_CHOICE (63u)

#define MODEL3_CAN_ID247_DAS_AUTOPILOT_DEBUG_DAS_RQSTED_BEHAVIOR_STATUS_RQST_BEHAVIOR_VALID_CHOICE (0u)
#define MODEL3_CAN_ID247_DAS_AUTOPILOT_DEBUG_DAS_RQSTED_BEHAVIOR_STATUS_RQST_BEHAVIOR_NO_SRC_POLYLANE_CHOICE (1u)
#define MODEL3_CAN_ID247_DAS_AUTOPILOT_DEBUG_DAS_RQSTED_BEHAVIOR_STATUS_RQST_BEHAVIOR_NO_DEST_POLYLANE_CHOICE (2u)
#define MODEL3_CAN_ID247_DAS_AUTOPILOT_DEBUG_DAS_RQSTED_BEHAVIOR_STATUS_RQST_BEHAVIOR_MAP_NOT_INITIALIZED_CHOICE (3u)
#define MODEL3_CAN_ID247_DAS_AUTOPILOT_DEBUG_DAS_RQSTED_BEHAVIOR_STATUS_RQST_BEHAVIOR_NO_SOURCE_LANE_ON_MAP_CHOICE (4u)
#define MODEL3_CAN_ID247_DAS_AUTOPILOT_DEBUG_DAS_RQSTED_BEHAVIOR_STATUS_RQST_BEHAVIOR_NO_TARGET_LANE_ON_MAP_CHOICE (5u)
#define MODEL3_CAN_ID247_DAS_AUTOPILOT_DEBUG_DAS_RQSTED_BEHAVIOR_STATUS_RQST_BEHAVIOR_BUILD_ARGUMENT_FAIL_CHOICE (6u)
#define MODEL3_CAN_ID247_DAS_AUTOPILOT_DEBUG_DAS_RQSTED_BEHAVIOR_STATUS_RQST_BEHAVIOR_BLOCKED_BY_ULTRASOUND_L_CHOICE (7u)
#define MODEL3_CAN_ID247_DAS_AUTOPILOT_DEBUG_DAS_RQSTED_BEHAVIOR_STATUS_RQST_BEHAVIOR_BLOCKED_BY_BLINDSPOT_CAMERA_L_CHOICE (8u)
#define MODEL3_CAN_ID247_DAS_AUTOPILOT_DEBUG_DAS_RQSTED_BEHAVIOR_STATUS_RQST_BEHAVIOR_BLOCKED_BY_BLINDSPOT_CAMERA_INVALID_L_CHOICE (9u)
#define MODEL3_CAN_ID247_DAS_AUTOPILOT_DEBUG_DAS_RQSTED_BEHAVIOR_STATUS_RQST_BEHAVIOR_BLOCKED_BY_ULTRASOUND_AND_CAMERA_L_CHOICE (10u)
#define MODEL3_CAN_ID247_DAS_AUTOPILOT_DEBUG_DAS_RQSTED_BEHAVIOR_STATUS_RQST_BEHAVIOR_BLOCKED_BY_LANE_TYPE_L_CHOICE (11u)
#define MODEL3_CAN_ID247_DAS_AUTOPILOT_DEBUG_DAS_RQSTED_BEHAVIOR_STATUS_RQST_BEHAVIOR_BLOCKED_BY_ULTRASOUND_R_CHOICE (12u)
#define MODEL3_CAN_ID247_DAS_AUTOPILOT_DEBUG_DAS_RQSTED_BEHAVIOR_STATUS_RQST_BEHAVIOR_BLOCKED_BY_BLINDSPOT_CAMERA_R_CHOICE (13u)
#define MODEL3_CAN_ID247_DAS_AUTOPILOT_DEBUG_DAS_RQSTED_BEHAVIOR_STATUS_RQST_BEHAVIOR_BLOCKED_BY_BLINDSPOT_CAMERA_INVALID_R_CHOICE (14u)
#define MODEL3_CAN_ID247_DAS_AUTOPILOT_DEBUG_DAS_RQSTED_BEHAVIOR_STATUS_RQST_BEHAVIOR_BLOCKED_BY_ULTRASOUND_AND_CAMERA_R_CHOICE (15u)
#define MODEL3_CAN_ID247_DAS_AUTOPILOT_DEBUG_DAS_RQSTED_BEHAVIOR_STATUS_RQST_BEHAVIOR_BLOCKED_BY_LANE_TYPE_R_CHOICE (16u)
#define MODEL3_CAN_ID247_DAS_AUTOPILOT_DEBUG_DAS_RQSTED_BEHAVIOR_STATUS_RQST_BEHAVIOR_ROAD_NOT_APPROPRIATE_CHOICE (17u)
#define MODEL3_CAN_ID247_DAS_AUTOPILOT_DEBUG_DAS_RQSTED_BEHAVIOR_STATUS_RQST_BEHAVIOR_OUT_OF_DATE_CHOICE (18u)
#define MODEL3_CAN_ID247_DAS_AUTOPILOT_DEBUG_DAS_RQSTED_BEHAVIOR_STATUS_RQST_BEHAVIOR_BAD_ORIGIN_UPDATE_CHOICE (19u)
#define MODEL3_CAN_ID247_DAS_AUTOPILOT_DEBUG_DAS_RQSTED_BEHAVIOR_STATUS_RQST_BEHAVIOR_BLOCKED_BY_SLOW_TARGET_L_CHOICE (20u)
#define MODEL3_CAN_ID247_DAS_AUTOPILOT_DEBUG_DAS_RQSTED_BEHAVIOR_STATUS_RQST_BEHAVIOR_BLOCKED_BY_SLOW_TARGET_R_CHOICE (21u)
#define MODEL3_CAN_ID247_DAS_AUTOPILOT_DEBUG_DAS_RQSTED_BEHAVIOR_STATUS_RQST_BEHAVIOR_INVALID_PLAN_CHOICE (22u)

#define MODEL3_CAN_ID247_DAS_AUTOPILOT_DEBUG_DAS_FORK_STATE_FORK_INVALID_CHOICE (0u)
#define MODEL3_CAN_ID247_DAS_AUTOPILOT_DEBUG_DAS_FORK_STATE_FORK_UNAVAILABLE_DISABLED_CHOICE (1u)
#define MODEL3_CAN_ID247_DAS_AUTOPILOT_DEBUG_DAS_FORK_STATE_FORK_UNAVAILABLE_AP_INACTIVE_CHOICE (2u)
#define MODEL3_CAN_ID247_DAS_AUTOPILOT_DEBUG_DAS_FORK_STATE_FORK_UNAVAILABLE_CONSTRUCTION_CHOICE (3u)
#define MODEL3_CAN_ID247_DAS_AUTOPILOT_DEBUG_DAS_FORK_STATE_FORK_UNAVAILABLE_CONTROLLED_ACCESS_TOO_FAR_CHOICE (4u)
#define MODEL3_CAN_ID247_DAS_AUTOPILOT_DEBUG_DAS_FORK_STATE_FORK_UNAVAILABLE_DON_INACTIVE_CHOICE (5u)
#define MODEL3_CAN_ID247_DAS_AUTOPILOT_DEBUG_DAS_FORK_STATE_FORK_UNAVAILABLE_TOLL_BOOTH_CHOICE (6u)
#define MODEL3_CAN_ID247_DAS_AUTOPILOT_DEBUG_DAS_FORK_STATE_FORK_UNAVAILABLE_OTHER_CHOICE (7u)
#define MODEL3_CAN_ID247_DAS_AUTOPILOT_DEBUG_DAS_FORK_STATE_FORK_IDLE_BOTH_FORKS_AVAILABLE_CHOICE (8u)
#define MODEL3_CAN_ID247_DAS_AUTOPILOT_DEBUG_DAS_FORK_STATE_FORK_IDLE_LEFT_FORK_AVAILABLE_CHOICE (9u)
#define MODEL3_CAN_ID247_DAS_AUTOPILOT_DEBUG_DAS_FORK_STATE_FORK_IDLE_RIGHT_FORK_AVAILABLE_CHOICE (10u)
#define MODEL3_CAN_ID247_DAS_AUTOPILOT_DEBUG_DAS_FORK_STATE_FORK_IDLE_NO_FORKS_AVAILABLE_CHOICE (11u)
#define MODEL3_CAN_ID247_DAS_AUTOPILOT_DEBUG_DAS_FORK_STATE_FORK_ACTIVE_LEFT_NAV_CHOICE (12u)
#define MODEL3_CAN_ID247_DAS_AUTOPILOT_DEBUG_DAS_FORK_STATE_FORK_ACTIVE_LEFT_USER_CHOICE (13u)
#define MODEL3_CAN_ID247_DAS_AUTOPILOT_DEBUG_DAS_FORK_STATE_FORK_ACTIVE_RIGHT_NAV_CHOICE (14u)
#define MODEL3_CAN_ID247_DAS_AUTOPILOT_DEBUG_DAS_FORK_STATE_FORK_ACTIVE_RIGHT_USER_CHOICE (15u)
#define MODEL3_CAN_ID247_DAS_AUTOPILOT_DEBUG_DAS_FORK_STATE_FORK_FORK_COMPLETE_CHOICE (16u)
#define MODEL3_CAN_ID247_DAS_AUTOPILOT_DEBUG_DAS_FORK_STATE_FORK_ABORT_CONTROL_INACTIVE_CHOICE (17u)
#define MODEL3_CAN_ID247_DAS_AUTOPILOT_DEBUG_DAS_FORK_STATE_FORK_ABORT_BLINKER_CHANGE_CHOICE (18u)
#define MODEL3_CAN_ID247_DAS_AUTOPILOT_DEBUG_DAS_FORK_STATE_FORK_ABORT_NOT_LEFT_LANE_CHOICE (19u)
#define MODEL3_CAN_ID247_DAS_AUTOPILOT_DEBUG_DAS_FORK_STATE_FORK_ABORT_NOT_RIGHT_LANE_CHOICE (20u)
#define MODEL3_CAN_ID247_DAS_AUTOPILOT_DEBUG_DAS_FORK_STATE_FORK_ABORT_DISALLOW_CHOICE (21u)
#define MODEL3_CAN_ID247_DAS_AUTOPILOT_DEBUG_DAS_FORK_STATE_FORK_ABORT_OTHER_CHOICE (22u)
#define MODEL3_CAN_ID247_DAS_AUTOPILOT_DEBUG_DAS_FORK_STATE_FORK_UNAVAILABLE_TIGHT_TURN_RADIUS_CHOICE (23u)
#define MODEL3_CAN_ID247_DAS_AUTOPILOT_DEBUG_DAS_FORK_STATE_FORK_UNAVAILABLE_WEATHER_CHOICE (24u)
#define MODEL3_CAN_ID247_DAS_AUTOPILOT_DEBUG_DAS_FORK_STATE_FORK_PRE_ACTIVE_LEFT_NAV_CHOICE (25u)
#define MODEL3_CAN_ID247_DAS_AUTOPILOT_DEBUG_DAS_FORK_STATE_FORK_PRE_ACTIVE_RIGHT_NAV_CHOICE (26u)
#define MODEL3_CAN_ID247_DAS_AUTOPILOT_DEBUG_DAS_FORK_STATE_FORK_UNAVAILABLE_INTERSECTION_ACTIVE_CHOICE (27u)

#define MODEL3_CAN_ID247_DAS_AUTOPILOT_DEBUG_DAS_LANE_CHANGE_STATE_LANE_CHANGE_UNAVAILABLE_DISABLED_CHOICE (0u)
#define MODEL3_CAN_ID247_DAS_AUTOPILOT_DEBUG_DAS_LANE_CHANGE_STATE_LANE_CHANGE_UNAVAILABLE_ROAD_NOT_APPROPRIATE_CHOICE (1u)
#define MODEL3_CAN_ID247_DAS_AUTOPILOT_DEBUG_DAS_LANE_CHANGE_STATE_LANE_CHANGE_UNAVAILABLE_SPEED_CHOICE (2u)
#define MODEL3_CAN_ID247_DAS_AUTOPILOT_DEBUG_DAS_LANE_CHANGE_STATE_LANE_CHANGE_UNAVAILABLE_NO_LANES_CHOICE (3u)
#define MODEL3_CAN_ID247_DAS_AUTOPILOT_DEBUG_DAS_LANE_CHANGE_STATE_LANE_CHANGE_UNAVAILABLE_INACTIVE_CHOICE (4u)
#define MODEL3_CAN_ID247_DAS_AUTOPILOT_DEBUG_DAS_LANE_CHANGE_STATE_LANE_CHANGE_UNAVAILABLE_FORK_MODE_CHOICE (5u)
#define MODEL3_CAN_ID247_DAS_AUTOPILOT_DEBUG_DAS_LANE_CHANGE_STATE_LANE_CHANGE_UNAVAILABLE_ULTRASONICS_NOT_READY_CHOICE (6u)
#define MODEL3_CAN_ID247_DAS_AUTOPILOT_DEBUG_DAS_LANE_CHANGE_STATE_LANE_CHANGE_UNAVAILABLE_INVALID_MODE_CHOICE (7u)
#define MODEL3_CAN_ID247_DAS_AUTOPILOT_DEBUG_DAS_LANE_CHANGE_STATE_LANE_CHANGE_AVAILABLE_LEFT_ONLY_CHOICE (8u)
#define MODEL3_CAN_ID247_DAS_AUTOPILOT_DEBUG_DAS_LANE_CHANGE_STATE_LANE_CHANGE_AVAILABLE_RIGHT_ONLY_CHOICE (9u)
#define MODEL3_CAN_ID247_DAS_AUTOPILOT_DEBUG_DAS_LANE_CHANGE_STATE_LANE_CHANGE_AVAILABLE_BOTH_CHOICE (10u)
#define MODEL3_CAN_ID247_DAS_AUTOPILOT_DEBUG_DAS_LANE_CHANGE_STATE_LANE_CHANGE_ABORTING_INACTIVE_CHOICE (11u)
#define MODEL3_CAN_ID247_DAS_AUTOPILOT_DEBUG_DAS_LANE_CHANGE_STATE_LANE_CHANGE_ABORTING_BLINKER_CHOICE (12u)
#define MODEL3_CAN_ID247_DAS_AUTOPILOT_DEBUG_DAS_LANE_CHANGE_STATE_LANE_CHANGE_ABORTING_TIMEOUT_CHOICE (13u)
#define MODEL3_CAN_ID247_DAS_AUTOPILOT_DEBUG_DAS_LANE_CHANGE_STATE_LANE_CHANGE_ABORTING_BLIND_SPOT_OCCUPIED_CHOICE (14u)
#define MODEL3_CAN_ID247_DAS_AUTOPILOT_DEBUG_DAS_LANE_CHANGE_STATE_LANE_CHANGE_ABORTING_INVALID_MODE_CHOICE (15u)
#define MODEL3_CAN_ID247_DAS_AUTOPILOT_DEBUG_DAS_LANE_CHANGE_STATE_LANE_CHANGE_ABORTING_LINE_TYPE_CHOICE (16u)
#define MODEL3_CAN_ID247_DAS_AUTOPILOT_DEBUG_DAS_LANE_CHANGE_STATE_LANE_CHANGE_ABORTING_FORK_AVAILABLE_CHOICE (17u)
#define MODEL3_CAN_ID247_DAS_AUTOPILOT_DEBUG_DAS_LANE_CHANGE_STATE_LANE_CHANGE_ABORTING_LOST_VISION_POSE_CHOICE (18u)
#define MODEL3_CAN_ID247_DAS_AUTOPILOT_DEBUG_DAS_LANE_CHANGE_STATE_LANE_CHANGE_ABORTING_ACC_AUTOSTEER_ACTIVATED_CHOICE (19u)
#define MODEL3_CAN_ID247_DAS_AUTOPILOT_DEBUG_DAS_LANE_CHANGE_STATE_LANE_CHANGE_ABORTING_ULC_BLINKER_TIMEOUT_CHOICE (20u)
#define MODEL3_CAN_ID247_DAS_AUTOPILOT_DEBUG_DAS_LANE_CHANGE_STATE_LANE_CHANGE_ABORTING_INVALID_BEHAVIOR_CHOICE (21u)
#define MODEL3_CAN_ID247_DAS_AUTOPILOT_DEBUG_DAS_LANE_CHANGE_STATE_LANE_CHANGE_ABORTING_BELOW_MIN_SPEED_CHOICE (22u)
#define MODEL3_CAN_ID247_DAS_AUTOPILOT_DEBUG_DAS_LANE_CHANGE_STATE_LANE_CHANGE_ABORTING_BEHAVIOR_CHANGED_CHOICE (23u)
#define MODEL3_CAN_ID247_DAS_AUTOPILOT_DEBUG_DAS_LANE_CHANGE_STATE_LANE_CHANGE_ABORTING_HIGH_ALC_PROGRESS_ERROR_CHOICE (24u)
#define MODEL3_CAN_ID247_DAS_AUTOPILOT_DEBUG_DAS_LANE_CHANGE_STATE_LANE_CHANGE_ABORTING_ULC_CONFIRMATION_TIMEOUT_CHOICE (25u)
#define MODEL3_CAN_ID247_DAS_AUTOPILOT_DEBUG_DAS_LANE_CHANGE_STATE_LANE_CHANGE_ABORTING_ALC_REQUEST_BEFORE_ULC_CONFIRM_CHOICE (26u)
#define MODEL3_CAN_ID247_DAS_AUTOPILOT_DEBUG_DAS_LANE_CHANGE_STATE_LANE_CHANGE_IN_PROGRESS_LEFT_CHOICE (27u)
#define MODEL3_CAN_ID247_DAS_AUTOPILOT_DEBUG_DAS_LANE_CHANGE_STATE_LANE_CHANGE_IN_PROGRESS_RIGHT_CHOICE (28u)
#define MODEL3_CAN_ID247_DAS_AUTOPILOT_DEBUG_DAS_LANE_CHANGE_STATE_LANE_CHANGE_BLOCKED_LEFT_CHOICE (29u)
#define MODEL3_CAN_ID247_DAS_AUTOPILOT_DEBUG_DAS_LANE_CHANGE_STATE_LANE_CHANGE_BLOCKED_RIGHT_CHOICE (30u)
#define MODEL3_CAN_ID247_DAS_AUTOPILOT_DEBUG_DAS_LANE_CHANGE_STATE_LANE_CHANGE_ABORTING_GORE_POINT_CHOICE (31u)
#define MODEL3_CAN_ID247_DAS_AUTOPILOT_DEBUG_DAS_LANE_CHANGE_STATE_LANE_CHANGE_ABORTING_CONSTRUCTION_DETECTED_CHOICE (32u)
#define MODEL3_CAN_ID247_DAS_AUTOPILOT_DEBUG_DAS_LANE_CHANGE_STATE_LANE_CHANGE_ABORTING_TOLL_BOOTH_DETECTED_CHOICE (33u)
#define MODEL3_CAN_ID247_DAS_AUTOPILOT_DEBUG_DAS_LANE_CHANGE_STATE_LANE_CHANGE_ABORTING_TIGHT_TURN_RADIUS_CHOICE (34u)
#define MODEL3_CAN_ID247_DAS_AUTOPILOT_DEBUG_DAS_LANE_CHANGE_STATE_LANE_CHANGE_ABORTING_WEATHER_CHOICE (35u)
#define MODEL3_CAN_ID247_DAS_AUTOPILOT_DEBUG_DAS_LANE_CHANGE_STATE_LANE_CHANGE_UNAVAILABLE_BLINDSPOT_RESTRICTED_CHOICE (36u)
#define MODEL3_CAN_ID247_DAS_AUTOPILOT_DEBUG_DAS_LANE_CHANGE_STATE_LANE_CHANGE_ABORTING_NO_HANDS_ON_CHOICE (37u)
#define MODEL3_CAN_ID247_DAS_AUTOPILOT_DEBUG_DAS_LANE_CHANGE_STATE_LANE_CHANGE_UNAVAILABLE_NO_REAR_OBJECT_CHOICE (38u)
#define MODEL3_CAN_ID247_DAS_AUTOPILOT_DEBUG_DAS_LANE_CHANGE_STATE_LANE_CHANGE_ABORTING_SOURCE_AND_TARGET_LANES_MERGED_CHOICE (39u)
#define MODEL3_CAN_ID247_DAS_AUTOPILOT_DEBUG_DAS_LANE_CHANGE_STATE_LANE_CHANGE_ABORTING_SNOOZED_CHOICE (40u)
#define MODEL3_CAN_ID247_DAS_AUTOPILOT_DEBUG_DAS_LANE_CHANGE_STATE_LANE_CHANGE_UNAVAILABLE_BLINKER_LATCHED_CHOICE (41u)
#define MODEL3_CAN_ID247_DAS_AUTOPILOT_DEBUG_DAS_LANE_CHANGE_STATE_LANE_CHANGE_UNAVAILABLE_AUTOPILOT_ABORTING_CHOICE (42u)
#define MODEL3_CAN_ID247_DAS_AUTOPILOT_DEBUG_DAS_LANE_CHANGE_STATE_LANE_CHANGE_UNKNOWN_CHOICE (63u)

#define MODEL3_CAN_ID247_DAS_AUTOPILOT_DEBUG_DAS_LAST_WATCHDOG_CODE_NO_TASK_FAILED_CHOICE (0u)
#define MODEL3_CAN_ID247_DAS_AUTOPILOT_DEBUG_DAS_LAST_WATCHDOG_CODE_UNKNOWN_TASK_FAILED_CHOICE (30u)
#define MODEL3_CAN_ID247_DAS_AUTOPILOT_DEBUG_DAS_LAST_WATCHDOG_CODE_TELEMETRY_PACKAGER_FAILED_CHOICE (39u)
#define MODEL3_CAN_ID247_DAS_AUTOPILOT_DEBUG_DAS_LAST_WATCHDOG_CODE_TELEMETRY_FAILED_CHOICE (40u)
#define MODEL3_CAN_ID247_DAS_AUTOPILOT_DEBUG_DAS_LAST_WATCHDOG_CODE_SNAPSHOT_FAILED_CHOICE (41u)
#define MODEL3_CAN_ID247_DAS_AUTOPILOT_DEBUG_DAS_LAST_WATCHDOG_CODE_VISION_FAILED_CHOICE (42u)
#define MODEL3_CAN_ID247_DAS_AUTOPILOT_DEBUG_DAS_LAST_WATCHDOG_CODE_LEGACY_FAILED_CHOICE (43u)
#define MODEL3_CAN_ID247_DAS_AUTOPILOT_DEBUG_DAS_LAST_WATCHDOG_CODE_WATCHDOG_FAILED_CHOICE (44u)
#define MODEL3_CAN_ID247_DAS_AUTOPILOT_DEBUG_DAS_LAST_WATCHDOG_CODE_CAN_RX_FAILED_CHOICE (45u)
#define MODEL3_CAN_ID247_DAS_AUTOPILOT_DEBUG_DAS_LAST_WATCHDOG_CODE_CAN_TX_FAILED_CHOICE (46u)
#define MODEL3_CAN_ID247_DAS_AUTOPILOT_DEBUG_DAS_LAST_WATCHDOG_CODE_TEMPERATURE_MONITOR_FAILED_CHOICE (47u)
#define MODEL3_CAN_ID247_DAS_AUTOPILOT_DEBUG_DAS_LAST_WATCHDOG_CODE_INERTIATOR_FAILED_CHOICE (48u)
#define MODEL3_CAN_ID247_DAS_AUTOPILOT_DEBUG_DAS_LAST_WATCHDOG_CODE_GPS_FAILED_CHOICE (49u)
#define MODEL3_CAN_ID247_DAS_AUTOPILOT_DEBUG_DAS_LAST_WATCHDOG_CODE_ARBITER_FAILED_CHOICE (50u)
#define MODEL3_CAN_ID247_DAS_AUTOPILOT_DEBUG_DAS_LAST_WATCHDOG_CODE_AP_STATE_MACHINE_FAILED_CHOICE (51u)
#define MODEL3_CAN_ID247_DAS_AUTOPILOT_DEBUG_DAS_LAST_WATCHDOG_CODE_CONTROLLER_FAILED_CHOICE (52u)
#define MODEL3_CAN_ID247_DAS_AUTOPILOT_DEBUG_DAS_LAST_WATCHDOG_CODE_LOCALIZER_FAILED_CHOICE (53u)
#define MODEL3_CAN_ID247_DAS_AUTOPILOT_DEBUG_DAS_LAST_WATCHDOG_CODE_MISSION_PLANNER_FAILED_CHOICE (54u)
#define MODEL3_CAN_ID247_DAS_AUTOPILOT_DEBUG_DAS_LAST_WATCHDOG_CODE_PERCEPTION_FAILED_CHOICE (55u)
#define MODEL3_CAN_ID247_DAS_AUTOPILOT_DEBUG_DAS_LAST_WATCHDOG_CODE_ROAD_ESTIMATOR_FAILED_CHOICE (56u)
#define MODEL3_CAN_ID247_DAS_AUTOPILOT_DEBUG_DAS_LAST_WATCHDOG_CODE_ATLAS_FAILED_CHOICE (57u)
#define MODEL3_CAN_ID247_DAS_AUTOPILOT_DEBUG_DAS_LAST_WATCHDOG_CODE_STAY_IN_LANE_BEHAVIOR_FAILED_CHOICE (58u)
#define MODEL3_CAN_ID247_DAS_AUTOPILOT_DEBUG_DAS_LAST_WATCHDOG_CODE_SNAPSHOT_TRIGGER_CLIENT_FAILED_CHOICE (59u)
#define MODEL3_CAN_ID247_DAS_AUTOPILOT_DEBUG_DAS_LAST_WATCHDOG_CODE_RAIN_LIGHT_SENSING_FAILED_CHOICE (60u)
#define MODEL3_CAN_ID247_DAS_AUTOPILOT_DEBUG_DAS_LAST_WATCHDOG_CODE_IMU_FAILED_CHOICE (61u)
#define MODEL3_CAN_ID247_DAS_AUTOPILOT_DEBUG_DAS_LAST_WATCHDOG_CODE_UBX_LOG_FAILED_CHOICE (62u)
#define MODEL3_CAN_ID247_DAS_AUTOPILOT_DEBUG_DAS_LAST_WATCHDOG_CODE_LANE_CHANGE_BEHAVIOR_FAILED_CHOICE (63u)
#define MODEL3_CAN_ID247_DAS_AUTOPILOT_DEBUG_DAS_LAST_WATCHDOG_CODE_DRIVER_MONITOR_FAILED_CHOICE (65u)
#define MODEL3_CAN_ID247_DAS_AUTOPILOT_DEBUG_DAS_LAST_WATCHDOG_CODE_MAP_MANAGER_FAILED_CHOICE (66u)
#define MODEL3_CAN_ID247_DAS_AUTOPILOT_DEBUG_DAS_LAST_WATCHDOG_CODE_CAMERA_FAILED_CHOICE (67u)
#define MODEL3_CAN_ID247_DAS_AUTOPILOT_DEBUG_DAS_LAST_WATCHDOG_CODE_ACTIVE_SAFETY_FAILED_CHOICE (68u)
#define MODEL3_CAN_ID247_DAS_AUTOPILOT_DEBUG_DAS_LAST_WATCHDOG_CODE_UI_SERVER_FAILED_CHOICE (69u)
#define MODEL3_CAN_ID247_DAS_AUTOPILOT_DEBUG_DAS_LAST_WATCHDOG_CODE_DYNAMICS_FAILED_CHOICE (70u)
#define MODEL3_CAN_ID247_DAS_AUTOPILOT_DEBUG_DAS_LAST_WATCHDOG_CODE_FIELD_CALIBRATION_FAILED_CHOICE (71u)
#define MODEL3_CAN_ID247_DAS_AUTOPILOT_DEBUG_DAS_LAST_WATCHDOG_CODE_PARKING_BEHAVIOR_FAILED_CHOICE (72u)
#define MODEL3_CAN_ID247_DAS_AUTOPILOT_DEBUG_DAS_LAST_WATCHDOG_CODE_KMSG_MONITOR_FAILED_CHOICE (73u)
#define MODEL3_CAN_ID247_DAS_AUTOPILOT_DEBUG_DAS_LAST_WATCHDOG_CODE_CLIP_LOGGER_FAILED_CHOICE (74u)
#define MODEL3_CAN_ID247_DAS_AUTOPILOT_DEBUG_DAS_LAST_WATCHDOG_CODE_DRIVABLE_SPACE_TRACKER_FAILED_CHOICE (75u)
#define MODEL3_CAN_ID247_DAS_AUTOPILOT_DEBUG_DAS_LAST_WATCHDOG_CODE_SCHEDULER_FAILED_CHOICE (76u)
#define MODEL3_CAN_ID247_DAS_AUTOPILOT_DEBUG_DAS_LAST_WATCHDOG_CODE_BRIDGE_FAILED_CHOICE (77u)
#define MODEL3_CAN_ID247_DAS_AUTOPILOT_DEBUG_DAS_LAST_WATCHDOG_CODE_CITY_STREETS_BEHAVIOR_FAILED_CHOICE (78u)
#define MODEL3_CAN_ID247_DAS_AUTOPILOT_DEBUG_DAS_LAST_WATCHDOG_CODE_BEV_GRAPH_FAILED_CHOICE (79u)

#define MODEL3_CAN_ID3_F5_VCFRONT_LIGHTING_VCFRONT_INDICATOR_LEFT_REQUEST_TURN_SIGNAL_OFF_CHOICE (0u)
#define MODEL3_CAN_ID3_F5_VCFRONT_LIGHTING_VCFRONT_INDICATOR_LEFT_REQUEST_TURN_SIGNAL_ACTIVE_LOW_CHOICE (1u)
#define MODEL3_CAN_ID3_F5_VCFRONT_LIGHTING_VCFRONT_INDICATOR_LEFT_REQUEST_TURN_SIGNAL_ACTIVE_HIGH_CHOICE (2u)

#define MODEL3_CAN_ID3_F5_VCFRONT_LIGHTING_VCFRONT_INDICATOR_RIGHT_REQUEST_TURN_SIGNAL_OFF_CHOICE (0u)
#define MODEL3_CAN_ID3_F5_VCFRONT_LIGHTING_VCFRONT_INDICATOR_RIGHT_REQUEST_TURN_SIGNAL_ACTIVE_LOW_CHOICE (1u)
#define MODEL3_CAN_ID3_F5_VCFRONT_LIGHTING_VCFRONT_INDICATOR_RIGHT_REQUEST_TURN_SIGNAL_ACTIVE_HIGH_CHOICE (2u)

#define MODEL3_CAN_ID3_F5_VCFRONT_LIGHTING_VCFRONT_HAZARD_LIGHT_REQUEST_HAZARD_REQUEST_NONE_CHOICE (0u)
#define MODEL3_CAN_ID3_F5_VCFRONT_LIGHTING_VCFRONT_HAZARD_LIGHT_REQUEST_HAZARD_REQUEST_BUTTON_CHOICE (1u)
#define MODEL3_CAN_ID3_F5_VCFRONT_LIGHTING_VCFRONT_HAZARD_LIGHT_REQUEST_HAZARD_REQUEST_LOCK_CHOICE (2u)
#define MODEL3_CAN_ID3_F5_VCFRONT_LIGHTING_VCFRONT_HAZARD_LIGHT_REQUEST_HAZARD_REQUEST_UNLOCK_CHOICE (3u)
#define MODEL3_CAN_ID3_F5_VCFRONT_LIGHTING_VCFRONT_HAZARD_LIGHT_REQUEST_HAZARD_REQUEST_MISLOCK_CHOICE (4u)
#define MODEL3_CAN_ID3_F5_VCFRONT_LIGHTING_VCFRONT_HAZARD_LIGHT_REQUEST_HAZARD_REQUEST_CRASH_CHOICE (5u)
#define MODEL3_CAN_ID3_F5_VCFRONT_LIGHTING_VCFRONT_HAZARD_LIGHT_REQUEST_HAZARD_REQUEST_CAR_ALARM_CHOICE (6u)
#define MODEL3_CAN_ID3_F5_VCFRONT_LIGHTING_VCFRONT_HAZARD_LIGHT_REQUEST_HAZARD_REQUEST_DAS_CHOICE (7u)
#define MODEL3_CAN_ID3_F5_VCFRONT_LIGHTING_VCFRONT_HAZARD_LIGHT_REQUEST_HAZARD_REQUEST_UDS_CHOICE (8u)

#define MODEL3_CAN_ID3_F5_VCFRONT_LIGHTING_VCFRONT_AMBIENT_LIGHTING_BRIGHTNES_SNA_CHOICE (255u)

#define MODEL3_CAN_ID3_F5_VCFRONT_LIGHTING_VCFRONT_SWITCH_LIGHTING_BRIGHTNESS_SNA_CHOICE (255u)

#define MODEL3_CAN_ID3_F5_VCFRONT_LIGHTING_VCFRONT_LOW_BEAM_LEFT_STATUS_LIGHT_OFF_CHOICE (0u)
#define MODEL3_CAN_ID3_F5_VCFRONT_LIGHTING_VCFRONT_LOW_BEAM_LEFT_STATUS_LIGHT_ON_CHOICE (1u)
#define MODEL3_CAN_ID3_F5_VCFRONT_LIGHTING_VCFRONT_LOW_BEAM_LEFT_STATUS_LIGHT_FAULT_CHOICE (2u)
#define MODEL3_CAN_ID3_F5_VCFRONT_LIGHTING_VCFRONT_LOW_BEAM_LEFT_STATUS_LIGHT_SNA_CHOICE (3u)

#define MODEL3_CAN_ID3_F5_VCFRONT_LIGHTING_VCFRONT_LOW_BEAM_RIGHT_STATUS_LIGHT_OFF_CHOICE (0u)
#define MODEL3_CAN_ID3_F5_VCFRONT_LIGHTING_VCFRONT_LOW_BEAM_RIGHT_STATUS_LIGHT_ON_CHOICE (1u)
#define MODEL3_CAN_ID3_F5_VCFRONT_LIGHTING_VCFRONT_LOW_BEAM_RIGHT_STATUS_LIGHT_FAULT_CHOICE (2u)
#define MODEL3_CAN_ID3_F5_VCFRONT_LIGHTING_VCFRONT_LOW_BEAM_RIGHT_STATUS_LIGHT_SNA_CHOICE (3u)

#define MODEL3_CAN_ID3_F5_VCFRONT_LIGHTING_VCFRONT_HIGH_BEAM_LEFT_STATUS_LIGHT_OFF_CHOICE (0u)
#define MODEL3_CAN_ID3_F5_VCFRONT_LIGHTING_VCFRONT_HIGH_BEAM_LEFT_STATUS_LIGHT_ON_CHOICE (1u)
#define MODEL3_CAN_ID3_F5_VCFRONT_LIGHTING_VCFRONT_HIGH_BEAM_LEFT_STATUS_LIGHT_FAULT_CHOICE (2u)
#define MODEL3_CAN_ID3_F5_VCFRONT_LIGHTING_VCFRONT_HIGH_BEAM_LEFT_STATUS_LIGHT_SNA_CHOICE (3u)

#define MODEL3_CAN_ID3_F5_VCFRONT_LIGHTING_VCFRONT_HIGH_BEAM_RIGHT_STATUS_LIGHT_OFF_CHOICE (0u)
#define MODEL3_CAN_ID3_F5_VCFRONT_LIGHTING_VCFRONT_HIGH_BEAM_RIGHT_STATUS_LIGHT_ON_CHOICE (1u)
#define MODEL3_CAN_ID3_F5_VCFRONT_LIGHTING_VCFRONT_HIGH_BEAM_RIGHT_STATUS_LIGHT_FAULT_CHOICE (2u)
#define MODEL3_CAN_ID3_F5_VCFRONT_LIGHTING_VCFRONT_HIGH_BEAM_RIGHT_STATUS_LIGHT_SNA_CHOICE (3u)

#define MODEL3_CAN_ID3_F5_VCFRONT_LIGHTING_VCFRONT_DRL_LEFT_STATUS_LIGHT_OFF_CHOICE (0u)
#define MODEL3_CAN_ID3_F5_VCFRONT_LIGHTING_VCFRONT_DRL_LEFT_STATUS_LIGHT_ON_CHOICE (1u)
#define MODEL3_CAN_ID3_F5_VCFRONT_LIGHTING_VCFRONT_DRL_LEFT_STATUS_LIGHT_FAULT_CHOICE (2u)
#define MODEL3_CAN_ID3_F5_VCFRONT_LIGHTING_VCFRONT_DRL_LEFT_STATUS_LIGHT_SNA_CHOICE (3u)

#define MODEL3_CAN_ID3_F5_VCFRONT_LIGHTING_VCFRONT_DRL_RIGHT_STATUS_LIGHT_OFF_CHOICE (0u)
#define MODEL3_CAN_ID3_F5_VCFRONT_LIGHTING_VCFRONT_DRL_RIGHT_STATUS_LIGHT_ON_CHOICE (1u)
#define MODEL3_CAN_ID3_F5_VCFRONT_LIGHTING_VCFRONT_DRL_RIGHT_STATUS_LIGHT_FAULT_CHOICE (2u)
#define MODEL3_CAN_ID3_F5_VCFRONT_LIGHTING_VCFRONT_DRL_RIGHT_STATUS_LIGHT_SNA_CHOICE (3u)

#define MODEL3_CAN_ID3_F5_VCFRONT_LIGHTING_VCFRONT_FOG_LEFT_STATUS_LIGHT_OFF_CHOICE (0u)
#define MODEL3_CAN_ID3_F5_VCFRONT_LIGHTING_VCFRONT_FOG_LEFT_STATUS_LIGHT_ON_CHOICE (1u)
#define MODEL3_CAN_ID3_F5_VCFRONT_LIGHTING_VCFRONT_FOG_LEFT_STATUS_LIGHT_FAULT_CHOICE (2u)
#define MODEL3_CAN_ID3_F5_VCFRONT_LIGHTING_VCFRONT_FOG_LEFT_STATUS_LIGHT_SNA_CHOICE (3u)

#define MODEL3_CAN_ID3_F5_VCFRONT_LIGHTING_VCFRONT_FOG_RIGHT_STATUS_LIGHT_OFF_CHOICE (0u)
#define MODEL3_CAN_ID3_F5_VCFRONT_LIGHTING_VCFRONT_FOG_RIGHT_STATUS_LIGHT_ON_CHOICE (1u)
#define MODEL3_CAN_ID3_F5_VCFRONT_LIGHTING_VCFRONT_FOG_RIGHT_STATUS_LIGHT_FAULT_CHOICE (2u)
#define MODEL3_CAN_ID3_F5_VCFRONT_LIGHTING_VCFRONT_FOG_RIGHT_STATUS_LIGHT_SNA_CHOICE (3u)

#define MODEL3_CAN_ID3_F5_VCFRONT_LIGHTING_VCFRONT_SIDE_MARKERS_STATUS_LIGHT_OFF_CHOICE (0u)
#define MODEL3_CAN_ID3_F5_VCFRONT_LIGHTING_VCFRONT_SIDE_MARKERS_STATUS_LIGHT_ON_CHOICE (1u)
#define MODEL3_CAN_ID3_F5_VCFRONT_LIGHTING_VCFRONT_SIDE_MARKERS_STATUS_LIGHT_FAULT_CHOICE (2u)
#define MODEL3_CAN_ID3_F5_VCFRONT_LIGHTING_VCFRONT_SIDE_MARKERS_STATUS_LIGHT_SNA_CHOICE (3u)

#define MODEL3_CAN_ID3_F5_VCFRONT_LIGHTING_VCFRONT_SIDE_REPEATER_LEFT_STATUS_LIGHT_OFF_CHOICE (0u)
#define MODEL3_CAN_ID3_F5_VCFRONT_LIGHTING_VCFRONT_SIDE_REPEATER_LEFT_STATUS_LIGHT_ON_CHOICE (1u)
#define MODEL3_CAN_ID3_F5_VCFRONT_LIGHTING_VCFRONT_SIDE_REPEATER_LEFT_STATUS_LIGHT_FAULT_CHOICE (2u)
#define MODEL3_CAN_ID3_F5_VCFRONT_LIGHTING_VCFRONT_SIDE_REPEATER_LEFT_STATUS_LIGHT_SNA_CHOICE (3u)

#define MODEL3_CAN_ID3_F5_VCFRONT_LIGHTING_VCFRONT_SIDE_REPEATER_RIGHT_STATUS_LIGHT_OFF_CHOICE (0u)
#define MODEL3_CAN_ID3_F5_VCFRONT_LIGHTING_VCFRONT_SIDE_REPEATER_RIGHT_STATUS_LIGHT_ON_CHOICE (1u)
#define MODEL3_CAN_ID3_F5_VCFRONT_LIGHTING_VCFRONT_SIDE_REPEATER_RIGHT_STATUS_LIGHT_FAULT_CHOICE (2u)
#define MODEL3_CAN_ID3_F5_VCFRONT_LIGHTING_VCFRONT_SIDE_REPEATER_RIGHT_STATUS_LIGHT_SNA_CHOICE (3u)

#define MODEL3_CAN_ID3_F5_VCFRONT_LIGHTING_VCFRONT_TURN_SIGNAL_LEFT_STATUS_LIGHT_OFF_CHOICE (0u)
#define MODEL3_CAN_ID3_F5_VCFRONT_LIGHTING_VCFRONT_TURN_SIGNAL_LEFT_STATUS_LIGHT_ON_CHOICE (1u)
#define MODEL3_CAN_ID3_F5_VCFRONT_LIGHTING_VCFRONT_TURN_SIGNAL_LEFT_STATUS_LIGHT_FAULT_CHOICE (2u)
#define MODEL3_CAN_ID3_F5_VCFRONT_LIGHTING_VCFRONT_TURN_SIGNAL_LEFT_STATUS_LIGHT_SNA_CHOICE (3u)

#define MODEL3_CAN_ID3_F5_VCFRONT_LIGHTING_VCFRONT_TURN_SIGNAL_RIGHT_STATUS_LIGHT_OFF_CHOICE (0u)
#define MODEL3_CAN_ID3_F5_VCFRONT_LIGHTING_VCFRONT_TURN_SIGNAL_RIGHT_STATUS_LIGHT_ON_CHOICE (1u)
#define MODEL3_CAN_ID3_F5_VCFRONT_LIGHTING_VCFRONT_TURN_SIGNAL_RIGHT_STATUS_LIGHT_FAULT_CHOICE (2u)
#define MODEL3_CAN_ID3_F5_VCFRONT_LIGHTING_VCFRONT_TURN_SIGNAL_RIGHT_STATUS_LIGHT_SNA_CHOICE (3u)

#define MODEL3_CAN_ID3_F5_VCFRONT_LIGHTING_VCFRONT_PARK_LEFT_STATUS_LIGHT_OFF_CHOICE (0u)
#define MODEL3_CAN_ID3_F5_VCFRONT_LIGHTING_VCFRONT_PARK_LEFT_STATUS_LIGHT_ON_CHOICE (1u)
#define MODEL3_CAN_ID3_F5_VCFRONT_LIGHTING_VCFRONT_PARK_LEFT_STATUS_LIGHT_FAULT_CHOICE (2u)
#define MODEL3_CAN_ID3_F5_VCFRONT_LIGHTING_VCFRONT_PARK_LEFT_STATUS_LIGHT_SNA_CHOICE (3u)

#define MODEL3_CAN_ID3_F5_VCFRONT_LIGHTING_VCFRONT_PARK_RIGHT_STATUS_LIGHT_OFF_CHOICE (0u)
#define MODEL3_CAN_ID3_F5_VCFRONT_LIGHTING_VCFRONT_PARK_RIGHT_STATUS_LIGHT_ON_CHOICE (1u)
#define MODEL3_CAN_ID3_F5_VCFRONT_LIGHTING_VCFRONT_PARK_RIGHT_STATUS_LIGHT_FAULT_CHOICE (2u)
#define MODEL3_CAN_ID3_F5_VCFRONT_LIGHTING_VCFRONT_PARK_RIGHT_STATUS_LIGHT_SNA_CHOICE (3u)

#define MODEL3_CAN_ID3_F5_VCFRONT_LIGHTING_VCFRONT_SIM_LATCHING_STALK_SIMULATED_LATCHING_STALK_IDLE_CHOICE (0u)
#define MODEL3_CAN_ID3_F5_VCFRONT_LIGHTING_VCFRONT_SIM_LATCHING_STALK_SIMULATED_LATCHING_STALK_LEFT_CHOICE (1u)
#define MODEL3_CAN_ID3_F5_VCFRONT_LIGHTING_VCFRONT_SIM_LATCHING_STALK_SIMULATED_LATCHING_STALK_RIGHT_CHOICE (2u)
#define MODEL3_CAN_ID3_F5_VCFRONT_LIGHTING_VCFRONT_SIM_LATCHING_STALK_SIMULATED_LATCHING_STALK_SNA_CHOICE (3u)

#define MODEL3_CAN_ID3_E9_DAS_BODY_CONTROLS_DAS_HEADLIGHT_REQUEST_DAS_HEADLIGHT_REQUEST_OFF_CHOICE (0u)
#define MODEL3_CAN_ID3_E9_DAS_BODY_CONTROLS_DAS_HEADLIGHT_REQUEST_DAS_HEADLIGHT_REQUEST_ON_CHOICE (1u)
#define MODEL3_CAN_ID3_E9_DAS_BODY_CONTROLS_DAS_HEADLIGHT_REQUEST_DAS_HEADLIGHT_REQUEST_INVALID_CHOICE (3u)

#define MODEL3_CAN_ID3_E9_DAS_BODY_CONTROLS_DAS_HAZARD_LIGHT_REQUEST_DAS_REQUEST_HAZARDS_OFF_CHOICE (0u)
#define MODEL3_CAN_ID3_E9_DAS_BODY_CONTROLS_DAS_HAZARD_LIGHT_REQUEST_DAS_REQUEST_HAZARDS_ON_CHOICE (1u)
#define MODEL3_CAN_ID3_E9_DAS_BODY_CONTROLS_DAS_HAZARD_LIGHT_REQUEST_DAS_REQUEST_HAZARDS_UNUSED_CHOICE (2u)
#define MODEL3_CAN_ID3_E9_DAS_BODY_CONTROLS_DAS_HAZARD_LIGHT_REQUEST_DAS_REQUEST_HAZARDS_SNA_CHOICE (3u)

#define MODEL3_CAN_ID3_E9_DAS_BODY_CONTROLS_DAS_WIPER_SPEED_DAS_WIPER_SPEED_OFF_CHOICE (0u)
#define MODEL3_CAN_ID3_E9_DAS_BODY_CONTROLS_DAS_WIPER_SPEED_DAS_WIPER_SPEED_1_CHOICE (1u)
#define MODEL3_CAN_ID3_E9_DAS_BODY_CONTROLS_DAS_WIPER_SPEED_DAS_WIPER_SPEED_2_CHOICE (2u)
#define MODEL3_CAN_ID3_E9_DAS_BODY_CONTROLS_DAS_WIPER_SPEED_DAS_WIPER_SPEED_3_CHOICE (3u)
#define MODEL3_CAN_ID3_E9_DAS_BODY_CONTROLS_DAS_WIPER_SPEED_DAS_WIPER_SPEED_4_CHOICE (4u)
#define MODEL3_CAN_ID3_E9_DAS_BODY_CONTROLS_DAS_WIPER_SPEED_DAS_WIPER_SPEED_5_CHOICE (5u)
#define MODEL3_CAN_ID3_E9_DAS_BODY_CONTROLS_DAS_WIPER_SPEED_DAS_WIPER_SPEED_6_CHOICE (6u)
#define MODEL3_CAN_ID3_E9_DAS_BODY_CONTROLS_DAS_WIPER_SPEED_DAS_WIPER_SPEED_7_CHOICE (7u)
#define MODEL3_CAN_ID3_E9_DAS_BODY_CONTROLS_DAS_WIPER_SPEED_DAS_WIPER_SPEED_8_CHOICE (8u)
#define MODEL3_CAN_ID3_E9_DAS_BODY_CONTROLS_DAS_WIPER_SPEED_DAS_WIPER_SPEED_9_CHOICE (9u)
#define MODEL3_CAN_ID3_E9_DAS_BODY_CONTROLS_DAS_WIPER_SPEED_DAS_WIPER_SPEED_10_CHOICE (10u)
#define MODEL3_CAN_ID3_E9_DAS_BODY_CONTROLS_DAS_WIPER_SPEED_DAS_WIPER_SPEED_11_CHOICE (11u)
#define MODEL3_CAN_ID3_E9_DAS_BODY_CONTROLS_DAS_WIPER_SPEED_DAS_WIPER_SPEED_12_CHOICE (12u)
#define MODEL3_CAN_ID3_E9_DAS_BODY_CONTROLS_DAS_WIPER_SPEED_DAS_WIPER_SPEED_13_CHOICE (13u)
#define MODEL3_CAN_ID3_E9_DAS_BODY_CONTROLS_DAS_WIPER_SPEED_DAS_WIPER_SPEED_14_CHOICE (14u)
#define MODEL3_CAN_ID3_E9_DAS_BODY_CONTROLS_DAS_WIPER_SPEED_DAS_WIPER_SPEED_INVALID_CHOICE (15u)

#define MODEL3_CAN_ID3_E9_DAS_BODY_CONTROLS_DAS_TURN_INDICATOR_REQUEST_DAS_TURN_INDICATOR_NONE_CHOICE (0u)
#define MODEL3_CAN_ID3_E9_DAS_BODY_CONTROLS_DAS_TURN_INDICATOR_REQUEST_DAS_TURN_INDICATOR_LEFT_CHOICE (1u)
#define MODEL3_CAN_ID3_E9_DAS_BODY_CONTROLS_DAS_TURN_INDICATOR_REQUEST_DAS_TURN_INDICATOR_RIGHT_CHOICE (2u)
#define MODEL3_CAN_ID3_E9_DAS_BODY_CONTROLS_DAS_TURN_INDICATOR_REQUEST_DAS_TURN_INDICATOR_CANCEL_CHOICE (3u)
#define MODEL3_CAN_ID3_E9_DAS_BODY_CONTROLS_DAS_TURN_INDICATOR_REQUEST_DAS_TURN_INDICATOR_DEFER_CHOICE (4u)

#define MODEL3_CAN_ID3_E9_DAS_BODY_CONTROLS_DAS_HIGH_LOW_BEAM_DECISION_DAS_HIGH_BEAM_UNDECIDED_CHOICE (0u)
#define MODEL3_CAN_ID3_E9_DAS_BODY_CONTROLS_DAS_HIGH_LOW_BEAM_DECISION_DAS_HIGH_BEAM_OFF_CHOICE (1u)
#define MODEL3_CAN_ID3_E9_DAS_BODY_CONTROLS_DAS_HIGH_LOW_BEAM_DECISION_DAS_HIGH_BEAM_ON_CHOICE (2u)
#define MODEL3_CAN_ID3_E9_DAS_BODY_CONTROLS_DAS_HIGH_LOW_BEAM_DECISION_DAS_HIGH_BEAM_SNA_CHOICE (3u)

#define MODEL3_CAN_ID3_E9_DAS_BODY_CONTROLS_DAS_HEATER_REQUEST_DAS_HEATER_SNA_CHOICE (0u)
#define MODEL3_CAN_ID3_E9_DAS_BODY_CONTROLS_DAS_HEATER_REQUEST_DAS_HEATER_OFF_CHOICE (1u)
#define MODEL3_CAN_ID3_E9_DAS_BODY_CONTROLS_DAS_HEATER_REQUEST_DAS_HEATER_ON_CHOICE (2u)

#define MODEL3_CAN_ID3_E9_DAS_BODY_CONTROLS_DAS_HIGH_LOW_BEAM_OFF_REASON_HIGH_BEAM_ON_CHOICE (0u)
#define MODEL3_CAN_ID3_E9_DAS_BODY_CONTROLS_DAS_HIGH_LOW_BEAM_OFF_REASON_HIGH_BEAM_OFF_REASON_MOVING_VISION_TARGET_CHOICE (1u)
#define MODEL3_CAN_ID3_E9_DAS_BODY_CONTROLS_DAS_HIGH_LOW_BEAM_OFF_REASON_HIGH_BEAM_OFF_REASON_MOVING_RADAR_TARGET_CHOICE (2u)
#define MODEL3_CAN_ID3_E9_DAS_BODY_CONTROLS_DAS_HIGH_LOW_BEAM_OFF_REASON_HIGH_BEAM_OFF_REASON_AMBIENT_LIGHT_CHOICE (3u)
#define MODEL3_CAN_ID3_E9_DAS_BODY_CONTROLS_DAS_HIGH_LOW_BEAM_OFF_REASON_HIGH_BEAM_OFF_REASON_HEAD_LIGHT_CHOICE (4u)
#define MODEL3_CAN_ID3_E9_DAS_BODY_CONTROLS_DAS_HIGH_LOW_BEAM_OFF_REASON_HIGH_BEAM_OFF_REASON_SNA_CHOICE (5u)

#define MODEL3_CAN_ID3_E9_DAS_BODY_CONTROLS_DAS_TURN_INDICATOR_REQUEST_REASON_DAS_NONE_CHOICE (0u)
#define MODEL3_CAN_ID3_E9_DAS_BODY_CONTROLS_DAS_TURN_INDICATOR_REQUEST_REASON_DAS_ACTIVE_NAV_LANE_CHANGE_CHOICE (1u)
#define MODEL3_CAN_ID3_E9_DAS_BODY_CONTROLS_DAS_TURN_INDICATOR_REQUEST_REASON_DAS_ACTIVE_SPEED_LANE_CHANGE_CHOICE (2u)
#define MODEL3_CAN_ID3_E9_DAS_BODY_CONTROLS_DAS_TURN_INDICATOR_REQUEST_REASON_DAS_ACTIVE_FORK_CHOICE (3u)
#define MODEL3_CAN_ID3_E9_DAS_BODY_CONTROLS_DAS_TURN_INDICATOR_REQUEST_REASON_DAS_CANCEL_LANE_CHANGE_CHOICE (4u)
#define MODEL3_CAN_ID3_E9_DAS_BODY_CONTROLS_DAS_TURN_INDICATOR_REQUEST_REASON_DAS_CANCEL_FORK_CHOICE (5u)
#define MODEL3_CAN_ID3_E9_DAS_BODY_CONTROLS_DAS_TURN_INDICATOR_REQUEST_REASON_DAS_ACTIVE_MERGE_CHOICE (6u)
#define MODEL3_CAN_ID3_E9_DAS_BODY_CONTROLS_DAS_TURN_INDICATOR_REQUEST_REASON_DAS_CANCEL_MERGE_CHOICE (7u)
#define MODEL3_CAN_ID3_E9_DAS_BODY_CONTROLS_DAS_TURN_INDICATOR_REQUEST_REASON_DAS_ACTIVE_COMMANDED_LANE_CHANGE_CHOICE (8u)
#define MODEL3_CAN_ID3_E9_DAS_BODY_CONTROLS_DAS_TURN_INDICATOR_REQUEST_REASON_DAS_ACTIVE_INTERSECTION_CHOICE (9u)
#define MODEL3_CAN_ID3_E9_DAS_BODY_CONTROLS_DAS_TURN_INDICATOR_REQUEST_REASON_DAS_CANCEL_INTERSECTION_CHOICE (10u)
#define MODEL3_CAN_ID3_E9_DAS_BODY_CONTROLS_DAS_TURN_INDICATOR_REQUEST_REASON_DAS_ACTIVE_SUMMMON_CHOICE (11u)
#define MODEL3_CAN_ID3_E9_DAS_BODY_CONTROLS_DAS_TURN_INDICATOR_REQUEST_REASON_DAS_CANCEL_SUMMMON_CHOICE (12u)

#define MODEL3_CAN_ID267_DI_VEHICLE_ESTIMATES_DI_TIRE_FITMENT_FITMENT_SQUARE_CHOICE (0u)
#define MODEL3_CAN_ID267_DI_VEHICLE_ESTIMATES_DI_TIRE_FITMENT_FITMENT_STAGGERED_CHOICE (1u)
#define MODEL3_CAN_ID267_DI_VEHICLE_ESTIMATES_DI_TIRE_FITMENT_FITMENT_SNA_CHOICE (3u)

#define MODEL3_CAN_ID267_DI_VEHICLE_ESTIMATES_DI_TRAILER_DETECTED_TRAILER_NOT_DETECTED_CHOICE (0u)
#define MODEL3_CAN_ID267_DI_VEHICLE_ESTIMATES_DI_TRAILER_DETECTED_TRAILER_DETECTED_CHOICE (1u)

#define MODEL3_CAN_ID267_DI_VEHICLE_ESTIMATES_DI_MASS_CONFIDENCE_MASS_NOT_CONFIDED_CHOICE (0u)
#define MODEL3_CAN_ID267_DI_VEHICLE_ESTIMATES_DI_MASS_CONFIDENCE_MASS_CONFIDED_CHOICE (1u)

#define MODEL3_CAN_ID335_REAR_D_IINFO_DIR_INFO_INDEX_DI_INFO_DEPRECATED_0_CHOICE (0u)
#define MODEL3_CAN_ID335_REAR_D_IINFO_DIR_INFO_INDEX_DI_INFO_DEPRECATED_1_CHOICE (1u)
#define MODEL3_CAN_ID335_REAR_D_IINFO_DIR_INFO_INDEX_DI_INFO_DEPRECATED_2_CHOICE (2u)
#define MODEL3_CAN_ID335_REAR_D_IINFO_DIR_INFO_INDEX_DI_INFO_DEPRECATED_3_CHOICE (3u)
#define MODEL3_CAN_ID335_REAR_D_IINFO_DIR_INFO_INDEX_DI_INFO_DEPRECATED_4_CHOICE (4u)
#define MODEL3_CAN_ID335_REAR_D_IINFO_DIR_INFO_INDEX_DI_INFO_DEPRECATED_5_CHOICE (5u)
#define MODEL3_CAN_ID335_REAR_D_IINFO_DIR_INFO_INDEX_DI_INFO_DEPRECATED_6_CHOICE (6u)
#define MODEL3_CAN_ID335_REAR_D_IINFO_DIR_INFO_INDEX_DI_INFO_DEPRECATED_7_CHOICE (7u)
#define MODEL3_CAN_ID335_REAR_D_IINFO_DIR_INFO_INDEX_DI_INFO_DEPRECATED_8_CHOICE (8u)
#define MODEL3_CAN_ID335_REAR_D_IINFO_DIR_INFO_INDEX_DI_INFO_DEPRECATED_9_CHOICE (9u)
#define MODEL3_CAN_ID335_REAR_D_IINFO_DIR_INFO_INDEX_DI_INFO_BUILD_HWID_COMPONENTID_CHOICE (10u)
#define MODEL3_CAN_ID335_REAR_D_IINFO_DIR_INFO_INDEX_DI_INFO_PCBAID_ASSYID_USAGEID_CHOICE (11u)
#define MODEL3_CAN_ID335_REAR_D_IINFO_DIR_INFO_INDEX_DI_INFO_APP_CRC_CHOICE (13u)
#define MODEL3_CAN_ID335_REAR_D_IINFO_DIR_INFO_INDEX_DI_INFO_BOOTLOADER_SVN_CHOICE (14u)
#define MODEL3_CAN_ID335_REAR_D_IINFO_DIR_INFO_INDEX_DI_INFO_BOOTLOADER_CRC_CHOICE (15u)
#define MODEL3_CAN_ID335_REAR_D_IINFO_DIR_INFO_INDEX_DI_INFO_SUBCOMPONENT_CHOICE (16u)
#define MODEL3_CAN_ID335_REAR_D_IINFO_DIR_INFO_INDEX_DI_INFO_APP_GITHASH_CHOICE (17u)
#define MODEL3_CAN_ID335_REAR_D_IINFO_DIR_INFO_INDEX_DI_INFO_BOOTLOADER_GITHASH_CHOICE (18u)
#define MODEL3_CAN_ID335_REAR_D_IINFO_DIR_INFO_INDEX_DI_INFO_VERSION_DEPRECATED_CHOICE (19u)
#define MODEL3_CAN_ID335_REAR_D_IINFO_DIR_INFO_INDEX_DI_INFO_UDS_PROTOCOL_BOOTCRC_CHOICE (20u)
#define MODEL3_CAN_ID335_REAR_D_IINFO_DIR_INFO_INDEX_DI_INFO_SUBCOMPONENT2_CHOICE (23u)
#define MODEL3_CAN_ID335_REAR_D_IINFO_DIR_INFO_INDEX_DI_INFO_SUBCOMPONENT_GITHASH_CHOICE (31u)
#define MODEL3_CAN_ID335_REAR_D_IINFO_DIR_INFO_INDEX_DI_INFO_END_CHOICE (255u)

#define MODEL3_CAN_ID335_REAR_D_IINFO_DIR_BUILD_TYPE_INFO_UNKNOWN_BUILD_CHOICE (0u)
#define MODEL3_CAN_ID335_REAR_D_IINFO_DIR_BUILD_TYPE_INFO_PLATFORM_BUILD_CHOICE (1u)
#define MODEL3_CAN_ID335_REAR_D_IINFO_DIR_BUILD_TYPE_INFO_LOCAL_BUILD_CHOICE (2u)
#define MODEL3_CAN_ID335_REAR_D_IINFO_DIR_BUILD_TYPE_INFO_TRACEABLE_CI_BUILD_CHOICE (3u)
#define MODEL3_CAN_ID335_REAR_D_IINFO_DIR_BUILD_TYPE_INFO_MFG_BUILD_CHOICE (4u)

#define MODEL3_CAN_ID335_REAR_D_IINFO_DIR_OIL_PUMP_BUILD_TYPE_INFO_UNKNOWN_BUILD_CHOICE (0u)
#define MODEL3_CAN_ID335_REAR_D_IINFO_DIR_OIL_PUMP_BUILD_TYPE_INFO_PLATFORM_BUILD_CHOICE (1u)
#define MODEL3_CAN_ID335_REAR_D_IINFO_DIR_OIL_PUMP_BUILD_TYPE_INFO_LOCAL_BUILD_CHOICE (2u)
#define MODEL3_CAN_ID335_REAR_D_IINFO_DIR_OIL_PUMP_BUILD_TYPE_INFO_TRACEABLE_CI_BUILD_CHOICE (3u)
#define MODEL3_CAN_ID335_REAR_D_IINFO_DIR_OIL_PUMP_BUILD_TYPE_INFO_MFG_BUILD_CHOICE (4u)

#define MODEL3_CAN_ID335_REAR_D_IINFO_DIR_HARDWARE_ID_CONFIGURABLE_HWID_PLACEHOLDER_CHOICE (252u)

#define MODEL3_CAN_ID335_REAR_D_IINFO_DIR_FPGA_VERSION_FPGA_VERSION_LOCAL_BUILD_CHOICE (254u)
#define MODEL3_CAN_ID335_REAR_D_IINFO_DIR_FPGA_VERSION_FPGA_VERSION_SNA_CHOICE (255u)

#define MODEL3_CAN_ID656_FRONT_D_IINFO_DIF_INFO_INDEX_DI_INFO_DEPRECATED_0_CHOICE (0u)
#define MODEL3_CAN_ID656_FRONT_D_IINFO_DIF_INFO_INDEX_DI_INFO_DEPRECATED_1_CHOICE (1u)
#define MODEL3_CAN_ID656_FRONT_D_IINFO_DIF_INFO_INDEX_DI_INFO_DEPRECATED_2_CHOICE (2u)
#define MODEL3_CAN_ID656_FRONT_D_IINFO_DIF_INFO_INDEX_DI_INFO_DEPRECATED_3_CHOICE (3u)
#define MODEL3_CAN_ID656_FRONT_D_IINFO_DIF_INFO_INDEX_DI_INFO_DEPRECATED_4_CHOICE (4u)
#define MODEL3_CAN_ID656_FRONT_D_IINFO_DIF_INFO_INDEX_DI_INFO_DEPRECATED_5_CHOICE (5u)
#define MODEL3_CAN_ID656_FRONT_D_IINFO_DIF_INFO_INDEX_DI_INFO_DEPRECATED_6_CHOICE (6u)
#define MODEL3_CAN_ID656_FRONT_D_IINFO_DIF_INFO_INDEX_DI_INFO_DEPRECATED_7_CHOICE (7u)
#define MODEL3_CAN_ID656_FRONT_D_IINFO_DIF_INFO_INDEX_DI_INFO_DEPRECATED_8_CHOICE (8u)
#define MODEL3_CAN_ID656_FRONT_D_IINFO_DIF_INFO_INDEX_DI_INFO_DEPRECATED_9_CHOICE (9u)
#define MODEL3_CAN_ID656_FRONT_D_IINFO_DIF_INFO_INDEX_DI_INFO_BUILD_HWID_COMPONENTID_CHOICE (10u)
#define MODEL3_CAN_ID656_FRONT_D_IINFO_DIF_INFO_INDEX_DI_INFO_PCBAID_ASSYID_USAGEID_CHOICE (11u)
#define MODEL3_CAN_ID656_FRONT_D_IINFO_DIF_INFO_INDEX_DI_INFO_APP_CRC_CHOICE (13u)
#define MODEL3_CAN_ID656_FRONT_D_IINFO_DIF_INFO_INDEX_DI_INFO_BOOTLOADER_SVN_CHOICE (14u)
#define MODEL3_CAN_ID656_FRONT_D_IINFO_DIF_INFO_INDEX_DI_INFO_BOOTLOADER_CRC_CHOICE (15u)
#define MODEL3_CAN_ID656_FRONT_D_IINFO_DIF_INFO_INDEX_DI_INFO_SUBCOMPONENT_CHOICE (16u)
#define MODEL3_CAN_ID656_FRONT_D_IINFO_DIF_INFO_INDEX_DI_INFO_APP_GITHASH_CHOICE (17u)
#define MODEL3_CAN_ID656_FRONT_D_IINFO_DIF_INFO_INDEX_DI_INFO_BOOTLOADER_GITHASH_CHOICE (18u)
#define MODEL3_CAN_ID656_FRONT_D_IINFO_DIF_INFO_INDEX_DI_INFO_VERSION_DEPRECATED_CHOICE (19u)
#define MODEL3_CAN_ID656_FRONT_D_IINFO_DIF_INFO_INDEX_DI_INFO_UDS_PROTOCOL_BOOTCRC_CHOICE (20u)
#define MODEL3_CAN_ID656_FRONT_D_IINFO_DIF_INFO_INDEX_DI_INFO_SUBCOMPONENT2_CHOICE (23u)
#define MODEL3_CAN_ID656_FRONT_D_IINFO_DIF_INFO_INDEX_DI_INFO_SUBCOMPONENT_GITHASH_CHOICE (31u)
#define MODEL3_CAN_ID656_FRONT_D_IINFO_DIF_INFO_INDEX_DI_INFO_END_CHOICE (255u)

#define MODEL3_CAN_ID656_FRONT_D_IINFO_DIF_BUILD_TYPE_INFO_UNKNOWN_BUILD_CHOICE (0u)
#define MODEL3_CAN_ID656_FRONT_D_IINFO_DIF_BUILD_TYPE_INFO_PLATFORM_BUILD_CHOICE (1u)
#define MODEL3_CAN_ID656_FRONT_D_IINFO_DIF_BUILD_TYPE_INFO_LOCAL_BUILD_CHOICE (2u)
#define MODEL3_CAN_ID656_FRONT_D_IINFO_DIF_BUILD_TYPE_INFO_TRACEABLE_CI_BUILD_CHOICE (3u)
#define MODEL3_CAN_ID656_FRONT_D_IINFO_DIF_BUILD_TYPE_INFO_MFG_BUILD_CHOICE (4u)

#define MODEL3_CAN_ID656_FRONT_D_IINFO_DIF_OIL_PUMP_BUILD_TYPE_INFO_UNKNOWN_BUILD_CHOICE (0u)
#define MODEL3_CAN_ID656_FRONT_D_IINFO_DIF_OIL_PUMP_BUILD_TYPE_INFO_PLATFORM_BUILD_CHOICE (1u)
#define MODEL3_CAN_ID656_FRONT_D_IINFO_DIF_OIL_PUMP_BUILD_TYPE_INFO_LOCAL_BUILD_CHOICE (2u)
#define MODEL3_CAN_ID656_FRONT_D_IINFO_DIF_OIL_PUMP_BUILD_TYPE_INFO_TRACEABLE_CI_BUILD_CHOICE (3u)
#define MODEL3_CAN_ID656_FRONT_D_IINFO_DIF_OIL_PUMP_BUILD_TYPE_INFO_MFG_BUILD_CHOICE (4u)

#define MODEL3_CAN_ID656_FRONT_D_IINFO_DIF_HARDWARE_ID_CONFIGURABLE_HWID_PLACEHOLDER_CHOICE (252u)

#define MODEL3_CAN_ID656_FRONT_D_IINFO_DIF_FPGA_VERSION_FPGA_VERSION_LOCAL_BUILD_CHOICE (254u)
#define MODEL3_CAN_ID656_FRONT_D_IINFO_DIF_FPGA_VERSION_FPGA_VERSION_SNA_CHOICE (255u)

#define MODEL3_CAN_ID300_BMS_INFO_BMS_INFO_INDEX_INFO_DEPRECATED_0_CHOICE (0u)
#define MODEL3_CAN_ID300_BMS_INFO_BMS_INFO_INDEX_INFO_DEPRECATED_1_CHOICE (1u)
#define MODEL3_CAN_ID300_BMS_INFO_BMS_INFO_INDEX_INFO_DEPRECATED_2_CHOICE (2u)
#define MODEL3_CAN_ID300_BMS_INFO_BMS_INFO_INDEX_INFO_DEPRECATED_3_CHOICE (3u)
#define MODEL3_CAN_ID300_BMS_INFO_BMS_INFO_INDEX_INFO_DEPRECATED_4_CHOICE (4u)
#define MODEL3_CAN_ID300_BMS_INFO_BMS_INFO_INDEX_INFO_DEPRECATED_5_CHOICE (5u)
#define MODEL3_CAN_ID300_BMS_INFO_BMS_INFO_INDEX_INFO_DEPRECATED_6_CHOICE (6u)
#define MODEL3_CAN_ID300_BMS_INFO_BMS_INFO_INDEX_INFO_DEPRECATED_7_CHOICE (7u)
#define MODEL3_CAN_ID300_BMS_INFO_BMS_INFO_INDEX_INFO_DEPRECATED_8_CHOICE (8u)
#define MODEL3_CAN_ID300_BMS_INFO_BMS_INFO_INDEX_INFO_DEPRECATED_9_CHOICE (9u)
#define MODEL3_CAN_ID300_BMS_INFO_BMS_INFO_INDEX_INFO_BUILD_HWID_COMPONENTID_CHOICE (10u)
#define MODEL3_CAN_ID300_BMS_INFO_BMS_INFO_INDEX_INFO_PCBAID_ASSYID_USAGEID_CHOICE (11u)
#define MODEL3_CAN_ID300_BMS_INFO_BMS_INFO_INDEX_INFO_APP_CRC_CHOICE (13u)
#define MODEL3_CAN_ID300_BMS_INFO_BMS_INFO_INDEX_INFO_BOOTLOADER_SVN_CHOICE (14u)
#define MODEL3_CAN_ID300_BMS_INFO_BMS_INFO_INDEX_INFO_BOOTLOADER_CRC_CHOICE (15u)
#define MODEL3_CAN_ID300_BMS_INFO_BMS_INFO_INDEX_INFO_SUBCOMPONENT_CHOICE (16u)
#define MODEL3_CAN_ID300_BMS_INFO_BMS_INFO_INDEX_INFO_APP_GITHASH_CHOICE (17u)
#define MODEL3_CAN_ID300_BMS_INFO_BMS_INFO_INDEX_INFO_BOOTLOADER_GITHASH_CHOICE (18u)
#define MODEL3_CAN_ID300_BMS_INFO_BMS_INFO_INDEX_INFO_VERSION_DEPRECATED_CHOICE (19u)
#define MODEL3_CAN_ID300_BMS_INFO_BMS_INFO_INDEX_INFO_UDS_PROTOCOL_BOOTCRC_CHOICE (20u)
#define MODEL3_CAN_ID300_BMS_INFO_BMS_INFO_INDEX_INFO_VARIANTCRC_CHOICE (22u)
#define MODEL3_CAN_ID300_BMS_INFO_BMS_INFO_INDEX_INFO_PACKAGE_PN_1_7_CHOICE (25u)
#define MODEL3_CAN_ID300_BMS_INFO_BMS_INFO_INDEX_INFO_PACKAGE_PN_8_14_CHOICE (26u)
#define MODEL3_CAN_ID300_BMS_INFO_BMS_INFO_INDEX_INFO_PACKAGE_PN_15_20_CHOICE (27u)
#define MODEL3_CAN_ID300_BMS_INFO_BMS_INFO_INDEX_INFO_PACKAGE_SN_1_7_CHOICE (29u)
#define MODEL3_CAN_ID300_BMS_INFO_BMS_INFO_INDEX_INFO_PACKAGE_SN_8_14_CHOICE (30u)
#define MODEL3_CAN_ID300_BMS_INFO_BMS_INFO_INDEX_INFO_SUBCOMPONENT_GITHASH_CHOICE (31u)
#define MODEL3_CAN_ID300_BMS_INFO_BMS_INFO_INDEX_INFO_END_CHOICE (255u)

#define MODEL3_CAN_ID300_BMS_INFO_BMS_BUILD_TYPE_INFO_UNKNOWN_BUILD_CHOICE (0u)
#define MODEL3_CAN_ID300_BMS_INFO_BMS_BUILD_TYPE_INFO_PLATFORM_BUILD_CHOICE (1u)
#define MODEL3_CAN_ID300_BMS_INFO_BMS_BUILD_TYPE_INFO_LOCAL_BUILD_CHOICE (2u)
#define MODEL3_CAN_ID300_BMS_INFO_BMS_BUILD_TYPE_INFO_TRACEABLE_CI_BUILD_CHOICE (3u)
#define MODEL3_CAN_ID300_BMS_INFO_BMS_BUILD_TYPE_INFO_MFG_BUILD_CHOICE (4u)

#define MODEL3_CAN_ID212_BMS_STATUS_BMS_CONTACTOR_STATE_BMS_CTRSET_SNA_CHOICE (0u)
#define MODEL3_CAN_ID212_BMS_STATUS_BMS_CONTACTOR_STATE_BMS_CTRSET_OPEN_CHOICE (1u)
#define MODEL3_CAN_ID212_BMS_STATUS_BMS_CONTACTOR_STATE_BMS_CTRSET_OPENING_CHOICE (2u)
#define MODEL3_CAN_ID212_BMS_STATUS_BMS_CONTACTOR_STATE_BMS_CTRSET_CLOSING_CHOICE (3u)
#define MODEL3_CAN_ID212_BMS_STATUS_BMS_CONTACTOR_STATE_BMS_CTRSET_CLOSED_CHOICE (4u)
#define MODEL3_CAN_ID212_BMS_STATUS_BMS_CONTACTOR_STATE_BMS_CTRSET_WELDED_CHOICE (5u)
#define MODEL3_CAN_ID212_BMS_STATUS_BMS_CONTACTOR_STATE_BMS_CTRSET_BLOCKED_CHOICE (6u)

#define MODEL3_CAN_ID212_BMS_STATUS_BMS_UI_CHARGE_STATUS_BMS_DISCONNECTED_CHOICE (0u)
#define MODEL3_CAN_ID212_BMS_STATUS_BMS_UI_CHARGE_STATUS_BMS_NO_POWER_CHOICE (1u)
#define MODEL3_CAN_ID212_BMS_STATUS_BMS_UI_CHARGE_STATUS_BMS_ABOUT_TO_CHARGE_CHOICE (2u)
#define MODEL3_CAN_ID212_BMS_STATUS_BMS_UI_CHARGE_STATUS_BMS_CHARGING_CHOICE (3u)
#define MODEL3_CAN_ID212_BMS_STATUS_BMS_UI_CHARGE_STATUS_BMS_CHARGE_COMPLETE_CHOICE (4u)
#define MODEL3_CAN_ID212_BMS_STATUS_BMS_UI_CHARGE_STATUS_BMS_CHARGE_STOPPED_CHOICE (5u)

#define MODEL3_CAN_ID212_BMS_STATUS_BMS_ECU_LOG_UPLOAD_REQUEST_REQUEST_PRIORITY_NONE_CHOICE (0u)
#define MODEL3_CAN_ID212_BMS_STATUS_BMS_ECU_LOG_UPLOAD_REQUEST_REQUEST_PRIORITY_1_CHOICE (1u)
#define MODEL3_CAN_ID212_BMS_STATUS_BMS_ECU_LOG_UPLOAD_REQUEST_REQUEST_PRIORITY_2_CHOICE (2u)
#define MODEL3_CAN_ID212_BMS_STATUS_BMS_ECU_LOG_UPLOAD_REQUEST_REQUEST_PRIORITY_3_CHOICE (3u)

#define MODEL3_CAN_ID212_BMS_STATUS_BMS_HV_STATE_HV_DOWN_CHOICE (0u)
#define MODEL3_CAN_ID212_BMS_STATUS_BMS_HV_STATE_HV_COMING_UP_CHOICE (1u)
#define MODEL3_CAN_ID212_BMS_STATUS_BMS_HV_STATE_HV_GOING_DOWN_CHOICE (2u)
#define MODEL3_CAN_ID212_BMS_STATUS_BMS_HV_STATE_HV_UP_FOR_DRIVE_CHOICE (3u)
#define MODEL3_CAN_ID212_BMS_STATUS_BMS_HV_STATE_HV_UP_FOR_CHARGE_CHOICE (4u)
#define MODEL3_CAN_ID212_BMS_STATUS_BMS_HV_STATE_HV_UP_FOR_DC_CHARGE_CHOICE (5u)
#define MODEL3_CAN_ID212_BMS_STATUS_BMS_HV_STATE_HV_UP_CHOICE (6u)

#define MODEL3_CAN_ID212_BMS_STATUS_BMS_ISOLATION_RESISTANCE_SNA_CHOICE (1023u)

#define MODEL3_CAN_ID212_BMS_STATUS_BMS_STATE_BMS_STANDBY_CHOICE (0u)
#define MODEL3_CAN_ID212_BMS_STATUS_BMS_STATE_BMS_DRIVE_CHOICE (1u)
#define MODEL3_CAN_ID212_BMS_STATUS_BMS_STATE_BMS_SUPPORT_CHOICE (2u)
#define MODEL3_CAN_ID212_BMS_STATUS_BMS_STATE_BMS_CHARGE_CHOICE (3u)
#define MODEL3_CAN_ID212_BMS_STATUS_BMS_STATE_BMS_FEIM_CHOICE (4u)
#define MODEL3_CAN_ID212_BMS_STATUS_BMS_STATE_BMS_CLEAR_FAULT_CHOICE (5u)
#define MODEL3_CAN_ID212_BMS_STATUS_BMS_STATE_BMS_FAULT_CHOICE (6u)
#define MODEL3_CAN_ID212_BMS_STATUS_BMS_STATE_BMS_WELD_CHOICE (7u)
#define MODEL3_CAN_ID212_BMS_STATUS_BMS_STATE_BMS_TEST_CHOICE (8u)
#define MODEL3_CAN_ID212_BMS_STATUS_BMS_STATE_BMS_SNA_CHOICE (9u)

#define MODEL3_CAN_ID212_BMS_STATUS_BMS_DI_LIMP_REQUEST_LIMP_REQUEST_NONE_CHOICE (0u)
#define MODEL3_CAN_ID212_BMS_STATUS_BMS_DI_LIMP_REQUEST_LIMP_REQUEST_WELDED_CHOICE (1u)

#define MODEL3_CAN_ID212_BMS_STATUS_BMS_CHG_POWER_AVAILABLE_SNA_CHOICE (2047u)

#define MODEL3_CAN_ID212_BMS_STATUS_BMS_SM_STATE_REQUEST_BMS_STANDBY_CHOICE (0u)
#define MODEL3_CAN_ID212_BMS_STATUS_BMS_SM_STATE_REQUEST_BMS_DRIVE_CHOICE (1u)
#define MODEL3_CAN_ID212_BMS_STATUS_BMS_SM_STATE_REQUEST_BMS_SUPPORT_CHOICE (2u)
#define MODEL3_CAN_ID212_BMS_STATUS_BMS_SM_STATE_REQUEST_BMS_CHARGE_CHOICE (3u)
#define MODEL3_CAN_ID212_BMS_STATUS_BMS_SM_STATE_REQUEST_BMS_FEIM_CHOICE (4u)
#define MODEL3_CAN_ID212_BMS_STATUS_BMS_SM_STATE_REQUEST_BMS_CLEAR_FAULT_CHOICE (5u)
#define MODEL3_CAN_ID212_BMS_STATUS_BMS_SM_STATE_REQUEST_BMS_FAULT_CHOICE (6u)
#define MODEL3_CAN_ID212_BMS_STATUS_BMS_SM_STATE_REQUEST_BMS_WELD_CHOICE (7u)
#define MODEL3_CAN_ID212_BMS_STATUS_BMS_SM_STATE_REQUEST_BMS_TEST_CHOICE (8u)
#define MODEL3_CAN_ID212_BMS_STATUS_BMS_SM_STATE_REQUEST_BMS_SNA_CHOICE (9u)

#define MODEL3_CAN_ID3_B2_BMS_LOG2_BMS_LOG2_MUX_ID_BMS_LOG2_CAC1_CHOICE (0u)
#define MODEL3_CAN_ID3_B2_BMS_LOG2_BMS_LOG2_MUX_ID_BMS_LOG2_CAC2_CHOICE (1u)
#define MODEL3_CAN_ID3_B2_BMS_LOG2_BMS_LOG2_MUX_ID_BMS_LOG2_FLOOD_PORT_CHOICE (2u)
#define MODEL3_CAN_ID3_B2_BMS_LOG2_BMS_LOG2_MUX_ID_BMS_LOG2_CHARGE_TERMINATION_CHOICE (3u)
#define MODEL3_CAN_ID3_B2_BMS_LOG2_BMS_LOG2_MUX_ID_BMS_LOG2_VSH_TEST_CHOICE (4u)
#define MODEL3_CAN_ID3_B2_BMS_LOG2_BMS_LOG2_MUX_ID_BMS_LOG2_CHARGING_CHOICE (5u)
#define MODEL3_CAN_ID3_B2_BMS_LOG2_BMS_LOG2_MUX_ID_BMS_LOG2_AHR_COUNTER_CHOICE (6u)
#define MODEL3_CAN_ID3_B2_BMS_LOG2_BMS_LOG2_MUX_ID_BMS_LOG2_1_HZ_TASK_STATS_CHOICE (7u)
#define MODEL3_CAN_ID3_B2_BMS_LOG2_BMS_LOG2_MUX_ID_BMS_LOG2_10_HZ_TASK_STATS_CHOICE (8u)
#define MODEL3_CAN_ID3_B2_BMS_LOG2_BMS_LOG2_MUX_ID_BMS_LOG2_100_HZ_1_KHZ_TASK_STATS_CHOICE (9u)
#define MODEL3_CAN_ID3_B2_BMS_LOG2_BMS_LOG2_MUX_ID_BMS_LOG2_CTR_RESISTANCE_CHOICE (10u)
#define MODEL3_CAN_ID3_B2_BMS_LOG2_BMS_LOG2_MUX_ID_BMS_LOG2_POS_CTR_HEALTH_1_CHOICE (11u)
#define MODEL3_CAN_ID3_B2_BMS_LOG2_BMS_LOG2_MUX_ID_BMS_LOG2_POS_CTR_HEALTH_2_CHOICE (12u)
#define MODEL3_CAN_ID3_B2_BMS_LOG2_BMS_LOG2_MUX_ID_BMS_LOG2_POS_CTR_HEALTH_3_CHOICE (13u)
#define MODEL3_CAN_ID3_B2_BMS_LOG2_BMS_LOG2_MUX_ID_BMS_LOG2_POS_CTR_HEALTH_4_CHOICE (14u)
#define MODEL3_CAN_ID3_B2_BMS_LOG2_BMS_LOG2_MUX_ID_BMS_LOG2_NEG_CTR_HEALTH_1_CHOICE (15u)
#define MODEL3_CAN_ID3_B2_BMS_LOG2_BMS_LOG2_MUX_ID_BMS_LOG2_NEG_CTR_HEALTH_2_CHOICE (16u)
#define MODEL3_CAN_ID3_B2_BMS_LOG2_BMS_LOG2_MUX_ID_BMS_LOG2_NEG_CTR_HEALTH_3_CHOICE (17u)
#define MODEL3_CAN_ID3_B2_BMS_LOG2_BMS_LOG2_MUX_ID_BMS_LOG2_NEG_CTR_HEALTH_4_CHOICE (18u)
#define MODEL3_CAN_ID3_B2_BMS_LOG2_BMS_LOG2_MUX_ID_BMS_LOG2_HV_CHAIN_MODEL_CHOICE (19u)
#define MODEL3_CAN_ID3_B2_BMS_LOG2_BMS_LOG2_MUX_ID_BMS_LOG2_ENERGY_RESERVE_CHOICE (20u)
#define MODEL3_CAN_ID3_B2_BMS_LOG2_BMS_LOG2_MUX_ID_BMS_LOG2_FC_LINK_LEAKAGE_TEST_CHOICE (21u)
#define MODEL3_CAN_ID3_B2_BMS_LOG2_BMS_LOG2_MUX_ID_BMS_LOG2_ENERGY_AND_REST_DATA_CHOICE (22u)
#define MODEL3_CAN_ID3_B2_BMS_LOG2_BMS_LOG2_MUX_ID_BMS_LOG2_CAC3_CHOICE (23u)
#define MODEL3_CAN_ID3_B2_BMS_LOG2_BMS_LOG2_MUX_ID_BMS_LOG2_BRICK_VOLTAGE_CHANGE_CHOICE (24u)

#define MODEL3_CAN_ID3_B2_BMS_LOG2_BMS_CHG_END_EVSE_CHARGE_TYPE_NO_CHARGER_PRESENT_CHOICE (0u)
#define MODEL3_CAN_ID3_B2_BMS_LOG2_BMS_CHG_END_EVSE_CHARGE_TYPE_DC_CHARGER_PRESENT_CHOICE (1u)
#define MODEL3_CAN_ID3_B2_BMS_LOG2_BMS_CHG_END_EVSE_CHARGE_TYPE_AC_CHARGER_PRESENT_CHOICE (2u)

#define MODEL3_CAN_ID3_B2_BMS_LOG2_BMS_NEG_CTR_COMMON_MODE_REJ_ERROR_SNA_CHOICE (-4096)

#define MODEL3_CAN_ID3_B2_BMS_LOG2_BMS_NEG_CTR_DEVIATION_FILT_MIN_SNA_CHOICE (-4096)

#define MODEL3_CAN_ID3_B2_BMS_LOG2_BMS_NEG_CTR_DEVIATION_MIN_SNA_CHOICE (-4096)

#define MODEL3_CAN_ID3_B2_BMS_LOG2_BMS_NEG_CTR_DROP_CORRECTED_MIN_SNA_CHOICE (-4096)

#define MODEL3_CAN_ID3_B2_BMS_LOG2_BMS_POS_CTR_COMMON_MODE_REJ_ERROR_SNA_CHOICE (-4096)

#define MODEL3_CAN_ID3_B2_BMS_LOG2_BMS_POS_CTR_DEVIATION_FILT_MIN_SNA_CHOICE (-4096)

#define MODEL3_CAN_ID3_B2_BMS_LOG2_BMS_POS_CTR_DEVIATION_MIN_SNA_CHOICE (-4096)

#define MODEL3_CAN_ID3_B2_BMS_LOG2_BMS_POS_CTR_DROP_CORRECTED_MIN_SNA_CHOICE (-4096)

#define MODEL3_CAN_ID3_B2_BMS_LOG2_BMS_POS_CTR_RESISTANCE_SNA_CHOICE (-4096)

#define MODEL3_CAN_ID3_B2_BMS_LOG2_BMS_FC_LINK_TEST_DECAY_TIME_SNA_CHOICE (1023u)

#define MODEL3_CAN_ID3_B2_BMS_LOG2_BMS_FLOOD_PORT_STATE1_FLOOD_PORT_STATE_SNA_CHOICE (0u)
#define MODEL3_CAN_ID3_B2_BMS_LOG2_BMS_FLOOD_PORT_STATE1_FLOOD_PORT_STATE_ERROR_LOW_CHOICE (1u)
#define MODEL3_CAN_ID3_B2_BMS_LOG2_BMS_FLOOD_PORT_STATE1_FLOOD_PORT_STATE_CLOSED_CHOICE (2u)
#define MODEL3_CAN_ID3_B2_BMS_LOG2_BMS_FLOOD_PORT_STATE1_FLOOD_PORT_STATE_OPEN_CHOICE (3u)
#define MODEL3_CAN_ID3_B2_BMS_LOG2_BMS_FLOOD_PORT_STATE1_FLOOD_PORT_STATE_ERROR_HIGH_CHOICE (4u)

#define MODEL3_CAN_ID3_B2_BMS_LOG2_BMS_CHG_END_CHARGE_STATE_CHARGE_STATE_INACTIVE_CHOICE (0u)
#define MODEL3_CAN_ID3_B2_BMS_LOG2_BMS_CHG_END_CHARGE_STATE_CHARGE_STATE_ENABLE_DCLINK_CHOICE (1u)
#define MODEL3_CAN_ID3_B2_BMS_LOG2_BMS_CHG_END_CHARGE_STATE_CHARGE_STATE_DC_EXT_ISO_CHECK_CHOICE (2u)
#define MODEL3_CAN_ID3_B2_BMS_LOG2_BMS_CHG_END_CHARGE_STATE_CHARGE_STATE_DC_ENABLE_FCLINK_CHOICE (3u)
#define MODEL3_CAN_ID3_B2_BMS_LOG2_BMS_CHG_END_CHARGE_STATE_CHARGE_STATE_AC_ENABLE_PCS_CHOICE (4u)
#define MODEL3_CAN_ID3_B2_BMS_LOG2_BMS_CHG_END_CHARGE_STATE_CHARGE_STATE_CHARGING_ACTIVE_CHOICE (5u)
#define MODEL3_CAN_ID3_B2_BMS_LOG2_BMS_CHG_END_CHARGE_STATE_CHARGE_STATE_DC_DISABLING_CHARGER_CHOICE (6u)
#define MODEL3_CAN_ID3_B2_BMS_LOG2_BMS_CHG_END_CHARGE_STATE_CHARGE_STATE_AC_DISABLE_PCS_CHOICE (7u)

#define MODEL3_CAN_ID3_B2_BMS_LOG2_BMS_FLOOD_PORT_STATE2_FLOOD_PORT_STATE_SNA_CHOICE (0u)
#define MODEL3_CAN_ID3_B2_BMS_LOG2_BMS_FLOOD_PORT_STATE2_FLOOD_PORT_STATE_ERROR_LOW_CHOICE (1u)
#define MODEL3_CAN_ID3_B2_BMS_LOG2_BMS_FLOOD_PORT_STATE2_FLOOD_PORT_STATE_CLOSED_CHOICE (2u)
#define MODEL3_CAN_ID3_B2_BMS_LOG2_BMS_FLOOD_PORT_STATE2_FLOOD_PORT_STATE_OPEN_CHOICE (3u)
#define MODEL3_CAN_ID3_B2_BMS_LOG2_BMS_FLOOD_PORT_STATE2_FLOOD_PORT_STATE_ERROR_HIGH_CHOICE (4u)

#define MODEL3_CAN_ID3_B2_BMS_LOG2_BMS_CHG_END_BMS_HV_CHARGE_STATUS_BMS_CHARGE_STANDBY_CHOICE (0u)
#define MODEL3_CAN_ID3_B2_BMS_LOG2_BMS_CHG_END_BMS_HV_CHARGE_STATUS_BMS_EXT_EVSE_TEST_ALLOWED_CHOICE (1u)
#define MODEL3_CAN_ID3_B2_BMS_LOG2_BMS_CHG_END_BMS_HV_CHARGE_STATUS_BMS_EXT_PRECHARGE_ALLOWED_CHOICE (2u)
#define MODEL3_CAN_ID3_B2_BMS_LOG2_BMS_CHG_END_BMS_HV_CHARGE_STATUS_BMS_CHARGE_ENABLING_CHOICE (3u)
#define MODEL3_CAN_ID3_B2_BMS_LOG2_BMS_CHG_END_BMS_HV_CHARGE_STATUS_BMS_CHARGE_ENABLED_CHOICE (4u)
#define MODEL3_CAN_ID3_B2_BMS_LOG2_BMS_CHG_END_BMS_HV_CHARGE_STATUS_BMS_GRACEFUL_SHUTDOWN_CHOICE (5u)
#define MODEL3_CAN_ID3_B2_BMS_LOG2_BMS_CHG_END_BMS_HV_CHARGE_STATUS_BMS_EMERGENCY_SHUTDOWN_CHOICE (6u)
#define MODEL3_CAN_ID3_B2_BMS_LOG2_BMS_CHG_END_BMS_HV_CHARGE_STATUS_BMS_CHARGE_FAULTED_CHOICE (7u)

#define MODEL3_CAN_ID3_B2_BMS_LOG2_BMS_CHG_END_CP_HV_CHARGE_STATUS_CP_CHARGE_INACTIVE_CHOICE (0u)
#define MODEL3_CAN_ID3_B2_BMS_LOG2_BMS_CHG_END_CP_HV_CHARGE_STATUS_CP_CHARGE_CONNECTED_CHOICE (1u)
#define MODEL3_CAN_ID3_B2_BMS_LOG2_BMS_CHG_END_CP_HV_CHARGE_STATUS_CP_CHARGE_STANDBY_CHOICE (2u)
#define MODEL3_CAN_ID3_B2_BMS_LOG2_BMS_CHG_END_CP_HV_CHARGE_STATUS_CP_EXT_EVSE_TEST_ACTIVE_CHOICE (3u)
#define MODEL3_CAN_ID3_B2_BMS_LOG2_BMS_CHG_END_CP_HV_CHARGE_STATUS_CP_EVSE_TEST_PASSED_CHOICE (4u)
#define MODEL3_CAN_ID3_B2_BMS_LOG2_BMS_CHG_END_CP_HV_CHARGE_STATUS_CP_CHARGE_ENABLED_CHOICE (5u)
#define MODEL3_CAN_ID3_B2_BMS_LOG2_BMS_CHG_END_CP_HV_CHARGE_STATUS_CP_CHARGE_FAULTED_CHOICE (6u)

#define MODEL3_CAN_ID3_B2_BMS_LOG2_BMS_NEG_CTR_COMMON_MODE_REJ_ERROR_CONF_SNA_CHOICE (8191u)

#define MODEL3_CAN_ID3_B2_BMS_LOG2_BMS_NEG_CTR_DEVIATION_FILT_MAX_SNA_CHOICE (-4096)

#define MODEL3_CAN_ID3_B2_BMS_LOG2_BMS_NEG_CTR_DEVIATION_MAX_SNA_CHOICE (-4096)

#define MODEL3_CAN_ID3_B2_BMS_LOG2_BMS_NEG_CTR_DROP_CORRECTED_MAX_SNA_CHOICE (-4096)

#define MODEL3_CAN_ID3_B2_BMS_LOG2_BMS_POS_CTR_COMMON_MODE_REJ_ERROR_CONF_SNA_CHOICE (8191u)

#define MODEL3_CAN_ID3_B2_BMS_LOG2_BMS_POS_CTR_DEVIATION_FILT_MAX_SNA_CHOICE (-4096)

#define MODEL3_CAN_ID3_B2_BMS_LOG2_BMS_POS_CTR_DEVIATION_MAX_SNA_CHOICE (-4096)

#define MODEL3_CAN_ID3_B2_BMS_LOG2_BMS_POS_CTR_DROP_CORRECTED_MAX_SNA_CHOICE (-4096)

#define MODEL3_CAN_ID3_B2_BMS_LOG2_BMS_POS_CTR_RESISTANCE_CONFIDENCE_SNA_CHOICE (8191u)

#define MODEL3_CAN_ID3_B2_BMS_LOG2_BMS_IDEAL_ENERGY_FLOOR_SNA_CHOICE (1023u)

#define MODEL3_CAN_ID3_B2_BMS_LOG2_BMS_CHG_END_PCS_HV_CHARGE_STATUS_PCS_CHARGE_STANDBY_CHOICE (0u)
#define MODEL3_CAN_ID3_B2_BMS_LOG2_BMS_CHG_END_PCS_HV_CHARGE_STATUS_PCS_CHARGE_BLOCKED_CHOICE (1u)
#define MODEL3_CAN_ID3_B2_BMS_LOG2_BMS_CHG_END_PCS_HV_CHARGE_STATUS_PCS_CHARGE_ENABLED_CHOICE (2u)
#define MODEL3_CAN_ID3_B2_BMS_LOG2_BMS_CHG_END_PCS_HV_CHARGE_STATUS_PCS_CHARGE_FAULTED_CHOICE (3u)

#define MODEL3_CAN_ID3_B2_BMS_LOG2_BMS_CHG_END_CP_SHUTDOWN_REQUEST_NO_SHUTDOWN_REQUESTED_CHOICE (0u)
#define MODEL3_CAN_ID3_B2_BMS_LOG2_BMS_CHG_END_CP_SHUTDOWN_REQUEST_GRACEFUL_SHUTDOWN_REQUESTED_CHOICE (1u)
#define MODEL3_CAN_ID3_B2_BMS_LOG2_BMS_CHG_END_CP_SHUTDOWN_REQUEST_EMERGENCY_SHUTDOWN_REQUESTED_CHOICE (2u)

#define MODEL3_CAN_ID3_B2_BMS_LOG2_BMS_CHG_END_PCS_SHUTDOWN_REQUEST_NO_SHUTDOWN_REQUESTED_CHOICE (0u)
#define MODEL3_CAN_ID3_B2_BMS_LOG2_BMS_CHG_END_PCS_SHUTDOWN_REQUEST_GRACEFUL_SHUTDOWN_REQUESTED_CHOICE (1u)
#define MODEL3_CAN_ID3_B2_BMS_LOG2_BMS_CHG_END_PCS_SHUTDOWN_REQUEST_EMERGENCY_SHUTDOWN_REQUESTED_CHOICE (2u)

#define MODEL3_CAN_ID3_B2_BMS_LOG2_BMS_DYNAMIC_ENERGY_BUFFER_SNA_CHOICE (1023u)

#define MODEL3_CAN_ID3_B2_BMS_LOG2_BMS_CHARGE_CURRENT_LIMIT_MODE_BMS_CHG_I_LIMIT_NONE_CHOICE (0u)
#define MODEL3_CAN_ID3_B2_BMS_LOG2_BMS_CHARGE_CURRENT_LIMIT_MODE_BMS_CHG_I_LIMIT_BRICK_TEMP_AND_V_CHOICE (1u)
#define MODEL3_CAN_ID3_B2_BMS_LOG2_BMS_CHARGE_CURRENT_LIMIT_MODE_BMS_CHG_I_LIMIT_CAC_IMBALANCE_CHOICE (2u)
#define MODEL3_CAN_ID3_B2_BMS_LOG2_BMS_CHARGE_CURRENT_LIMIT_MODE_BMS_CHG_I_LIMIT_LEAKY_BUCKET_CHOICE (3u)
#define MODEL3_CAN_ID3_B2_BMS_LOG2_BMS_CHARGE_CURRENT_LIMIT_MODE_BMS_CHG_I_LIMIT_TETHERING_CHOICE (4u)
#define MODEL3_CAN_ID3_B2_BMS_LOG2_BMS_CHARGE_CURRENT_LIMIT_MODE_BMS_CHG_I_LIMIT_CONFIG_CHOICE (5u)
#define MODEL3_CAN_ID3_B2_BMS_LOG2_BMS_CHARGE_CURRENT_LIMIT_MODE_BMS_CHG_I_LIMIT_HV_CHAIN_CHOICE (6u)

#define MODEL3_CAN_ID3_B2_BMS_LOG2_BMS_NEG_CTR_DEVIATION_CONFIDENCE_MIN_SNA_CHOICE (8191u)

#define MODEL3_CAN_ID3_B2_BMS_LOG2_BMS_NEG_CTR_DEVIATION_FILT_CONF_MIN_SNA_CHOICE (8191u)

#define MODEL3_CAN_ID3_B2_BMS_LOG2_BMS_NEG_CTR_DROP_CORRECTED_FILT_MIN_SNA_CHOICE (-4096)

#define MODEL3_CAN_ID3_B2_BMS_LOG2_BMS_NEG_CTR_OFFSET_ERROR_SNA_CHOICE (-4096)

#define MODEL3_CAN_ID3_B2_BMS_LOG2_BMS_NEG_CTR_RESISTANCE_SNA_CHOICE (-4096)

#define MODEL3_CAN_ID3_B2_BMS_LOG2_BMS_POS_CTR_DEVIATION_CONFIDENCE_MIN_SNA_CHOICE (8191u)

#define MODEL3_CAN_ID3_B2_BMS_LOG2_BMS_POS_CTR_DEVIATION_FILT_CONF_MIN_SNA_CHOICE (8191u)

#define MODEL3_CAN_ID3_B2_BMS_LOG2_BMS_POS_CTR_DROP_CORRECTED_FILT_MIN_SNA_CHOICE (-4096)

#define MODEL3_CAN_ID3_B2_BMS_LOG2_BMS_POS_CTR_OFFSET_ERROR_SNA_CHOICE (-4096)

#define MODEL3_CAN_ID3_B2_BMS_LOG2_BMS_CHARGE_NEEDED_REASON_BMS_NO_CHARGE_REASON_CHOICE (0u)
#define MODEL3_CAN_ID3_B2_BMS_LOG2_BMS_CHARGE_NEEDED_REASON_BMS_SOC_LESS_THAN_UI_THRESHOLD_CHOICE (1u)
#define MODEL3_CAN_ID3_B2_BMS_LOG2_BMS_CHARGE_NEEDED_REASON_BMS_DCH_KWH_THRESHOLD_CHOICE (2u)
#define MODEL3_CAN_ID3_B2_BMS_LOG2_BMS_CHARGE_NEEDED_REASON_BMS_CHARGE_TARGET_INCREASED_CHOICE (3u)
#define MODEL3_CAN_ID3_B2_BMS_LOG2_BMS_CHARGE_NEEDED_REASON_BMS_CABLE_CYCLE_TOP_OFF_CHOICE (4u)
#define MODEL3_CAN_ID3_B2_BMS_LOG2_BMS_CHARGE_NEEDED_REASON_BMS_BRICKV_LESS_THAN_FULL_CHARGE_CHOICE (6u)

#define MODEL3_CAN_ID3_B2_BMS_LOG2_BMS_NEG_CTR_DEVIATION_CONFIDENCE_MAX_SNA_CHOICE (8191u)

#define MODEL3_CAN_ID3_B2_BMS_LOG2_BMS_NEG_CTR_DEVIATION_FILT_CONF_MAX_SNA_CHOICE (8191u)

#define MODEL3_CAN_ID3_B2_BMS_LOG2_BMS_NEG_CTR_DROP_CORRECTED_FILT_MAX_SNA_CHOICE (-4096)

#define MODEL3_CAN_ID3_B2_BMS_LOG2_BMS_NEG_CTR_OFFSET_ERROR_CONF_SNA_CHOICE (8191u)

#define MODEL3_CAN_ID3_B2_BMS_LOG2_BMS_NEG_CTR_RESISTANCE_CONFIDENCE_SNA_CHOICE (8191u)

#define MODEL3_CAN_ID3_B2_BMS_LOG2_BMS_POS_CTR_DEVIATION_CONFIDENCE_MAX_SNA_CHOICE (8191u)

#define MODEL3_CAN_ID3_B2_BMS_LOG2_BMS_POS_CTR_DEVIATION_FILT_CONF_MAX_SNA_CHOICE (8191u)

#define MODEL3_CAN_ID3_B2_BMS_LOG2_BMS_POS_CTR_DROP_CORRECTED_FILT_MAX_SNA_CHOICE (-4096)

#define MODEL3_CAN_ID3_B2_BMS_LOG2_BMS_POS_CTR_OFFSET_ERROR_CONF_SNA_CHOICE (8191u)

#define MODEL3_CAN_ID3_B2_BMS_LOG2_BMS_CP_CHARGE_STATUS_BMS_CHARGING_INACTIVE_CHOICE (0u)
#define MODEL3_CAN_ID3_B2_BMS_LOG2_BMS_CP_CHARGE_STATUS_BMS_CHARGING_ACTIVE_CHOICE (1u)
#define MODEL3_CAN_ID3_B2_BMS_LOG2_BMS_CP_CHARGE_STATUS_BMS_CHARGING_COMPLETE_CHOICE (2u)
#define MODEL3_CAN_ID3_B2_BMS_LOG2_BMS_CP_CHARGE_STATUS_BMS_CHARGING_FAULT_CHOICE (3u)
#define MODEL3_CAN_ID3_B2_BMS_LOG2_BMS_CP_CHARGE_STATUS_BMS_CHARGING_ENABLING_CHOICE (4u)
#define MODEL3_CAN_ID3_B2_BMS_LOG2_BMS_CP_CHARGE_STATUS_BMS_CHARGING_UPDATE_IN_PROGRESS_CHOICE (5u)

#define MODEL3_CAN_ID320_BMS_ALERT_MATRIX_BMS_MATRIX_INDEX_BMS_ALERT_MATRIX0_CHOICE (0u)
#define MODEL3_CAN_ID320_BMS_ALERT_MATRIX_BMS_MATRIX_INDEX_BMS_ALERT_MATRIX1_CHOICE (1u)
#define MODEL3_CAN_ID320_BMS_ALERT_MATRIX_BMS_MATRIX_INDEX_BMS_ALERT_MATRIX2_CHOICE (2u)

#define MODEL3_CAN_ID31_CCC_CHG_STATUS_CC_CURRENT_LIMIT_SNA_CHOICE (255u)

#define MODEL3_CAN_ID31_CCC_CHG_STATUS_CC_PILOT_STATE_CC_PILOT_STATE_READY_CHOICE (0u)
#define MODEL3_CAN_ID31_CCC_CHG_STATUS_CC_PILOT_STATE_CC_PILOT_STATE_IDLE_CHOICE (1u)
#define MODEL3_CAN_ID31_CCC_CHG_STATUS_CC_PILOT_STATE_CC_PILOT_STATE_FAULTED_CHOICE (2u)
#define MODEL3_CAN_ID31_CCC_CHG_STATUS_CC_PILOT_STATE_CC_PILOT_STATE_SNA_CHOICE (3u)

#define MODEL3_CAN_ID31_CCC_CHG_STATUS_CC_NUM_PHASES_SNA_CHOICE (0u)

#define MODEL3_CAN_ID31_CCC_CHG_STATUS_CC_LINE1_VOLTAGE_SNA_CHOICE (511u)

#define MODEL3_CAN_ID31_CCC_CHG_STATUS_CC_GRID_GROUNDING_CC_GRID_GROUNDING_TN_TT_CHOICE (0u)
#define MODEL3_CAN_ID31_CCC_CHG_STATUS_CC_GRID_GROUNDING_CC_GRID_GROUNDING_IT_SPLIT_PHASE_CHOICE (1u)
#define MODEL3_CAN_ID31_CCC_CHG_STATUS_CC_GRID_GROUNDING_CC_GRID_GROUNDING_SNA_CHOICE (2u)

#define MODEL3_CAN_ID31_CCC_CHG_STATUS_CC_LINE2_VOLTAGE_SNA_CHOICE (511u)

#define MODEL3_CAN_ID31_CCC_CHG_STATUS_CC_LINE3_VOLTAGE_SNA_CHOICE (511u)

#define MODEL3_CAN_ID31_DCC_CHG_STATUS2_CC_CHG_STATUS2_INDEX_MUX0_CHOICE (0u)

#define MODEL3_CAN_ID31_DCC_CHG_STATUS2_CC_BUTTON_STATE_CC_BUTTON_RELEASED_CHOICE (0u)
#define MODEL3_CAN_ID31_DCC_CHG_STATUS2_CC_BUTTON_STATE_CC_BUTTON_PRESSED_CHOICE (1u)

#define MODEL3_CAN_ID32_CCC_LOG_DATA_CC_LOG_INDEX_MUX0_CHOICE (0u)
#define MODEL3_CAN_ID32_CCC_LOG_DATA_CC_LOG_INDEX_MUX1_CHOICE (1u)
#define MODEL3_CAN_ID32_CCC_LOG_DATA_CC_LOG_INDEX_MUX2_CHOICE (2u)
#define MODEL3_CAN_ID32_CCC_LOG_DATA_CC_LOG_INDEX_MUX3_CHOICE (3u)
#define MODEL3_CAN_ID32_CCC_LOG_DATA_CC_LOG_INDEX_MUX4_CHOICE (4u)
#define MODEL3_CAN_ID32_CCC_LOG_DATA_CC_LOG_INDEX_MUX10_CHOICE (10u)
#define MODEL3_CAN_ID32_CCC_LOG_DATA_CC_LOG_INDEX_MUX11_CHOICE (11u)
#define MODEL3_CAN_ID32_CCC_LOG_DATA_CC_LOG_INDEX_MUX12_CHOICE (12u)
#define MODEL3_CAN_ID32_CCC_LOG_DATA_CC_LOG_INDEX_MUX13_CHOICE (13u)

#define MODEL3_CAN_ID32_CCC_LOG_DATA_CC_ACTIVE_CONNECTOR_ID_SNA_CHOICE (255u)

#define MODEL3_CAN_ID32_CCC_LOG_DATA_CC_CONN1_CURRENT_SNA_CHOICE (255u)

#define MODEL3_CAN_ID32_CCC_LOG_DATA_CC_CONN2_CURRENT_SNA_CHOICE (255u)

#define MODEL3_CAN_ID32_CCC_LOG_DATA_CC_CONN3_CURRENT_SNA_CHOICE (255u)

#define MODEL3_CAN_ID32_CCC_LOG_DATA_CC_CONN4_CURRENT_SNA_CHOICE (255u)

#define MODEL3_CAN_ID32_CCC_LOG_DATA_CC_TEMPERATURE1_SNA_CHOICE (127)

#define MODEL3_CAN_ID32_CCC_LOG_DATA_CC_TEMPERATURE2_SNA_CHOICE (127)

#define MODEL3_CAN_ID32_CCC_LOG_DATA_CC_TEMPERATURE3_SNA_CHOICE (127)

#define MODEL3_CAN_ID32_CCC_LOG_DATA_CC_CONTACTOR1_CLOSED_CC_CONTACTOR_OPEN_CHOICE (0u)
#define MODEL3_CAN_ID32_CCC_LOG_DATA_CC_CONTACTOR1_CLOSED_CC_CONTACTOR_CLOSED_CHOICE (1u)
#define MODEL3_CAN_ID32_CCC_LOG_DATA_CC_CONTACTOR1_CLOSED_CC_CONTACTOR_SNA_CHOICE (3u)

#define MODEL3_CAN_ID32_CCC_LOG_DATA_CC_CONTACTOR2_CLOSED_CC_CONTACTOR_OPEN_CHOICE (0u)
#define MODEL3_CAN_ID32_CCC_LOG_DATA_CC_CONTACTOR2_CLOSED_CC_CONTACTOR_CLOSED_CHOICE (1u)
#define MODEL3_CAN_ID32_CCC_LOG_DATA_CC_CONTACTOR2_CLOSED_CC_CONTACTOR_SNA_CHOICE (3u)

#define MODEL3_CAN_ID32_CCC_LOG_DATA_CC_TEMPERATURE4_SNA_CHOICE (127)

#define MODEL3_CAN_ID23_DCP_CHARGE_STATUS_CP_HV_CHARGE_STATUS_CP_CHARGE_INACTIVE_CHOICE (0u)
#define MODEL3_CAN_ID23_DCP_CHARGE_STATUS_CP_HV_CHARGE_STATUS_CP_CHARGE_CONNECTED_CHOICE (1u)
#define MODEL3_CAN_ID23_DCP_CHARGE_STATUS_CP_HV_CHARGE_STATUS_CP_CHARGE_STANDBY_CHOICE (2u)
#define MODEL3_CAN_ID23_DCP_CHARGE_STATUS_CP_HV_CHARGE_STATUS_CP_EXT_EVSE_TEST_ACTIVE_CHOICE (3u)
#define MODEL3_CAN_ID23_DCP_CHARGE_STATUS_CP_HV_CHARGE_STATUS_CP_EVSE_TEST_PASSED_CHOICE (4u)
#define MODEL3_CAN_ID23_DCP_CHARGE_STATUS_CP_HV_CHARGE_STATUS_CP_CHARGE_ENABLED_CHOICE (5u)
#define MODEL3_CAN_ID23_DCP_CHARGE_STATUS_CP_HV_CHARGE_STATUS_CP_CHARGE_FAULTED_CHOICE (6u)

#define MODEL3_CAN_ID23_DCP_CHARGE_STATUS_CP_CHARGE_SHUTDOWN_REQUEST_NO_SHUTDOWN_REQUESTED_CHOICE (0u)
#define MODEL3_CAN_ID23_DCP_CHARGE_STATUS_CP_CHARGE_SHUTDOWN_REQUEST_GRACEFUL_SHUTDOWN_REQUESTED_CHOICE (1u)
#define MODEL3_CAN_ID23_DCP_CHARGE_STATUS_CP_CHARGE_SHUTDOWN_REQUEST_EMERGENCY_SHUTDOWN_REQUESTED_CHOICE (2u)

#define MODEL3_CAN_ID43_DCP_CHARGE_STATUS_LOG_CP_HV_CHARGE_STATUS_LOG_CP_CHARGE_INACTIVE_CHOICE (0u)
#define MODEL3_CAN_ID43_DCP_CHARGE_STATUS_LOG_CP_HV_CHARGE_STATUS_LOG_CP_CHARGE_CONNECTED_CHOICE (1u)
#define MODEL3_CAN_ID43_DCP_CHARGE_STATUS_LOG_CP_HV_CHARGE_STATUS_LOG_CP_CHARGE_STANDBY_CHOICE (2u)
#define MODEL3_CAN_ID43_DCP_CHARGE_STATUS_LOG_CP_HV_CHARGE_STATUS_LOG_CP_EXT_EVSE_TEST_ACTIVE_CHOICE (3u)
#define MODEL3_CAN_ID43_DCP_CHARGE_STATUS_LOG_CP_HV_CHARGE_STATUS_LOG_CP_EVSE_TEST_PASSED_CHOICE (4u)
#define MODEL3_CAN_ID43_DCP_CHARGE_STATUS_LOG_CP_HV_CHARGE_STATUS_LOG_CP_CHARGE_ENABLED_CHOICE (5u)
#define MODEL3_CAN_ID43_DCP_CHARGE_STATUS_LOG_CP_HV_CHARGE_STATUS_LOG_CP_CHARGE_FAULTED_CHOICE (6u)

#define MODEL3_CAN_ID43_DCP_CHARGE_STATUS_LOG_CP_CHARGE_SHUTDOWN_REQUEST_LOG_NO_SHUTDOWN_REQUESTED_CHOICE (0u)
#define MODEL3_CAN_ID43_DCP_CHARGE_STATUS_LOG_CP_CHARGE_SHUTDOWN_REQUEST_LOG_GRACEFUL_SHUTDOWN_REQUESTED_CHOICE (1u)
#define MODEL3_CAN_ID43_DCP_CHARGE_STATUS_LOG_CP_CHARGE_SHUTDOWN_REQUEST_LOG_EMERGENCY_SHUTDOWN_REQUESTED_CHOICE (2u)

#define MODEL3_CAN_ID43_DCP_CHARGE_STATUS_LOG_CP_EVSE_CHARGE_TYPE_LOG_NO_CHARGER_PRESENT_CHOICE (0u)
#define MODEL3_CAN_ID43_DCP_CHARGE_STATUS_LOG_CP_EVSE_CHARGE_TYPE_LOG_DC_CHARGER_PRESENT_CHOICE (1u)
#define MODEL3_CAN_ID43_DCP_CHARGE_STATUS_LOG_CP_EVSE_CHARGE_TYPE_LOG_AC_CHARGER_PRESENT_CHOICE (2u)

#define MODEL3_CAN_ID21_DCP_EVSE_STATUS_CP_PROXIMITY_CHG_PROXIMITY_SNA_CHOICE (0u)
#define MODEL3_CAN_ID21_DCP_EVSE_STATUS_CP_PROXIMITY_CHG_PROXIMITY_DISCONNECTED_CHOICE (1u)
#define MODEL3_CAN_ID21_DCP_EVSE_STATUS_CP_PROXIMITY_CHG_PROXIMITY_UNLATCHED_CHOICE (2u)
#define MODEL3_CAN_ID21_DCP_EVSE_STATUS_CP_PROXIMITY_CHG_PROXIMITY_LATCHED_CHOICE (3u)

#define MODEL3_CAN_ID21_DCP_EVSE_STATUS_CP_PILOT_CHG_PILOT_NONE_CHOICE (0u)
#define MODEL3_CAN_ID21_DCP_EVSE_STATUS_CP_PILOT_CHG_PILOT_FAULTED_CHOICE (1u)
#define MODEL3_CAN_ID21_DCP_EVSE_STATUS_CP_PILOT_CHG_PILOT_LINE_CHARGE_CHOICE (2u)
#define MODEL3_CAN_ID21_DCP_EVSE_STATUS_CP_PILOT_CHG_PILOT_FAST_CHARGE_CHOICE (3u)
#define MODEL3_CAN_ID21_DCP_EVSE_STATUS_CP_PILOT_CHG_PILOT_IDLE_CHOICE (4u)
#define MODEL3_CAN_ID21_DCP_EVSE_STATUS_CP_PILOT_CHG_PILOT_INVALID_CHOICE (5u)
#define MODEL3_CAN_ID21_DCP_EVSE_STATUS_CP_PILOT_CHG_PILOT_UNUSED_6_CHOICE (6u)
#define MODEL3_CAN_ID21_DCP_EVSE_STATUS_CP_PILOT_CHG_PILOT_SNA_CHOICE (7u)

#define MODEL3_CAN_ID21_DCP_EVSE_STATUS_CP_CABLE_TYPE_CHG_CABLE_TYPE_IEC_CHOICE (0u)
#define MODEL3_CAN_ID21_DCP_EVSE_STATUS_CP_CABLE_TYPE_CHG_CABLE_TYPE_SAE_CHOICE (1u)
#define MODEL3_CAN_ID21_DCP_EVSE_STATUS_CP_CABLE_TYPE_CHG_CABLE_TYPE_GB_AC_CHOICE (2u)
#define MODEL3_CAN_ID21_DCP_EVSE_STATUS_CP_CABLE_TYPE_CHG_CABLE_TYPE_GB_DC_CHOICE (3u)
#define MODEL3_CAN_ID21_DCP_EVSE_STATUS_CP_CABLE_TYPE_CHG_CABLE_TYPE_SNA_CHOICE (4u)

#define MODEL3_CAN_ID21_DCP_EVSE_STATUS_CP_TESLA_SWCAN_STATE_TESLA_SWCAN_INACTIVE_CHOICE (0u)
#define MODEL3_CAN_ID21_DCP_EVSE_STATUS_CP_TESLA_SWCAN_STATE_TESLA_SWCAN_ACCEPT_CHOICE (1u)
#define MODEL3_CAN_ID21_DCP_EVSE_STATUS_CP_TESLA_SWCAN_STATE_TESLA_SWCAN_RECEIVE_CHOICE (2u)
#define MODEL3_CAN_ID21_DCP_EVSE_STATUS_CP_TESLA_SWCAN_STATE_TESLA_SWCAN_ESTABLISHED_CHOICE (3u)
#define MODEL3_CAN_ID21_DCP_EVSE_STATUS_CP_TESLA_SWCAN_STATE_TESLA_SWCAN_FAULT_CHOICE (4u)
#define MODEL3_CAN_ID21_DCP_EVSE_STATUS_CP_TESLA_SWCAN_STATE_TESLA_SWCAN_GO_TO_SLEEP_CHOICE (5u)
#define MODEL3_CAN_ID21_DCP_EVSE_STATUS_CP_TESLA_SWCAN_STATE_TESLA_SWCAN_OFFBOARD_UPDATE_IN_PROGRESS_CHOICE (6u)

#define MODEL3_CAN_ID21_DCP_EVSE_STATUS_CP_EVSE_CHARGE_TYPE_UI_NO_CHARGER_PRESENT_CHOICE (0u)
#define MODEL3_CAN_ID21_DCP_EVSE_STATUS_CP_EVSE_CHARGE_TYPE_UI_DC_CHARGER_PRESENT_CHOICE (1u)
#define MODEL3_CAN_ID21_DCP_EVSE_STATUS_CP_EVSE_CHARGE_TYPE_UI_AC_CHARGER_PRESENT_CHOICE (2u)

#define MODEL3_CAN_ID21_DCP_EVSE_STATUS_CP_GB_STATE_GBDC_INACTIVE_CHOICE (0u)
#define MODEL3_CAN_ID21_DCP_EVSE_STATUS_CP_GB_STATE_GBDC_WAIT_FOR_COMMS_CHOICE (1u)
#define MODEL3_CAN_ID21_DCP_EVSE_STATUS_CP_GB_STATE_GBDC_COMMS_RECEIVED_CHOICE (2u)
#define MODEL3_CAN_ID21_DCP_EVSE_STATUS_CP_GB_STATE_GBDC_HANDSHAKING_EXT_ISO_CHOICE (3u)
#define MODEL3_CAN_ID21_DCP_EVSE_STATUS_CP_GB_STATE_GBDC_RECOGNITION_CHOICE (4u)
#define MODEL3_CAN_ID21_DCP_EVSE_STATUS_CP_GB_STATE_GBDC_CHARGE_PARAM_CONFIG_CHOICE (5u)
#define MODEL3_CAN_ID21_DCP_EVSE_STATUS_CP_GB_STATE_GBDC_VEH_PACK_PRECHARGE_CHOICE (6u)
#define MODEL3_CAN_ID21_DCP_EVSE_STATUS_CP_GB_STATE_GBDC_READY_TO_CHARGE_CHOICE (7u)
#define MODEL3_CAN_ID21_DCP_EVSE_STATUS_CP_GB_STATE_GBDC_CHARGING_CHOICE (8u)
#define MODEL3_CAN_ID21_DCP_EVSE_STATUS_CP_GB_STATE_GBDC_STOP_CHARGE_REQUESTED_CHOICE (9u)
#define MODEL3_CAN_ID21_DCP_EVSE_STATUS_CP_GB_STATE_GBDC_CHARGE_DISABLING_CHOICE (10u)
#define MODEL3_CAN_ID21_DCP_EVSE_STATUS_CP_GB_STATE_GBDC_END_OF_CHARGE_CHOICE (11u)
#define MODEL3_CAN_ID21_DCP_EVSE_STATUS_CP_GB_STATE_GBDC_ERROR_HANDLING_CHOICE (12u)
#define MODEL3_CAN_ID21_DCP_EVSE_STATUS_CP_GB_STATE_GBDC_RETRY_CHARGE_CHOICE (13u)
#define MODEL3_CAN_ID21_DCP_EVSE_STATUS_CP_GB_STATE_GBDC_FAULTED_CHOICE (14u)
#define MODEL3_CAN_ID21_DCP_EVSE_STATUS_CP_GB_STATE_GBDC_TESTER_PRESENT_CHOICE (15u)

#define MODEL3_CAN_ID21_DCP_EVSE_STATUS_CP_GBDC_STOP_CHARGE_REASON_GBDC_STOP_REASON_NONE_CHOICE (0u)
#define MODEL3_CAN_ID21_DCP_EVSE_STATUS_CP_GBDC_STOP_CHARGE_REASON_GBDC_VEH_REQUESTED_CHOICE (1u)
#define MODEL3_CAN_ID21_DCP_EVSE_STATUS_CP_GBDC_STOP_CHARGE_REASON_GBDC_EVSE_REQUESTED_CHOICE (2u)
#define MODEL3_CAN_ID21_DCP_EVSE_STATUS_CP_GBDC_STOP_CHARGE_REASON_GBDC_COMMS_TIMEOUT_CHOICE (3u)
#define MODEL3_CAN_ID21_DCP_EVSE_STATUS_CP_GBDC_STOP_CHARGE_REASON_GBDC_EVSE_FAULT_CHOICE (4u)
#define MODEL3_CAN_ID21_DCP_EVSE_STATUS_CP_GBDC_STOP_CHARGE_REASON_GBDC_EVSE_CRITICAL_FAULT_CHOICE (5u)
#define MODEL3_CAN_ID21_DCP_EVSE_STATUS_CP_GBDC_STOP_CHARGE_REASON_GBDC_LIVE_DISCONNECT_CHOICE (6u)
#define MODEL3_CAN_ID21_DCP_EVSE_STATUS_CP_GBDC_STOP_CHARGE_REASON_GBDC_SUPERCHARGER_COMMS_TIMEOUT_CHOICE (7u)

#define MODEL3_CAN_ID21_DCP_EVSE_STATUS_CP_GBDC_FAILURE_REASON_GBDC_FAILURE_NONE_CHOICE (0u)
#define MODEL3_CAN_ID21_DCP_EVSE_STATUS_CP_GBDC_FAILURE_REASON_GBDC_ATTEMPTS_EXPIRED_CHOICE (1u)
#define MODEL3_CAN_ID21_DCP_EVSE_STATUS_CP_GBDC_FAILURE_REASON_GBDC_SHUTDOWN_FAILURE_CHOICE (2u)
#define MODEL3_CAN_ID21_DCP_EVSE_STATUS_CP_GBDC_FAILURE_REASON_GBDC_CRITICAL_FAILURE_CHOICE (3u)

#define MODEL3_CAN_ID21_DCP_EVSE_STATUS_CP_AC_CHARGE_STATE_AC_CHARGE_INACTIVE_CHOICE (0u)
#define MODEL3_CAN_ID21_DCP_EVSE_STATUS_CP_AC_CHARGE_STATE_AC_CHARGE_CONNECTED_CHARGE_BLOCKED_CHOICE (1u)
#define MODEL3_CAN_ID21_DCP_EVSE_STATUS_CP_AC_CHARGE_STATE_AC_CHARGE_STANDBY_CHOICE (2u)
#define MODEL3_CAN_ID21_DCP_EVSE_STATUS_CP_AC_CHARGE_STATE_AC_CHARGE_ENABLED_CHOICE (3u)
#define MODEL3_CAN_ID21_DCP_EVSE_STATUS_CP_AC_CHARGE_STATE_AC_CHARGE_ONBOARD_CHARGER_SHUTDOWN_CHOICE (4u)
#define MODEL3_CAN_ID21_DCP_EVSE_STATUS_CP_AC_CHARGE_STATE_AC_CHARGE_VEH_SHUTDOWN_CHOICE (5u)
#define MODEL3_CAN_ID21_DCP_EVSE_STATUS_CP_AC_CHARGE_STATE_AC_CHARGE_FAULT_CHOICE (6u)

#define MODEL3_CAN_ID21_DCP_EVSE_STATUS_CP_TESLA_DC_STATE_TESLA_DC_INACTIVE_CHOICE (0u)
#define MODEL3_CAN_ID21_DCP_EVSE_STATUS_CP_TESLA_DC_STATE_TESLA_DC_CONNECTED_CHARGE_BLOCKED_CHOICE (1u)
#define MODEL3_CAN_ID21_DCP_EVSE_STATUS_CP_TESLA_DC_STATE_TESLA_DC_STANDBY_CHOICE (2u)
#define MODEL3_CAN_ID21_DCP_EVSE_STATUS_CP_TESLA_DC_STATE_TESLA_DC_EXT_TESTS_ENABLED_CHOICE (3u)
#define MODEL3_CAN_ID21_DCP_EVSE_STATUS_CP_TESLA_DC_STATE_TESLA_DC_EXT_TEST_ACTIVE_CHOICE (4u)
#define MODEL3_CAN_ID21_DCP_EVSE_STATUS_CP_TESLA_DC_STATE_TESLA_DC_EXT_PRECHARGE_ACTIVE_CHOICE (5u)
#define MODEL3_CAN_ID21_DCP_EVSE_STATUS_CP_TESLA_DC_STATE_TESLA_DC_ENABLED_CHOICE (6u)
#define MODEL3_CAN_ID21_DCP_EVSE_STATUS_CP_TESLA_DC_STATE_TESLA_DC_EVSE_SHUTDOWN_CHOICE (7u)
#define MODEL3_CAN_ID21_DCP_EVSE_STATUS_CP_TESLA_DC_STATE_TESLA_DC_VEH_SHUTDOWN_CHOICE (8u)
#define MODEL3_CAN_ID21_DCP_EVSE_STATUS_CP_TESLA_DC_STATE_TESLA_DC_EMERGENCY_SHUTDOWN_CHOICE (9u)
#define MODEL3_CAN_ID21_DCP_EVSE_STATUS_CP_TESLA_DC_STATE_TESLA_DC_FAULT_CHOICE (10u)

#define MODEL3_CAN_ID21_DCP_EVSE_STATUS_CP_IEC_COMBO_STATE_IEC_COMBO_INACTIVE_CHOICE (0u)
#define MODEL3_CAN_ID21_DCP_EVSE_STATUS_CP_IEC_COMBO_STATE_IEC_COMBO_CONNECTED_CHOICE (1u)
#define MODEL3_CAN_ID21_DCP_EVSE_STATUS_CP_IEC_COMBO_STATE_IEC_COMBO_V2_G_SESSION_SETUP_CHOICE (2u)
#define MODEL3_CAN_ID21_DCP_EVSE_STATUS_CP_IEC_COMBO_STATE_IEC_COMBO_SERVICE_DISCOVERY_CHOICE (3u)
#define MODEL3_CAN_ID21_DCP_EVSE_STATUS_CP_IEC_COMBO_STATE_IEC_COMBO_PAYMENT_SELECTION_CHOICE (4u)
#define MODEL3_CAN_ID21_DCP_EVSE_STATUS_CP_IEC_COMBO_STATE_IEC_COMBO_CHARGE_PARAM_DISCOVERY_CHOICE (5u)
#define MODEL3_CAN_ID21_DCP_EVSE_STATUS_CP_IEC_COMBO_STATE_IEC_COMBO_CABLE_CHECK_CHOICE (6u)
#define MODEL3_CAN_ID21_DCP_EVSE_STATUS_CP_IEC_COMBO_STATE_IEC_COMBO_PRECHARGE_CHOICE (7u)
#define MODEL3_CAN_ID21_DCP_EVSE_STATUS_CP_IEC_COMBO_STATE_IEC_COMBO_ENABLED_CHOICE (8u)
#define MODEL3_CAN_ID21_DCP_EVSE_STATUS_CP_IEC_COMBO_STATE_IEC_COMBO_SHUTDOWN_CHOICE (9u)
#define MODEL3_CAN_ID21_DCP_EVSE_STATUS_CP_IEC_COMBO_STATE_IEC_COMBO_END_OF_CHARGE_CHOICE (10u)
#define MODEL3_CAN_ID21_DCP_EVSE_STATUS_CP_IEC_COMBO_STATE_IEC_COMBO_FAULT_CHOICE (11u)
#define MODEL3_CAN_ID21_DCP_EVSE_STATUS_CP_IEC_COMBO_STATE_IEC_COMBO_WAIT_RESTART_CHOICE (12u)

#define MODEL3_CAN_ID75_DCP_SENSOR_DATA_CP_SENSOR_DATA_SELECT_CP_SENSOR_DOOR_COUNTS_CHOICE (0u)
#define MODEL3_CAN_ID75_DCP_SENSOR_DATA_CP_SENSOR_DATA_SELECT_CP_SENSOR_PIN_TEMP_CHOICE (1u)
#define MODEL3_CAN_ID75_DCP_SENSOR_DATA_CP_SENSOR_DATA_SELECT_CP_SENSOR_DOOR_CHOICE (2u)
#define MODEL3_CAN_ID75_DCP_SENSOR_DATA_CP_SENSOR_DATA_SELECT_CP_SENSOR_LATCH_CHOICE (3u)
#define MODEL3_CAN_ID75_DCP_SENSOR_DATA_CP_SENSOR_DATA_SELECT_CP_SENSOR_INDUCTIVE_DOOR_CHOICE (4u)
#define MODEL3_CAN_ID75_DCP_SENSOR_DATA_CP_SENSOR_DATA_SELECT_CP_SENSOR_FAULT_LINE_CHOICE (5u)
#define MODEL3_CAN_ID75_DCP_SENSOR_DATA_CP_SENSOR_DATA_SELECT_CP_SENSOR_UHF_CHOICE (6u)
#define MODEL3_CAN_ID75_DCP_SENSOR_DATA_CP_SENSOR_DATA_SELECT_CP_SENSOR_RAILS_CHOICE (7u)
#define MODEL3_CAN_ID75_DCP_SENSOR_DATA_CP_SENSOR_DATA_SELECT_CP_SENSOR_PROX_CHOICE (8u)
#define MODEL3_CAN_ID75_DCP_SENSOR_DATA_CP_SENSOR_DATA_SELECT_CP_SENSOR_PILOT_CHOICE (9u)
#define MODEL3_CAN_ID75_DCP_SENSOR_DATA_CP_SENSOR_DATA_SELECT_CP_SENSOR_PILOT2_CHOICE (10u)
#define MODEL3_CAN_ID75_DCP_SENSOR_DATA_CP_SENSOR_DATA_SELECT_CP_SENSOR_PROX_GB_CHOICE (11u)

#define MODEL3_CAN_ID333_UI_CHARGE_REQUEST_UI_AC_CHARGE_CURRENT_LIMIT_SNA_CHOICE (127u)

#define MODEL3_CAN_ID334_UI_POWERTRAIN_CONTROL_UI_SYSTEM_POWER_LIMIT_SNA_CHOICE (31u)

#define MODEL3_CAN_ID334_UI_POWERTRAIN_CONTROL_UI_PEDAL_MAP_CHILL_CHOICE (0u)
#define MODEL3_CAN_ID334_UI_POWERTRAIN_CONTROL_UI_PEDAL_MAP_SPORT_CHOICE (1u)
#define MODEL3_CAN_ID334_UI_POWERTRAIN_CONTROL_UI_PEDAL_MAP_PERFORMANCE_CHOICE (2u)

#define MODEL3_CAN_ID334_UI_POWERTRAIN_CONTROL_UI_SYSTEM_TORQUE_LIMIT_SNA_CHOICE (63u)

#define MODEL3_CAN_ID334_UI_POWERTRAIN_CONTROL_UI_SPEED_LIMIT_SNA_CHOICE (255u)

#define MODEL3_CAN_ID334_UI_POWERTRAIN_CONTROL_UI_LIMIT_MODE_LIMIT_NORMAL_CHOICE (0u)
#define MODEL3_CAN_ID334_UI_POWERTRAIN_CONTROL_UI_LIMIT_MODE_LIMIT_VALET_CHOICE (1u)
#define MODEL3_CAN_ID334_UI_POWERTRAIN_CONTROL_UI_LIMIT_MODE_LIMIT_FACTORY_CHOICE (2u)
#define MODEL3_CAN_ID334_UI_POWERTRAIN_CONTROL_UI_LIMIT_MODE_LIMIT_SERVICE_CHOICE (3u)

#define MODEL3_CAN_ID334_UI_POWERTRAIN_CONTROL_UI_MOTOR_ON_MODE_MOTORONMODE_NORMAL_CHOICE (0u)
#define MODEL3_CAN_ID334_UI_POWERTRAIN_CONTROL_UI_MOTOR_ON_MODE_MOTORONMODE_FRONT_ONLY_CHOICE (1u)
#define MODEL3_CAN_ID334_UI_POWERTRAIN_CONTROL_UI_MOTOR_ON_MODE_MOTORONMODE_REAR_ONLY_CHOICE (2u)

#define MODEL3_CAN_ID334_UI_POWERTRAIN_CONTROL_UI_WASTE_MODE_WASTE_TYPE_NONE_CHOICE (0u)
#define MODEL3_CAN_ID334_UI_POWERTRAIN_CONTROL_UI_WASTE_MODE_WASTE_TYPE_PARTIAL_CHOICE (1u)
#define MODEL3_CAN_ID334_UI_POWERTRAIN_CONTROL_UI_WASTE_MODE_WASTE_TYPE_FULL_CHOICE (2u)

#define MODEL3_CAN_ID334_UI_POWERTRAIN_CONTROL_UI_WASTE_MODE_REGEN_LIMIT_MAX_REGEN_CURRENT_MAX_CHOICE (0u)
#define MODEL3_CAN_ID334_UI_POWERTRAIN_CONTROL_UI_WASTE_MODE_REGEN_LIMIT_MAX_REGEN_CURRENT_30_A_CHOICE (1u)
#define MODEL3_CAN_ID334_UI_POWERTRAIN_CONTROL_UI_WASTE_MODE_REGEN_LIMIT_MAX_REGEN_CURRENT_10_A_CHOICE (2u)
#define MODEL3_CAN_ID334_UI_POWERTRAIN_CONTROL_UI_WASTE_MODE_REGEN_LIMIT_MAX_REGEN_CURRENT_0_A_CHOICE (3u)

#define MODEL3_CAN_ID334_UI_POWERTRAIN_CONTROL_UI_STOPPING_MODE_STANDARD_CHOICE (0u)
#define MODEL3_CAN_ID334_UI_POWERTRAIN_CONTROL_UI_STOPPING_MODE_CREEP_CHOICE (1u)
#define MODEL3_CAN_ID334_UI_POWERTRAIN_CONTROL_UI_STOPPING_MODE_HOLD_CHOICE (2u)

#define MODEL3_CAN_ID241_VCFRONT_COOLANT_VCFRONT_COOLANT_FLOW_BAT_REASON_NONE_CHOICE (0u)
#define MODEL3_CAN_ID241_VCFRONT_COOLANT_VCFRONT_COOLANT_FLOW_BAT_REASON_COOLANT_AIR_PURGE_CHOICE (1u)
#define MODEL3_CAN_ID241_VCFRONT_COOLANT_VCFRONT_COOLANT_FLOW_BAT_REASON_NO_FLOW_REQ_CHOICE (2u)
#define MODEL3_CAN_ID241_VCFRONT_COOLANT_VCFRONT_COOLANT_FLOW_BAT_REASON_OVERRIDE_BATT_CHOICE (3u)
#define MODEL3_CAN_ID241_VCFRONT_COOLANT_VCFRONT_COOLANT_FLOW_BAT_REASON_ACTIVE_MANAGER_BATT_CHOICE (4u)
#define MODEL3_CAN_ID241_VCFRONT_COOLANT_VCFRONT_COOLANT_FLOW_BAT_REASON_PASSIVE_MANAGER_BATT_CHOICE (5u)
#define MODEL3_CAN_ID241_VCFRONT_COOLANT_VCFRONT_COOLANT_FLOW_BAT_REASON_BMS_FLOW_REQ_CHOICE (6u)
#define MODEL3_CAN_ID241_VCFRONT_COOLANT_VCFRONT_COOLANT_FLOW_BAT_REASON_DAS_FLOW_REQ_CHOICE (7u)
#define MODEL3_CAN_ID241_VCFRONT_COOLANT_VCFRONT_COOLANT_FLOW_BAT_REASON_OVERRIDE_PT_CHOICE (8u)
#define MODEL3_CAN_ID241_VCFRONT_COOLANT_VCFRONT_COOLANT_FLOW_BAT_REASON_ACTIVE_MANAGER_PT_CHOICE (9u)
#define MODEL3_CAN_ID241_VCFRONT_COOLANT_VCFRONT_COOLANT_FLOW_BAT_REASON_PASSIVE_MANAGER_PT_CHOICE (10u)
#define MODEL3_CAN_ID241_VCFRONT_COOLANT_VCFRONT_COOLANT_FLOW_BAT_REASON_PCS_FLOW_REQ_CHOICE (11u)
#define MODEL3_CAN_ID241_VCFRONT_COOLANT_VCFRONT_COOLANT_FLOW_BAT_REASON_DI_FLOW_REQ_CHOICE (12u)
#define MODEL3_CAN_ID241_VCFRONT_COOLANT_VCFRONT_COOLANT_FLOW_BAT_REASON_DIS_FLOW_REQ_CHOICE (13u)
#define MODEL3_CAN_ID241_VCFRONT_COOLANT_VCFRONT_COOLANT_FLOW_BAT_REASON_HP_FLOW_REQ_CHOICE (14u)

#define MODEL3_CAN_ID241_VCFRONT_COOLANT_VCFRONT_COOLANT_FLOW_PT_REASON_NONE_CHOICE (0u)
#define MODEL3_CAN_ID241_VCFRONT_COOLANT_VCFRONT_COOLANT_FLOW_PT_REASON_COOLANT_AIR_PURGE_CHOICE (1u)
#define MODEL3_CAN_ID241_VCFRONT_COOLANT_VCFRONT_COOLANT_FLOW_PT_REASON_NO_FLOW_REQ_CHOICE (2u)
#define MODEL3_CAN_ID241_VCFRONT_COOLANT_VCFRONT_COOLANT_FLOW_PT_REASON_OVERRIDE_BATT_CHOICE (3u)
#define MODEL3_CAN_ID241_VCFRONT_COOLANT_VCFRONT_COOLANT_FLOW_PT_REASON_ACTIVE_MANAGER_BATT_CHOICE (4u)
#define MODEL3_CAN_ID241_VCFRONT_COOLANT_VCFRONT_COOLANT_FLOW_PT_REASON_PASSIVE_MANAGER_BATT_CHOICE (5u)
#define MODEL3_CAN_ID241_VCFRONT_COOLANT_VCFRONT_COOLANT_FLOW_PT_REASON_BMS_FLOW_REQ_CHOICE (6u)
#define MODEL3_CAN_ID241_VCFRONT_COOLANT_VCFRONT_COOLANT_FLOW_PT_REASON_DAS_FLOW_REQ_CHOICE (7u)
#define MODEL3_CAN_ID241_VCFRONT_COOLANT_VCFRONT_COOLANT_FLOW_PT_REASON_OVERRIDE_PT_CHOICE (8u)
#define MODEL3_CAN_ID241_VCFRONT_COOLANT_VCFRONT_COOLANT_FLOW_PT_REASON_ACTIVE_MANAGER_PT_CHOICE (9u)
#define MODEL3_CAN_ID241_VCFRONT_COOLANT_VCFRONT_COOLANT_FLOW_PT_REASON_PASSIVE_MANAGER_PT_CHOICE (10u)
#define MODEL3_CAN_ID241_VCFRONT_COOLANT_VCFRONT_COOLANT_FLOW_PT_REASON_PCS_FLOW_REQ_CHOICE (11u)
#define MODEL3_CAN_ID241_VCFRONT_COOLANT_VCFRONT_COOLANT_FLOW_PT_REASON_DI_FLOW_REQ_CHOICE (12u)
#define MODEL3_CAN_ID241_VCFRONT_COOLANT_VCFRONT_COOLANT_FLOW_PT_REASON_DIS_FLOW_REQ_CHOICE (13u)
#define MODEL3_CAN_ID241_VCFRONT_COOLANT_VCFRONT_COOLANT_FLOW_PT_REASON_HP_FLOW_REQ_CHOICE (14u)

#define MODEL3_CAN_ID241_VCFRONT_COOLANT_VCFRONT_WASTE_HEAT_REQUEST_TYPE_WASTE_TYPE_NONE_CHOICE (0u)
#define MODEL3_CAN_ID241_VCFRONT_COOLANT_VCFRONT_WASTE_HEAT_REQUEST_TYPE_WASTE_TYPE_PARTIAL_CHOICE (1u)
#define MODEL3_CAN_ID241_VCFRONT_COOLANT_VCFRONT_WASTE_HEAT_REQUEST_TYPE_WASTE_TYPE_FULL_CHOICE (2u)

#define MODEL3_CAN_ID241_VCFRONT_COOLANT_VCFRONT_COOLANT_AIR_PURGE_BAT_STATE_AIR_PURGE_STATE_INACTIVE_CHOICE (0u)
#define MODEL3_CAN_ID241_VCFRONT_COOLANT_VCFRONT_COOLANT_AIR_PURGE_BAT_STATE_AIR_PURGE_STATE_ACTIVE_CHOICE (1u)
#define MODEL3_CAN_ID241_VCFRONT_COOLANT_VCFRONT_COOLANT_AIR_PURGE_BAT_STATE_AIR_PURGE_STATE_COMPLETE_CHOICE (2u)
#define MODEL3_CAN_ID241_VCFRONT_COOLANT_VCFRONT_COOLANT_AIR_PURGE_BAT_STATE_AIR_PURGE_STATE_INTERRUPTED_CHOICE (3u)
#define MODEL3_CAN_ID241_VCFRONT_COOLANT_VCFRONT_COOLANT_AIR_PURGE_BAT_STATE_AIR_PURGE_STATE_PENDING_CHOICE (4u)

#define MODEL3_CAN_ID2_C4_PCS_LOGGING_PCS_LOG_MESSAGE_SELECT_PCS_LOG_PHA_1_CHOICE (0u)
#define MODEL3_CAN_ID2_C4_PCS_LOGGING_PCS_LOG_MESSAGE_SELECT_PCS_LOG_PHB_1_CHOICE (1u)
#define MODEL3_CAN_ID2_C4_PCS_LOGGING_PCS_LOG_MESSAGE_SELECT_PCS_LOG_PHC_1_CHOICE (2u)
#define MODEL3_CAN_ID2_C4_PCS_LOGGING_PCS_LOG_MESSAGE_SELECT_PCS_LOG_CHG_1_CHOICE (3u)
#define MODEL3_CAN_ID2_C4_PCS_LOGGING_PCS_LOG_MESSAGE_SELECT_PCS_LOG_CHG_2_CHOICE (4u)
#define MODEL3_CAN_ID2_C4_PCS_LOGGING_PCS_LOG_MESSAGE_SELECT_PCS_LOG_CHG_3_CHOICE (5u)
#define MODEL3_CAN_ID2_C4_PCS_LOGGING_PCS_LOG_MESSAGE_SELECT_PCS_LOG_DCDC_1_CHOICE (6u)
#define MODEL3_CAN_ID2_C4_PCS_LOGGING_PCS_LOG_MESSAGE_SELECT_PCS_LOG_DCDC_2_CHOICE (7u)
#define MODEL3_CAN_ID2_C4_PCS_LOGGING_PCS_LOG_MESSAGE_SELECT_PCS_LOG_DCDC_3_CHOICE (8u)
#define MODEL3_CAN_ID2_C4_PCS_LOGGING_PCS_LOG_MESSAGE_SELECT_PCS_LOG_SYSTEM_1_CHOICE (9u)
#define MODEL3_CAN_ID2_C4_PCS_LOGGING_PCS_LOG_MESSAGE_SELECT_PCS_LOG_PHA_2_CHOICE (10u)
#define MODEL3_CAN_ID2_C4_PCS_LOGGING_PCS_LOG_MESSAGE_SELECT_PCS_LOG_PHB_2_CHOICE (11u)
#define MODEL3_CAN_ID2_C4_PCS_LOGGING_PCS_LOG_MESSAGE_SELECT_PCS_LOG_PHC_2_CHOICE (12u)
#define MODEL3_CAN_ID2_C4_PCS_LOGGING_PCS_LOG_MESSAGE_SELECT_PCS_LOG_CHG_4_CHOICE (13u)
#define MODEL3_CAN_ID2_C4_PCS_LOGGING_PCS_LOG_MESSAGE_SELECT_PCS_LOG_DLOG_1_CHOICE (14u)
#define MODEL3_CAN_ID2_C4_PCS_LOGGING_PCS_LOG_MESSAGE_SELECT_PCS_LOG_DLOG_2_CHOICE (15u)
#define MODEL3_CAN_ID2_C4_PCS_LOGGING_PCS_LOG_MESSAGE_SELECT_PCS_LOG_DLOG_3_CHOICE (16u)
#define MODEL3_CAN_ID2_C4_PCS_LOGGING_PCS_LOG_MESSAGE_SELECT_PCS_LOG_DLOG_4_CHOICE (17u)
#define MODEL3_CAN_ID2_C4_PCS_LOGGING_PCS_LOG_MESSAGE_SELECT_PCS_LOG_DCDC_4_CHOICE (18u)
#define MODEL3_CAN_ID2_C4_PCS_LOGGING_PCS_LOG_MESSAGE_SELECT_PCS_LOG_DCDC_5_CHOICE (19u)
#define MODEL3_CAN_ID2_C4_PCS_LOGGING_PCS_LOG_MESSAGE_SELECT_PCS_LOG_CHG_NO_FLOW_CHOICE (20u)
#define MODEL3_CAN_ID2_C4_PCS_LOGGING_PCS_LOG_MESSAGE_SELECT_PCS_LOG_CHG_LINE_OFFSET_CHOICE (21u)
#define MODEL3_CAN_ID2_C4_PCS_LOGGING_PCS_LOG_MESSAGE_SELECT_PCS_LOG_DCDC_STATISTICS_CHOICE (22u)
#define MODEL3_CAN_ID2_C4_PCS_LOGGING_PCS_LOG_MESSAGE_SELECT_PCS_LOG_CHG_MACHINEMODEL_CHOICE (23u)
#define MODEL3_CAN_ID2_C4_PCS_LOGGING_PCS_LOG_MESSAGE_SELECT_PCS_LOG_DCDC_HVBUS_PCHG_DATA_CHOICE (24u)
#define MODEL3_CAN_ID2_C4_PCS_LOGGING_PCS_LOG_MESSAGE_SELECT_PCS_LOG_DCDC_IMPEDANCE_EST_CHOICE (25u)
#define MODEL3_CAN_ID2_C4_PCS_LOGGING_PCS_LOG_MESSAGE_SELECT_PCS_LOG_NUM_MSGS_CHOICE (26u)

#define MODEL3_CAN_ID2_C4_PCS_LOGGING_PCS_CHG_INPUT_FREQUENCY_L1_N_FREQUENCY_UNKNOWN_CHOICE (0u)

#define MODEL3_CAN_ID2_C4_PCS_LOGGING_PCS_CHG_PH_A_STATE_PCS_PH_STATE_INIT_CHOICE (0u)
#define MODEL3_CAN_ID2_C4_PCS_LOGGING_PCS_CHG_PH_A_STATE_PCS_PH_STATE_IDLE_CHOICE (1u)
#define MODEL3_CAN_ID2_C4_PCS_LOGGING_PCS_CHG_PH_A_STATE_PCS_PH_STATE_PRECHARGE_CHOICE (2u)
#define MODEL3_CAN_ID2_C4_PCS_LOGGING_PCS_CHG_PH_A_STATE_PCS_PH_STATE_ENABLE_CHOICE (3u)
#define MODEL3_CAN_ID2_C4_PCS_LOGGING_PCS_CHG_PH_A_STATE_PCS_PH_STATE_FAULT_CHOICE (4u)
#define MODEL3_CAN_ID2_C4_PCS_LOGGING_PCS_CHG_PH_A_STATE_PCS_PH_STATE_CLEAR_FAULTS_CHOICE (5u)
#define MODEL3_CAN_ID2_C4_PCS_LOGGING_PCS_CHG_PH_A_STATE_PCS_PH_STATE_SHUTTING_DOWN_CHOICE (6u)

#define MODEL3_CAN_ID2_C4_PCS_LOGGING_PCS_CPU2_BOOT_STATE_CPU2_STATE_BOOTROM_CHOICE (0u)
#define MODEL3_CAN_ID2_C4_PCS_LOGGING_PCS_CPU2_BOOT_STATE_CPU2_STATE_BOOTLOADER_CHOICE (1u)
#define MODEL3_CAN_ID2_C4_PCS_LOGGING_PCS_CPU2_BOOT_STATE_CPU2_STATE_APPLICATION_CHOICE (2u)
#define MODEL3_CAN_ID2_C4_PCS_LOGGING_PCS_CPU2_BOOT_STATE_CPU2_STATE_ERROR_CHOICE (3u)

#define MODEL3_CAN_ID2_C4_PCS_LOGGING_PCS_D_LOG_PH_A_CHANNEL1_CONTENT_PCS_DLOG_INPUT_VOLTAGE_CHOICE (0u)
#define MODEL3_CAN_ID2_C4_PCS_LOGGING_PCS_D_LOG_PH_A_CHANNEL1_CONTENT_PCS_DLOG_INPUT_CURRENT_CHOICE (1u)
#define MODEL3_CAN_ID2_C4_PCS_LOGGING_PCS_D_LOG_PH_A_CHANNEL1_CONTENT_PCS_DLOG_OUTPUT_CURRENT_CHOICE (2u)
#define MODEL3_CAN_ID2_C4_PCS_LOGGING_PCS_D_LOG_PH_A_CHANNEL1_CONTENT_PCS_DLOG_INT_BUS_VOLTAGE_CHOICE (3u)

#define MODEL3_CAN_ID2_C4_PCS_LOGGING_PCS_D_LOG_PH_A_CHANNEL2_CONTENT_PCS_DLOG_INPUT_VOLTAGE_CHOICE (0u)
#define MODEL3_CAN_ID2_C4_PCS_LOGGING_PCS_D_LOG_PH_A_CHANNEL2_CONTENT_PCS_DLOG_INPUT_CURRENT_CHOICE (1u)
#define MODEL3_CAN_ID2_C4_PCS_LOGGING_PCS_D_LOG_PH_A_CHANNEL2_CONTENT_PCS_DLOG_OUTPUT_CURRENT_CHOICE (2u)
#define MODEL3_CAN_ID2_C4_PCS_LOGGING_PCS_D_LOG_PH_A_CHANNEL2_CONTENT_PCS_DLOG_INT_BUS_VOLTAGE_CHOICE (3u)

#define MODEL3_CAN_ID2_C4_PCS_LOGGING_PCS_D_LOG_PH_A_CHANNEL3_CONTENT_PCS_DLOG_INPUT_VOLTAGE_CHOICE (0u)
#define MODEL3_CAN_ID2_C4_PCS_LOGGING_PCS_D_LOG_PH_A_CHANNEL3_CONTENT_PCS_DLOG_INPUT_CURRENT_CHOICE (1u)
#define MODEL3_CAN_ID2_C4_PCS_LOGGING_PCS_D_LOG_PH_A_CHANNEL3_CONTENT_PCS_DLOG_OUTPUT_CURRENT_CHOICE (2u)
#define MODEL3_CAN_ID2_C4_PCS_LOGGING_PCS_D_LOG_PH_A_CHANNEL3_CONTENT_PCS_DLOG_INT_BUS_VOLTAGE_CHOICE (3u)

#define MODEL3_CAN_ID2_C4_PCS_LOGGING_PCS_D_LOG_PH_A_CHANNEL4_CONTENT_PCS_DLOG_INPUT_VOLTAGE_CHOICE (0u)
#define MODEL3_CAN_ID2_C4_PCS_LOGGING_PCS_D_LOG_PH_A_CHANNEL4_CONTENT_PCS_DLOG_INPUT_CURRENT_CHOICE (1u)
#define MODEL3_CAN_ID2_C4_PCS_LOGGING_PCS_D_LOG_PH_A_CHANNEL4_CONTENT_PCS_DLOG_OUTPUT_CURRENT_CHOICE (2u)
#define MODEL3_CAN_ID2_C4_PCS_LOGGING_PCS_D_LOG_PH_A_CHANNEL4_CONTENT_PCS_DLOG_INT_BUS_VOLTAGE_CHOICE (3u)

#define MODEL3_CAN_ID2_C4_PCS_LOGGING_PCS_AC_CHARGE_SELF_TEST_STATE_PCS_SELF_TEST_IDLE_CHOICE (0u)
#define MODEL3_CAN_ID2_C4_PCS_LOGGING_PCS_AC_CHARGE_SELF_TEST_STATE_PCS_SELF_TEST_STARTED_CHOICE (1u)

#define MODEL3_CAN_ID2_C4_PCS_LOGGING_PCS_D_LOG_PH_B_CHANNEL1_CONTENT_PCS_DLOG_INPUT_VOLTAGE_CHOICE (0u)
#define MODEL3_CAN_ID2_C4_PCS_LOGGING_PCS_D_LOG_PH_B_CHANNEL1_CONTENT_PCS_DLOG_INPUT_CURRENT_CHOICE (1u)
#define MODEL3_CAN_ID2_C4_PCS_LOGGING_PCS_D_LOG_PH_B_CHANNEL1_CONTENT_PCS_DLOG_OUTPUT_CURRENT_CHOICE (2u)
#define MODEL3_CAN_ID2_C4_PCS_LOGGING_PCS_D_LOG_PH_B_CHANNEL1_CONTENT_PCS_DLOG_INT_BUS_VOLTAGE_CHOICE (3u)

#define MODEL3_CAN_ID2_C4_PCS_LOGGING_PCS_D_LOG_PH_B_CHANNEL2_CONTENT_PCS_DLOG_INPUT_VOLTAGE_CHOICE (0u)
#define MODEL3_CAN_ID2_C4_PCS_LOGGING_PCS_D_LOG_PH_B_CHANNEL2_CONTENT_PCS_DLOG_INPUT_CURRENT_CHOICE (1u)
#define MODEL3_CAN_ID2_C4_PCS_LOGGING_PCS_D_LOG_PH_B_CHANNEL2_CONTENT_PCS_DLOG_OUTPUT_CURRENT_CHOICE (2u)
#define MODEL3_CAN_ID2_C4_PCS_LOGGING_PCS_D_LOG_PH_B_CHANNEL2_CONTENT_PCS_DLOG_INT_BUS_VOLTAGE_CHOICE (3u)

#define MODEL3_CAN_ID2_C4_PCS_LOGGING_PCS_D_LOG_PH_B_CHANNEL3_CONTENT_PCS_DLOG_INPUT_VOLTAGE_CHOICE (0u)
#define MODEL3_CAN_ID2_C4_PCS_LOGGING_PCS_D_LOG_PH_B_CHANNEL3_CONTENT_PCS_DLOG_INPUT_CURRENT_CHOICE (1u)
#define MODEL3_CAN_ID2_C4_PCS_LOGGING_PCS_D_LOG_PH_B_CHANNEL3_CONTENT_PCS_DLOG_OUTPUT_CURRENT_CHOICE (2u)
#define MODEL3_CAN_ID2_C4_PCS_LOGGING_PCS_D_LOG_PH_B_CHANNEL3_CONTENT_PCS_DLOG_INT_BUS_VOLTAGE_CHOICE (3u)

#define MODEL3_CAN_ID2_C4_PCS_LOGGING_PCS_D_LOG_PH_B_CHANNEL4_CONTENT_PCS_DLOG_INPUT_VOLTAGE_CHOICE (0u)
#define MODEL3_CAN_ID2_C4_PCS_LOGGING_PCS_D_LOG_PH_B_CHANNEL4_CONTENT_PCS_DLOG_INPUT_CURRENT_CHOICE (1u)
#define MODEL3_CAN_ID2_C4_PCS_LOGGING_PCS_D_LOG_PH_B_CHANNEL4_CONTENT_PCS_DLOG_OUTPUT_CURRENT_CHOICE (2u)
#define MODEL3_CAN_ID2_C4_PCS_LOGGING_PCS_D_LOG_PH_B_CHANNEL4_CONTENT_PCS_DLOG_INT_BUS_VOLTAGE_CHOICE (3u)

#define MODEL3_CAN_ID2_C4_PCS_LOGGING_PCS_CHG_PH_B_STATE_PCS_PH_STATE_INIT_CHOICE (0u)
#define MODEL3_CAN_ID2_C4_PCS_LOGGING_PCS_CHG_PH_B_STATE_PCS_PH_STATE_IDLE_CHOICE (1u)
#define MODEL3_CAN_ID2_C4_PCS_LOGGING_PCS_CHG_PH_B_STATE_PCS_PH_STATE_PRECHARGE_CHOICE (2u)
#define MODEL3_CAN_ID2_C4_PCS_LOGGING_PCS_CHG_PH_B_STATE_PCS_PH_STATE_ENABLE_CHOICE (3u)
#define MODEL3_CAN_ID2_C4_PCS_LOGGING_PCS_CHG_PH_B_STATE_PCS_PH_STATE_FAULT_CHOICE (4u)
#define MODEL3_CAN_ID2_C4_PCS_LOGGING_PCS_CHG_PH_B_STATE_PCS_PH_STATE_CLEAR_FAULTS_CHOICE (5u)
#define MODEL3_CAN_ID2_C4_PCS_LOGGING_PCS_CHG_PH_B_STATE_PCS_PH_STATE_SHUTTING_DOWN_CHOICE (6u)

#define MODEL3_CAN_ID2_C4_PCS_LOGGING_PCS_D_LOG_PH_C_CHANNEL1_CONTENT_PCS_DLOG_INPUT_VOLTAGE_CHOICE (0u)
#define MODEL3_CAN_ID2_C4_PCS_LOGGING_PCS_D_LOG_PH_C_CHANNEL1_CONTENT_PCS_DLOG_INPUT_CURRENT_CHOICE (1u)
#define MODEL3_CAN_ID2_C4_PCS_LOGGING_PCS_D_LOG_PH_C_CHANNEL1_CONTENT_PCS_DLOG_OUTPUT_CURRENT_CHOICE (2u)
#define MODEL3_CAN_ID2_C4_PCS_LOGGING_PCS_D_LOG_PH_C_CHANNEL1_CONTENT_PCS_DLOG_INT_BUS_VOLTAGE_CHOICE (3u)

#define MODEL3_CAN_ID2_C4_PCS_LOGGING_PCS_D_LOG_PH_C_CHANNEL2_CONTENT_PCS_DLOG_INPUT_VOLTAGE_CHOICE (0u)
#define MODEL3_CAN_ID2_C4_PCS_LOGGING_PCS_D_LOG_PH_C_CHANNEL2_CONTENT_PCS_DLOG_INPUT_CURRENT_CHOICE (1u)
#define MODEL3_CAN_ID2_C4_PCS_LOGGING_PCS_D_LOG_PH_C_CHANNEL2_CONTENT_PCS_DLOG_OUTPUT_CURRENT_CHOICE (2u)
#define MODEL3_CAN_ID2_C4_PCS_LOGGING_PCS_D_LOG_PH_C_CHANNEL2_CONTENT_PCS_DLOG_INT_BUS_VOLTAGE_CHOICE (3u)

#define MODEL3_CAN_ID2_C4_PCS_LOGGING_PCS_D_LOG_PH_C_CHANNEL3_CONTENT_PCS_DLOG_INPUT_VOLTAGE_CHOICE (0u)
#define MODEL3_CAN_ID2_C4_PCS_LOGGING_PCS_D_LOG_PH_C_CHANNEL3_CONTENT_PCS_DLOG_INPUT_CURRENT_CHOICE (1u)
#define MODEL3_CAN_ID2_C4_PCS_LOGGING_PCS_D_LOG_PH_C_CHANNEL3_CONTENT_PCS_DLOG_OUTPUT_CURRENT_CHOICE (2u)
#define MODEL3_CAN_ID2_C4_PCS_LOGGING_PCS_D_LOG_PH_C_CHANNEL3_CONTENT_PCS_DLOG_INT_BUS_VOLTAGE_CHOICE (3u)

#define MODEL3_CAN_ID2_C4_PCS_LOGGING_PCS_D_LOG_PH_C_CHANNEL4_CONTENT_PCS_DLOG_INPUT_VOLTAGE_CHOICE (0u)
#define MODEL3_CAN_ID2_C4_PCS_LOGGING_PCS_D_LOG_PH_C_CHANNEL4_CONTENT_PCS_DLOG_INPUT_CURRENT_CHOICE (1u)
#define MODEL3_CAN_ID2_C4_PCS_LOGGING_PCS_D_LOG_PH_C_CHANNEL4_CONTENT_PCS_DLOG_OUTPUT_CURRENT_CHOICE (2u)
#define MODEL3_CAN_ID2_C4_PCS_LOGGING_PCS_D_LOG_PH_C_CHANNEL4_CONTENT_PCS_DLOG_INT_BUS_VOLTAGE_CHOICE (3u)

#define MODEL3_CAN_ID2_C4_PCS_LOGGING_PCS_CHG_PH_C_STATE_PCS_PH_STATE_INIT_CHOICE (0u)
#define MODEL3_CAN_ID2_C4_PCS_LOGGING_PCS_CHG_PH_C_STATE_PCS_PH_STATE_IDLE_CHOICE (1u)
#define MODEL3_CAN_ID2_C4_PCS_LOGGING_PCS_CHG_PH_C_STATE_PCS_PH_STATE_PRECHARGE_CHOICE (2u)
#define MODEL3_CAN_ID2_C4_PCS_LOGGING_PCS_CHG_PH_C_STATE_PCS_PH_STATE_ENABLE_CHOICE (3u)
#define MODEL3_CAN_ID2_C4_PCS_LOGGING_PCS_CHG_PH_C_STATE_PCS_PH_STATE_FAULT_CHOICE (4u)
#define MODEL3_CAN_ID2_C4_PCS_LOGGING_PCS_CHG_PH_C_STATE_PCS_PH_STATE_CLEAR_FAULTS_CHOICE (5u)
#define MODEL3_CAN_ID2_C4_PCS_LOGGING_PCS_CHG_PH_C_STATE_PCS_PH_STATE_SHUTTING_DOWN_CHOICE (6u)

#define MODEL3_CAN_ID2_C4_PCS_LOGGING_PCS_CHG_INPUT_FREQUENCY_L2_N_FREQUENCY_UNKNOWN_CHOICE (0u)

#define MODEL3_CAN_ID2_C4_PCS_LOGGING_PCS_CHG_PH_A_LAST_SHUTDOWN_REASON_PCS_PH_SHUTDOWN_REASON_NONE_CHOICE (0u)
#define MODEL3_CAN_ID2_C4_PCS_LOGGING_PCS_CHG_PH_A_LAST_SHUTDOWN_REASON_PCS_PH_SHUTDOWN_SW_ENABLE_CHOICE (1u)
#define MODEL3_CAN_ID2_C4_PCS_LOGGING_PCS_CHG_PH_A_LAST_SHUTDOWN_REASON_PCS_PH_SHUTDOWN_HW_ENABLE_CHOICE (2u)
#define MODEL3_CAN_ID2_C4_PCS_LOGGING_PCS_CHG_PH_A_LAST_SHUTDOWN_REASON_PCS_PH_SHUTDOWN_SW_FAULT_CHOICE (3u)
#define MODEL3_CAN_ID2_C4_PCS_LOGGING_PCS_CHG_PH_A_LAST_SHUTDOWN_REASON_PCS_PH_SHUTDOWN_HW_FAULT_CHOICE (4u)
#define MODEL3_CAN_ID2_C4_PCS_LOGGING_PCS_CHG_PH_A_LAST_SHUTDOWN_REASON_PCS_PH_SHUTDOWN_PLL_NOT_LOCKED_CHOICE (5u)
#define MODEL3_CAN_ID2_C4_PCS_LOGGING_PCS_CHG_PH_A_LAST_SHUTDOWN_REASON_PCS_PH_SHUTDOWN_INPUT_UV_CHOICE (6u)
#define MODEL3_CAN_ID2_C4_PCS_LOGGING_PCS_CHG_PH_A_LAST_SHUTDOWN_REASON_PCS_PH_SHUTDOWN_INPUT_OV_CHOICE (7u)
#define MODEL3_CAN_ID2_C4_PCS_LOGGING_PCS_CHG_PH_A_LAST_SHUTDOWN_REASON_PCS_PH_SHUTDOWN_OUTPUT_UV_CHOICE (8u)
#define MODEL3_CAN_ID2_C4_PCS_LOGGING_PCS_CHG_PH_A_LAST_SHUTDOWN_REASON_PCS_PH_SHUTDOWN_OUTPUT_OV_CHOICE (9u)
#define MODEL3_CAN_ID2_C4_PCS_LOGGING_PCS_CHG_PH_A_LAST_SHUTDOWN_REASON_PCS_PH_SHUTDOWN_PRECHARGE_TIMEOUT_CHOICE (10u)
#define MODEL3_CAN_ID2_C4_PCS_LOGGING_PCS_CHG_PH_A_LAST_SHUTDOWN_REASON_PCS_PH_SHUTDOWN_INT_BUS_UV_CHOICE (11u)
#define MODEL3_CAN_ID2_C4_PCS_LOGGING_PCS_CHG_PH_A_LAST_SHUTDOWN_REASON_PCS_PH_SHUTDOWN_CONTROL_REGULATION_FAULT_CHOICE (12u)
#define MODEL3_CAN_ID2_C4_PCS_LOGGING_PCS_CHG_PH_A_LAST_SHUTDOWN_REASON_PCS_PH_SHUTDOWN_OVER_TEMPERATURE_CHOICE (13u)
#define MODEL3_CAN_ID2_C4_PCS_LOGGING_PCS_CHG_PH_A_LAST_SHUTDOWN_REASON_PCS_PH_SHUTDOWN_TEMP_IRRATIONAL_CHOICE (14u)
#define MODEL3_CAN_ID2_C4_PCS_LOGGING_PCS_CHG_PH_A_LAST_SHUTDOWN_REASON_PCS_PH_SHUTDOWN_SENSOR_IRRATIONAL_CHOICE (15u)
#define MODEL3_CAN_ID2_C4_PCS_LOGGING_PCS_CHG_PH_A_LAST_SHUTDOWN_REASON_PCS_PH_SHUTDOWN_FREQ_OUT_OF_RANGE_CHOICE (16u)
#define MODEL3_CAN_ID2_C4_PCS_LOGGING_PCS_CHG_PH_A_LAST_SHUTDOWN_REASON_PCS_PH_SHUTDOWN_LINE_TRANSIENT_FAULT_CHOICE (17u)

#define MODEL3_CAN_ID2_C4_PCS_LOGGING_PCS_CHG_PH_B_LAST_SHUTDOWN_REASON_PCS_PH_SHUTDOWN_REASON_NONE_CHOICE (0u)
#define MODEL3_CAN_ID2_C4_PCS_LOGGING_PCS_CHG_PH_B_LAST_SHUTDOWN_REASON_PCS_PH_SHUTDOWN_SW_ENABLE_CHOICE (1u)
#define MODEL3_CAN_ID2_C4_PCS_LOGGING_PCS_CHG_PH_B_LAST_SHUTDOWN_REASON_PCS_PH_SHUTDOWN_HW_ENABLE_CHOICE (2u)
#define MODEL3_CAN_ID2_C4_PCS_LOGGING_PCS_CHG_PH_B_LAST_SHUTDOWN_REASON_PCS_PH_SHUTDOWN_SW_FAULT_CHOICE (3u)
#define MODEL3_CAN_ID2_C4_PCS_LOGGING_PCS_CHG_PH_B_LAST_SHUTDOWN_REASON_PCS_PH_SHUTDOWN_HW_FAULT_CHOICE (4u)
#define MODEL3_CAN_ID2_C4_PCS_LOGGING_PCS_CHG_PH_B_LAST_SHUTDOWN_REASON_PCS_PH_SHUTDOWN_PLL_NOT_LOCKED_CHOICE (5u)
#define MODEL3_CAN_ID2_C4_PCS_LOGGING_PCS_CHG_PH_B_LAST_SHUTDOWN_REASON_PCS_PH_SHUTDOWN_INPUT_UV_CHOICE (6u)
#define MODEL3_CAN_ID2_C4_PCS_LOGGING_PCS_CHG_PH_B_LAST_SHUTDOWN_REASON_PCS_PH_SHUTDOWN_INPUT_OV_CHOICE (7u)
#define MODEL3_CAN_ID2_C4_PCS_LOGGING_PCS_CHG_PH_B_LAST_SHUTDOWN_REASON_PCS_PH_SHUTDOWN_OUTPUT_UV_CHOICE (8u)
#define MODEL3_CAN_ID2_C4_PCS_LOGGING_PCS_CHG_PH_B_LAST_SHUTDOWN_REASON_PCS_PH_SHUTDOWN_OUTPUT_OV_CHOICE (9u)
#define MODEL3_CAN_ID2_C4_PCS_LOGGING_PCS_CHG_PH_B_LAST_SHUTDOWN_REASON_PCS_PH_SHUTDOWN_PRECHARGE_TIMEOUT_CHOICE (10u)
#define MODEL3_CAN_ID2_C4_PCS_LOGGING_PCS_CHG_PH_B_LAST_SHUTDOWN_REASON_PCS_PH_SHUTDOWN_INT_BUS_UV_CHOICE (11u)
#define MODEL3_CAN_ID2_C4_PCS_LOGGING_PCS_CHG_PH_B_LAST_SHUTDOWN_REASON_PCS_PH_SHUTDOWN_CONTROL_REGULATION_FAULT_CHOICE (12u)
#define MODEL3_CAN_ID2_C4_PCS_LOGGING_PCS_CHG_PH_B_LAST_SHUTDOWN_REASON_PCS_PH_SHUTDOWN_OVER_TEMPERATURE_CHOICE (13u)
#define MODEL3_CAN_ID2_C4_PCS_LOGGING_PCS_CHG_PH_B_LAST_SHUTDOWN_REASON_PCS_PH_SHUTDOWN_TEMP_IRRATIONAL_CHOICE (14u)
#define MODEL3_CAN_ID2_C4_PCS_LOGGING_PCS_CHG_PH_B_LAST_SHUTDOWN_REASON_PCS_PH_SHUTDOWN_SENSOR_IRRATIONAL_CHOICE (15u)
#define MODEL3_CAN_ID2_C4_PCS_LOGGING_PCS_CHG_PH_B_LAST_SHUTDOWN_REASON_PCS_PH_SHUTDOWN_FREQ_OUT_OF_RANGE_CHOICE (16u)
#define MODEL3_CAN_ID2_C4_PCS_LOGGING_PCS_CHG_PH_B_LAST_SHUTDOWN_REASON_PCS_PH_SHUTDOWN_LINE_TRANSIENT_FAULT_CHOICE (17u)

#define MODEL3_CAN_ID2_C4_PCS_LOGGING_PCS_DCDC_TANK_VOLTAGE_TANK_VOLTAGE_SNA_CHOICE (-1024)

#define MODEL3_CAN_ID2_C4_PCS_LOGGING_PCS_CHG_PH_C_LAST_SHUTDOWN_REASON_PCS_PH_SHUTDOWN_REASON_NONE_CHOICE (0u)
#define MODEL3_CAN_ID2_C4_PCS_LOGGING_PCS_CHG_PH_C_LAST_SHUTDOWN_REASON_PCS_PH_SHUTDOWN_SW_ENABLE_CHOICE (1u)
#define MODEL3_CAN_ID2_C4_PCS_LOGGING_PCS_CHG_PH_C_LAST_SHUTDOWN_REASON_PCS_PH_SHUTDOWN_HW_ENABLE_CHOICE (2u)
#define MODEL3_CAN_ID2_C4_PCS_LOGGING_PCS_CHG_PH_C_LAST_SHUTDOWN_REASON_PCS_PH_SHUTDOWN_SW_FAULT_CHOICE (3u)
#define MODEL3_CAN_ID2_C4_PCS_LOGGING_PCS_CHG_PH_C_LAST_SHUTDOWN_REASON_PCS_PH_SHUTDOWN_HW_FAULT_CHOICE (4u)
#define MODEL3_CAN_ID2_C4_PCS_LOGGING_PCS_CHG_PH_C_LAST_SHUTDOWN_REASON_PCS_PH_SHUTDOWN_PLL_NOT_LOCKED_CHOICE (5u)
#define MODEL3_CAN_ID2_C4_PCS_LOGGING_PCS_CHG_PH_C_LAST_SHUTDOWN_REASON_PCS_PH_SHUTDOWN_INPUT_UV_CHOICE (6u)
#define MODEL3_CAN_ID2_C4_PCS_LOGGING_PCS_CHG_PH_C_LAST_SHUTDOWN_REASON_PCS_PH_SHUTDOWN_INPUT_OV_CHOICE (7u)
#define MODEL3_CAN_ID2_C4_PCS_LOGGING_PCS_CHG_PH_C_LAST_SHUTDOWN_REASON_PCS_PH_SHUTDOWN_OUTPUT_UV_CHOICE (8u)
#define MODEL3_CAN_ID2_C4_PCS_LOGGING_PCS_CHG_PH_C_LAST_SHUTDOWN_REASON_PCS_PH_SHUTDOWN_OUTPUT_OV_CHOICE (9u)
#define MODEL3_CAN_ID2_C4_PCS_LOGGING_PCS_CHG_PH_C_LAST_SHUTDOWN_REASON_PCS_PH_SHUTDOWN_PRECHARGE_TIMEOUT_CHOICE (10u)
#define MODEL3_CAN_ID2_C4_PCS_LOGGING_PCS_CHG_PH_C_LAST_SHUTDOWN_REASON_PCS_PH_SHUTDOWN_INT_BUS_UV_CHOICE (11u)
#define MODEL3_CAN_ID2_C4_PCS_LOGGING_PCS_CHG_PH_C_LAST_SHUTDOWN_REASON_PCS_PH_SHUTDOWN_CONTROL_REGULATION_FAULT_CHOICE (12u)
#define MODEL3_CAN_ID2_C4_PCS_LOGGING_PCS_CHG_PH_C_LAST_SHUTDOWN_REASON_PCS_PH_SHUTDOWN_OVER_TEMPERATURE_CHOICE (13u)
#define MODEL3_CAN_ID2_C4_PCS_LOGGING_PCS_CHG_PH_C_LAST_SHUTDOWN_REASON_PCS_PH_SHUTDOWN_TEMP_IRRATIONAL_CHOICE (14u)
#define MODEL3_CAN_ID2_C4_PCS_LOGGING_PCS_CHG_PH_C_LAST_SHUTDOWN_REASON_PCS_PH_SHUTDOWN_SENSOR_IRRATIONAL_CHOICE (15u)
#define MODEL3_CAN_ID2_C4_PCS_LOGGING_PCS_CHG_PH_C_LAST_SHUTDOWN_REASON_PCS_PH_SHUTDOWN_FREQ_OUT_OF_RANGE_CHOICE (16u)
#define MODEL3_CAN_ID2_C4_PCS_LOGGING_PCS_CHG_PH_C_LAST_SHUTDOWN_REASON_PCS_PH_SHUTDOWN_LINE_TRANSIENT_FAULT_CHOICE (17u)

#define MODEL3_CAN_ID2_C4_PCS_LOGGING_PCS_CHG_INPUT_FREQUENCY_L3_N_FREQUENCY_UNKNOWN_CHOICE (0u)

#define MODEL3_CAN_ID2_C4_PCS_LOGGING_PCS_CHG_INTERNAL_PHASE_CONFIG_PHASE_CONFIG_SNA_CHOICE (0u)
#define MODEL3_CAN_ID2_C4_PCS_LOGGING_PCS_CHG_INTERNAL_PHASE_CONFIG_PHASE_CONFIG_SINGLE_PHASE_CHOICE (1u)
#define MODEL3_CAN_ID2_C4_PCS_LOGGING_PCS_CHG_INTERNAL_PHASE_CONFIG_PHASE_CONFIG_THREE_PHASE_CHOICE (2u)
#define MODEL3_CAN_ID2_C4_PCS_LOGGING_PCS_CHG_INTERNAL_PHASE_CONFIG_PHASE_CONFIG_THREE_PHASE_DELTA_CHOICE (3u)
#define MODEL3_CAN_ID2_C4_PCS_LOGGING_PCS_CHG_INTERNAL_PHASE_CONFIG_PHASE_CONFIG_SINGLE_PHASE_IEC_GB_CHOICE (4u)
#define MODEL3_CAN_ID2_C4_PCS_LOGGING_PCS_CHG_INTERNAL_PHASE_CONFIG_PHASE_CONFIG_MFG_TEST_CONFIG_1_CHOICE (5u)
#define MODEL3_CAN_ID2_C4_PCS_LOGGING_PCS_CHG_INTERNAL_PHASE_CONFIG_PHASE_CONFIG_MFG_TEST_CONFIG_2_CHOICE (6u)
#define MODEL3_CAN_ID2_C4_PCS_LOGGING_PCS_CHG_INTERNAL_PHASE_CONFIG_PHASE_CONFIG_RELIABILITY_SINGLE_PHASE_CHOICE (7u)
#define MODEL3_CAN_ID2_C4_PCS_LOGGING_PCS_CHG_INTERNAL_PHASE_CONFIG_PHASE_CONFIG_SINGLE_PHASE_EVSE_PARALLEL_CHOICE (8u)
#define MODEL3_CAN_ID2_C4_PCS_LOGGING_PCS_CHG_INTERNAL_PHASE_CONFIG_PHASE_CONFIG_TOTAL_NUM_CHOICE (9u)

#define MODEL3_CAN_ID2_C4_PCS_LOGGING_PCS_CHG_PHASES_PRIORITY_UNDEFINED_PHASES_PRIORITY_CHOICE (0u)
#define MODEL3_CAN_ID2_C4_PCS_LOGGING_PCS_CHG_PHASES_PRIORITY_PHASES_PRIORITY_CBA_CHOICE (6u)
#define MODEL3_CAN_ID2_C4_PCS_LOGGING_PCS_CHG_PHASES_PRIORITY_PHASES_PRIORITY_BCA_CHOICE (9u)
#define MODEL3_CAN_ID2_C4_PCS_LOGGING_PCS_CHG_PHASES_PRIORITY_PHASES_PRIORITY_CAB_CHOICE (18u)
#define MODEL3_CAN_ID2_C4_PCS_LOGGING_PCS_CHG_PHASES_PRIORITY_PHASES_PRIORITY_ACB_CHOICE (24u)
#define MODEL3_CAN_ID2_C4_PCS_LOGGING_PCS_CHG_PHASES_PRIORITY_PHASES_PRIORITY_BAC_CHOICE (33u)
#define MODEL3_CAN_ID2_C4_PCS_LOGGING_PCS_CHG_PHASES_PRIORITY_PHASES_PRIORITY_ABC_CHOICE (36u)

#define MODEL3_CAN_ID2_C4_PCS_LOGGING_PCS_CHG_ACPW_HEARTBEAT_STATE_PCS_ACPW_HEARTBEAT_STATE_UNKNOWN_CHOICE (0u)
#define MODEL3_CAN_ID2_C4_PCS_LOGGING_PCS_CHG_ACPW_HEARTBEAT_STATE_PCS_ACPW_HEARTBEAT_STATE_NOT_DETECTED_CHOICE (1u)
#define MODEL3_CAN_ID2_C4_PCS_LOGGING_PCS_CHG_ACPW_HEARTBEAT_STATE_PCS_ACPW_HEARTBEAT_STATE_DETECTED_CHOICE (2u)
#define MODEL3_CAN_ID2_C4_PCS_LOGGING_PCS_CHG_ACPW_HEARTBEAT_STATE_PCS_ACPW_HEARTBEAT_STATE_NUM_CHOICE (3u)

#define MODEL3_CAN_ID7_D5_DIR_DEBUG_DIR_GATE_DRIVE_SUPPLY_STATE_PSTG_GD_SUPPLY_DOWN_CHOICE (0u)
#define MODEL3_CAN_ID7_D5_DIR_DEBUG_DIR_GATE_DRIVE_SUPPLY_STATE_PSTG_GD_SUPPLY_RISING_CHOICE (1u)
#define MODEL3_CAN_ID7_D5_DIR_DEBUG_DIR_GATE_DRIVE_SUPPLY_STATE_PSTG_GD_SUPPLY_UP_CHOICE (2u)
#define MODEL3_CAN_ID7_D5_DIR_DEBUG_DIR_GATE_DRIVE_SUPPLY_STATE_PSTG_GD_SUPPLY_FALLING_CHOICE (3u)

#define MODEL3_CAN_ID7_D5_DIR_DEBUG_DIR_MOTOR_TYPE_DI_MOTOR_SNA_CHOICE (0u)
#define MODEL3_CAN_ID7_D5_DIR_DEBUG_DIR_MOTOR_TYPE_DI_MOTOR_ROADSTER_BASE_CHOICE (1u)
#define MODEL3_CAN_ID7_D5_DIR_DEBUG_DIR_MOTOR_TYPE_DI_MOTOR_ROADSTER_SPORT_CHOICE (2u)
#define MODEL3_CAN_ID7_D5_DIR_DEBUG_DIR_MOTOR_TYPE_DI_MOTOR_M7_M3_CHOICE (3u)
#define MODEL3_CAN_ID7_D5_DIR_DEBUG_DIR_MOTOR_TYPE_DI_MOTOR_M7_M4_CHOICE (4u)
#define MODEL3_CAN_ID7_D5_DIR_DEBUG_DIR_MOTOR_TYPE_DI_MOTOR_M7_M5_CHOICE (5u)
#define MODEL3_CAN_ID7_D5_DIR_DEBUG_DIR_MOTOR_TYPE_DI_MOTOR_M8_A_CHOICE (6u)
#define MODEL3_CAN_ID7_D5_DIR_DEBUG_DIR_MOTOR_TYPE_DI_MOTOR_M7_M6_CHOICE (7u)
#define MODEL3_CAN_ID7_D5_DIR_DEBUG_DIR_MOTOR_TYPE_DI_MOTOR_F1_A_CHOICE (8u)
#define MODEL3_CAN_ID7_D5_DIR_DEBUG_DIR_MOTOR_TYPE_DI_MOTOR_SSR1_A_CHOICE (9u)
#define MODEL3_CAN_ID7_D5_DIR_DEBUG_DIR_MOTOR_TYPE_DI_MOTOR_F1_AC_CHOICE (10u)
#define MODEL3_CAN_ID7_D5_DIR_DEBUG_DIR_MOTOR_TYPE_DI_MOTOR_F2_AB_CHOICE (11u)
#define MODEL3_CAN_ID7_D5_DIR_DEBUG_DIR_MOTOR_TYPE_DI_MOTOR_F2_AC_CHOICE (12u)
#define MODEL3_CAN_ID7_D5_DIR_DEBUG_DIR_MOTOR_TYPE_DI_MOTOR_F2_AD_CHOICE (13u)
#define MODEL3_CAN_ID7_D5_DIR_DEBUG_DIR_MOTOR_TYPE_DI_MOTOR_F2_AE_CHOICE (14u)
#define MODEL3_CAN_ID7_D5_DIR_DEBUG_DIR_MOTOR_TYPE_DI_MOTOR_F2_APMSRM_CHOICE (15u)
#define MODEL3_CAN_ID7_D5_DIR_DEBUG_DIR_MOTOR_TYPE_DI_MOTOR_PM216_A_CHOICE (16u)
#define MODEL3_CAN_ID7_D5_DIR_DEBUG_DIR_MOTOR_TYPE_DI_MOTOR_IM100_A_CHOICE (17u)
#define MODEL3_CAN_ID7_D5_DIR_DEBUG_DIR_MOTOR_TYPE_DI_MOTOR_PM216_B_CHOICE (18u)
#define MODEL3_CAN_ID7_D5_DIR_DEBUG_DIR_MOTOR_TYPE_DI_MOTOR_IM100_B_CHOICE (19u)
#define MODEL3_CAN_ID7_D5_DIR_DEBUG_DIR_MOTOR_TYPE_DI_MOTOR_IM216_A_CHOICE (20u)
#define MODEL3_CAN_ID7_D5_DIR_DEBUG_DIR_MOTOR_TYPE_DI_MOTOR_PM216_C_CHOICE (21u)
#define MODEL3_CAN_ID7_D5_DIR_DEBUG_DIR_MOTOR_TYPE_DI_MOTOR_IM130_C_CHOICE (22u)
#define MODEL3_CAN_ID7_D5_DIR_DEBUG_DIR_MOTOR_TYPE_DI_MOTOR_PM216_D_CHOICE (23u)
#define MODEL3_CAN_ID7_D5_DIR_DEBUG_DIR_MOTOR_TYPE_DI_MOTOR_IM130_D_CHOICE (24u)
#define MODEL3_CAN_ID7_D5_DIR_DEBUG_DIR_MOTOR_TYPE_DI_MOTOR_IM130_D_AL_CHOICE (25u)
#define MODEL3_CAN_ID7_D5_DIR_DEBUG_DIR_MOTOR_TYPE_DI_MOTOR_F2_AE_AL_CHOICE (26u)

#define MODEL3_CAN_ID7_D5_DIR_DEBUG_DIR_ROTOR_OFFSET_LEARNING_STATE_ROL_STATE_INIT_CHOICE (0u)
#define MODEL3_CAN_ID7_D5_DIR_DEBUG_DIR_ROTOR_OFFSET_LEARNING_STATE_ROL_STATE_WAIT_CHOICE (1u)
#define MODEL3_CAN_ID7_D5_DIR_DEBUG_DIR_ROTOR_OFFSET_LEARNING_STATE_ROL_STATE_ACCELERATE_CHOICE (2u)
#define MODEL3_CAN_ID7_D5_DIR_DEBUG_DIR_ROTOR_OFFSET_LEARNING_STATE_ROL_STATE_SHIFT_CHOICE (3u)
#define MODEL3_CAN_ID7_D5_DIR_DEBUG_DIR_ROTOR_OFFSET_LEARNING_STATE_ROL_STATE_MEASURE_CHOICE (4u)
#define MODEL3_CAN_ID7_D5_DIR_DEBUG_DIR_ROTOR_OFFSET_LEARNING_STATE_ROL_STATE_CORRECT_CHOICE (5u)
#define MODEL3_CAN_ID7_D5_DIR_DEBUG_DIR_ROTOR_OFFSET_LEARNING_STATE_ROL_STATE_VERIFY_CHOICE (6u)
#define MODEL3_CAN_ID7_D5_DIR_DEBUG_DIR_ROTOR_OFFSET_LEARNING_STATE_ROL_STATE_WRITE_CHOICE (7u)
#define MODEL3_CAN_ID7_D5_DIR_DEBUG_DIR_ROTOR_OFFSET_LEARNING_STATE_ROL_STATE_DONE_CHOICE (8u)
#define MODEL3_CAN_ID7_D5_DIR_DEBUG_DIR_ROTOR_OFFSET_LEARNING_STATE_ROL_NUM_STATES_CHOICE (9u)

#define MODEL3_CAN_ID7_D5_DIR_DEBUG_DIR_SSM_STATE_SSM_STATE_START_CHOICE (0u)
#define MODEL3_CAN_ID7_D5_DIR_DEBUG_DIR_SSM_STATE_SSM_STATE_UNAVAILABLE_CHOICE (1u)
#define MODEL3_CAN_ID7_D5_DIR_DEBUG_DIR_SSM_STATE_SSM_STATE_IDLE_CHOICE (2u)
#define MODEL3_CAN_ID7_D5_DIR_DEBUG_DIR_SSM_STATE_SSM_STATE_STANDBY_CHOICE (3u)
#define MODEL3_CAN_ID7_D5_DIR_DEBUG_DIR_SSM_STATE_SSM_STATE_ENABLE_CHOICE (4u)
#define MODEL3_CAN_ID7_D5_DIR_DEBUG_DIR_SSM_STATE_SSM_STATE_ABORT_CHOICE (5u)
#define MODEL3_CAN_ID7_D5_DIR_DEBUG_DIR_SSM_STATE_SSM_STATE_WAIT_FOR_RETRY_CHOICE (6u)
#define MODEL3_CAN_ID7_D5_DIR_DEBUG_DIR_SSM_STATE_SSM_STATE_RETRY_CHOICE (7u)
#define MODEL3_CAN_ID7_D5_DIR_DEBUG_DIR_SSM_STATE_SSM_STATE_FAULT_CHOICE (8u)

#define MODEL3_CAN_ID7_D5_DIR_DEBUG_DIR_VELOCITY_ESTIMATOR_STATE_VE_STATE_NOT_INITIALIZED_CHOICE (0u)
#define MODEL3_CAN_ID7_D5_DIR_DEBUG_DIR_VELOCITY_ESTIMATOR_STATE_VE_STATE_WHEELS_NORMAL_CHOICE (1u)
#define MODEL3_CAN_ID7_D5_DIR_DEBUG_DIR_VELOCITY_ESTIMATOR_STATE_VE_STATE_BACKUP_WHEELS_A_CHOICE (2u)
#define MODEL3_CAN_ID7_D5_DIR_DEBUG_DIR_VELOCITY_ESTIMATOR_STATE_VE_STATE_BACKUP_WHEELS_B_CHOICE (3u)
#define MODEL3_CAN_ID7_D5_DIR_DEBUG_DIR_VELOCITY_ESTIMATOR_STATE_VE_STATE_BACKUP_MOTOR_CHOICE (4u)

#define MODEL3_CAN_ID7_D5_DIR_DEBUG_DIR_GATE_DRIVE_STATE_PSTG_GD_STATE_INIT_CHOICE (0u)
#define MODEL3_CAN_ID7_D5_DIR_DEBUG_DIR_GATE_DRIVE_STATE_PSTG_GD_STATE_SELFTEST_CHOICE (1u)
#define MODEL3_CAN_ID7_D5_DIR_DEBUG_DIR_GATE_DRIVE_STATE_PSTG_GD_STATE_CONFIGURING_CHOICE (2u)
#define MODEL3_CAN_ID7_D5_DIR_DEBUG_DIR_GATE_DRIVE_STATE_PSTG_GD_STATE_CONFIGURED_CHOICE (3u)
#define MODEL3_CAN_ID7_D5_DIR_DEBUG_DIR_GATE_DRIVE_STATE_PSTG_GD_STATE_NOT_CONFIGURED_CHOICE (4u)

#define MODEL3_CAN_ID7_D5_DIR_DEBUG_DIR_USM_STATE_USM_STATE_START_CHOICE (0u)
#define MODEL3_CAN_ID7_D5_DIR_DEBUG_DIR_USM_STATE_USM_STATE_STANDBY_CHOICE (1u)
#define MODEL3_CAN_ID7_D5_DIR_DEBUG_DIR_USM_STATE_USM_STATE_RETRY_CHOICE (2u)
#define MODEL3_CAN_ID7_D5_DIR_DEBUG_DIR_USM_STATE_USM_STATE_ABORT_CHOICE (3u)
#define MODEL3_CAN_ID7_D5_DIR_DEBUG_DIR_USM_STATE_USM_STATE_ENABLE_CHOICE (4u)
#define MODEL3_CAN_ID7_D5_DIR_DEBUG_DIR_USM_STATE_USM_STATE_FAULT_CHOICE (5u)
#define MODEL3_CAN_ID7_D5_DIR_DEBUG_DIR_USM_STATE_USM_STATE_UNAVAILABLE_CHOICE (6u)
#define MODEL3_CAN_ID7_D5_DIR_DEBUG_DIR_USM_STATE_USM_STATE_WAIT_FOR_RETRY_CHOICE (7u)

#define MODEL3_CAN_ID7_D5_DIR_DEBUG_DIR_POWER_STAGE_SAFE_STATE_PSTG_SAFESTATE_NONE_CHOICE (0u)
#define MODEL3_CAN_ID7_D5_DIR_DEBUG_DIR_POWER_STAGE_SAFE_STATE_PSTG_SAFESTATE_ALL_OFF_CHOICE (1u)
#define MODEL3_CAN_ID7_D5_DIR_DEBUG_DIR_POWER_STAGE_SAFE_STATE_PSTG_SAFESTATE_3_PS_HIGH_CHOICE (2u)
#define MODEL3_CAN_ID7_D5_DIR_DEBUG_DIR_POWER_STAGE_SAFE_STATE_PSTG_SAFESTATE_3_PS_LOW_CHOICE (3u)

#define MODEL3_CAN_ID7_D5_DIR_DEBUG_DIR_AEB_FAULT_REASON_DI_AEB_FAULT_NONE_CHOICE (0u)
#define MODEL3_CAN_ID7_D5_DIR_DEBUG_DIR_AEB_FAULT_REASON_DI_AEB_FAULT_EPB_MIA_CHOICE (1u)
#define MODEL3_CAN_ID7_D5_DIR_DEBUG_DIR_AEB_FAULT_REASON_DI_AEB_FAULT_PM_MIA_CHOICE (2u)
#define MODEL3_CAN_ID7_D5_DIR_DEBUG_DIR_AEB_FAULT_REASON_DI_AEB_FAULT_EBR_FAULT_CHOICE (3u)
#define MODEL3_CAN_ID7_D5_DIR_DEBUG_DIR_AEB_FAULT_REASON_DI_AEB_FAULT_SPEED_DELTA_CHOICE (4u)
#define MODEL3_CAN_ID7_D5_DIR_DEBUG_DIR_AEB_FAULT_REASON_DI_AEB_FAULT_DAS_CONTROL_MIA_CHOICE (5u)
#define MODEL3_CAN_ID7_D5_DIR_DEBUG_DIR_AEB_FAULT_REASON_DI_AEB_FAULT_DAS_SNA_CHOICE (6u)
#define MODEL3_CAN_ID7_D5_DIR_DEBUG_DIR_AEB_FAULT_REASON_DI_AEB_FAULT_VEL_EST_ABNORMAL_CHOICE (7u)
#define MODEL3_CAN_ID7_D5_DIR_DEBUG_DIR_AEB_FAULT_REASON_DI_AEB_FAULT_PM_REQUEST_CHOICE (8u)
#define MODEL3_CAN_ID7_D5_DIR_DEBUG_DIR_AEB_FAULT_REASON_DI_AEB_FAULT_ACCEL_OUT_OF_BOUNDS_CHOICE (9u)
#define MODEL3_CAN_ID7_D5_DIR_DEBUG_DIR_AEB_FAULT_REASON_DI_AEB_FAULT_EPB_NOT_PARKED_CHOICE (10u)
#define MODEL3_CAN_ID7_D5_DIR_DEBUG_DIR_AEB_FAULT_REASON_DI_AEB_FAULT_ESP_FAULT_CHOICE (11u)
#define MODEL3_CAN_ID7_D5_DIR_DEBUG_DIR_AEB_FAULT_REASON_DI_AEB_FAULT_ESP_MIA_CHOICE (12u)
#define MODEL3_CAN_ID7_D5_DIR_DEBUG_DIR_AEB_FAULT_REASON_DI_AEB_FAULT_MIN_TIME_BTWN_EVENTS_CHOICE (13u)
#define MODEL3_CAN_ID7_D5_DIR_DEBUG_DIR_AEB_FAULT_REASON_DI_AEB_FAULT_ACCEL_REQ_INVALID_CHOICE (14u)
#define MODEL3_CAN_ID7_D5_DIR_DEBUG_DIR_AEB_FAULT_REASON_DI_AEB_FAULT_DAS_REQ_DI_UNAVAIL_CHOICE (15u)

#define MODEL3_CAN_ID7_D5_DIR_DEBUG_DIR_FLUX_STATE_DI_FLUXSTATE_START_CHOICE (0u)
#define MODEL3_CAN_ID7_D5_DIR_DEBUG_DIR_FLUX_STATE_DI_FLUXSTATE_TEST_CHOICE (1u)
#define MODEL3_CAN_ID7_D5_DIR_DEBUG_DIR_FLUX_STATE_DI_FLUXSTATE_STANDBY_CHOICE (2u)
#define MODEL3_CAN_ID7_D5_DIR_DEBUG_DIR_FLUX_STATE_DI_FLUXSTATE_FLUX_UP_CHOICE (3u)
#define MODEL3_CAN_ID7_D5_DIR_DEBUG_DIR_FLUX_STATE_DI_FLUXSTATE_FLUX_DOWN_CHOICE (4u)
#define MODEL3_CAN_ID7_D5_DIR_DEBUG_DIR_FLUX_STATE_DI_FLUXSTATE_ENABLED_CHOICE (5u)
#define MODEL3_CAN_ID7_D5_DIR_DEBUG_DIR_FLUX_STATE_DI_FLUXSTATE_ICONTROL_CHOICE (6u)
#define MODEL3_CAN_ID7_D5_DIR_DEBUG_DIR_FLUX_STATE_DI_FLUXSTATE_VCONTROL_CHOICE (7u)
#define MODEL3_CAN_ID7_D5_DIR_DEBUG_DIR_FLUX_STATE_DI_FLUXSTATE_FAULT_CHOICE (9u)
#define MODEL3_CAN_ID7_D5_DIR_DEBUG_DIR_FLUX_STATE_DI_FLUXSTATE_STATIONARY_WASTE_CHOICE (10u)

#define MODEL3_CAN_ID7_D5_DIR_DEBUG_DIR_OIL_PUMP_PHASE_VOLTAGE_SNA_CHOICE (255u)

#define MODEL3_CAN_ID7_D5_DIR_DEBUG_DIR_TC_MAX_REQUEST_SNA_CHOICE (255u)

#define MODEL3_CAN_ID7_D5_DIR_DEBUG_DIR_AEB_UNAVAILABLE_REASON_DI_AEB_UNAVAILABLE_NONE_CHOICE (0u)
#define MODEL3_CAN_ID7_D5_DIR_DEBUG_DIR_AEB_UNAVAILABLE_REASON_DI_AEB_UNAVAILABLE_CLOSURE_CHOICE (1u)
#define MODEL3_CAN_ID7_D5_DIR_DEBUG_DIR_AEB_UNAVAILABLE_REASON_DI_AEB_UNAVAILABLE_GEAR_CHOICE (2u)
#define MODEL3_CAN_ID7_D5_DIR_DEBUG_DIR_AEB_UNAVAILABLE_REASON_DI_AEB_UNAVAILABLE_SKID_CHOICE (3u)
#define MODEL3_CAN_ID7_D5_DIR_DEBUG_DIR_AEB_UNAVAILABLE_REASON_DI_AEB_UNAVAILABLE_NEGATIVE_SPEED_CHOICE (4u)
#define MODEL3_CAN_ID7_D5_DIR_DEBUG_DIR_AEB_UNAVAILABLE_REASON_DI_AEB_UNAVAILABLE_DI_STATE_CHOICE (5u)
#define MODEL3_CAN_ID7_D5_DIR_DEBUG_DIR_AEB_UNAVAILABLE_REASON_DI_AEB_UNAVAILABLE_EBR_UNAVAILABLE_CHOICE (6u)
#define MODEL3_CAN_ID7_D5_DIR_DEBUG_DIR_AEB_UNAVAILABLE_REASON_DI_AEB_UNAVAILABLE_EPB_CHOICE (7u)
#define MODEL3_CAN_ID7_D5_DIR_DEBUG_DIR_AEB_UNAVAILABLE_REASON_DI_AEB_UNAVAILABLE_HYSTERESIS_CHOICE (8u)
#define MODEL3_CAN_ID7_D5_DIR_DEBUG_DIR_AEB_UNAVAILABLE_REASON_DI_AEB_UNAVAILABLE_TRACK_MODE_CHOICE (9u)

#define MODEL3_CAN_ID7_D5_DIR_DEBUG_DIR_BRK_ST_STATE_BRKST_STATE_UNAVAILABLE_CHOICE (0u)
#define MODEL3_CAN_ID7_D5_DIR_DEBUG_DIR_BRK_ST_STATE_BRKST_STATE_IDLE_CHOICE (1u)
#define MODEL3_CAN_ID7_D5_DIR_DEBUG_DIR_BRK_ST_STATE_BRKST_STATE_RUNNING_UNPRESSED_CHOICE (2u)
#define MODEL3_CAN_ID7_D5_DIR_DEBUG_DIR_BRK_ST_STATE_BRKST_STATE_RUNNING_PRESSING_CHOICE (3u)
#define MODEL3_CAN_ID7_D5_DIR_DEBUG_DIR_BRK_ST_STATE_BRKST_STATE_RUNNING_PRESSED_CHOICE (4u)
#define MODEL3_CAN_ID7_D5_DIR_DEBUG_DIR_BRK_ST_STATE_BRKST_STATE_INTERRUPTED_CHOICE (5u)
#define MODEL3_CAN_ID7_D5_DIR_DEBUG_DIR_BRK_ST_STATE_BRKST_STATE_FINISHED_CHOICE (6u)

#define MODEL3_CAN_ID7_D5_DIR_DEBUG_DIR_OIL_PUMP_PRESSURE_ESTIMATE_MAX_SNA_CHOICE (255u)

#define MODEL3_CAN_ID7_D5_DIR_DEBUG_DIR_TC_MIN_REQUEST_SNA_CHOICE (255u)

#define MODEL3_CAN_ID7_D5_DIR_DEBUG_DIR_OIL_PUMP_PRESSURE_EXPECTED_MIN_SNA_CHOICE (255u)

#define MODEL3_CAN_ID7_D5_DIR_DEBUG_DIR_OPD_UNAVAILABLE_REASON_DI_OPD_UNAVAILABLE_NONE_CHOICE (0u)
#define MODEL3_CAN_ID7_D5_DIR_DEBUG_DIR_OPD_UNAVAILABLE_REASON_DI_OPD_UNAVAILABLE_DISABLED_CHOICE (1u)
#define MODEL3_CAN_ID7_D5_DIR_DEBUG_DIR_OPD_UNAVAILABLE_REASON_DI_OPD_UNAVAILABLE_PM_FAULT_CHOICE (2u)
#define MODEL3_CAN_ID7_D5_DIR_DEBUG_DIR_OPD_UNAVAILABLE_REASON_DI_OPD_UNAVAILABLE_GEAR_CHOICE (3u)
#define MODEL3_CAN_ID7_D5_DIR_DEBUG_DIR_OPD_UNAVAILABLE_REASON_DI_OPD_UNAVAILABLE_DI_SYS_STATE_CHOICE (4u)
#define MODEL3_CAN_ID7_D5_DIR_DEBUG_DIR_OPD_UNAVAILABLE_REASON_DI_OPD_UNAVAILABLE_INVALID_BRAKE_SENSE_CHOICE (5u)
#define MODEL3_CAN_ID7_D5_DIR_DEBUG_DIR_OPD_UNAVAILABLE_REASON_DI_OPD_UNAVAILABLE_SKID_CHOICE (6u)
#define MODEL3_CAN_ID7_D5_DIR_DEBUG_DIR_OPD_UNAVAILABLE_REASON_DI_OPD_UNAVAILABLE_EPB_FAULT_CHOICE (7u)
#define MODEL3_CAN_ID7_D5_DIR_DEBUG_DIR_OPD_UNAVAILABLE_REASON_DI_OPD_UNAVAILABLE_TRACK_MODE_CHOICE (8u)
#define MODEL3_CAN_ID7_D5_DIR_DEBUG_DIR_OPD_UNAVAILABLE_REASON_DI_OPD_UNAVAILABLE_VELOCITY_ESTIMATE_CHOICE (9u)
#define MODEL3_CAN_ID7_D5_DIR_DEBUG_DIR_OPD_UNAVAILABLE_REASON_DI_OPD_UNAVAILABLE_TRACTION_CONTROL_CHOICE (10u)
#define MODEL3_CAN_ID7_D5_DIR_DEBUG_DIR_OPD_UNAVAILABLE_REASON_DI_OPD_UNAVAILABLE_GRADE_ESTIMATE_CHOICE (11u)
#define MODEL3_CAN_ID7_D5_DIR_DEBUG_DIR_OPD_UNAVAILABLE_REASON_DI_OPD_UNAVAILABLE_TORQUE_LIMIT_CHOICE (12u)
#define MODEL3_CAN_ID7_D5_DIR_DEBUG_DIR_OPD_UNAVAILABLE_REASON_DI_OPD_UNAVAILABLE_PARKED_CHOICE (13u)
#define MODEL3_CAN_ID7_D5_DIR_DEBUG_DIR_OPD_UNAVAILABLE_REASON_DI_OPD_UNAVAILABLE_INVALID_MSPD_CHOICE (14u)
#define MODEL3_CAN_ID7_D5_DIR_DEBUG_DIR_OPD_UNAVAILABLE_REASON_DI_OPD_UNAVAILABLE_MOTOR_HOLD_TIMEOUT_CHOICE (15u)

#define MODEL3_CAN_ID7_D5_DIR_DEBUG_DIR_MAGNET_TEMP_EST_SNA_CHOICE (0u)

#define MODEL3_CAN_ID7_D5_DIR_DEBUG_DIR_IMMOBILIZER_CONDITION_DI_IMM_CONDITION_VIRGIN_SNA_CHOICE (0u)
#define MODEL3_CAN_ID7_D5_DIR_DEBUG_DIR_IMMOBILIZER_CONDITION_DI_IMM_CONDITION_LEARNED_CHOICE (1u)

#define MODEL3_CAN_ID757_DIF_DEBUG_DIF_GATE_DRIVE_SUPPLY_STATE_PSTG_GD_SUPPLY_DOWN_CHOICE (0u)
#define MODEL3_CAN_ID757_DIF_DEBUG_DIF_GATE_DRIVE_SUPPLY_STATE_PSTG_GD_SUPPLY_RISING_CHOICE (1u)
#define MODEL3_CAN_ID757_DIF_DEBUG_DIF_GATE_DRIVE_SUPPLY_STATE_PSTG_GD_SUPPLY_UP_CHOICE (2u)
#define MODEL3_CAN_ID757_DIF_DEBUG_DIF_GATE_DRIVE_SUPPLY_STATE_PSTG_GD_SUPPLY_FALLING_CHOICE (3u)

#define MODEL3_CAN_ID757_DIF_DEBUG_DIF_MOTOR_TYPE_DI_MOTOR_SNA_CHOICE (0u)
#define MODEL3_CAN_ID757_DIF_DEBUG_DIF_MOTOR_TYPE_DI_MOTOR_ROADSTER_BASE_CHOICE (1u)
#define MODEL3_CAN_ID757_DIF_DEBUG_DIF_MOTOR_TYPE_DI_MOTOR_ROADSTER_SPORT_CHOICE (2u)
#define MODEL3_CAN_ID757_DIF_DEBUG_DIF_MOTOR_TYPE_DI_MOTOR_M7_M3_CHOICE (3u)
#define MODEL3_CAN_ID757_DIF_DEBUG_DIF_MOTOR_TYPE_DI_MOTOR_M7_M4_CHOICE (4u)
#define MODEL3_CAN_ID757_DIF_DEBUG_DIF_MOTOR_TYPE_DI_MOTOR_M7_M5_CHOICE (5u)
#define MODEL3_CAN_ID757_DIF_DEBUG_DIF_MOTOR_TYPE_DI_MOTOR_M8_A_CHOICE (6u)
#define MODEL3_CAN_ID757_DIF_DEBUG_DIF_MOTOR_TYPE_DI_MOTOR_M7_M6_CHOICE (7u)
#define MODEL3_CAN_ID757_DIF_DEBUG_DIF_MOTOR_TYPE_DI_MOTOR_F1_A_CHOICE (8u)
#define MODEL3_CAN_ID757_DIF_DEBUG_DIF_MOTOR_TYPE_DI_MOTOR_SSR1_A_CHOICE (9u)
#define MODEL3_CAN_ID757_DIF_DEBUG_DIF_MOTOR_TYPE_DI_MOTOR_F1_AC_CHOICE (10u)
#define MODEL3_CAN_ID757_DIF_DEBUG_DIF_MOTOR_TYPE_DI_MOTOR_F2_AB_CHOICE (11u)
#define MODEL3_CAN_ID757_DIF_DEBUG_DIF_MOTOR_TYPE_DI_MOTOR_F2_AC_CHOICE (12u)
#define MODEL3_CAN_ID757_DIF_DEBUG_DIF_MOTOR_TYPE_DI_MOTOR_F2_AD_CHOICE (13u)
#define MODEL3_CAN_ID757_DIF_DEBUG_DIF_MOTOR_TYPE_DI_MOTOR_F2_AE_CHOICE (14u)
#define MODEL3_CAN_ID757_DIF_DEBUG_DIF_MOTOR_TYPE_DI_MOTOR_F2_APMSRM_CHOICE (15u)
#define MODEL3_CAN_ID757_DIF_DEBUG_DIF_MOTOR_TYPE_DI_MOTOR_PM216_A_CHOICE (16u)
#define MODEL3_CAN_ID757_DIF_DEBUG_DIF_MOTOR_TYPE_DI_MOTOR_IM100_A_CHOICE (17u)
#define MODEL3_CAN_ID757_DIF_DEBUG_DIF_MOTOR_TYPE_DI_MOTOR_PM216_B_CHOICE (18u)
#define MODEL3_CAN_ID757_DIF_DEBUG_DIF_MOTOR_TYPE_DI_MOTOR_IM100_B_CHOICE (19u)
#define MODEL3_CAN_ID757_DIF_DEBUG_DIF_MOTOR_TYPE_DI_MOTOR_IM216_A_CHOICE (20u)
#define MODEL3_CAN_ID757_DIF_DEBUG_DIF_MOTOR_TYPE_DI_MOTOR_PM216_C_CHOICE (21u)
#define MODEL3_CAN_ID757_DIF_DEBUG_DIF_MOTOR_TYPE_DI_MOTOR_IM130_C_CHOICE (22u)
#define MODEL3_CAN_ID757_DIF_DEBUG_DIF_MOTOR_TYPE_DI_MOTOR_PM216_D_CHOICE (23u)
#define MODEL3_CAN_ID757_DIF_DEBUG_DIF_MOTOR_TYPE_DI_MOTOR_IM130_D_CHOICE (24u)
#define MODEL3_CAN_ID757_DIF_DEBUG_DIF_MOTOR_TYPE_DI_MOTOR_IM130_D_AL_CHOICE (25u)
#define MODEL3_CAN_ID757_DIF_DEBUG_DIF_MOTOR_TYPE_DI_MOTOR_F2_AE_AL_CHOICE (26u)

#define MODEL3_CAN_ID757_DIF_DEBUG_DIF_ROTOR_OFFSET_LEARNING_STATE_ROL_STATE_INIT_CHOICE (0u)
#define MODEL3_CAN_ID757_DIF_DEBUG_DIF_ROTOR_OFFSET_LEARNING_STATE_ROL_STATE_WAIT_CHOICE (1u)
#define MODEL3_CAN_ID757_DIF_DEBUG_DIF_ROTOR_OFFSET_LEARNING_STATE_ROL_STATE_ACCELERATE_CHOICE (2u)
#define MODEL3_CAN_ID757_DIF_DEBUG_DIF_ROTOR_OFFSET_LEARNING_STATE_ROL_STATE_SHIFT_CHOICE (3u)
#define MODEL3_CAN_ID757_DIF_DEBUG_DIF_ROTOR_OFFSET_LEARNING_STATE_ROL_STATE_MEASURE_CHOICE (4u)
#define MODEL3_CAN_ID757_DIF_DEBUG_DIF_ROTOR_OFFSET_LEARNING_STATE_ROL_STATE_CORRECT_CHOICE (5u)
#define MODEL3_CAN_ID757_DIF_DEBUG_DIF_ROTOR_OFFSET_LEARNING_STATE_ROL_STATE_VERIFY_CHOICE (6u)
#define MODEL3_CAN_ID757_DIF_DEBUG_DIF_ROTOR_OFFSET_LEARNING_STATE_ROL_STATE_WRITE_CHOICE (7u)
#define MODEL3_CAN_ID757_DIF_DEBUG_DIF_ROTOR_OFFSET_LEARNING_STATE_ROL_STATE_DONE_CHOICE (8u)
#define MODEL3_CAN_ID757_DIF_DEBUG_DIF_ROTOR_OFFSET_LEARNING_STATE_ROL_NUM_STATES_CHOICE (9u)

#define MODEL3_CAN_ID757_DIF_DEBUG_DIF_SSM_STATE_SSM_STATE_START_CHOICE (0u)
#define MODEL3_CAN_ID757_DIF_DEBUG_DIF_SSM_STATE_SSM_STATE_UNAVAILABLE_CHOICE (1u)
#define MODEL3_CAN_ID757_DIF_DEBUG_DIF_SSM_STATE_SSM_STATE_IDLE_CHOICE (2u)
#define MODEL3_CAN_ID757_DIF_DEBUG_DIF_SSM_STATE_SSM_STATE_STANDBY_CHOICE (3u)
#define MODEL3_CAN_ID757_DIF_DEBUG_DIF_SSM_STATE_SSM_STATE_ENABLE_CHOICE (4u)
#define MODEL3_CAN_ID757_DIF_DEBUG_DIF_SSM_STATE_SSM_STATE_ABORT_CHOICE (5u)
#define MODEL3_CAN_ID757_DIF_DEBUG_DIF_SSM_STATE_SSM_STATE_WAIT_FOR_RETRY_CHOICE (6u)
#define MODEL3_CAN_ID757_DIF_DEBUG_DIF_SSM_STATE_SSM_STATE_RETRY_CHOICE (7u)
#define MODEL3_CAN_ID757_DIF_DEBUG_DIF_SSM_STATE_SSM_STATE_FAULT_CHOICE (8u)

#define MODEL3_CAN_ID757_DIF_DEBUG_DIF_VELOCITY_ESTIMATOR_STATE_VE_STATE_NOT_INITIALIZED_CHOICE (0u)
#define MODEL3_CAN_ID757_DIF_DEBUG_DIF_VELOCITY_ESTIMATOR_STATE_VE_STATE_WHEELS_NORMAL_CHOICE (1u)
#define MODEL3_CAN_ID757_DIF_DEBUG_DIF_VELOCITY_ESTIMATOR_STATE_VE_STATE_BACKUP_WHEELS_A_CHOICE (2u)
#define MODEL3_CAN_ID757_DIF_DEBUG_DIF_VELOCITY_ESTIMATOR_STATE_VE_STATE_BACKUP_WHEELS_B_CHOICE (3u)
#define MODEL3_CAN_ID757_DIF_DEBUG_DIF_VELOCITY_ESTIMATOR_STATE_VE_STATE_BACKUP_MOTOR_CHOICE (4u)

#define MODEL3_CAN_ID757_DIF_DEBUG_DIF_GATE_DRIVE_STATE_PSTG_GD_STATE_INIT_CHOICE (0u)
#define MODEL3_CAN_ID757_DIF_DEBUG_DIF_GATE_DRIVE_STATE_PSTG_GD_STATE_SELFTEST_CHOICE (1u)
#define MODEL3_CAN_ID757_DIF_DEBUG_DIF_GATE_DRIVE_STATE_PSTG_GD_STATE_CONFIGURING_CHOICE (2u)
#define MODEL3_CAN_ID757_DIF_DEBUG_DIF_GATE_DRIVE_STATE_PSTG_GD_STATE_CONFIGURED_CHOICE (3u)
#define MODEL3_CAN_ID757_DIF_DEBUG_DIF_GATE_DRIVE_STATE_PSTG_GD_STATE_NOT_CONFIGURED_CHOICE (4u)

#define MODEL3_CAN_ID757_DIF_DEBUG_DIF_USM_STATE_USM_STATE_START_CHOICE (0u)
#define MODEL3_CAN_ID757_DIF_DEBUG_DIF_USM_STATE_USM_STATE_STANDBY_CHOICE (1u)
#define MODEL3_CAN_ID757_DIF_DEBUG_DIF_USM_STATE_USM_STATE_RETRY_CHOICE (2u)
#define MODEL3_CAN_ID757_DIF_DEBUG_DIF_USM_STATE_USM_STATE_ABORT_CHOICE (3u)
#define MODEL3_CAN_ID757_DIF_DEBUG_DIF_USM_STATE_USM_STATE_ENABLE_CHOICE (4u)
#define MODEL3_CAN_ID757_DIF_DEBUG_DIF_USM_STATE_USM_STATE_FAULT_CHOICE (5u)
#define MODEL3_CAN_ID757_DIF_DEBUG_DIF_USM_STATE_USM_STATE_UNAVAILABLE_CHOICE (6u)
#define MODEL3_CAN_ID757_DIF_DEBUG_DIF_USM_STATE_USM_STATE_WAIT_FOR_RETRY_CHOICE (7u)

#define MODEL3_CAN_ID757_DIF_DEBUG_DIF_POWER_STAGE_SAFE_STATE_PSTG_SAFESTATE_NONE_CHOICE (0u)
#define MODEL3_CAN_ID757_DIF_DEBUG_DIF_POWER_STAGE_SAFE_STATE_PSTG_SAFESTATE_ALL_OFF_CHOICE (1u)
#define MODEL3_CAN_ID757_DIF_DEBUG_DIF_POWER_STAGE_SAFE_STATE_PSTG_SAFESTATE_3_PS_HIGH_CHOICE (2u)
#define MODEL3_CAN_ID757_DIF_DEBUG_DIF_POWER_STAGE_SAFE_STATE_PSTG_SAFESTATE_3_PS_LOW_CHOICE (3u)

#define MODEL3_CAN_ID757_DIF_DEBUG_DIF_AEB_FAULT_REASON_DI_AEB_FAULT_NONE_CHOICE (0u)
#define MODEL3_CAN_ID757_DIF_DEBUG_DIF_AEB_FAULT_REASON_DI_AEB_FAULT_EPB_MIA_CHOICE (1u)
#define MODEL3_CAN_ID757_DIF_DEBUG_DIF_AEB_FAULT_REASON_DI_AEB_FAULT_PM_MIA_CHOICE (2u)
#define MODEL3_CAN_ID757_DIF_DEBUG_DIF_AEB_FAULT_REASON_DI_AEB_FAULT_EBR_FAULT_CHOICE (3u)
#define MODEL3_CAN_ID757_DIF_DEBUG_DIF_AEB_FAULT_REASON_DI_AEB_FAULT_SPEED_DELTA_CHOICE (4u)
#define MODEL3_CAN_ID757_DIF_DEBUG_DIF_AEB_FAULT_REASON_DI_AEB_FAULT_DAS_CONTROL_MIA_CHOICE (5u)
#define MODEL3_CAN_ID757_DIF_DEBUG_DIF_AEB_FAULT_REASON_DI_AEB_FAULT_DAS_SNA_CHOICE (6u)
#define MODEL3_CAN_ID757_DIF_DEBUG_DIF_AEB_FAULT_REASON_DI_AEB_FAULT_VEL_EST_ABNORMAL_CHOICE (7u)
#define MODEL3_CAN_ID757_DIF_DEBUG_DIF_AEB_FAULT_REASON_DI_AEB_FAULT_PM_REQUEST_CHOICE (8u)
#define MODEL3_CAN_ID757_DIF_DEBUG_DIF_AEB_FAULT_REASON_DI_AEB_FAULT_ACCEL_OUT_OF_BOUNDS_CHOICE (9u)
#define MODEL3_CAN_ID757_DIF_DEBUG_DIF_AEB_FAULT_REASON_DI_AEB_FAULT_EPB_NOT_PARKED_CHOICE (10u)
#define MODEL3_CAN_ID757_DIF_DEBUG_DIF_AEB_FAULT_REASON_DI_AEB_FAULT_ESP_FAULT_CHOICE (11u)
#define MODEL3_CAN_ID757_DIF_DEBUG_DIF_AEB_FAULT_REASON_DI_AEB_FAULT_ESP_MIA_CHOICE (12u)
#define MODEL3_CAN_ID757_DIF_DEBUG_DIF_AEB_FAULT_REASON_DI_AEB_FAULT_MIN_TIME_BTWN_EVENTS_CHOICE (13u)
#define MODEL3_CAN_ID757_DIF_DEBUG_DIF_AEB_FAULT_REASON_DI_AEB_FAULT_ACCEL_REQ_INVALID_CHOICE (14u)
#define MODEL3_CAN_ID757_DIF_DEBUG_DIF_AEB_FAULT_REASON_DI_AEB_FAULT_DAS_REQ_DI_UNAVAIL_CHOICE (15u)

#define MODEL3_CAN_ID757_DIF_DEBUG_DIF_FLUX_STATE_DI_FLUXSTATE_START_CHOICE (0u)
#define MODEL3_CAN_ID757_DIF_DEBUG_DIF_FLUX_STATE_DI_FLUXSTATE_TEST_CHOICE (1u)
#define MODEL3_CAN_ID757_DIF_DEBUG_DIF_FLUX_STATE_DI_FLUXSTATE_STANDBY_CHOICE (2u)
#define MODEL3_CAN_ID757_DIF_DEBUG_DIF_FLUX_STATE_DI_FLUXSTATE_FLUX_UP_CHOICE (3u)
#define MODEL3_CAN_ID757_DIF_DEBUG_DIF_FLUX_STATE_DI_FLUXSTATE_FLUX_DOWN_CHOICE (4u)
#define MODEL3_CAN_ID757_DIF_DEBUG_DIF_FLUX_STATE_DI_FLUXSTATE_ENABLED_CHOICE (5u)
#define MODEL3_CAN_ID757_DIF_DEBUG_DIF_FLUX_STATE_DI_FLUXSTATE_ICONTROL_CHOICE (6u)
#define MODEL3_CAN_ID757_DIF_DEBUG_DIF_FLUX_STATE_DI_FLUXSTATE_VCONTROL_CHOICE (7u)
#define MODEL3_CAN_ID757_DIF_DEBUG_DIF_FLUX_STATE_DI_FLUXSTATE_FAULT_CHOICE (9u)
#define MODEL3_CAN_ID757_DIF_DEBUG_DIF_FLUX_STATE_DI_FLUXSTATE_STATIONARY_WASTE_CHOICE (10u)

#define MODEL3_CAN_ID757_DIF_DEBUG_DIF_OIL_PUMP_PHASE_VOLTAGE_SNA_CHOICE (255u)

#define MODEL3_CAN_ID757_DIF_DEBUG_DIF_TC_MAX_REQUEST_SNA_CHOICE (255u)

#define MODEL3_CAN_ID757_DIF_DEBUG_DIF_AEB_UNAVAILABLE_REASON_DI_AEB_UNAVAILABLE_NONE_CHOICE (0u)
#define MODEL3_CAN_ID757_DIF_DEBUG_DIF_AEB_UNAVAILABLE_REASON_DI_AEB_UNAVAILABLE_CLOSURE_CHOICE (1u)
#define MODEL3_CAN_ID757_DIF_DEBUG_DIF_AEB_UNAVAILABLE_REASON_DI_AEB_UNAVAILABLE_GEAR_CHOICE (2u)
#define MODEL3_CAN_ID757_DIF_DEBUG_DIF_AEB_UNAVAILABLE_REASON_DI_AEB_UNAVAILABLE_SKID_CHOICE (3u)
#define MODEL3_CAN_ID757_DIF_DEBUG_DIF_AEB_UNAVAILABLE_REASON_DI_AEB_UNAVAILABLE_NEGATIVE_SPEED_CHOICE (4u)
#define MODEL3_CAN_ID757_DIF_DEBUG_DIF_AEB_UNAVAILABLE_REASON_DI_AEB_UNAVAILABLE_DI_STATE_CHOICE (5u)
#define MODEL3_CAN_ID757_DIF_DEBUG_DIF_AEB_UNAVAILABLE_REASON_DI_AEB_UNAVAILABLE_EBR_UNAVAILABLE_CHOICE (6u)
#define MODEL3_CAN_ID757_DIF_DEBUG_DIF_AEB_UNAVAILABLE_REASON_DI_AEB_UNAVAILABLE_EPB_CHOICE (7u)
#define MODEL3_CAN_ID757_DIF_DEBUG_DIF_AEB_UNAVAILABLE_REASON_DI_AEB_UNAVAILABLE_HYSTERESIS_CHOICE (8u)
#define MODEL3_CAN_ID757_DIF_DEBUG_DIF_AEB_UNAVAILABLE_REASON_DI_AEB_UNAVAILABLE_TRACK_MODE_CHOICE (9u)

#define MODEL3_CAN_ID757_DIF_DEBUG_DIF_BRK_ST_STATE_BRKST_STATE_UNAVAILABLE_CHOICE (0u)
#define MODEL3_CAN_ID757_DIF_DEBUG_DIF_BRK_ST_STATE_BRKST_STATE_IDLE_CHOICE (1u)
#define MODEL3_CAN_ID757_DIF_DEBUG_DIF_BRK_ST_STATE_BRKST_STATE_RUNNING_UNPRESSED_CHOICE (2u)
#define MODEL3_CAN_ID757_DIF_DEBUG_DIF_BRK_ST_STATE_BRKST_STATE_RUNNING_PRESSING_CHOICE (3u)
#define MODEL3_CAN_ID757_DIF_DEBUG_DIF_BRK_ST_STATE_BRKST_STATE_RUNNING_PRESSED_CHOICE (4u)
#define MODEL3_CAN_ID757_DIF_DEBUG_DIF_BRK_ST_STATE_BRKST_STATE_INTERRUPTED_CHOICE (5u)
#define MODEL3_CAN_ID757_DIF_DEBUG_DIF_BRK_ST_STATE_BRKST_STATE_FINISHED_CHOICE (6u)

#define MODEL3_CAN_ID757_DIF_DEBUG_DIF_OIL_PUMP_PRESSURE_ESTIMATE_MAX_SNA_CHOICE (255u)

#define MODEL3_CAN_ID757_DIF_DEBUG_DIF_TC_MIN_REQUEST_SNA_CHOICE (255u)

#define MODEL3_CAN_ID757_DIF_DEBUG_DIF_OIL_PUMP_PRESSURE_EXPECTED_MIN_SNA_CHOICE (255u)

#define MODEL3_CAN_ID757_DIF_DEBUG_DIF_OPD_UNAVAILABLE_REASON_DI_OPD_UNAVAILABLE_NONE_CHOICE (0u)
#define MODEL3_CAN_ID757_DIF_DEBUG_DIF_OPD_UNAVAILABLE_REASON_DI_OPD_UNAVAILABLE_DISABLED_CHOICE (1u)
#define MODEL3_CAN_ID757_DIF_DEBUG_DIF_OPD_UNAVAILABLE_REASON_DI_OPD_UNAVAILABLE_PM_FAULT_CHOICE (2u)
#define MODEL3_CAN_ID757_DIF_DEBUG_DIF_OPD_UNAVAILABLE_REASON_DI_OPD_UNAVAILABLE_GEAR_CHOICE (3u)
#define MODEL3_CAN_ID757_DIF_DEBUG_DIF_OPD_UNAVAILABLE_REASON_DI_OPD_UNAVAILABLE_DI_SYS_STATE_CHOICE (4u)
#define MODEL3_CAN_ID757_DIF_DEBUG_DIF_OPD_UNAVAILABLE_REASON_DI_OPD_UNAVAILABLE_INVALID_BRAKE_SENSE_CHOICE (5u)
#define MODEL3_CAN_ID757_DIF_DEBUG_DIF_OPD_UNAVAILABLE_REASON_DI_OPD_UNAVAILABLE_SKID_CHOICE (6u)
#define MODEL3_CAN_ID757_DIF_DEBUG_DIF_OPD_UNAVAILABLE_REASON_DI_OPD_UNAVAILABLE_EPB_FAULT_CHOICE (7u)
#define MODEL3_CAN_ID757_DIF_DEBUG_DIF_OPD_UNAVAILABLE_REASON_DI_OPD_UNAVAILABLE_TRACK_MODE_CHOICE (8u)
#define MODEL3_CAN_ID757_DIF_DEBUG_DIF_OPD_UNAVAILABLE_REASON_DI_OPD_UNAVAILABLE_VELOCITY_ESTIMATE_CHOICE (9u)
#define MODEL3_CAN_ID757_DIF_DEBUG_DIF_OPD_UNAVAILABLE_REASON_DI_OPD_UNAVAILABLE_TRACTION_CONTROL_CHOICE (10u)
#define MODEL3_CAN_ID757_DIF_DEBUG_DIF_OPD_UNAVAILABLE_REASON_DI_OPD_UNAVAILABLE_GRADE_ESTIMATE_CHOICE (11u)
#define MODEL3_CAN_ID757_DIF_DEBUG_DIF_OPD_UNAVAILABLE_REASON_DI_OPD_UNAVAILABLE_TORQUE_LIMIT_CHOICE (12u)
#define MODEL3_CAN_ID757_DIF_DEBUG_DIF_OPD_UNAVAILABLE_REASON_DI_OPD_UNAVAILABLE_PARKED_CHOICE (13u)
#define MODEL3_CAN_ID757_DIF_DEBUG_DIF_OPD_UNAVAILABLE_REASON_DI_OPD_UNAVAILABLE_INVALID_MSPD_CHOICE (14u)
#define MODEL3_CAN_ID757_DIF_DEBUG_DIF_OPD_UNAVAILABLE_REASON_DI_OPD_UNAVAILABLE_MOTOR_HOLD_TIMEOUT_CHOICE (15u)

#define MODEL3_CAN_ID757_DIF_DEBUG_DIF_MAGNET_TEMP_EST_SNA_CHOICE (0u)

#define MODEL3_CAN_ID757_DIF_DEBUG_DIF_IMMOBILIZER_CONDITION_DI_IMM_CONDITION_VIRGIN_SNA_CHOICE (0u)
#define MODEL3_CAN_ID757_DIF_DEBUG_DIF_IMMOBILIZER_CONDITION_DI_IMM_CONDITION_LEARNED_CHOICE (1u)

#define MODEL3_CAN_ID2_B6_DI_CHASSIS_CONTROL_STATUS_DI_TRACTION_CONTROL_MODE_UI_NORMAL_CHOICE (0u)
#define MODEL3_CAN_ID2_B6_DI_CHASSIS_CONTROL_STATUS_DI_TRACTION_CONTROL_MODE_UI_SLIP_START_CHOICE (1u)
#define MODEL3_CAN_ID2_B6_DI_CHASSIS_CONTROL_STATUS_DI_TRACTION_CONTROL_MODE_UI_DEV_MODE_1_CHOICE (2u)
#define MODEL3_CAN_ID2_B6_DI_CHASSIS_CONTROL_STATUS_DI_TRACTION_CONTROL_MODE_UI_DEV_MODE_2_CHOICE (3u)
#define MODEL3_CAN_ID2_B6_DI_CHASSIS_CONTROL_STATUS_DI_TRACTION_CONTROL_MODE_UI_ROLLS_MODE_CHOICE (4u)
#define MODEL3_CAN_ID2_B6_DI_CHASSIS_CONTROL_STATUS_DI_TRACTION_CONTROL_MODE_UI_DYNO_MODE_CHOICE (5u)

#define MODEL3_CAN_ID2_B6_DI_CHASSIS_CONTROL_STATUS_DI_PTC_STATE_UI_FAULTED_CHOICE (0u)
#define MODEL3_CAN_ID2_B6_DI_CHASSIS_CONTROL_STATUS_DI_PTC_STATE_UI_BACKUP_CHOICE (1u)
#define MODEL3_CAN_ID2_B6_DI_CHASSIS_CONTROL_STATUS_DI_PTC_STATE_UI_ON_CHOICE (2u)
#define MODEL3_CAN_ID2_B6_DI_CHASSIS_CONTROL_STATUS_DI_PTC_STATE_UI_SNA_CHOICE (3u)

#define MODEL3_CAN_ID221_VCFRONT_LV_POWER_STATE_VCFRONT_LV_POWER_STATE_INDEX_MUX0_CHOICE (0u)
#define MODEL3_CAN_ID221_VCFRONT_LV_POWER_STATE_VCFRONT_LV_POWER_STATE_INDEX_MUX1_CHOICE (1u)

#define MODEL3_CAN_ID221_VCFRONT_LV_POWER_STATE_VCFRONT_CP_LV_REQUEST_LV_OFF_CHOICE (0u)
#define MODEL3_CAN_ID221_VCFRONT_LV_POWER_STATE_VCFRONT_CP_LV_REQUEST_LV_ON_CHOICE (1u)
#define MODEL3_CAN_ID221_VCFRONT_LV_POWER_STATE_VCFRONT_CP_LV_REQUEST_LV_GOING_DOWN_CHOICE (2u)
#define MODEL3_CAN_ID221_VCFRONT_LV_POWER_STATE_VCFRONT_CP_LV_REQUEST_LV_FAULT_CHOICE (3u)

#define MODEL3_CAN_ID221_VCFRONT_LV_POWER_STATE_VCFRONT_PARK_LV_STATE_LV_OFF_CHOICE (0u)
#define MODEL3_CAN_ID221_VCFRONT_LV_POWER_STATE_VCFRONT_PARK_LV_STATE_LV_ON_CHOICE (1u)
#define MODEL3_CAN_ID221_VCFRONT_LV_POWER_STATE_VCFRONT_PARK_LV_STATE_LV_GOING_DOWN_CHOICE (2u)
#define MODEL3_CAN_ID221_VCFRONT_LV_POWER_STATE_VCFRONT_PARK_LV_STATE_LV_FAULT_CHOICE (3u)

#define MODEL3_CAN_ID221_VCFRONT_LV_POWER_STATE_VCFRONT_EPAS_LV_STATE_LV_OFF_CHOICE (0u)
#define MODEL3_CAN_ID221_VCFRONT_LV_POWER_STATE_VCFRONT_EPAS_LV_STATE_LV_ON_CHOICE (1u)
#define MODEL3_CAN_ID221_VCFRONT_LV_POWER_STATE_VCFRONT_EPAS_LV_STATE_LV_GOING_DOWN_CHOICE (2u)
#define MODEL3_CAN_ID221_VCFRONT_LV_POWER_STATE_VCFRONT_EPAS_LV_STATE_LV_FAULT_CHOICE (3u)

#define MODEL3_CAN_ID221_VCFRONT_LV_POWER_STATE_VCFRONT_ESP_LV_STATE_LV_OFF_CHOICE (0u)
#define MODEL3_CAN_ID221_VCFRONT_LV_POWER_STATE_VCFRONT_ESP_LV_STATE_LV_ON_CHOICE (1u)
#define MODEL3_CAN_ID221_VCFRONT_LV_POWER_STATE_VCFRONT_ESP_LV_STATE_LV_GOING_DOWN_CHOICE (2u)
#define MODEL3_CAN_ID221_VCFRONT_LV_POWER_STATE_VCFRONT_ESP_LV_STATE_LV_FAULT_CHOICE (3u)

#define MODEL3_CAN_ID221_VCFRONT_LV_POWER_STATE_VCFRONT_HVC_LV_REQUEST_LV_OFF_CHOICE (0u)
#define MODEL3_CAN_ID221_VCFRONT_LV_POWER_STATE_VCFRONT_HVC_LV_REQUEST_LV_ON_CHOICE (1u)
#define MODEL3_CAN_ID221_VCFRONT_LV_POWER_STATE_VCFRONT_HVC_LV_REQUEST_LV_GOING_DOWN_CHOICE (2u)
#define MODEL3_CAN_ID221_VCFRONT_LV_POWER_STATE_VCFRONT_HVC_LV_REQUEST_LV_FAULT_CHOICE (3u)

#define MODEL3_CAN_ID221_VCFRONT_LV_POWER_STATE_VCFRONT_RADC_LV_STATE_LV_OFF_CHOICE (0u)
#define MODEL3_CAN_ID221_VCFRONT_LV_POWER_STATE_VCFRONT_RADC_LV_STATE_LV_ON_CHOICE (1u)
#define MODEL3_CAN_ID221_VCFRONT_LV_POWER_STATE_VCFRONT_RADC_LV_STATE_LV_GOING_DOWN_CHOICE (2u)
#define MODEL3_CAN_ID221_VCFRONT_LV_POWER_STATE_VCFRONT_RADC_LV_STATE_LV_FAULT_CHOICE (3u)

#define MODEL3_CAN_ID221_VCFRONT_LV_POWER_STATE_VCFRONT_HVAC_COMP_LV_STATE_LV_OFF_CHOICE (0u)
#define MODEL3_CAN_ID221_VCFRONT_LV_POWER_STATE_VCFRONT_HVAC_COMP_LV_STATE_LV_ON_CHOICE (1u)
#define MODEL3_CAN_ID221_VCFRONT_LV_POWER_STATE_VCFRONT_HVAC_COMP_LV_STATE_LV_GOING_DOWN_CHOICE (2u)
#define MODEL3_CAN_ID221_VCFRONT_LV_POWER_STATE_VCFRONT_HVAC_COMP_LV_STATE_LV_FAULT_CHOICE (3u)

#define MODEL3_CAN_ID221_VCFRONT_LV_POWER_STATE_VCFRONT_TAS_LV_STATE_LV_OFF_CHOICE (0u)
#define MODEL3_CAN_ID221_VCFRONT_LV_POWER_STATE_VCFRONT_TAS_LV_STATE_LV_ON_CHOICE (1u)
#define MODEL3_CAN_ID221_VCFRONT_LV_POWER_STATE_VCFRONT_TAS_LV_STATE_LV_GOING_DOWN_CHOICE (2u)
#define MODEL3_CAN_ID221_VCFRONT_LV_POWER_STATE_VCFRONT_TAS_LV_STATE_LV_FAULT_CHOICE (3u)

#define MODEL3_CAN_ID221_VCFRONT_LV_POWER_STATE_VCFRONT_PCS_LV_STATE_LV_OFF_CHOICE (0u)
#define MODEL3_CAN_ID221_VCFRONT_LV_POWER_STATE_VCFRONT_PCS_LV_STATE_LV_ON_CHOICE (1u)
#define MODEL3_CAN_ID221_VCFRONT_LV_POWER_STATE_VCFRONT_PCS_LV_STATE_LV_GOING_DOWN_CHOICE (2u)
#define MODEL3_CAN_ID221_VCFRONT_LV_POWER_STATE_VCFRONT_PCS_LV_STATE_LV_FAULT_CHOICE (3u)

#define MODEL3_CAN_ID221_VCFRONT_LV_POWER_STATE_VCFRONT_PTC_LV_REQUEST_LV_OFF_CHOICE (0u)
#define MODEL3_CAN_ID221_VCFRONT_LV_POWER_STATE_VCFRONT_PTC_LV_REQUEST_LV_ON_CHOICE (1u)
#define MODEL3_CAN_ID221_VCFRONT_LV_POWER_STATE_VCFRONT_PTC_LV_REQUEST_LV_GOING_DOWN_CHOICE (2u)
#define MODEL3_CAN_ID221_VCFRONT_LV_POWER_STATE_VCFRONT_PTC_LV_REQUEST_LV_FAULT_CHOICE (3u)

#define MODEL3_CAN_ID221_VCFRONT_LV_POWER_STATE_VCFRONT_CMPDLV_STATE_LV_OFF_CHOICE (0u)
#define MODEL3_CAN_ID221_VCFRONT_LV_POWER_STATE_VCFRONT_CMPDLV_STATE_LV_ON_CHOICE (1u)
#define MODEL3_CAN_ID221_VCFRONT_LV_POWER_STATE_VCFRONT_CMPDLV_STATE_LV_GOING_DOWN_CHOICE (2u)
#define MODEL3_CAN_ID221_VCFRONT_LV_POWER_STATE_VCFRONT_CMPDLV_STATE_LV_FAULT_CHOICE (3u)

#define MODEL3_CAN_ID221_VCFRONT_LV_POWER_STATE_VCFRONT_SCCM_LV_REQUEST_LV_OFF_CHOICE (0u)
#define MODEL3_CAN_ID221_VCFRONT_LV_POWER_STATE_VCFRONT_SCCM_LV_REQUEST_LV_ON_CHOICE (1u)
#define MODEL3_CAN_ID221_VCFRONT_LV_POWER_STATE_VCFRONT_SCCM_LV_REQUEST_LV_GOING_DOWN_CHOICE (2u)
#define MODEL3_CAN_ID221_VCFRONT_LV_POWER_STATE_VCFRONT_SCCM_LV_REQUEST_LV_FAULT_CHOICE (3u)

#define MODEL3_CAN_ID221_VCFRONT_LV_POWER_STATE_VCFRONT_TPMS_LV_REQUEST_LV_OFF_CHOICE (0u)
#define MODEL3_CAN_ID221_VCFRONT_LV_POWER_STATE_VCFRONT_TPMS_LV_REQUEST_LV_ON_CHOICE (1u)
#define MODEL3_CAN_ID221_VCFRONT_LV_POWER_STATE_VCFRONT_TPMS_LV_REQUEST_LV_GOING_DOWN_CHOICE (2u)
#define MODEL3_CAN_ID221_VCFRONT_LV_POWER_STATE_VCFRONT_TPMS_LV_REQUEST_LV_FAULT_CHOICE (3u)

#define MODEL3_CAN_ID221_VCFRONT_LV_POWER_STATE_VCFRONT_RCM_LV_REQUEST_LV_OFF_CHOICE (0u)
#define MODEL3_CAN_ID221_VCFRONT_LV_POWER_STATE_VCFRONT_RCM_LV_REQUEST_LV_ON_CHOICE (1u)
#define MODEL3_CAN_ID221_VCFRONT_LV_POWER_STATE_VCFRONT_RCM_LV_REQUEST_LV_GOING_DOWN_CHOICE (2u)
#define MODEL3_CAN_ID221_VCFRONT_LV_POWER_STATE_VCFRONT_RCM_LV_REQUEST_LV_FAULT_CHOICE (3u)

#define MODEL3_CAN_ID221_VCFRONT_LV_POWER_STATE_VCFRONT_I_BOOSTER_LV_STATE_LV_OFF_CHOICE (0u)
#define MODEL3_CAN_ID221_VCFRONT_LV_POWER_STATE_VCFRONT_I_BOOSTER_LV_STATE_LV_ON_CHOICE (1u)
#define MODEL3_CAN_ID221_VCFRONT_LV_POWER_STATE_VCFRONT_I_BOOSTER_LV_STATE_LV_GOING_DOWN_CHOICE (2u)
#define MODEL3_CAN_ID221_VCFRONT_LV_POWER_STATE_VCFRONT_I_BOOSTER_LV_STATE_LV_FAULT_CHOICE (3u)

#define MODEL3_CAN_ID221_VCFRONT_LV_POWER_STATE_VCFRONT_TUNER_LV_REQUEST_LV_OFF_CHOICE (0u)
#define MODEL3_CAN_ID221_VCFRONT_LV_POWER_STATE_VCFRONT_TUNER_LV_REQUEST_LV_ON_CHOICE (1u)
#define MODEL3_CAN_ID221_VCFRONT_LV_POWER_STATE_VCFRONT_TUNER_LV_REQUEST_LV_GOING_DOWN_CHOICE (2u)
#define MODEL3_CAN_ID221_VCFRONT_LV_POWER_STATE_VCFRONT_TUNER_LV_REQUEST_LV_FAULT_CHOICE (3u)

#define MODEL3_CAN_ID221_VCFRONT_LV_POWER_STATE_VCFRONT_AMPLIFIER_LV_REQUEST_LV_OFF_CHOICE (0u)
#define MODEL3_CAN_ID221_VCFRONT_LV_POWER_STATE_VCFRONT_AMPLIFIER_LV_REQUEST_LV_ON_CHOICE (1u)
#define MODEL3_CAN_ID221_VCFRONT_LV_POWER_STATE_VCFRONT_AMPLIFIER_LV_REQUEST_LV_GOING_DOWN_CHOICE (2u)
#define MODEL3_CAN_ID221_VCFRONT_LV_POWER_STATE_VCFRONT_AMPLIFIER_LV_REQUEST_LV_FAULT_CHOICE (3u)

#define MODEL3_CAN_ID221_VCFRONT_LV_POWER_STATE_VCFRONT_DAS1_HIGH_CURRENT_LV_STATE_LV_OFF_CHOICE (0u)
#define MODEL3_CAN_ID221_VCFRONT_LV_POWER_STATE_VCFRONT_DAS1_HIGH_CURRENT_LV_STATE_LV_ON_CHOICE (1u)
#define MODEL3_CAN_ID221_VCFRONT_LV_POWER_STATE_VCFRONT_DAS1_HIGH_CURRENT_LV_STATE_LV_GOING_DOWN_CHOICE (2u)
#define MODEL3_CAN_ID221_VCFRONT_LV_POWER_STATE_VCFRONT_DAS1_HIGH_CURRENT_LV_STATE_LV_FAULT_CHOICE (3u)

#define MODEL3_CAN_ID221_VCFRONT_LV_POWER_STATE_VCFRONT_DAS2_HIGH_CURRENT_LV_STATE_LV_OFF_CHOICE (0u)
#define MODEL3_CAN_ID221_VCFRONT_LV_POWER_STATE_VCFRONT_DAS2_HIGH_CURRENT_LV_STATE_LV_ON_CHOICE (1u)
#define MODEL3_CAN_ID221_VCFRONT_LV_POWER_STATE_VCFRONT_DAS2_HIGH_CURRENT_LV_STATE_LV_GOING_DOWN_CHOICE (2u)
#define MODEL3_CAN_ID221_VCFRONT_LV_POWER_STATE_VCFRONT_DAS2_HIGH_CURRENT_LV_STATE_LV_FAULT_CHOICE (3u)

#define MODEL3_CAN_ID221_VCFRONT_LV_POWER_STATE_VCFRONT_DIR_LV_REQUEST_LV_OFF_CHOICE (0u)
#define MODEL3_CAN_ID221_VCFRONT_LV_POWER_STATE_VCFRONT_DIR_LV_REQUEST_LV_ON_CHOICE (1u)
#define MODEL3_CAN_ID221_VCFRONT_LV_POWER_STATE_VCFRONT_DIR_LV_REQUEST_LV_GOING_DOWN_CHOICE (2u)
#define MODEL3_CAN_ID221_VCFRONT_LV_POWER_STATE_VCFRONT_DIR_LV_REQUEST_LV_FAULT_CHOICE (3u)

#define MODEL3_CAN_ID221_VCFRONT_LV_POWER_STATE_VCFRONT_DIF_LV_STATE_LV_OFF_CHOICE (0u)
#define MODEL3_CAN_ID221_VCFRONT_LV_POWER_STATE_VCFRONT_DIF_LV_STATE_LV_ON_CHOICE (1u)
#define MODEL3_CAN_ID221_VCFRONT_LV_POWER_STATE_VCFRONT_DIF_LV_STATE_LV_GOING_DOWN_CHOICE (2u)
#define MODEL3_CAN_ID221_VCFRONT_LV_POWER_STATE_VCFRONT_DIF_LV_STATE_LV_FAULT_CHOICE (3u)

#define MODEL3_CAN_ID221_VCFRONT_LV_POWER_STATE_VCFRONT_OIL_PUMP_FRONT_LV_STATE_LV_OFF_CHOICE (0u)
#define MODEL3_CAN_ID221_VCFRONT_LV_POWER_STATE_VCFRONT_OIL_PUMP_FRONT_LV_STATE_LV_ON_CHOICE (1u)
#define MODEL3_CAN_ID221_VCFRONT_LV_POWER_STATE_VCFRONT_OIL_PUMP_FRONT_LV_STATE_LV_GOING_DOWN_CHOICE (2u)
#define MODEL3_CAN_ID221_VCFRONT_LV_POWER_STATE_VCFRONT_OIL_PUMP_FRONT_LV_STATE_LV_FAULT_CHOICE (3u)

#define MODEL3_CAN_ID221_VCFRONT_LV_POWER_STATE_VCFRONT_OIL_PUMP_REAR_LV_REQUEST_LV_OFF_CHOICE (0u)
#define MODEL3_CAN_ID221_VCFRONT_LV_POWER_STATE_VCFRONT_OIL_PUMP_REAR_LV_REQUEST_LV_ON_CHOICE (1u)
#define MODEL3_CAN_ID221_VCFRONT_LV_POWER_STATE_VCFRONT_OIL_PUMP_REAR_LV_REQUEST_LV_GOING_DOWN_CHOICE (2u)
#define MODEL3_CAN_ID221_VCFRONT_LV_POWER_STATE_VCFRONT_OIL_PUMP_REAR_LV_REQUEST_LV_FAULT_CHOICE (3u)

#define MODEL3_CAN_ID221_VCFRONT_LV_POWER_STATE_VCFRONT_OCS_LV_REQUEST_LV_OFF_CHOICE (0u)
#define MODEL3_CAN_ID221_VCFRONT_LV_POWER_STATE_VCFRONT_OCS_LV_REQUEST_LV_ON_CHOICE (1u)
#define MODEL3_CAN_ID221_VCFRONT_LV_POWER_STATE_VCFRONT_OCS_LV_REQUEST_LV_GOING_DOWN_CHOICE (2u)
#define MODEL3_CAN_ID221_VCFRONT_LV_POWER_STATE_VCFRONT_OCS_LV_REQUEST_LV_FAULT_CHOICE (3u)

#define MODEL3_CAN_ID221_VCFRONT_LV_POWER_STATE_VCFRONT_VCLEFT_HI_CURRENT_LV_STATE_LV_OFF_CHOICE (0u)
#define MODEL3_CAN_ID221_VCFRONT_LV_POWER_STATE_VCFRONT_VCLEFT_HI_CURRENT_LV_STATE_LV_ON_CHOICE (1u)
#define MODEL3_CAN_ID221_VCFRONT_LV_POWER_STATE_VCFRONT_VCLEFT_HI_CURRENT_LV_STATE_LV_GOING_DOWN_CHOICE (2u)
#define MODEL3_CAN_ID221_VCFRONT_LV_POWER_STATE_VCFRONT_VCLEFT_HI_CURRENT_LV_STATE_LV_FAULT_CHOICE (3u)

#define MODEL3_CAN_ID221_VCFRONT_LV_POWER_STATE_VCFRONT_VCRIGHT_HI_CURRENT_LV_STATE_LV_OFF_CHOICE (0u)
#define MODEL3_CAN_ID221_VCFRONT_LV_POWER_STATE_VCFRONT_VCRIGHT_HI_CURRENT_LV_STATE_LV_ON_CHOICE (1u)
#define MODEL3_CAN_ID221_VCFRONT_LV_POWER_STATE_VCFRONT_VCRIGHT_HI_CURRENT_LV_STATE_LV_GOING_DOWN_CHOICE (2u)
#define MODEL3_CAN_ID221_VCFRONT_LV_POWER_STATE_VCFRONT_VCRIGHT_HI_CURRENT_LV_STATE_LV_FAULT_CHOICE (3u)

#define MODEL3_CAN_ID221_VCFRONT_LV_POWER_STATE_VCFRONT_UI_HI_CURRENT_LV_STATE_LV_OFF_CHOICE (0u)
#define MODEL3_CAN_ID221_VCFRONT_LV_POWER_STATE_VCFRONT_UI_HI_CURRENT_LV_STATE_LV_ON_CHOICE (1u)
#define MODEL3_CAN_ID221_VCFRONT_LV_POWER_STATE_VCFRONT_UI_HI_CURRENT_LV_STATE_LV_GOING_DOWN_CHOICE (2u)
#define MODEL3_CAN_ID221_VCFRONT_LV_POWER_STATE_VCFRONT_UI_HI_CURRENT_LV_STATE_LV_FAULT_CHOICE (3u)

#define MODEL3_CAN_ID2_F1_VCFRONT_E_FUSE_DEBUG_STATUS_VCFRONT_E_FUSE_DEBUG_STATUS_INDEX_VCF_DBG_STS_VCRIGHT_CHOICE (0u)
#define MODEL3_CAN_ID2_F1_VCFRONT_E_FUSE_DEBUG_STATUS_VCFRONT_E_FUSE_DEBUG_STATUS_INDEX_VCF_DBG_STS_VCLEFT_CHOICE (1u)
#define MODEL3_CAN_ID2_F1_VCFRONT_E_FUSE_DEBUG_STATUS_VCFRONT_E_FUSE_DEBUG_STATUS_INDEX_VCF_DBG_STS_PCS_CHOICE (2u)
#define MODEL3_CAN_ID2_F1_VCFRONT_E_FUSE_DEBUG_STATUS_VCFRONT_E_FUSE_DEBUG_STATUS_INDEX_VCF_DBG_STS_IBOOSTER_CHOICE (3u)
#define MODEL3_CAN_ID2_F1_VCFRONT_E_FUSE_DEBUG_STATUS_VCFRONT_E_FUSE_DEBUG_STATUS_INDEX_VCF_DBG_STS_EPAS3_P_CHOICE (4u)
#define MODEL3_CAN_ID2_F1_VCFRONT_E_FUSE_DEBUG_STATUS_VCFRONT_E_FUSE_DEBUG_STATUS_INDEX_VCF_DBG_STS_EPAS3_S_CHOICE (5u)
#define MODEL3_CAN_ID2_F1_VCFRONT_E_FUSE_DEBUG_STATUS_VCFRONT_E_FUSE_DEBUG_STATUS_INDEX_VCF_DBG_STS_ESP_MOTOR_CHOICE (6u)
#define MODEL3_CAN_ID2_F1_VCFRONT_E_FUSE_DEBUG_STATUS_VCFRONT_E_FUSE_DEBUG_STATUS_INDEX_VCF_DBG_STS_ESP_VALVE_CHOICE (7u)
#define MODEL3_CAN_ID2_F1_VCFRONT_E_FUSE_DEBUG_STATUS_VCFRONT_E_FUSE_DEBUG_STATUS_INDEX_VCF_DBG_STS_AUTOPILOT_1_CHOICE (8u)
#define MODEL3_CAN_ID2_F1_VCFRONT_E_FUSE_DEBUG_STATUS_VCFRONT_E_FUSE_DEBUG_STATUS_INDEX_VCF_DBG_STS_AUTOPILOT_2_CHOICE (9u)
#define MODEL3_CAN_ID2_F1_VCFRONT_E_FUSE_DEBUG_STATUS_VCFRONT_E_FUSE_DEBUG_STATUS_INDEX_VCF_DBG_STS_SLEEP_BYPASS_CHOICE (10u)
#define MODEL3_CAN_ID2_F1_VCFRONT_E_FUSE_DEBUG_STATUS_VCFRONT_E_FUSE_DEBUG_STATUS_INDEX_VCF_DBG_STS_UI_CHOICE (11u)
#define MODEL3_CAN_ID2_F1_VCFRONT_E_FUSE_DEBUG_STATUS_VCFRONT_E_FUSE_DEBUG_STATUS_INDEX_VCF_DBG_STS_HEADLAMPS_CHOICE (12u)
#define MODEL3_CAN_ID2_F1_VCFRONT_E_FUSE_DEBUG_STATUS_VCFRONT_E_FUSE_DEBUG_STATUS_INDEX_VCF_DBG_STS_VBAT_FUSED_HIGH_CURRENT_CHOICE (13u)
#define MODEL3_CAN_ID2_F1_VCFRONT_E_FUSE_DEBUG_STATUS_VCFRONT_E_FUSE_DEBUG_STATUS_INDEX_VCF_DBG_STS_PUMPS_CHOICE (14u)
#define MODEL3_CAN_ID2_F1_VCFRONT_E_FUSE_DEBUG_STATUS_VCFRONT_E_FUSE_DEBUG_STATUS_INDEX_VCF_DBG_STS_RAILS_A_B_CHOICE (15u)
#define MODEL3_CAN_ID2_F1_VCFRONT_E_FUSE_DEBUG_STATUS_VCFRONT_E_FUSE_DEBUG_STATUS_INDEX_VCF_DBG_STS_MISC_RAILS_CHOICE (16u)
#define MODEL3_CAN_ID2_F1_VCFRONT_E_FUSE_DEBUG_STATUS_VCFRONT_E_FUSE_DEBUG_STATUS_INDEX_VCF_DBG_STS_LV_BATTERY_DEBUG_CHOICE (17u)
#define MODEL3_CAN_ID2_F1_VCFRONT_E_FUSE_DEBUG_STATUS_VCFRONT_E_FUSE_DEBUG_STATUS_INDEX_VCF_DBG_STS_INVALID_CHOICE (18u)

#define MODEL3_CAN_ID2_F1_VCFRONT_E_FUSE_DEBUG_STATUS_VCFRONT_EPAS3_P_STATE_EFUSE_STATE_OFF_CHOICE (0u)
#define MODEL3_CAN_ID2_F1_VCFRONT_E_FUSE_DEBUG_STATUS_VCFRONT_EPAS3_P_STATE_EFUSE_STATE_ON_CHOICE (1u)
#define MODEL3_CAN_ID2_F1_VCFRONT_E_FUSE_DEBUG_STATUS_VCFRONT_EPAS3_P_STATE_EFUSE_STATE_LOCKED_OUT_CHOICE (2u)

#define MODEL3_CAN_ID2_F1_VCFRONT_E_FUSE_DEBUG_STATUS_VCFRONT_EPAS3_S_STATE_EFUSE_STATE_OFF_CHOICE (0u)
#define MODEL3_CAN_ID2_F1_VCFRONT_E_FUSE_DEBUG_STATUS_VCFRONT_EPAS3_S_STATE_EFUSE_STATE_ON_CHOICE (1u)
#define MODEL3_CAN_ID2_F1_VCFRONT_E_FUSE_DEBUG_STATUS_VCFRONT_EPAS3_S_STATE_EFUSE_STATE_LOCKED_OUT_CHOICE (2u)

#define MODEL3_CAN_ID2_F1_VCFRONT_E_FUSE_DEBUG_STATUS_VCFRONT_ESP_MOTOR_STATE_EFUSE_STATE_OFF_CHOICE (0u)
#define MODEL3_CAN_ID2_F1_VCFRONT_E_FUSE_DEBUG_STATUS_VCFRONT_ESP_MOTOR_STATE_EFUSE_STATE_ON_CHOICE (1u)
#define MODEL3_CAN_ID2_F1_VCFRONT_E_FUSE_DEBUG_STATUS_VCFRONT_ESP_MOTOR_STATE_EFUSE_STATE_LOCKED_OUT_CHOICE (2u)

#define MODEL3_CAN_ID2_F1_VCFRONT_E_FUSE_DEBUG_STATUS_VCFRONT_ESP_VALVE_STATE_EFUSE_STATE_OFF_CHOICE (0u)
#define MODEL3_CAN_ID2_F1_VCFRONT_E_FUSE_DEBUG_STATUS_VCFRONT_ESP_VALVE_STATE_EFUSE_STATE_ON_CHOICE (1u)
#define MODEL3_CAN_ID2_F1_VCFRONT_E_FUSE_DEBUG_STATUS_VCFRONT_ESP_VALVE_STATE_EFUSE_STATE_LOCKED_OUT_CHOICE (2u)

#define MODEL3_CAN_ID2_F1_VCFRONT_E_FUSE_DEBUG_STATUS_VCFRONT_PCS_STATE_EFUSE_STATE_OFF_CHOICE (0u)
#define MODEL3_CAN_ID2_F1_VCFRONT_E_FUSE_DEBUG_STATUS_VCFRONT_PCS_STATE_EFUSE_STATE_ON_CHOICE (1u)
#define MODEL3_CAN_ID2_F1_VCFRONT_E_FUSE_DEBUG_STATUS_VCFRONT_PCS_STATE_EFUSE_STATE_LOCKED_OUT_CHOICE (2u)

#define MODEL3_CAN_ID2_F1_VCFRONT_E_FUSE_DEBUG_STATUS_VCFRONT_AUTOPILOT1_STATE_EFUSE_STATE_OFF_CHOICE (0u)
#define MODEL3_CAN_ID2_F1_VCFRONT_E_FUSE_DEBUG_STATUS_VCFRONT_AUTOPILOT1_STATE_EFUSE_STATE_ON_CHOICE (1u)
#define MODEL3_CAN_ID2_F1_VCFRONT_E_FUSE_DEBUG_STATUS_VCFRONT_AUTOPILOT1_STATE_EFUSE_STATE_LOCKED_OUT_CHOICE (2u)

#define MODEL3_CAN_ID2_F1_VCFRONT_E_FUSE_DEBUG_STATUS_VCFRONT_AUTOPILOT2_STATE_EFUSE_STATE_OFF_CHOICE (0u)
#define MODEL3_CAN_ID2_F1_VCFRONT_E_FUSE_DEBUG_STATUS_VCFRONT_AUTOPILOT2_STATE_EFUSE_STATE_ON_CHOICE (1u)
#define MODEL3_CAN_ID2_F1_VCFRONT_E_FUSE_DEBUG_STATUS_VCFRONT_AUTOPILOT2_STATE_EFUSE_STATE_LOCKED_OUT_CHOICE (2u)

#define MODEL3_CAN_ID2_F1_VCFRONT_E_FUSE_DEBUG_STATUS_VCFRONT_I_BOOSTER_STATE_EFUSE_STATE_OFF_CHOICE (0u)
#define MODEL3_CAN_ID2_F1_VCFRONT_E_FUSE_DEBUG_STATUS_VCFRONT_I_BOOSTER_STATE_EFUSE_STATE_ON_CHOICE (1u)
#define MODEL3_CAN_ID2_F1_VCFRONT_E_FUSE_DEBUG_STATUS_VCFRONT_I_BOOSTER_STATE_EFUSE_STATE_LOCKED_OUT_CHOICE (2u)

#define MODEL3_CAN_ID2_F1_VCFRONT_E_FUSE_DEBUG_STATUS_VCFRONT_LEFT_CONTROLLER_STATE_EFUSE_STATE_OFF_CHOICE (0u)
#define MODEL3_CAN_ID2_F1_VCFRONT_E_FUSE_DEBUG_STATUS_VCFRONT_LEFT_CONTROLLER_STATE_EFUSE_STATE_ON_CHOICE (1u)
#define MODEL3_CAN_ID2_F1_VCFRONT_E_FUSE_DEBUG_STATUS_VCFRONT_LEFT_CONTROLLER_STATE_EFUSE_STATE_LOCKED_OUT_CHOICE (2u)

#define MODEL3_CAN_ID2_F1_VCFRONT_E_FUSE_DEBUG_STATUS_VCFRONT_RIGHT_CONTROLLER_STATE_EFUSE_STATE_OFF_CHOICE (0u)
#define MODEL3_CAN_ID2_F1_VCFRONT_E_FUSE_DEBUG_STATUS_VCFRONT_RIGHT_CONTROLLER_STATE_EFUSE_STATE_ON_CHOICE (1u)
#define MODEL3_CAN_ID2_F1_VCFRONT_E_FUSE_DEBUG_STATUS_VCFRONT_RIGHT_CONTROLLER_STATE_EFUSE_STATE_LOCKED_OUT_CHOICE (2u)

#define MODEL3_CAN_ID2_F1_VCFRONT_E_FUSE_DEBUG_STATUS_VCFRONT_VBAT_FUSED_SELF_TEST_RESULT_EFUSE_SELF_TEST_EFUSE_RESULT_NOT_RUN_CHOICE (0u)
#define MODEL3_CAN_ID2_F1_VCFRONT_E_FUSE_DEBUG_STATUS_VCFRONT_VBAT_FUSED_SELF_TEST_RESULT_EFUSE_SELF_TEST_EFUSE_RESULT_RUNNING_CHOICE (1u)
#define MODEL3_CAN_ID2_F1_VCFRONT_E_FUSE_DEBUG_STATUS_VCFRONT_VBAT_FUSED_SELF_TEST_RESULT_EFUSE_SELF_TEST_EFUSE_RESULT_PASSED_CHOICE (2u)
#define MODEL3_CAN_ID2_F1_VCFRONT_E_FUSE_DEBUG_STATUS_VCFRONT_VBAT_FUSED_SELF_TEST_RESULT_EFUSE_SELF_TEST_EFUSE_RESULT_FAILED_RAILS_UNSTABLE_CHOICE (3u)
#define MODEL3_CAN_ID2_F1_VCFRONT_E_FUSE_DEBUG_STATUS_VCFRONT_VBAT_FUSED_SELF_TEST_RESULT_EFUSE_SELF_TEST_EFUSE_RESULT_FAILED_EFUSE_OUTPUT_SHORT_CHOICE (4u)
#define MODEL3_CAN_ID2_F1_VCFRONT_E_FUSE_DEBUG_STATUS_VCFRONT_VBAT_FUSED_SELF_TEST_RESULT_EFUSE_SELF_TEST_EFUSE_RESULT_FAILED_POWER_FET_STUCK_ON_CHOICE (5u)
#define MODEL3_CAN_ID2_F1_VCFRONT_E_FUSE_DEBUG_STATUS_VCFRONT_VBAT_FUSED_SELF_TEST_RESULT_EFUSE_SELF_TEST_EFUSE_RESULT_FAILED_ENABLE_LOW_MALFUNCTION_CHOICE (6u)
#define MODEL3_CAN_ID2_F1_VCFRONT_E_FUSE_DEBUG_STATUS_VCFRONT_VBAT_FUSED_SELF_TEST_RESULT_EFUSE_SELF_TEST_EFUSE_RESULT_FAILED_POWER_FET_CHANNEL_OPEN_CHOICE (7u)
#define MODEL3_CAN_ID2_F1_VCFRONT_E_FUSE_DEBUG_STATUS_VCFRONT_VBAT_FUSED_SELF_TEST_RESULT_EFUSE_SELF_TEST_EFUSE_RESULT_FAILED_ENABLE_HIGH_MALFUNCTION_CHOICE (8u)
#define MODEL3_CAN_ID2_F1_VCFRONT_E_FUSE_DEBUG_STATUS_VCFRONT_VBAT_FUSED_SELF_TEST_RESULT_EFUSE_SELF_TEST_EFUSE_RESULT_FAILED_TURN_OFF_PATH_TOO_SLOW_CHOICE (9u)
#define MODEL3_CAN_ID2_F1_VCFRONT_E_FUSE_DEBUG_STATUS_VCFRONT_VBAT_FUSED_SELF_TEST_RESULT_EFUSE_SELF_TEST_EFUSE_RESULT_FAILED_NOT_LATCHED_CHOICE (10u)
#define MODEL3_CAN_ID2_F1_VCFRONT_E_FUSE_DEBUG_STATUS_VCFRONT_VBAT_FUSED_SELF_TEST_RESULT_EFUSE_SELF_TEST_EFUSE_RESULT_SKIPPED_CHOICE (11u)

#define MODEL3_CAN_ID2_F1_VCFRONT_E_FUSE_DEBUG_STATUS_VCFRONT_EPAS3_P_SELF_TEST_RESULT_EFUSE_SELF_TEST_EFUSE_RESULT_NOT_RUN_CHOICE (0u)
#define MODEL3_CAN_ID2_F1_VCFRONT_E_FUSE_DEBUG_STATUS_VCFRONT_EPAS3_P_SELF_TEST_RESULT_EFUSE_SELF_TEST_EFUSE_RESULT_RUNNING_CHOICE (1u)
#define MODEL3_CAN_ID2_F1_VCFRONT_E_FUSE_DEBUG_STATUS_VCFRONT_EPAS3_P_SELF_TEST_RESULT_EFUSE_SELF_TEST_EFUSE_RESULT_PASSED_CHOICE (2u)
#define MODEL3_CAN_ID2_F1_VCFRONT_E_FUSE_DEBUG_STATUS_VCFRONT_EPAS3_P_SELF_TEST_RESULT_EFUSE_SELF_TEST_EFUSE_RESULT_FAILED_RAILS_UNSTABLE_CHOICE (3u)
#define MODEL3_CAN_ID2_F1_VCFRONT_E_FUSE_DEBUG_STATUS_VCFRONT_EPAS3_P_SELF_TEST_RESULT_EFUSE_SELF_TEST_EFUSE_RESULT_FAILED_EFUSE_OUTPUT_SHORT_CHOICE (4u)
#define MODEL3_CAN_ID2_F1_VCFRONT_E_FUSE_DEBUG_STATUS_VCFRONT_EPAS3_P_SELF_TEST_RESULT_EFUSE_SELF_TEST_EFUSE_RESULT_FAILED_POWER_FET_STUCK_ON_CHOICE (5u)
#define MODEL3_CAN_ID2_F1_VCFRONT_E_FUSE_DEBUG_STATUS_VCFRONT_EPAS3_P_SELF_TEST_RESULT_EFUSE_SELF_TEST_EFUSE_RESULT_FAILED_ENABLE_LOW_MALFUNCTION_CHOICE (6u)
#define MODEL3_CAN_ID2_F1_VCFRONT_E_FUSE_DEBUG_STATUS_VCFRONT_EPAS3_P_SELF_TEST_RESULT_EFUSE_SELF_TEST_EFUSE_RESULT_FAILED_POWER_FET_CHANNEL_OPEN_CHOICE (7u)
#define MODEL3_CAN_ID2_F1_VCFRONT_E_FUSE_DEBUG_STATUS_VCFRONT_EPAS3_P_SELF_TEST_RESULT_EFUSE_SELF_TEST_EFUSE_RESULT_FAILED_ENABLE_HIGH_MALFUNCTION_CHOICE (8u)
#define MODEL3_CAN_ID2_F1_VCFRONT_E_FUSE_DEBUG_STATUS_VCFRONT_EPAS3_P_SELF_TEST_RESULT_EFUSE_SELF_TEST_EFUSE_RESULT_FAILED_TURN_OFF_PATH_TOO_SLOW_CHOICE (9u)
#define MODEL3_CAN_ID2_F1_VCFRONT_E_FUSE_DEBUG_STATUS_VCFRONT_EPAS3_P_SELF_TEST_RESULT_EFUSE_SELF_TEST_EFUSE_RESULT_FAILED_NOT_LATCHED_CHOICE (10u)
#define MODEL3_CAN_ID2_F1_VCFRONT_E_FUSE_DEBUG_STATUS_VCFRONT_EPAS3_P_SELF_TEST_RESULT_EFUSE_SELF_TEST_EFUSE_RESULT_SKIPPED_CHOICE (11u)

#define MODEL3_CAN_ID2_F1_VCFRONT_E_FUSE_DEBUG_STATUS_VCFRONT_EPAS3_S_SELF_TEST_RESULT_EFUSE_SELF_TEST_EFUSE_RESULT_NOT_RUN_CHOICE (0u)
#define MODEL3_CAN_ID2_F1_VCFRONT_E_FUSE_DEBUG_STATUS_VCFRONT_EPAS3_S_SELF_TEST_RESULT_EFUSE_SELF_TEST_EFUSE_RESULT_RUNNING_CHOICE (1u)
#define MODEL3_CAN_ID2_F1_VCFRONT_E_FUSE_DEBUG_STATUS_VCFRONT_EPAS3_S_SELF_TEST_RESULT_EFUSE_SELF_TEST_EFUSE_RESULT_PASSED_CHOICE (2u)
#define MODEL3_CAN_ID2_F1_VCFRONT_E_FUSE_DEBUG_STATUS_VCFRONT_EPAS3_S_SELF_TEST_RESULT_EFUSE_SELF_TEST_EFUSE_RESULT_FAILED_RAILS_UNSTABLE_CHOICE (3u)
#define MODEL3_CAN_ID2_F1_VCFRONT_E_FUSE_DEBUG_STATUS_VCFRONT_EPAS3_S_SELF_TEST_RESULT_EFUSE_SELF_TEST_EFUSE_RESULT_FAILED_EFUSE_OUTPUT_SHORT_CHOICE (4u)
#define MODEL3_CAN_ID2_F1_VCFRONT_E_FUSE_DEBUG_STATUS_VCFRONT_EPAS3_S_SELF_TEST_RESULT_EFUSE_SELF_TEST_EFUSE_RESULT_FAILED_POWER_FET_STUCK_ON_CHOICE (5u)
#define MODEL3_CAN_ID2_F1_VCFRONT_E_FUSE_DEBUG_STATUS_VCFRONT_EPAS3_S_SELF_TEST_RESULT_EFUSE_SELF_TEST_EFUSE_RESULT_FAILED_ENABLE_LOW_MALFUNCTION_CHOICE (6u)
#define MODEL3_CAN_ID2_F1_VCFRONT_E_FUSE_DEBUG_STATUS_VCFRONT_EPAS3_S_SELF_TEST_RESULT_EFUSE_SELF_TEST_EFUSE_RESULT_FAILED_POWER_FET_CHANNEL_OPEN_CHOICE (7u)
#define MODEL3_CAN_ID2_F1_VCFRONT_E_FUSE_DEBUG_STATUS_VCFRONT_EPAS3_S_SELF_TEST_RESULT_EFUSE_SELF_TEST_EFUSE_RESULT_FAILED_ENABLE_HIGH_MALFUNCTION_CHOICE (8u)
#define MODEL3_CAN_ID2_F1_VCFRONT_E_FUSE_DEBUG_STATUS_VCFRONT_EPAS3_S_SELF_TEST_RESULT_EFUSE_SELF_TEST_EFUSE_RESULT_FAILED_TURN_OFF_PATH_TOO_SLOW_CHOICE (9u)
#define MODEL3_CAN_ID2_F1_VCFRONT_E_FUSE_DEBUG_STATUS_VCFRONT_EPAS3_S_SELF_TEST_RESULT_EFUSE_SELF_TEST_EFUSE_RESULT_FAILED_NOT_LATCHED_CHOICE (10u)
#define MODEL3_CAN_ID2_F1_VCFRONT_E_FUSE_DEBUG_STATUS_VCFRONT_EPAS3_S_SELF_TEST_RESULT_EFUSE_SELF_TEST_EFUSE_RESULT_SKIPPED_CHOICE (11u)

#define MODEL3_CAN_ID2_F1_VCFRONT_E_FUSE_DEBUG_STATUS_VCFRONT_ESP_MOTOR_SELF_TEST_RESULT_EFUSE_SELF_TEST_EFUSE_RESULT_NOT_RUN_CHOICE (0u)
#define MODEL3_CAN_ID2_F1_VCFRONT_E_FUSE_DEBUG_STATUS_VCFRONT_ESP_MOTOR_SELF_TEST_RESULT_EFUSE_SELF_TEST_EFUSE_RESULT_RUNNING_CHOICE (1u)
#define MODEL3_CAN_ID2_F1_VCFRONT_E_FUSE_DEBUG_STATUS_VCFRONT_ESP_MOTOR_SELF_TEST_RESULT_EFUSE_SELF_TEST_EFUSE_RESULT_PASSED_CHOICE (2u)
#define MODEL3_CAN_ID2_F1_VCFRONT_E_FUSE_DEBUG_STATUS_VCFRONT_ESP_MOTOR_SELF_TEST_RESULT_EFUSE_SELF_TEST_EFUSE_RESULT_FAILED_RAILS_UNSTABLE_CHOICE (3u)
#define MODEL3_CAN_ID2_F1_VCFRONT_E_FUSE_DEBUG_STATUS_VCFRONT_ESP_MOTOR_SELF_TEST_RESULT_EFUSE_SELF_TEST_EFUSE_RESULT_FAILED_EFUSE_OUTPUT_SHORT_CHOICE (4u)
#define MODEL3_CAN_ID2_F1_VCFRONT_E_FUSE_DEBUG_STATUS_VCFRONT_ESP_MOTOR_SELF_TEST_RESULT_EFUSE_SELF_TEST_EFUSE_RESULT_FAILED_POWER_FET_STUCK_ON_CHOICE (5u)
#define MODEL3_CAN_ID2_F1_VCFRONT_E_FUSE_DEBUG_STATUS_VCFRONT_ESP_MOTOR_SELF_TEST_RESULT_EFUSE_SELF_TEST_EFUSE_RESULT_FAILED_ENABLE_LOW_MALFUNCTION_CHOICE (6u)
#define MODEL3_CAN_ID2_F1_VCFRONT_E_FUSE_DEBUG_STATUS_VCFRONT_ESP_MOTOR_SELF_TEST_RESULT_EFUSE_SELF_TEST_EFUSE_RESULT_FAILED_POWER_FET_CHANNEL_OPEN_CHOICE (7u)
#define MODEL3_CAN_ID2_F1_VCFRONT_E_FUSE_DEBUG_STATUS_VCFRONT_ESP_MOTOR_SELF_TEST_RESULT_EFUSE_SELF_TEST_EFUSE_RESULT_FAILED_ENABLE_HIGH_MALFUNCTION_CHOICE (8u)
#define MODEL3_CAN_ID2_F1_VCFRONT_E_FUSE_DEBUG_STATUS_VCFRONT_ESP_MOTOR_SELF_TEST_RESULT_EFUSE_SELF_TEST_EFUSE_RESULT_FAILED_TURN_OFF_PATH_TOO_SLOW_CHOICE (9u)
#define MODEL3_CAN_ID2_F1_VCFRONT_E_FUSE_DEBUG_STATUS_VCFRONT_ESP_MOTOR_SELF_TEST_RESULT_EFUSE_SELF_TEST_EFUSE_RESULT_FAILED_NOT_LATCHED_CHOICE (10u)
#define MODEL3_CAN_ID2_F1_VCFRONT_E_FUSE_DEBUG_STATUS_VCFRONT_ESP_MOTOR_SELF_TEST_RESULT_EFUSE_SELF_TEST_EFUSE_RESULT_SKIPPED_CHOICE (11u)

#define MODEL3_CAN_ID2_F1_VCFRONT_E_FUSE_DEBUG_STATUS_VCFRONT_I_BOOSTER_SELF_TEST_RESULT_EFUSE_SELF_TEST_EFUSE_RESULT_NOT_RUN_CHOICE (0u)
#define MODEL3_CAN_ID2_F1_VCFRONT_E_FUSE_DEBUG_STATUS_VCFRONT_I_BOOSTER_SELF_TEST_RESULT_EFUSE_SELF_TEST_EFUSE_RESULT_RUNNING_CHOICE (1u)
#define MODEL3_CAN_ID2_F1_VCFRONT_E_FUSE_DEBUG_STATUS_VCFRONT_I_BOOSTER_SELF_TEST_RESULT_EFUSE_SELF_TEST_EFUSE_RESULT_PASSED_CHOICE (2u)
#define MODEL3_CAN_ID2_F1_VCFRONT_E_FUSE_DEBUG_STATUS_VCFRONT_I_BOOSTER_SELF_TEST_RESULT_EFUSE_SELF_TEST_EFUSE_RESULT_FAILED_RAILS_UNSTABLE_CHOICE (3u)
#define MODEL3_CAN_ID2_F1_VCFRONT_E_FUSE_DEBUG_STATUS_VCFRONT_I_BOOSTER_SELF_TEST_RESULT_EFUSE_SELF_TEST_EFUSE_RESULT_FAILED_EFUSE_OUTPUT_SHORT_CHOICE (4u)
#define MODEL3_CAN_ID2_F1_VCFRONT_E_FUSE_DEBUG_STATUS_VCFRONT_I_BOOSTER_SELF_TEST_RESULT_EFUSE_SELF_TEST_EFUSE_RESULT_FAILED_POWER_FET_STUCK_ON_CHOICE (5u)
#define MODEL3_CAN_ID2_F1_VCFRONT_E_FUSE_DEBUG_STATUS_VCFRONT_I_BOOSTER_SELF_TEST_RESULT_EFUSE_SELF_TEST_EFUSE_RESULT_FAILED_ENABLE_LOW_MALFUNCTION_CHOICE (6u)
#define MODEL3_CAN_ID2_F1_VCFRONT_E_FUSE_DEBUG_STATUS_VCFRONT_I_BOOSTER_SELF_TEST_RESULT_EFUSE_SELF_TEST_EFUSE_RESULT_FAILED_POWER_FET_CHANNEL_OPEN_CHOICE (7u)
#define MODEL3_CAN_ID2_F1_VCFRONT_E_FUSE_DEBUG_STATUS_VCFRONT_I_BOOSTER_SELF_TEST_RESULT_EFUSE_SELF_TEST_EFUSE_RESULT_FAILED_ENABLE_HIGH_MALFUNCTION_CHOICE (8u)
#define MODEL3_CAN_ID2_F1_VCFRONT_E_FUSE_DEBUG_STATUS_VCFRONT_I_BOOSTER_SELF_TEST_RESULT_EFUSE_SELF_TEST_EFUSE_RESULT_FAILED_TURN_OFF_PATH_TOO_SLOW_CHOICE (9u)
#define MODEL3_CAN_ID2_F1_VCFRONT_E_FUSE_DEBUG_STATUS_VCFRONT_I_BOOSTER_SELF_TEST_RESULT_EFUSE_SELF_TEST_EFUSE_RESULT_FAILED_NOT_LATCHED_CHOICE (10u)
#define MODEL3_CAN_ID2_F1_VCFRONT_E_FUSE_DEBUG_STATUS_VCFRONT_I_BOOSTER_SELF_TEST_RESULT_EFUSE_SELF_TEST_EFUSE_RESULT_SKIPPED_CHOICE (11u)

#define MODEL3_CAN_ID2_F1_VCFRONT_E_FUSE_DEBUG_STATUS_VCFRONT_PCS_SELF_TEST_RESULT_EFUSE_SELF_TEST_EFUSE_RESULT_NOT_RUN_CHOICE (0u)
#define MODEL3_CAN_ID2_F1_VCFRONT_E_FUSE_DEBUG_STATUS_VCFRONT_PCS_SELF_TEST_RESULT_EFUSE_SELF_TEST_EFUSE_RESULT_RUNNING_CHOICE (1u)
#define MODEL3_CAN_ID2_F1_VCFRONT_E_FUSE_DEBUG_STATUS_VCFRONT_PCS_SELF_TEST_RESULT_EFUSE_SELF_TEST_EFUSE_RESULT_PASSED_CHOICE (2u)
#define MODEL3_CAN_ID2_F1_VCFRONT_E_FUSE_DEBUG_STATUS_VCFRONT_PCS_SELF_TEST_RESULT_EFUSE_SELF_TEST_EFUSE_RESULT_FAILED_RAILS_UNSTABLE_CHOICE (3u)
#define MODEL3_CAN_ID2_F1_VCFRONT_E_FUSE_DEBUG_STATUS_VCFRONT_PCS_SELF_TEST_RESULT_EFUSE_SELF_TEST_EFUSE_RESULT_FAILED_EFUSE_OUTPUT_SHORT_CHOICE (4u)
#define MODEL3_CAN_ID2_F1_VCFRONT_E_FUSE_DEBUG_STATUS_VCFRONT_PCS_SELF_TEST_RESULT_EFUSE_SELF_TEST_EFUSE_RESULT_FAILED_POWER_FET_STUCK_ON_CHOICE (5u)
#define MODEL3_CAN_ID2_F1_VCFRONT_E_FUSE_DEBUG_STATUS_VCFRONT_PCS_SELF_TEST_RESULT_EFUSE_SELF_TEST_EFUSE_RESULT_FAILED_ENABLE_LOW_MALFUNCTION_CHOICE (6u)
#define MODEL3_CAN_ID2_F1_VCFRONT_E_FUSE_DEBUG_STATUS_VCFRONT_PCS_SELF_TEST_RESULT_EFUSE_SELF_TEST_EFUSE_RESULT_FAILED_POWER_FET_CHANNEL_OPEN_CHOICE (7u)
#define MODEL3_CAN_ID2_F1_VCFRONT_E_FUSE_DEBUG_STATUS_VCFRONT_PCS_SELF_TEST_RESULT_EFUSE_SELF_TEST_EFUSE_RESULT_FAILED_ENABLE_HIGH_MALFUNCTION_CHOICE (8u)
#define MODEL3_CAN_ID2_F1_VCFRONT_E_FUSE_DEBUG_STATUS_VCFRONT_PCS_SELF_TEST_RESULT_EFUSE_SELF_TEST_EFUSE_RESULT_FAILED_TURN_OFF_PATH_TOO_SLOW_CHOICE (9u)
#define MODEL3_CAN_ID2_F1_VCFRONT_E_FUSE_DEBUG_STATUS_VCFRONT_PCS_SELF_TEST_RESULT_EFUSE_SELF_TEST_EFUSE_RESULT_FAILED_NOT_LATCHED_CHOICE (10u)
#define MODEL3_CAN_ID2_F1_VCFRONT_E_FUSE_DEBUG_STATUS_VCFRONT_PCS_SELF_TEST_RESULT_EFUSE_SELF_TEST_EFUSE_RESULT_SKIPPED_CHOICE (11u)

#define MODEL3_CAN_ID2_F1_VCFRONT_E_FUSE_DEBUG_STATUS_VCFRONT_VCLEFT_SELF_TEST_RESULT_EFUSE_SELF_TEST_EFUSE_RESULT_NOT_RUN_CHOICE (0u)
#define MODEL3_CAN_ID2_F1_VCFRONT_E_FUSE_DEBUG_STATUS_VCFRONT_VCLEFT_SELF_TEST_RESULT_EFUSE_SELF_TEST_EFUSE_RESULT_RUNNING_CHOICE (1u)
#define MODEL3_CAN_ID2_F1_VCFRONT_E_FUSE_DEBUG_STATUS_VCFRONT_VCLEFT_SELF_TEST_RESULT_EFUSE_SELF_TEST_EFUSE_RESULT_PASSED_CHOICE (2u)
#define MODEL3_CAN_ID2_F1_VCFRONT_E_FUSE_DEBUG_STATUS_VCFRONT_VCLEFT_SELF_TEST_RESULT_EFUSE_SELF_TEST_EFUSE_RESULT_FAILED_RAILS_UNSTABLE_CHOICE (3u)
#define MODEL3_CAN_ID2_F1_VCFRONT_E_FUSE_DEBUG_STATUS_VCFRONT_VCLEFT_SELF_TEST_RESULT_EFUSE_SELF_TEST_EFUSE_RESULT_FAILED_EFUSE_OUTPUT_SHORT_CHOICE (4u)
#define MODEL3_CAN_ID2_F1_VCFRONT_E_FUSE_DEBUG_STATUS_VCFRONT_VCLEFT_SELF_TEST_RESULT_EFUSE_SELF_TEST_EFUSE_RESULT_FAILED_POWER_FET_STUCK_ON_CHOICE (5u)
#define MODEL3_CAN_ID2_F1_VCFRONT_E_FUSE_DEBUG_STATUS_VCFRONT_VCLEFT_SELF_TEST_RESULT_EFUSE_SELF_TEST_EFUSE_RESULT_FAILED_ENABLE_LOW_MALFUNCTION_CHOICE (6u)
#define MODEL3_CAN_ID2_F1_VCFRONT_E_FUSE_DEBUG_STATUS_VCFRONT_VCLEFT_SELF_TEST_RESULT_EFUSE_SELF_TEST_EFUSE_RESULT_FAILED_POWER_FET_CHANNEL_OPEN_CHOICE (7u)
#define MODEL3_CAN_ID2_F1_VCFRONT_E_FUSE_DEBUG_STATUS_VCFRONT_VCLEFT_SELF_TEST_RESULT_EFUSE_SELF_TEST_EFUSE_RESULT_FAILED_ENABLE_HIGH_MALFUNCTION_CHOICE (8u)
#define MODEL3_CAN_ID2_F1_VCFRONT_E_FUSE_DEBUG_STATUS_VCFRONT_VCLEFT_SELF_TEST_RESULT_EFUSE_SELF_TEST_EFUSE_RESULT_FAILED_TURN_OFF_PATH_TOO_SLOW_CHOICE (9u)
#define MODEL3_CAN_ID2_F1_VCFRONT_E_FUSE_DEBUG_STATUS_VCFRONT_VCLEFT_SELF_TEST_RESULT_EFUSE_SELF_TEST_EFUSE_RESULT_FAILED_NOT_LATCHED_CHOICE (10u)
#define MODEL3_CAN_ID2_F1_VCFRONT_E_FUSE_DEBUG_STATUS_VCFRONT_VCLEFT_SELF_TEST_RESULT_EFUSE_SELF_TEST_EFUSE_RESULT_SKIPPED_CHOICE (11u)

#define MODEL3_CAN_ID2_F1_VCFRONT_E_FUSE_DEBUG_STATUS_VCFRONT_VCRIGHT_SELF_TEST_RESULT_EFUSE_SELF_TEST_EFUSE_RESULT_NOT_RUN_CHOICE (0u)
#define MODEL3_CAN_ID2_F1_VCFRONT_E_FUSE_DEBUG_STATUS_VCFRONT_VCRIGHT_SELF_TEST_RESULT_EFUSE_SELF_TEST_EFUSE_RESULT_RUNNING_CHOICE (1u)
#define MODEL3_CAN_ID2_F1_VCFRONT_E_FUSE_DEBUG_STATUS_VCFRONT_VCRIGHT_SELF_TEST_RESULT_EFUSE_SELF_TEST_EFUSE_RESULT_PASSED_CHOICE (2u)
#define MODEL3_CAN_ID2_F1_VCFRONT_E_FUSE_DEBUG_STATUS_VCFRONT_VCRIGHT_SELF_TEST_RESULT_EFUSE_SELF_TEST_EFUSE_RESULT_FAILED_RAILS_UNSTABLE_CHOICE (3u)
#define MODEL3_CAN_ID2_F1_VCFRONT_E_FUSE_DEBUG_STATUS_VCFRONT_VCRIGHT_SELF_TEST_RESULT_EFUSE_SELF_TEST_EFUSE_RESULT_FAILED_EFUSE_OUTPUT_SHORT_CHOICE (4u)
#define MODEL3_CAN_ID2_F1_VCFRONT_E_FUSE_DEBUG_STATUS_VCFRONT_VCRIGHT_SELF_TEST_RESULT_EFUSE_SELF_TEST_EFUSE_RESULT_FAILED_POWER_FET_STUCK_ON_CHOICE (5u)
#define MODEL3_CAN_ID2_F1_VCFRONT_E_FUSE_DEBUG_STATUS_VCFRONT_VCRIGHT_SELF_TEST_RESULT_EFUSE_SELF_TEST_EFUSE_RESULT_FAILED_ENABLE_LOW_MALFUNCTION_CHOICE (6u)
#define MODEL3_CAN_ID2_F1_VCFRONT_E_FUSE_DEBUG_STATUS_VCFRONT_VCRIGHT_SELF_TEST_RESULT_EFUSE_SELF_TEST_EFUSE_RESULT_FAILED_POWER_FET_CHANNEL_OPEN_CHOICE (7u)
#define MODEL3_CAN_ID2_F1_VCFRONT_E_FUSE_DEBUG_STATUS_VCFRONT_VCRIGHT_SELF_TEST_RESULT_EFUSE_SELF_TEST_EFUSE_RESULT_FAILED_ENABLE_HIGH_MALFUNCTION_CHOICE (8u)
#define MODEL3_CAN_ID2_F1_VCFRONT_E_FUSE_DEBUG_STATUS_VCFRONT_VCRIGHT_SELF_TEST_RESULT_EFUSE_SELF_TEST_EFUSE_RESULT_FAILED_TURN_OFF_PATH_TOO_SLOW_CHOICE (9u)
#define MODEL3_CAN_ID2_F1_VCFRONT_E_FUSE_DEBUG_STATUS_VCFRONT_VCRIGHT_SELF_TEST_RESULT_EFUSE_SELF_TEST_EFUSE_RESULT_FAILED_NOT_LATCHED_CHOICE (10u)
#define MODEL3_CAN_ID2_F1_VCFRONT_E_FUSE_DEBUG_STATUS_VCFRONT_VCRIGHT_SELF_TEST_RESULT_EFUSE_SELF_TEST_EFUSE_RESULT_SKIPPED_CHOICE (11u)

#define MODEL3_CAN_ID2_F1_VCFRONT_E_FUSE_DEBUG_STATUS_VCFRONT_HEADLAMP_LEFT_VOLTAGE_SNA_CHOICE (255u)

#define MODEL3_CAN_ID2_F1_VCFRONT_E_FUSE_DEBUG_STATUS_VCFRONT_HEADLAMP_RIGHT_VOLTAGE_SNA_CHOICE (255u)

#define MODEL3_CAN_ID2_F1_VCFRONT_E_FUSE_DEBUG_STATUS_VCFRONT_HEADLAMP_LEFT_TEMPERATURE_SNA_CHOICE (-128)

#define MODEL3_CAN_ID2_F1_VCFRONT_E_FUSE_DEBUG_STATUS_VCFRONT_HEADLAMP_RIGHT_TEMPERATURE_SNA_CHOICE (-128)

#define MODEL3_CAN_ID243_VC_RIGHTHVAC_FEEDBACK_VC_RIGHTHVAC_AIR_DISTRIBUTION_MODE_NONE_CHOICE (0u)
#define MODEL3_CAN_ID243_VC_RIGHTHVAC_FEEDBACK_VC_RIGHTHVAC_AIR_DISTRIBUTION_MODE_FLOOR_CHOICE (1u)
#define MODEL3_CAN_ID243_VC_RIGHTHVAC_FEEDBACK_VC_RIGHTHVAC_AIR_DISTRIBUTION_MODE_PANEL_CHOICE (2u)
#define MODEL3_CAN_ID243_VC_RIGHTHVAC_FEEDBACK_VC_RIGHTHVAC_AIR_DISTRIBUTION_MODE_PANEL_FLOOR_CHOICE (3u)
#define MODEL3_CAN_ID243_VC_RIGHTHVAC_FEEDBACK_VC_RIGHTHVAC_AIR_DISTRIBUTION_MODE_DEFROST_CHOICE (4u)
#define MODEL3_CAN_ID243_VC_RIGHTHVAC_FEEDBACK_VC_RIGHTHVAC_AIR_DISTRIBUTION_MODE_DEFROST_FLOOR_CHOICE (5u)
#define MODEL3_CAN_ID243_VC_RIGHTHVAC_FEEDBACK_VC_RIGHTHVAC_AIR_DISTRIBUTION_MODE_DEFROST_PANEL_CHOICE (6u)
#define MODEL3_CAN_ID243_VC_RIGHTHVAC_FEEDBACK_VC_RIGHTHVAC_AIR_DISTRIBUTION_MODE_DEFROST_PANEL_FLOOR_CHOICE (7u)

#define MODEL3_CAN_ID243_VC_RIGHTHVAC_FEEDBACK_VC_RIGHTHVAC_BLOWER_SEGMENT_OFF_CHOICE (0u)
#define MODEL3_CAN_ID243_VC_RIGHTHVAC_FEEDBACK_VC_RIGHTHVAC_BLOWER_SEGMENT_1_CHOICE (1u)
#define MODEL3_CAN_ID243_VC_RIGHTHVAC_FEEDBACK_VC_RIGHTHVAC_BLOWER_SEGMENT_2_CHOICE (2u)
#define MODEL3_CAN_ID243_VC_RIGHTHVAC_FEEDBACK_VC_RIGHTHVAC_BLOWER_SEGMENT_3_CHOICE (3u)
#define MODEL3_CAN_ID243_VC_RIGHTHVAC_FEEDBACK_VC_RIGHTHVAC_BLOWER_SEGMENT_4_CHOICE (4u)
#define MODEL3_CAN_ID243_VC_RIGHTHVAC_FEEDBACK_VC_RIGHTHVAC_BLOWER_SEGMENT_5_CHOICE (5u)
#define MODEL3_CAN_ID243_VC_RIGHTHVAC_FEEDBACK_VC_RIGHTHVAC_BLOWER_SEGMENT_6_CHOICE (6u)
#define MODEL3_CAN_ID243_VC_RIGHTHVAC_FEEDBACK_VC_RIGHTHVAC_BLOWER_SEGMENT_7_CHOICE (7u)
#define MODEL3_CAN_ID243_VC_RIGHTHVAC_FEEDBACK_VC_RIGHTHVAC_BLOWER_SEGMENT_8_CHOICE (8u)
#define MODEL3_CAN_ID243_VC_RIGHTHVAC_FEEDBACK_VC_RIGHTHVAC_BLOWER_SEGMENT_9_CHOICE (9u)
#define MODEL3_CAN_ID243_VC_RIGHTHVAC_FEEDBACK_VC_RIGHTHVAC_BLOWER_SEGMENT_10_CHOICE (10u)
#define MODEL3_CAN_ID243_VC_RIGHTHVAC_FEEDBACK_VC_RIGHTHVAC_BLOWER_SEGMENT_11_CHOICE (11u)

#define MODEL3_CAN_ID243_VC_RIGHTHVAC_FEEDBACK_VC_RIGHTHVAC_RECIRC_AUTO_CHOICE (0u)
#define MODEL3_CAN_ID243_VC_RIGHTHVAC_FEEDBACK_VC_RIGHTHVAC_RECIRC_RECIRC_CHOICE (1u)
#define MODEL3_CAN_ID243_VC_RIGHTHVAC_FEEDBACK_VC_RIGHTHVAC_RECIRC_FRESH_CHOICE (2u)

#define MODEL3_CAN_ID243_VC_RIGHTHVAC_FEEDBACK_VC_RIGHTHVAC_AC_RUNNING_OFF_CHOICE (0u)
#define MODEL3_CAN_ID243_VC_RIGHTHVAC_FEEDBACK_VC_RIGHTHVAC_AC_RUNNING_ON_CHOICE (1u)

#define MODEL3_CAN_ID243_VC_RIGHTHVAC_FEEDBACK_VC_RIGHTHVAC_POWER_STATE_OFF_CHOICE (0u)
#define MODEL3_CAN_ID243_VC_RIGHTHVAC_FEEDBACK_VC_RIGHTHVAC_POWER_STATE_ON_CHOICE (1u)
#define MODEL3_CAN_ID243_VC_RIGHTHVAC_FEEDBACK_VC_RIGHTHVAC_POWER_STATE_PRECONDITION_CHOICE (2u)
#define MODEL3_CAN_ID243_VC_RIGHTHVAC_FEEDBACK_VC_RIGHTHVAC_POWER_STATE_OVERHEAT_PROTECT_FANONLY_CHOICE (3u)
#define MODEL3_CAN_ID243_VC_RIGHTHVAC_FEEDBACK_VC_RIGHTHVAC_POWER_STATE_OVERHEAT_PROTECT_CHOICE (4u)

#define MODEL3_CAN_ID243_VC_RIGHTHVAC_FEEDBACK_VC_RIGHTHVAC_SECOND_ROW_STATE_AUTO_CHOICE (0u)
#define MODEL3_CAN_ID243_VC_RIGHTHVAC_FEEDBACK_VC_RIGHTHVAC_SECOND_ROW_STATE_OFF_CHOICE (1u)
#define MODEL3_CAN_ID243_VC_RIGHTHVAC_FEEDBACK_VC_RIGHTHVAC_SECOND_ROW_STATE_LOW_CHOICE (2u)
#define MODEL3_CAN_ID243_VC_RIGHTHVAC_FEEDBACK_VC_RIGHTHVAC_SECOND_ROW_STATE_MED_CHOICE (3u)
#define MODEL3_CAN_ID243_VC_RIGHTHVAC_FEEDBACK_VC_RIGHTHVAC_SECOND_ROW_STATE_HIGH_CHOICE (4u)

#define MODEL3_CAN_ID20_CVC_RIGHTHVAC_REQUEST_VC_RIGHTTEMP_EVAPORATOR_SNA_CHOICE (2047u)

#define MODEL3_CAN_ID20_CVC_RIGHTHVAC_REQUEST_VC_RIGHTTEMP_EVAPORATOR_TARGET_SNA_CHOICE (255u)

#define MODEL3_CAN_ID2_B3_VC_RIGHTLOGGING1_HZ_VC_RIGHTLOGGING1_HZ_INDEX_HVAC_TEMP_SENSORS_AND_ESTIMATES_1_CHOICE (0u)
#define MODEL3_CAN_ID2_B3_VC_RIGHTLOGGING1_HZ_VC_RIGHTLOGGING1_HZ_INDEX_HVAC_TEMP_SENSORS_AND_ESTIMATES_2_CHOICE (1u)
#define MODEL3_CAN_ID2_B3_VC_RIGHTLOGGING1_HZ_VC_RIGHTLOGGING1_HZ_INDEX_HVAC_HUMIDITY_HEATER_CHOICE (2u)
#define MODEL3_CAN_ID2_B3_VC_RIGHTLOGGING1_HZ_VC_RIGHTLOGGING1_HZ_INDEX_HVAC_STATUS_AIRFLOW_CHOICE (3u)
#define MODEL3_CAN_ID2_B3_VC_RIGHTLOGGING1_HZ_VC_RIGHTLOGGING1_HZ_INDEX_HVAC_COMFORT_SOLAR_CHOICE (4u)
#define MODEL3_CAN_ID2_B3_VC_RIGHTLOGGING1_HZ_VC_RIGHTLOGGING1_HZ_INDEX_HEATER_AND_DUCT_TARGETS_CHOICE (5u)
#define MODEL3_CAN_ID2_B3_VC_RIGHTLOGGING1_HZ_VC_RIGHTLOGGING1_HZ_INDEX_HVAC_ACTUATOR_VOLTAGES_CHOICE (6u)
#define MODEL3_CAN_ID2_B3_VC_RIGHTLOGGING1_HZ_VC_RIGHTLOGGING1_HZ_INDEX_HVAC_ACTUATOR_ENDSTOP_CHOICE (7u)
#define MODEL3_CAN_ID2_B3_VC_RIGHTLOGGING1_HZ_VC_RIGHTLOGGING1_HZ_INDEX_HVAC_ACTUATOR_ZEROSTOP_CHOICE (8u)
#define MODEL3_CAN_ID2_B3_VC_RIGHTLOGGING1_HZ_VC_RIGHTLOGGING1_HZ_INDEX_HVAC_MISCELLANEOUS_1_CHOICE (9u)
#define MODEL3_CAN_ID2_B3_VC_RIGHTLOGGING1_HZ_VC_RIGHTLOGGING1_HZ_INDEX_HVAC_MISCELLANEOUS_2_CHOICE (10u)
#define MODEL3_CAN_ID2_B3_VC_RIGHTLOGGING1_HZ_VC_RIGHTLOGGING1_HZ_INDEX_END_CHOICE (11u)

#define MODEL3_CAN_ID2_B3_VC_RIGHTLOGGING1_HZ_VC_RIGHTTEMP_DUCT_LEFT_SNA_CHOICE (511u)

#define MODEL3_CAN_ID2_B3_VC_RIGHTLOGGING1_HZ_VC_RIGHTTEMP_DUCT_MODELED_LEFT_SNA_CHOICE (511u)

#define MODEL3_CAN_ID2_B3_VC_RIGHTLOGGING1_HZ_VC_RIGHTCABIN_TEMP_GLASS_ROOF_SNA_CHOICE (255u)

#define MODEL3_CAN_ID2_B3_VC_RIGHTLOGGING1_HZ_VC_RIGHTCONVECTION_TARGET_LEFT_SNA_CHOICE (255u)

#define MODEL3_CAN_ID2_B3_VC_RIGHTLOGGING1_HZ_VC_RIGHTTEMP_DUCT_RIGHT_SNA_CHOICE (511u)

#define MODEL3_CAN_ID2_B3_VC_RIGHTLOGGING1_HZ_VC_RIGHTHVAC_DUCT_TARGET_LEFT_SNA_CHOICE (255u)

#define MODEL3_CAN_ID2_B3_VC_RIGHTLOGGING1_HZ_VC_RIGHTTEMP_DUCT_MODELED_RIGHT_SNA_CHOICE (511u)

#define MODEL3_CAN_ID2_B3_VC_RIGHTLOGGING1_HZ_VC_RIGHTCABIN_TEMP_WINDSHIELD_SNA_CHOICE (255u)

#define MODEL3_CAN_ID2_B3_VC_RIGHTLOGGING1_HZ_VC_RIGHTCONVECTION_TARGET_RIGHT_SNA_CHOICE (255u)

#define MODEL3_CAN_ID2_B3_VC_RIGHTLOGGING1_HZ_VC_RIGHTSOLAR_LOAD_ON_VEH_FILTERED_SNA_CHOICE (255u)

#define MODEL3_CAN_ID2_B3_VC_RIGHTLOGGING1_HZ_VC_RIGHTHVAC_DUCT_TARGET_RIGHT_SNA_CHOICE (255u)

#define MODEL3_CAN_ID2_B3_VC_RIGHTLOGGING1_HZ_VC_RIGHTTEMP_HTR_SURFACE_MODELED_L_SNA_CHOICE (511u)

#define MODEL3_CAN_ID2_B3_VC_RIGHTLOGGING1_HZ_VC_RIGHTTEMP_INCAR_CABIN_PROBE_SNA_CHOICE (255u)

#define MODEL3_CAN_ID2_B3_VC_RIGHTLOGGING1_HZ_VC_RIGHTCABIN_TEMP_INTERIOR_SNA_CHOICE (240u)

#define MODEL3_CAN_ID2_B3_VC_RIGHTLOGGING1_HZ_VC_RIGHTHVAC_AUTO_TRANSITION_REASON_NONE_CHOICE (0u)
#define MODEL3_CAN_ID2_B3_VC_RIGHTLOGGING1_HZ_VC_RIGHTHVAC_AUTO_TRANSITION_REASON_HUMIDITY_HIGH_CHOICE (1u)
#define MODEL3_CAN_ID2_B3_VC_RIGHTLOGGING1_HZ_VC_RIGHTHVAC_AUTO_TRANSITION_REASON_HUMIDITY_MODERATE_CHOICE (2u)
#define MODEL3_CAN_ID2_B3_VC_RIGHTLOGGING1_HZ_VC_RIGHTHVAC_AUTO_TRANSITION_REASON_HUMIDITY_LOW_CHOICE (3u)
#define MODEL3_CAN_ID2_B3_VC_RIGHTLOGGING1_HZ_VC_RIGHTHVAC_AUTO_TRANSITION_REASON_TEMP_TARGET_BELOW_THRESHOLD_CHOICE (4u)
#define MODEL3_CAN_ID2_B3_VC_RIGHTLOGGING1_HZ_VC_RIGHTHVAC_AUTO_TRANSITION_REASON_TEMP_TARGET_ABOVE_THRESHOLD_CHOICE (5u)
#define MODEL3_CAN_ID2_B3_VC_RIGHTLOGGING1_HZ_VC_RIGHTHVAC_AUTO_TRANSITION_REASON_EXCESS_OCCUPANT_CONVECTION_CHOICE (6u)
#define MODEL3_CAN_ID2_B3_VC_RIGHTLOGGING1_HZ_VC_RIGHTHVAC_AUTO_TRANSITION_REASON_OCCUPANT_CONVECTION_REQUIREMENT_CHOICE (7u)
#define MODEL3_CAN_ID2_B3_VC_RIGHTLOGGING1_HZ_VC_RIGHTHVAC_AUTO_TRANSITION_REASON_TEMP_TARGET_LOW_CHOICE (8u)
#define MODEL3_CAN_ID2_B3_VC_RIGHTLOGGING1_HZ_VC_RIGHTHVAC_AUTO_TRANSITION_REASON_DUCTS_COLD_CHOICE (9u)
#define MODEL3_CAN_ID2_B3_VC_RIGHTLOGGING1_HZ_VC_RIGHTHVAC_AUTO_TRANSITION_REASON_BI_LEVEL_LANDING_CHOICE (10u)
#define MODEL3_CAN_ID2_B3_VC_RIGHTLOGGING1_HZ_VC_RIGHTHVAC_AUTO_TRANSITION_REASON_DEFOG_OVERRIDE_CHOICE (11u)
#define MODEL3_CAN_ID2_B3_VC_RIGHTLOGGING1_HZ_VC_RIGHTHVAC_AUTO_TRANSITION_REASON_SET_TEMP_LO_CHOICE (12u)
#define MODEL3_CAN_ID2_B3_VC_RIGHTLOGGING1_HZ_VC_RIGHTHVAC_AUTO_TRANSITION_REASON_SET_TEMP_HI_CHOICE (13u)
#define MODEL3_CAN_ID2_B3_VC_RIGHTLOGGING1_HZ_VC_RIGHTHVAC_AUTO_TRANSITION_REASON_CABIN_PURGE_CHOICE (14u)
#define MODEL3_CAN_ID2_B3_VC_RIGHTLOGGING1_HZ_VC_RIGHTHVAC_AUTO_TRANSITION_REASON_EVAP_DRYING_CHOICE (15u)
#define MODEL3_CAN_ID2_B3_VC_RIGHTLOGGING1_HZ_VC_RIGHTHVAC_AUTO_TRANSITION_REASON_HVAC_OFF_CHOICE (16u)
#define MODEL3_CAN_ID2_B3_VC_RIGHTLOGGING1_HZ_VC_RIGHTHVAC_AUTO_TRANSITION_REASON_END_CHOICE (17u)

#define MODEL3_CAN_ID2_B3_VC_RIGHTLOGGING1_HZ_VC_RIGHTCONVECTION_DELIVERED_LEFT_SNA_CHOICE (255u)

#define MODEL3_CAN_ID2_B3_VC_RIGHTLOGGING1_HZ_VC_RIGHTHVAC_AIR_FLOW_MODE_ROW1_NONE_CHOICE (0u)
#define MODEL3_CAN_ID2_B3_VC_RIGHTLOGGING1_HZ_VC_RIGHTHVAC_AIR_FLOW_MODE_ROW1_FLOOR_CHOICE (1u)
#define MODEL3_CAN_ID2_B3_VC_RIGHTLOGGING1_HZ_VC_RIGHTHVAC_AIR_FLOW_MODE_ROW1_PANEL_CHOICE (2u)
#define MODEL3_CAN_ID2_B3_VC_RIGHTLOGGING1_HZ_VC_RIGHTHVAC_AIR_FLOW_MODE_ROW1_PANEL_FLOOR_CHOICE (3u)
#define MODEL3_CAN_ID2_B3_VC_RIGHTLOGGING1_HZ_VC_RIGHTHVAC_AIR_FLOW_MODE_ROW1_DEFROST_CHOICE (4u)
#define MODEL3_CAN_ID2_B3_VC_RIGHTLOGGING1_HZ_VC_RIGHTHVAC_AIR_FLOW_MODE_ROW1_DEFROST_FLOOR_CHOICE (5u)
#define MODEL3_CAN_ID2_B3_VC_RIGHTLOGGING1_HZ_VC_RIGHTHVAC_AIR_FLOW_MODE_ROW1_DEFROST_PANEL_CHOICE (6u)
#define MODEL3_CAN_ID2_B3_VC_RIGHTLOGGING1_HZ_VC_RIGHTHVAC_AIR_FLOW_MODE_ROW1_DEFROST_PANEL_FLOOR_CHOICE (7u)

#define MODEL3_CAN_ID2_B3_VC_RIGHTLOGGING1_HZ_VC_RIGHTTEMP_HTR_SURFACE_MODELED_R_SNA_CHOICE (511u)

#define MODEL3_CAN_ID2_B3_VC_RIGHTLOGGING1_HZ_VC_RIGHTTEMP_INCAR_CABIN_MID_SNA_CHOICE (250u)

#define MODEL3_CAN_ID2_B3_VC_RIGHTLOGGING1_HZ_VC_RIGHTCABIN_TEMP_INTERIOR_SUNNY_SNA_CHOICE (240u)

#define MODEL3_CAN_ID2_B3_VC_RIGHTLOGGING1_HZ_VC_RIGHTHVAC_AIR_FLOW_MODE_ROW2_NONE_CHOICE (0u)
#define MODEL3_CAN_ID2_B3_VC_RIGHTLOGGING1_HZ_VC_RIGHTHVAC_AIR_FLOW_MODE_ROW2_FLOOR_CHOICE (1u)
#define MODEL3_CAN_ID2_B3_VC_RIGHTLOGGING1_HZ_VC_RIGHTHVAC_AIR_FLOW_MODE_ROW2_PANEL_CHOICE (2u)
#define MODEL3_CAN_ID2_B3_VC_RIGHTLOGGING1_HZ_VC_RIGHTHVAC_AIR_FLOW_MODE_ROW2_PANEL_FLOOR_CHOICE (3u)
#define MODEL3_CAN_ID2_B3_VC_RIGHTLOGGING1_HZ_VC_RIGHTHVAC_AIR_FLOW_MODE_ROW2_DEFROST_CHOICE (4u)
#define MODEL3_CAN_ID2_B3_VC_RIGHTLOGGING1_HZ_VC_RIGHTHVAC_AIR_FLOW_MODE_ROW2_DEFROST_FLOOR_CHOICE (5u)
#define MODEL3_CAN_ID2_B3_VC_RIGHTLOGGING1_HZ_VC_RIGHTHVAC_AIR_FLOW_MODE_ROW2_DEFROST_PANEL_CHOICE (6u)
#define MODEL3_CAN_ID2_B3_VC_RIGHTLOGGING1_HZ_VC_RIGHTHVAC_AIR_FLOW_MODE_ROW2_DEFROST_PANEL_FLOOR_CHOICE (7u)

#define MODEL3_CAN_ID2_B3_VC_RIGHTLOGGING1_HZ_VC_RIGHTCONVECTION_DELIVERED_RIGHT_SNA_CHOICE (255u)

#define MODEL3_CAN_ID2_B3_VC_RIGHTLOGGING1_HZ_VC_RIGHTCABIN_TEMP_INTERIOR_L3_SNA_CHOICE (240u)

#define MODEL3_CAN_ID2_B3_VC_RIGHTLOGGING1_HZ_VC_RIGHTTEMP_INCAR_CABIN_DEEP_SNA_CHOICE (255u)

#define MODEL3_CAN_ID2_B3_VC_RIGHTLOGGING1_HZ_VC_RIGHTCABIN_TEMP_SIDE_GLASS_LEFT_SNA_CHOICE (255u)

#define MODEL3_CAN_ID2_B3_VC_RIGHTLOGGING1_HZ_VC_RIGHTSOLAR_LOAD_RIGHT_OCCUPANT_SNA_CHOICE (255u)

#define MODEL3_CAN_ID2_B3_VC_RIGHTLOGGING1_HZ_VC_RIGHTCABIN_TEMP_INTERIOR_SUNNY_L3_SNA_CHOICE (240u)

#define MODEL3_CAN_ID2_B3_VC_RIGHTLOGGING1_HZ_VC_RIGHTCABIN_TEMP_INTERIOR_L2_SNA_CHOICE (240u)

#define MODEL3_CAN_ID2_B3_VC_RIGHTLOGGING1_HZ_VC_RIGHTCABIN_TEMP_SIDE_GLASS_RIGHT_SNA_CHOICE (255u)

#define MODEL3_CAN_ID2_B3_VC_RIGHTLOGGING1_HZ_VC_RIGHTHVAC_AIRFLOW_REASON_HVAC_OFF_CHOICE (0u)
#define MODEL3_CAN_ID2_B3_VC_RIGHTLOGGING1_HZ_VC_RIGHTHVAC_AIRFLOW_REASON_MANUAL_FAN_SPEED_CHOICE (1u)
#define MODEL3_CAN_ID2_B3_VC_RIGHTLOGGING1_HZ_VC_RIGHTHVAC_AIRFLOW_REASON_UI_SHORTCUT_CHOICE (2u)
#define MODEL3_CAN_ID2_B3_VC_RIGHTLOGGING1_HZ_VC_RIGHTHVAC_AIRFLOW_REASON_CABIN_TEMPERATURE_CONTROL_CHOICE (3u)
#define MODEL3_CAN_ID2_B3_VC_RIGHTLOGGING1_HZ_VC_RIGHTHVAC_AIRFLOW_REASON_MINIMUM_AUTO_AIRFLOW_CHOICE (4u)
#define MODEL3_CAN_ID2_B3_VC_RIGHTLOGGING1_HZ_VC_RIGHTHVAC_AIRFLOW_REASON_STRATIFICATION_GLASS_ROOF_CHOICE (5u)
#define MODEL3_CAN_ID2_B3_VC_RIGHTLOGGING1_HZ_VC_RIGHTHVAC_AIRFLOW_REASON_STRATIFICATION_INTERIOR_SURFACES_CHOICE (6u)
#define MODEL3_CAN_ID2_B3_VC_RIGHTLOGGING1_HZ_VC_RIGHTHVAC_AIRFLOW_REASON_OCCUPANT_CONVECTION_REQUIREMENT_CHOICE (7u)
#define MODEL3_CAN_ID2_B3_VC_RIGHTLOGGING1_HZ_VC_RIGHTHVAC_AIRFLOW_REASON_COLD_DUCT_LOCKOUT_CHOICE (8u)
#define MODEL3_CAN_ID2_B3_VC_RIGHTLOGGING1_HZ_VC_RIGHTHVAC_AIRFLOW_REASON_CABIN_PURGE_CHOICE (9u)
#define MODEL3_CAN_ID2_B3_VC_RIGHTLOGGING1_HZ_VC_RIGHTHVAC_AIRFLOW_REASON_CABIN_OVERHEAT_PROTECT_CHOICE (10u)
#define MODEL3_CAN_ID2_B3_VC_RIGHTLOGGING1_HZ_VC_RIGHTHVAC_AIRFLOW_REASON_SCREEN_PROTECTION_CHOICE (11u)
#define MODEL3_CAN_ID2_B3_VC_RIGHTLOGGING1_HZ_VC_RIGHTHVAC_AIRFLOW_REASON_EVAP_DRYING_CHOICE (12u)
#define MODEL3_CAN_ID2_B3_VC_RIGHTLOGGING1_HZ_VC_RIGHTHVAC_AIRFLOW_REASON_NONE_CHOICE (13u)

#define MODEL3_CAN_ID2_B3_VC_RIGHTLOGGING1_HZ_VC_RIGHTSOLAR_LOAD_LEFT_OCCUPANT_SNA_CHOICE (255u)

#define MODEL3_CAN_ID2_B3_VC_RIGHTLOGGING1_HZ_VC_RIGHTCABIN_TEMP_TOP_PAD_AIR_SNA_CHOICE (240u)

#define MODEL3_CAN_ID2_B3_VC_RIGHTLOGGING1_HZ_VC_RIGHTCABIN_TEMP_INTERIOR_SUNNY_L2_SNA_CHOICE (240u)

#define MODEL3_CAN_ID2_B3_VC_RIGHTLOGGING1_HZ_VC_RIGHTCABIN_TEMP_BREATH_LEVEL_SNA_CHOICE (255u)

#define MODEL3_CAN_ID2_B3_VC_RIGHTLOGGING1_HZ_VC_RIGHTSOLAR_LOAD_ON_VEHICLE_SNA_CHOICE (255u)

#define MODEL3_CAN_ID2_C1_VC_FRONT10HZ_VC_FRONT10_HZ_INDEX_COOLANT_PUMPS_CHOICE (0u)
#define MODEL3_CAN_ID2_C1_VC_FRONT10HZ_VC_FRONT10_HZ_INDEX_THERMAL_FAN_CHOICE (1u)
#define MODEL3_CAN_ID2_C1_VC_FRONT10HZ_VC_FRONT10_HZ_INDEX_FIVE_WAY_VALVE_CHOICE (2u)
#define MODEL3_CAN_ID2_C1_VC_FRONT10HZ_VC_FRONT10_HZ_INDEX_REFRIGERANT_LV8907_CHOICE (3u)
#define MODEL3_CAN_ID2_C1_VC_FRONT10HZ_VC_FRONT10_HZ_INDEX_COMPRESSOR_CHOICE (4u)
#define MODEL3_CAN_ID2_C1_VC_FRONT10HZ_VC_FRONT10_HZ_INDEX_EXV_EVAP_SOLENOID_AIRFLOW_CHOICE (5u)
#define MODEL3_CAN_ID2_C1_VC_FRONT10HZ_VC_FRONT10_HZ_INDEX_END_CHOICE (6u)

#define MODEL3_CAN_ID2_C1_VC_FRONT10HZ_V_CFRONTFIVE_WAY_VALVE_MODE_SERIES_CHOICE (0u)
#define MODEL3_CAN_ID2_C1_VC_FRONT10HZ_V_CFRONTFIVE_WAY_VALVE_MODE_PARALLEL_CHOICE (1u)

#define MODEL3_CAN_ID2_C1_VC_FRONT10HZ_V_CFRONTCOOLANT_TEMP_BASED_MODE_SERIES_CHOICE (0u)
#define MODEL3_CAN_ID2_C1_VC_FRONT10HZ_V_CFRONTCOOLANT_TEMP_BASED_MODE_PARALLEL_CHOICE (1u)

#define MODEL3_CAN_ID2_C1_VC_FRONT10HZ_V_CFRONTCOMPRESSOR_STATE_STANDBY_CHOICE (0u)
#define MODEL3_CAN_ID2_C1_VC_FRONT10HZ_V_CFRONTCOMPRESSOR_STATE_READY_CHOICE (1u)
#define MODEL3_CAN_ID2_C1_VC_FRONT10HZ_V_CFRONTCOMPRESSOR_STATE_RUNNING_CHOICE (2u)
#define MODEL3_CAN_ID2_C1_VC_FRONT10HZ_V_CFRONTCOMPRESSOR_STATE_FAULT_CHOICE (3u)

#define MODEL3_CAN_ID2_C1_VC_FRONT10HZ_V_CFRONTFIVE_WAY_VALVE_STATE_UNPOWERED_CHOICE (0u)
#define MODEL3_CAN_ID2_C1_VC_FRONT10HZ_V_CFRONTFIVE_WAY_VALVE_STATE_CALIBRATING_CHOICE (1u)
#define MODEL3_CAN_ID2_C1_VC_FRONT10HZ_V_CFRONTFIVE_WAY_VALVE_STATE_READY_CHOICE (2u)
#define MODEL3_CAN_ID2_C1_VC_FRONT10HZ_V_CFRONTFIVE_WAY_VALVE_STATE_FAULT_CHOICE (3u)

#define MODEL3_CAN_ID2_E1_VCFRONT_STATUS_VCFRONT_STATUS_INDEX_VCF_STS_IDX_BODY_CONTROLS_CHOICE (0u)
#define MODEL3_CAN_ID2_E1_VCFRONT_STATUS_VCFRONT_STATUS_INDEX_VCF_STS_IDX_VEHICLE_STATE_CHOICE (1u)
#define MODEL3_CAN_ID2_E1_VCFRONT_STATUS_VCFRONT_STATUS_INDEX_VCF_STS_IDX_HOMELINK_CHOICE (2u)
#define MODEL3_CAN_ID2_E1_VCFRONT_STATUS_VCFRONT_STATUS_INDEX_VCF_STS_IDX_REFRIGERANT_SYSTEM_CHOICE (3u)
#define MODEL3_CAN_ID2_E1_VCFRONT_STATUS_VCFRONT_STATUS_INDEX_VCF_STS_IDX_LV_BATTERY_CHOICE (4u)
#define MODEL3_CAN_ID2_E1_VCFRONT_STATUS_VCFRONT_STATUS_INDEX_VCF_STS_IDX_SYSTEM_HEALTH_CHOICE (5u)
#define MODEL3_CAN_ID2_E1_VCFRONT_STATUS_VCFRONT_STATUS_INDEX_VCF_STS_IDX_INVALID_CHOICE (6u)

#define MODEL3_CAN_ID2_E1_VCFRONT_STATUS_VCFRONT_FRUNK_LATCH_STATUS_LATCH_SNA_CHOICE (0u)
#define MODEL3_CAN_ID2_E1_VCFRONT_STATUS_VCFRONT_FRUNK_LATCH_STATUS_LATCH_OPENED_CHOICE (1u)
#define MODEL3_CAN_ID2_E1_VCFRONT_STATUS_VCFRONT_FRUNK_LATCH_STATUS_LATCH_CLOSED_CHOICE (2u)
#define MODEL3_CAN_ID2_E1_VCFRONT_STATUS_VCFRONT_FRUNK_LATCH_STATUS_LATCH_CLOSING_CHOICE (3u)
#define MODEL3_CAN_ID2_E1_VCFRONT_STATUS_VCFRONT_FRUNK_LATCH_STATUS_LATCH_OPENING_CHOICE (4u)
#define MODEL3_CAN_ID2_E1_VCFRONT_STATUS_VCFRONT_FRUNK_LATCH_STATUS_LATCH_AJAR_CHOICE (5u)
#define MODEL3_CAN_ID2_E1_VCFRONT_STATUS_VCFRONT_FRUNK_LATCH_STATUS_LATCH_TIMEOUT_CHOICE (6u)
#define MODEL3_CAN_ID2_E1_VCFRONT_STATUS_VCFRONT_FRUNK_LATCH_STATUS_LATCH_DEFAULT_CHOICE (7u)
#define MODEL3_CAN_ID2_E1_VCFRONT_STATUS_VCFRONT_FRUNK_LATCH_STATUS_LATCH_FAULT_CHOICE (8u)

#define MODEL3_CAN_ID2_E1_VCFRONT_STATUS_VCFRONT_I_BOOSTER_STATE_DBG_IBOOSTER_OFF_CHOICE (0u)
#define MODEL3_CAN_ID2_E1_VCFRONT_STATUS_VCFRONT_I_BOOSTER_STATE_DBG_IBOOSTER_ON_CHOICE (1u)
#define MODEL3_CAN_ID2_E1_VCFRONT_STATUS_VCFRONT_I_BOOSTER_STATE_DBG_IBOOSTER_GOING_DOWN_CHOICE (2u)
#define MODEL3_CAN_ID2_E1_VCFRONT_STATUS_VCFRONT_I_BOOSTER_STATE_DBG_IBOOSTER_WRITING_DATA_SHUTDOWN_CHOICE (3u)
#define MODEL3_CAN_ID2_E1_VCFRONT_STATUS_VCFRONT_I_BOOSTER_STATE_DBG_IBOOSTER_FORCE_OFF_CHOICE (4u)

#define MODEL3_CAN_ID2_E1_VCFRONT_STATUS_VCFRONT_VEHICLE_STATUS_DBG_VEHICLE_STATUS_INIT_CHOICE (0u)
#define MODEL3_CAN_ID2_E1_VCFRONT_STATUS_VCFRONT_VEHICLE_STATUS_DBG_VEHICLE_STATUS_LOW_POWER_STANDBY_CHOICE (1u)
#define MODEL3_CAN_ID2_E1_VCFRONT_STATUS_VCFRONT_VEHICLE_STATUS_DBG_VEHICLE_STATUS_SILENT_WAKE_CHOICE (2u)
#define MODEL3_CAN_ID2_E1_VCFRONT_STATUS_VCFRONT_VEHICLE_STATUS_DBG_VEHICLE_STATUS_BATTERY_POST_WAKE_CHOICE (3u)
#define MODEL3_CAN_ID2_E1_VCFRONT_STATUS_VCFRONT_VEHICLE_STATUS_DBG_VEHICLE_STATUS_SYSTEM_CHECKS_CHOICE (4u)
#define MODEL3_CAN_ID2_E1_VCFRONT_STATUS_VCFRONT_VEHICLE_STATUS_DBG_VEHICLE_STATUS_SLEEP_SHUTDOWN_CHOICE (5u)
#define MODEL3_CAN_ID2_E1_VCFRONT_STATUS_VCFRONT_VEHICLE_STATUS_DBG_VEHICLE_STATUS_SLEEP_STANDBY_CHOICE (6u)
#define MODEL3_CAN_ID2_E1_VCFRONT_STATUS_VCFRONT_VEHICLE_STATUS_DBG_VEHICLE_STATUS_LV_SHUTDOWN_CHOICE (7u)
#define MODEL3_CAN_ID2_E1_VCFRONT_STATUS_VCFRONT_VEHICLE_STATUS_DBG_VEHICLE_STATUS_LV_AWAKE_CHOICE (8u)
#define MODEL3_CAN_ID2_E1_VCFRONT_STATUS_VCFRONT_VEHICLE_STATUS_DBG_VEHICLE_STATUS_HV_UP_STANDBY_CHOICE (9u)
#define MODEL3_CAN_ID2_E1_VCFRONT_STATUS_VCFRONT_VEHICLE_STATUS_DBG_VEHICLE_STATUS_ACCESSORY_CHOICE (10u)
#define MODEL3_CAN_ID2_E1_VCFRONT_STATUS_VCFRONT_VEHICLE_STATUS_DBG_VEHICLE_STATUS_ACCESSORY_PLUS_CHOICE (11u)
#define MODEL3_CAN_ID2_E1_VCFRONT_STATUS_VCFRONT_VEHICLE_STATUS_DBG_VEHICLE_STATUS_CONDITIONING_CHOICE (12u)
#define MODEL3_CAN_ID2_E1_VCFRONT_STATUS_VCFRONT_VEHICLE_STATUS_DBG_VEHICLE_STATUS_DRIVE_CHOICE (13u)
#define MODEL3_CAN_ID2_E1_VCFRONT_STATUS_VCFRONT_VEHICLE_STATUS_DBG_VEHICLE_STATUS_CRASH_CHOICE (14u)
#define MODEL3_CAN_ID2_E1_VCFRONT_STATUS_VCFRONT_VEHICLE_STATUS_DBG_VEHICLE_STATUS_OTA_CHOICE (15u)
#define MODEL3_CAN_ID2_E1_VCFRONT_STATUS_VCFRONT_VEHICLE_STATUS_DBG_VEHICLE_STATUS_TURN_ON_RAILS_CHOICE (16u)
#define MODEL3_CAN_ID2_E1_VCFRONT_STATUS_VCFRONT_VEHICLE_STATUS_DBG_VEHICLE_STATUS_RESET_CHOICE (17u)

#define MODEL3_CAN_ID2_E1_VCFRONT_STATUS_VCFRONT_WIPER_SPEED_WIPER_SPEED_SNA_CHOICE (0u)
#define MODEL3_CAN_ID2_E1_VCFRONT_STATUS_VCFRONT_WIPER_SPEED_WIPER_SPEED_OFF_CHOICE (1u)
#define MODEL3_CAN_ID2_E1_VCFRONT_STATUS_VCFRONT_WIPER_SPEED_WIPER_SPEED_1_CHOICE (2u)
#define MODEL3_CAN_ID2_E1_VCFRONT_STATUS_VCFRONT_WIPER_SPEED_WIPER_SPEED_2_CHOICE (3u)
#define MODEL3_CAN_ID2_E1_VCFRONT_STATUS_VCFRONT_WIPER_SPEED_WIPER_SPEED_3_CHOICE (4u)
#define MODEL3_CAN_ID2_E1_VCFRONT_STATUS_VCFRONT_WIPER_SPEED_WIPER_SPEED_4_CHOICE (5u)
#define MODEL3_CAN_ID2_E1_VCFRONT_STATUS_VCFRONT_WIPER_SPEED_WIPER_SPEED_5_CHOICE (6u)
#define MODEL3_CAN_ID2_E1_VCFRONT_STATUS_VCFRONT_WIPER_SPEED_WIPER_SPEED_LOW_CHOICE (7u)
#define MODEL3_CAN_ID2_E1_VCFRONT_STATUS_VCFRONT_WIPER_SPEED_WIPER_SPEED_HIGH_CHOICE (8u)

#define MODEL3_CAN_ID2_E1_VCFRONT_STATUS_VCFRONT_WIPER_POSITION_WIPER_POSITION_SNA_CHOICE (0u)
#define MODEL3_CAN_ID2_E1_VCFRONT_STATUS_VCFRONT_WIPER_POSITION_WIPER_POSITION_SERVICE_CHOICE (1u)
#define MODEL3_CAN_ID2_E1_VCFRONT_STATUS_VCFRONT_WIPER_POSITION_WIPER_POSITION_DEPRESSED_PARK_CHOICE (2u)
#define MODEL3_CAN_ID2_E1_VCFRONT_STATUS_VCFRONT_WIPER_POSITION_WIPER_POSITION_DELAYED_REST_CHOICE (3u)
#define MODEL3_CAN_ID2_E1_VCFRONT_STATUS_VCFRONT_WIPER_POSITION_WIPER_POSITION_WIPING_CHOICE (4u)

#define MODEL3_CAN_ID2_E1_VCFRONT_STATUS_VCFRONT_BATTERY_SM_STATE_BATTERY_SM_STATE_INIT_CHOICE (0u)
#define MODEL3_CAN_ID2_E1_VCFRONT_STATUS_VCFRONT_BATTERY_SM_STATE_BATTERY_SM_STATE_CHARGE_CHOICE (1u)
#define MODEL3_CAN_ID2_E1_VCFRONT_STATUS_VCFRONT_BATTERY_SM_STATE_BATTERY_SM_STATE_DISCHARGE_CHOICE (2u)
#define MODEL3_CAN_ID2_E1_VCFRONT_STATUS_VCFRONT_BATTERY_SM_STATE_BATTERY_SM_STATE_STANDBY_CHOICE (3u)
#define MODEL3_CAN_ID2_E1_VCFRONT_STATUS_VCFRONT_BATTERY_SM_STATE_BATTERY_SM_STATE_RESISTANCE_ESTIMATION_CHOICE (4u)
#define MODEL3_CAN_ID2_E1_VCFRONT_STATUS_VCFRONT_BATTERY_SM_STATE_BATTERY_SM_STATE_OTA_STANDBY_CHOICE (5u)
#define MODEL3_CAN_ID2_E1_VCFRONT_STATUS_VCFRONT_BATTERY_SM_STATE_BATTERY_SM_STATE_DISCONNECTED_BATTERY_TEST_CHOICE (6u)
#define MODEL3_CAN_ID2_E1_VCFRONT_STATUS_VCFRONT_BATTERY_SM_STATE_BATTERY_SM_STATE_FAULT_CHOICE (7u)

#define MODEL3_CAN_ID2_E1_VCFRONT_STATUS_VCFRONT_VBAT_MONITOR_VOLTAGE_SNA_CHOICE (4095u)

#define MODEL3_CAN_ID2_E1_VCFRONT_STATUS_VCFRONT_WIPER_STATE_WIPER_STATE_SNA_CHOICE (0u)
#define MODEL3_CAN_ID2_E1_VCFRONT_STATUS_VCFRONT_WIPER_STATE_WIPER_STATE_SERVICE_CHOICE (1u)
#define MODEL3_CAN_ID2_E1_VCFRONT_STATUS_VCFRONT_WIPER_STATE_WIPER_STATE_FAULT_CHOICE (2u)
#define MODEL3_CAN_ID2_E1_VCFRONT_STATUS_VCFRONT_WIPER_STATE_WIPER_STATE_DELAYED_REST_CHOICE (3u)
#define MODEL3_CAN_ID2_E1_VCFRONT_STATUS_VCFRONT_WIPER_STATE_WIPER_STATE_PARK_CHOICE (4u)
#define MODEL3_CAN_ID2_E1_VCFRONT_STATUS_VCFRONT_WIPER_STATE_WIPER_STATE_WASH_CHOICE (5u)
#define MODEL3_CAN_ID2_E1_VCFRONT_STATUS_VCFRONT_WIPER_STATE_WIPER_STATE_MOMENTARY_WIPE_CHOICE (6u)
#define MODEL3_CAN_ID2_E1_VCFRONT_STATUS_VCFRONT_WIPER_STATE_WIPER_STATE_INTERMITTENT_HIGH_CHOICE (7u)
#define MODEL3_CAN_ID2_E1_VCFRONT_STATUS_VCFRONT_WIPER_STATE_WIPER_STATE_INTERMITTENT_LOW_CHOICE (8u)
#define MODEL3_CAN_ID2_E1_VCFRONT_STATUS_VCFRONT_WIPER_STATE_WIPER_STATE_CONT_FAST_CHOICE (9u)
#define MODEL3_CAN_ID2_E1_VCFRONT_STATUS_VCFRONT_WIPER_STATE_WIPER_STATE_CONT_SLOW_CHOICE (10u)
#define MODEL3_CAN_ID2_E1_VCFRONT_STATUS_VCFRONT_WIPER_STATE_WIPER_STATE_INT_AUTO_LOW_CHOICE (11u)
#define MODEL3_CAN_ID2_E1_VCFRONT_STATUS_VCFRONT_WIPER_STATE_WIPER_STATE_INT_AUTO_HIGH_CHOICE (12u)

#define MODEL3_CAN_ID2_E1_VCFRONT_STATUS_VCFRONT_CRASH_DETECTED_TYPE_CRASH_DETECTED_TYPE_NONE_CHOICE (0u)
#define MODEL3_CAN_ID2_E1_VCFRONT_STATUS_VCFRONT_CRASH_DETECTED_TYPE_CRASH_DETECTED_TYPE_MINOR_CHOICE (1u)
#define MODEL3_CAN_ID2_E1_VCFRONT_STATUS_VCFRONT_CRASH_DETECTED_TYPE_CRASH_DETECTED_TYPE_SEVERE_CHOICE (2u)

#define MODEL3_CAN_ID2_E1_VCFRONT_STATUS_VCFRONT_CRASH_STATE_CRASH_STATE_IDLE_CHOICE (0u)
#define MODEL3_CAN_ID2_E1_VCFRONT_STATUS_VCFRONT_CRASH_STATE_CRASH_STATE_MINOR_CHOICE (1u)
#define MODEL3_CAN_ID2_E1_VCFRONT_STATUS_VCFRONT_CRASH_STATE_CRASH_STATE_SEVERE_CHOICE (2u)

#define MODEL3_CAN_ID2_E1_VCFRONT_STATUS_VCFRONT_AIR_COMPRESSOR_STATUS_VCFRONT_AIR_COMPRESSOR_STATUS_OFF_CHOICE (0u)
#define MODEL3_CAN_ID2_E1_VCFRONT_STATUS_VCFRONT_AIR_COMPRESSOR_STATUS_VCFRONT_AIR_COMPRESSOR_STATUS_ON_CHOICE (1u)
#define MODEL3_CAN_ID2_E1_VCFRONT_STATUS_VCFRONT_AIR_COMPRESSOR_STATUS_VCFRONT_AIR_COMPRESSOR_STATUS_TURNING_OFF_CHOICE (2u)
#define MODEL3_CAN_ID2_E1_VCFRONT_STATUS_VCFRONT_AIR_COMPRESSOR_STATUS_VCFRONT_AIR_COMPRESSOR_STATUS_TURNING_ON_CHOICE (3u)
#define MODEL3_CAN_ID2_E1_VCFRONT_STATUS_VCFRONT_AIR_COMPRESSOR_STATUS_VCFRONT_AIR_COMPRESSOR_STATUS_FAULT_CHOICE (4u)
#define MODEL3_CAN_ID2_E1_VCFRONT_STATUS_VCFRONT_AIR_COMPRESSOR_STATUS_VCFRONT_AIR_COMPRESSOR_STATUS_RETRY_AVAILABLE_CHOICE (5u)
#define MODEL3_CAN_ID2_E1_VCFRONT_STATUS_VCFRONT_AIR_COMPRESSOR_STATUS_VCFRONT_AIR_COMPRESSOR_STATUS_SNA_CHOICE (7u)

#define MODEL3_CAN_ID2_E1_VCFRONT_STATUS_VCFRONT_AS8510_VOLTAGE_SNA_CHOICE (4095u)

#define MODEL3_CAN_ID2_E1_VCFRONT_STATUS_VCFRONT_VOLTAGE_PROFILE_VOLTAGE_PROFILE_CHARGE_CHOICE (0u)
#define MODEL3_CAN_ID2_E1_VCFRONT_STATUS_VCFRONT_VOLTAGE_PROFILE_VOLTAGE_PROFILE_FLOAT_CHOICE (1u)
#define MODEL3_CAN_ID2_E1_VCFRONT_STATUS_VCFRONT_VOLTAGE_PROFILE_VOLTAGE_PROFILE_REDUCED_FLOAT_CHOICE (2u)
#define MODEL3_CAN_ID2_E1_VCFRONT_STATUS_VCFRONT_VOLTAGE_PROFILE_VOLTAGE_PROFILE_ALWAYS_CLOSED_CONTACTORS_CHOICE (3u)

#define MODEL3_CAN_ID2_E1_VCFRONT_STATUS_VCFRONT_PRESSURE_REFRIG_SUCTION_SNA_CHOICE (127u)

#define MODEL3_CAN_ID2_E1_VCFRONT_STATUS_VCFRONT_PRESSURE_REFRIG_DISCHARGE_SNA_CHOICE (255u)

#define MODEL3_CAN_ID2_E1_VCFRONT_STATUS_VCFRONT_HOMELINK_COMM_STATUS_HOMELINK_COMM_STATUS_SNA_CHOICE (0u)
#define MODEL3_CAN_ID2_E1_VCFRONT_STATUS_VCFRONT_HOMELINK_COMM_STATUS_HOMELINK_COMM_STATUS_OFF_CHOICE (1u)
#define MODEL3_CAN_ID2_E1_VCFRONT_STATUS_VCFRONT_HOMELINK_COMM_STATUS_HOMELINK_COMM_STATUS_ON_CHOICE (2u)
#define MODEL3_CAN_ID2_E1_VCFRONT_STATUS_VCFRONT_HOMELINK_COMM_STATUS_HOMELINK_COMM_STATUS_FAULT_CHOICE (3u)

#define MODEL3_CAN_ID381_VCFRONT_LOGGING1_HZ_VCFRONT_LOGGING1_HZ_INDEX_COOLANT_CHOICE (0u)
#define MODEL3_CAN_ID381_VCFRONT_LOGGING1_HZ_VCFRONT_LOGGING1_HZ_INDEX_FAN_DEMAND_CONDENSER_AND_FET_TEMPS_CHOICE (1u)
#define MODEL3_CAN_ID381_VCFRONT_LOGGING1_HZ_VCFRONT_LOGGING1_HZ_INDEX_FIVE_WAY_VALVE_CHOICE (2u)
#define MODEL3_CAN_ID381_VCFRONT_LOGGING1_HZ_VCFRONT_LOGGING1_HZ_INDEX_HCML_LED_TEMPS_CHOICE (3u)
#define MODEL3_CAN_ID381_VCFRONT_LOGGING1_HZ_VCFRONT_LOGGING1_HZ_INDEX_HCMR_LED_TEMPS_CHOICE (4u)
#define MODEL3_CAN_ID381_VCFRONT_LOGGING1_HZ_VCFRONT_LOGGING1_HZ_INDEX_HOMELINK_CHOICE (5u)
#define MODEL3_CAN_ID381_VCFRONT_LOGGING1_HZ_VCFRONT_LOGGING1_HZ_INDEX_HEADLAMP_AIM_CHOICE (6u)
#define MODEL3_CAN_ID381_VCFRONT_LOGGING1_HZ_VCFRONT_LOGGING1_HZ_INDEX_HP_EXV_RANGE_CHOICE (7u)
#define MODEL3_CAN_ID381_VCFRONT_LOGGING1_HZ_VCFRONT_LOGGING1_HZ_INDEX_HP_DATA_AND_ACCUMULATORS_CHOICE (8u)
#define MODEL3_CAN_ID381_VCFRONT_LOGGING1_HZ_VCFRONT_LOGGING1_HZ_INDEX_HP_CONTROL_LOOP_AND_STATE_CHOICE (9u)
#define MODEL3_CAN_ID381_VCFRONT_LOGGING1_HZ_VCFRONT_LOGGING1_HZ_INDEX_HP_CYCLE_MODEL_CHOICE (10u)
#define MODEL3_CAN_ID381_VCFRONT_LOGGING1_HZ_VCFRONT_LOGGING1_HZ_INDEX_END_CHOICE (11u)

#define MODEL3_CAN_ID381_VCFRONT_LOGGING1_HZ_VCFRONT_FIVE_WAY_VALVE_RECAL_REASON_UNDEFINED_CHOICE (0u)
#define MODEL3_CAN_ID381_VCFRONT_LOGGING1_HZ_VCFRONT_FIVE_WAY_VALVE_RECAL_REASON_MAX_TRAVEL_CHOICE (1u)
#define MODEL3_CAN_ID381_VCFRONT_LOGGING1_HZ_VCFRONT_FIVE_WAY_VALVE_RECAL_REASON_GENERAL_FAULT_CHOICE (2u)
#define MODEL3_CAN_ID381_VCFRONT_LOGGING1_HZ_VCFRONT_FIVE_WAY_VALVE_RECAL_REASON_CALIBRATION_FAULT_NO_TRAVEL_CHOICE (3u)
#define MODEL3_CAN_ID381_VCFRONT_LOGGING1_HZ_VCFRONT_FIVE_WAY_VALVE_RECAL_REASON_SELF_TEST_CHOICE (4u)
#define MODEL3_CAN_ID381_VCFRONT_LOGGING1_HZ_VCFRONT_FIVE_WAY_VALVE_RECAL_REASON_MOTOR_FEEDBACK_INTERRUPTED_CHOICE (5u)

#define MODEL3_CAN_ID381_VCFRONT_LOGGING1_HZ_VCFRONT_HOMELINK_REGION_CODE_HOMELINK_REGION_CODE_UNKNOWN_CHOICE (0u)
#define MODEL3_CAN_ID381_VCFRONT_LOGGING1_HZ_VCFRONT_HOMELINK_REGION_CODE_HOMELINK_REGION_CODE_EUROPE_CHOICE (1u)
#define MODEL3_CAN_ID381_VCFRONT_LOGGING1_HZ_VCFRONT_HOMELINK_REGION_CODE_HOMELINK_REGION_CODE_AMERICAS_CHOICE (5u)
#define MODEL3_CAN_ID381_VCFRONT_LOGGING1_HZ_VCFRONT_HOMELINK_REGION_CODE_HOMELINK_REGION_CODE_REST_OF_WORLD_CHOICE (8u)
#define MODEL3_CAN_ID381_VCFRONT_LOGGING1_HZ_VCFRONT_HOMELINK_REGION_CODE_HOMELINK_REGION_CODE_CHINA_CHOICE (9u)

#define MODEL3_CAN_ID381_VCFRONT_LOGGING1_HZ_VCFRONT_HCML_LOW_BEAM_SPOT_TEMP_SNA_CHOICE (-128)

#define MODEL3_CAN_ID381_VCFRONT_LOGGING1_HZ_VCFRONT_HCMR_LOW_BEAM_SPOT_TEMP_SNA_CHOICE (-128)

#define MODEL3_CAN_ID381_VCFRONT_LOGGING1_HZ_VCFRONT_FIVE_WAY_VALVE_COUNT_RANGE_SNA_CHOICE (1023u)

#define MODEL3_CAN_ID381_VCFRONT_LOGGING1_HZ_VCFRONT_MODE_TRANSITION_ID_PARALLEL_F1_NO_FLOW_REQUEST_CHOICE (0u)
#define MODEL3_CAN_ID381_VCFRONT_LOGGING1_HZ_VCFRONT_MODE_TRANSITION_ID_SERIES_F2_FAULT_PUMPS_CHOICE (1u)
#define MODEL3_CAN_ID381_VCFRONT_LOGGING1_HZ_VCFRONT_MODE_TRANSITION_ID_SERIES_F3_FAULT_TEMP_SENSORS_CHOICE (2u)
#define MODEL3_CAN_ID381_VCFRONT_LOGGING1_HZ_VCFRONT_MODE_TRANSITION_ID_SERIES_1_DRIVE_BATTERY_WANTS_COOL_CHOICE (3u)
#define MODEL3_CAN_ID381_VCFRONT_LOGGING1_HZ_VCFRONT_MODE_TRANSITION_ID_SERIES_2_DRIVE_BATTERY_NEEDS_HEAT_CHOICE (4u)
#define MODEL3_CAN_ID381_VCFRONT_LOGGING1_HZ_VCFRONT_MODE_TRANSITION_ID_SERIES_3_DRIVE_BATTERY_WANTS_HEAT_CHOICE (5u)
#define MODEL3_CAN_ID381_VCFRONT_LOGGING1_HZ_VCFRONT_MODE_TRANSITION_ID_PARALLEL_2_DRIVE_BATTERY_WANTS_HEAT_CHOICE (6u)
#define MODEL3_CAN_ID381_VCFRONT_LOGGING1_HZ_VCFRONT_MODE_TRANSITION_ID_PARALLEL_3_DRIVE_BATTERY_WANTS_COOL_CHOICE (7u)
#define MODEL3_CAN_ID381_VCFRONT_LOGGING1_HZ_VCFRONT_MODE_TRANSITION_ID_PARALLEL_4_DRIVE_BATTERY_NEEDS_COOL_CHOICE (8u)
#define MODEL3_CAN_ID381_VCFRONT_LOGGING1_HZ_VCFRONT_MODE_TRANSITION_ID_SERIES_4_CHARGE_BATTERY_NEEDS_HEAT_CHOICE (9u)
#define MODEL3_CAN_ID381_VCFRONT_LOGGING1_HZ_VCFRONT_MODE_TRANSITION_ID_SERIES_5_CHARGE_BATTERY_WANTS_HEAT_CHOICE (10u)
#define MODEL3_CAN_ID381_VCFRONT_LOGGING1_HZ_VCFRONT_MODE_TRANSITION_ID_PARALLEL_5_CHARGE_BATTERY_WANTS_HEAT_CHOICE (11u)
#define MODEL3_CAN_ID381_VCFRONT_LOGGING1_HZ_VCFRONT_MODE_TRANSITION_ID_PARALLEL_6_CHARGE_BATTERY_WANTS_COOL_CHOICE (12u)
#define MODEL3_CAN_ID381_VCFRONT_LOGGING1_HZ_VCFRONT_MODE_TRANSITION_ID_SERIES_6_FAST_CHARGE_BATTERY_NEEDS_HEAT_CHOICE (13u)
#define MODEL3_CAN_ID381_VCFRONT_LOGGING1_HZ_VCFRONT_MODE_TRANSITION_ID_SERIES_7_FAST_CHARGE_BATTERY_WANTS_COOL_CHOICE (14u)
#define MODEL3_CAN_ID381_VCFRONT_LOGGING1_HZ_VCFRONT_MODE_TRANSITION_ID_PARALLEL_7_FAST_CHARGE_BATTERY_WANTS_COOL_CHOICE (15u)
#define MODEL3_CAN_ID381_VCFRONT_LOGGING1_HZ_VCFRONT_MODE_TRANSITION_ID_PARALLEL_8_FAST_CHARGE_BATTERY_WANTS_HEAT_CHOICE (16u)
#define MODEL3_CAN_ID381_VCFRONT_LOGGING1_HZ_VCFRONT_MODE_TRANSITION_ID_SERIES_8_PRE_CONDITIONING_BATTERY_NEEDS_HEAT_CHOICE (17u)
#define MODEL3_CAN_ID381_VCFRONT_LOGGING1_HZ_VCFRONT_MODE_TRANSITION_ID_SERIES_9_DRIVE_DRIVE_UNIT_THERMAL_LIMITING_CHOICE (18u)
#define MODEL3_CAN_ID381_VCFRONT_LOGGING1_HZ_VCFRONT_MODE_TRANSITION_ID_PARALLEL_9_DRIVE_BATTERY_THERMAL_LIMITING_CHOICE (19u)
#define MODEL3_CAN_ID381_VCFRONT_LOGGING1_HZ_VCFRONT_MODE_TRANSITION_ID_INIT_CHOICE (20u)
#define MODEL3_CAN_ID381_VCFRONT_LOGGING1_HZ_VCFRONT_MODE_TRANSITION_ID_OVERRIDE_CHOICE (21u)
#define MODEL3_CAN_ID381_VCFRONT_LOGGING1_HZ_VCFRONT_MODE_TRANSITION_ID_UNDEFINED_CHOICE (22u)
#define MODEL3_CAN_ID381_VCFRONT_LOGGING1_HZ_VCFRONT_MODE_TRANSITION_ID_ENTER_AMBIENTSOURCE_CHOICE (23u)
#define MODEL3_CAN_ID381_VCFRONT_LOGGING1_HZ_VCFRONT_MODE_TRANSITION_ID_EXIT_AMBIENTSOURCE_CHOICE (24u)
#define MODEL3_CAN_ID381_VCFRONT_LOGGING1_HZ_VCFRONT_MODE_TRANSITION_ID_SER_1_DRIVE_BATT_BELOW_PASSIVE_TARGET_CHOICE (25u)
#define MODEL3_CAN_ID381_VCFRONT_LOGGING1_HZ_VCFRONT_MODE_TRANSITION_ID_SER_2_DRIVE_CHILLER_PASSIVELY_COOLS_CHOICE (26u)
#define MODEL3_CAN_ID381_VCFRONT_LOGGING1_HZ_VCFRONT_MODE_TRANSITION_ID_SER_3_DRIVE_RAD_PASSIVELY_COOLS_BATT_CHOICE (27u)
#define MODEL3_CAN_ID381_VCFRONT_LOGGING1_HZ_VCFRONT_MODE_TRANSITION_ID_PAR_1_DRIVE_CHILLER_PASSIVELY_COOLS_BATT_CHOICE (28u)
#define MODEL3_CAN_ID381_VCFRONT_LOGGING1_HZ_VCFRONT_MODE_TRANSITION_ID_PAR_2_FC_BATT_HEATING_NOT_NEEDED_CHOICE (29u)

#define MODEL3_CAN_ID381_VCFRONT_LOGGING1_HZ_VCFRONT_MODE_DESIRED_SERIES_CHOICE (0u)
#define MODEL3_CAN_ID381_VCFRONT_LOGGING1_HZ_VCFRONT_MODE_DESIRED_PARALLEL_CHOICE (1u)
#define MODEL3_CAN_ID381_VCFRONT_LOGGING1_HZ_VCFRONT_MODE_DESIRED_BLEND_CHOICE (2u)
#define MODEL3_CAN_ID381_VCFRONT_LOGGING1_HZ_VCFRONT_MODE_DESIRED_AMBIENT_SOURCE_CHOICE (3u)

#define MODEL3_CAN_ID381_VCFRONT_LOGGING1_HZ_VCFRONT_HCML_HIGH_BEAM_TEMP_SNA_CHOICE (-128)

#define MODEL3_CAN_ID381_VCFRONT_LOGGING1_HZ_VCFRONT_HCMR_HIGH_BEAM_TEMP_SNA_CHOICE (-128)

#define MODEL3_CAN_ID381_VCFRONT_LOGGING1_HZ_VCFRONT_HCML_TURN_TEMP_SNA_CHOICE (-128)

#define MODEL3_CAN_ID381_VCFRONT_LOGGING1_HZ_VCFRONT_HCMR_TURN_TEMP_SNA_CHOICE (-128)

#define MODEL3_CAN_ID381_VCFRONT_LOGGING1_HZ_VCFRONT_HCML_BLADE_TEMP_SNA_CHOICE (-128)

#define MODEL3_CAN_ID381_VCFRONT_LOGGING1_HZ_VCFRONT_HCMR_BLADE_TEMP_SNA_CHOICE (-128)

#define MODEL3_CAN_ID381_VCFRONT_LOGGING1_HZ_VCFRONT_TEMP_REFRIG_SUCTION_SNA_CHOICE (255u)

#define MODEL3_CAN_ID381_VCFRONT_LOGGING1_HZ_VCFRONT_HCML_DIFFUSE_TEMP_SNA_CHOICE (-128)

#define MODEL3_CAN_ID381_VCFRONT_LOGGING1_HZ_VCFRONT_HCMR_DIFFUSE_TEMP_SNA_CHOICE (-128)

#define MODEL3_CAN_ID381_VCFRONT_LOGGING1_HZ_VCFRONT_PUMP_BATTERY_FET_TEMP_SNA_CHOICE (255u)

#define MODEL3_CAN_ID381_VCFRONT_LOGGING1_HZ_VCFRONT_PUMP_POWERTRAIN_FET_TEMP_SNA_CHOICE (255u)

#define MODEL3_CAN_ID381_VCFRONT_LOGGING1_HZ_VCFRONT_FIVE_WAY_VALVE_RAD_BYPASS_SNA_CHOICE (127u)

#define MODEL3_CAN_ID381_VCFRONT_LOGGING1_HZ_VCFRONT_RADIATOR_FAN_FET_TEMP_SNA_CHOICE (255u)

#define MODEL3_CAN_ID381_VCFRONT_LOGGING1_HZ_VCFRONT_PASSIVE_COOLING_STATE_CHILLER_COOLS_SERIES_LOOP_CHOICE (0u)
#define MODEL3_CAN_ID381_VCFRONT_LOGGING1_HZ_VCFRONT_PASSIVE_COOLING_STATE_CHILLER_COOLS_PARALLEL_BATT_LOOP_CHOICE (1u)
#define MODEL3_CAN_ID381_VCFRONT_LOGGING1_HZ_VCFRONT_PASSIVE_COOLING_STATE_CHILLER_AND_RAD_COOL_SERIES_LOOP_CHOICE (2u)

#define MODEL3_CAN_ID229_GEAR_LEVER_GEAR_LEVER_POSITION229_CENTER_CHOICE (0u)
#define MODEL3_CAN_ID229_GEAR_LEVER_GEAR_LEVER_POSITION229_HALF__DOWN_CHOICE (1u)
#define MODEL3_CAN_ID229_GEAR_LEVER_GEAR_LEVER_POSITION229_FULL__DOWN_CHOICE (2u)
#define MODEL3_CAN_ID229_GEAR_LEVER_GEAR_LEVER_POSITION229_HALF__UP_CHOICE (3u)
#define MODEL3_CAN_ID229_GEAR_LEVER_GEAR_LEVER_POSITION229_FULL__UP_CHOICE (4u)

#define MODEL3_CAN_ID249_LEFT_STALK_LEFT_STALK_F_RPOS249_CENTER_CHOICE (0u)
#define MODEL3_CAN_ID249_LEFT_STALK_LEFT_STALK_F_RPOS249_PULL_CHOICE (1u)
#define MODEL3_CAN_ID249_LEFT_STALK_LEFT_STALK_F_RPOS249_PUSH_CHOICE (2u)

#define MODEL3_CAN_ID249_LEFT_STALK_LEFT_STALK_U_DPOS249_CENTER_CHOICE (0u)
#define MODEL3_CAN_ID249_LEFT_STALK_LEFT_STALK_U_DPOS249_HALF__UP_CHOICE (1u)
#define MODEL3_CAN_ID249_LEFT_STALK_LEFT_STALK_U_DPOS249_FULL__UP_CHOICE (2u)
#define MODEL3_CAN_ID249_LEFT_STALK_LEFT_STALK_U_DPOS249_HALF__DOWN_CHOICE (3u)
#define MODEL3_CAN_ID249_LEFT_STALK_LEFT_STALK_U_DPOS249_FULL__DOWN_CHOICE (4u)

#define MODEL3_CAN_ID396_FRONT_OIL_PUMP_FRONT_OIL_PUMP_STATE396_OIL_PUMP_STANDBY_CHOICE (0u)
#define MODEL3_CAN_ID396_FRONT_OIL_PUMP_FRONT_OIL_PUMP_STATE396_OIL_PUMP_ENABLE_CHOICE (1u)
#define MODEL3_CAN_ID396_FRONT_OIL_PUMP_FRONT_OIL_PUMP_STATE396_OIL_PUMP_COLD_STARTUP_CHOICE (2u)
#define MODEL3_CAN_ID396_FRONT_OIL_PUMP_FRONT_OIL_PUMP_STATE396_OIL_PUMP_FAULTED_CHOICE (6u)
#define MODEL3_CAN_ID396_FRONT_OIL_PUMP_FRONT_OIL_PUMP_STATE396_OIL_PUMP_SNA_CHOICE (7u)

#define MODEL3_CAN_ID395_REAR_OIL_PUMP_REAR_OIL_PUMP_STATE395_OIL_PUMP_STANDBY_CHOICE (0u)
#define MODEL3_CAN_ID395_REAR_OIL_PUMP_REAR_OIL_PUMP_STATE395_OIL_PUMP_ENABLE_CHOICE (1u)
#define MODEL3_CAN_ID395_REAR_OIL_PUMP_REAR_OIL_PUMP_STATE395_OIL_PUMP_COLD_STARTUP_CHOICE (2u)
#define MODEL3_CAN_ID395_REAR_OIL_PUMP_REAR_OIL_PUMP_STATE395_OIL_PUMP_FAULTED_CHOICE (6u)
#define MODEL3_CAN_ID395_REAR_OIL_PUMP_REAR_OIL_PUMP_STATE395_OIL_PUMP_SNA_CHOICE (7u)

#define MODEL3_CAN_ID293_UI_CHASSIS_CONTROL_UI_STEERING_TUNE_REQUEST_STEERING_TUNE_COMFORT_CHOICE (0u)
#define MODEL3_CAN_ID293_UI_CHASSIS_CONTROL_UI_STEERING_TUNE_REQUEST_STEERING_TUNE_STANDARD_CHOICE (1u)
#define MODEL3_CAN_ID293_UI_CHASSIS_CONTROL_UI_STEERING_TUNE_REQUEST_STEERING_TUNE_SPORT_CHOICE (2u)

#define MODEL3_CAN_ID293_UI_CHASSIS_CONTROL_UI_TRACTION_CONTROL_MODE_TC_NORMAL_SELECTED_CHOICE (0u)
#define MODEL3_CAN_ID293_UI_CHASSIS_CONTROL_UI_TRACTION_CONTROL_MODE_TC_SLIP_START_SELECTED_CHOICE (1u)
#define MODEL3_CAN_ID293_UI_CHASSIS_CONTROL_UI_TRACTION_CONTROL_MODE_TC_DEV_MODE_1_SELECTED_CHOICE (2u)
#define MODEL3_CAN_ID293_UI_CHASSIS_CONTROL_UI_TRACTION_CONTROL_MODE_TC_DEV_MODE_2_SELECTED_CHOICE (3u)
#define MODEL3_CAN_ID293_UI_CHASSIS_CONTROL_UI_TRACTION_CONTROL_MODE_TC_ROLLS_MODE_SELECTED_CHOICE (4u)
#define MODEL3_CAN_ID293_UI_CHASSIS_CONTROL_UI_TRACTION_CONTROL_MODE_TC_DYNO_MODE_SELECTED_CHOICE (5u)

#define MODEL3_CAN_ID293_UI_CHASSIS_CONTROL_UI_PARK_BRAKE_REQUEST_PARK_BRAKE_REQUEST_IDLE_CHOICE (0u)
#define MODEL3_CAN_ID293_UI_CHASSIS_CONTROL_UI_PARK_BRAKE_REQUEST_PARK_BRAKE_REQUEST_PRESSED_CHOICE (1u)
#define MODEL3_CAN_ID293_UI_CHASSIS_CONTROL_UI_PARK_BRAKE_REQUEST_PARK_BRAKE_REQUEST_SNA_CHOICE (3u)

#define MODEL3_CAN_ID293_UI_CHASSIS_CONTROL_UI_WINCH_MODE_REQUEST_WINCH_MODE_IDLE_CHOICE (0u)
#define MODEL3_CAN_ID293_UI_CHASSIS_CONTROL_UI_WINCH_MODE_REQUEST_WINCH_MODE_ENTER_CHOICE (1u)
#define MODEL3_CAN_ID293_UI_CHASSIS_CONTROL_UI_WINCH_MODE_REQUEST_WINCH_MODE_EXIT_CHOICE (2u)

#define MODEL3_CAN_ID293_UI_CHASSIS_CONTROL_UI_ZERO_SPEED_CONFIRMED_ZERO_SPEED_CANCELED_CHOICE (0u)
#define MODEL3_CAN_ID293_UI_CHASSIS_CONTROL_UI_ZERO_SPEED_CONFIRMED_ZERO_SPEED_CONFIRMED_CHOICE (1u)
#define MODEL3_CAN_ID293_UI_CHASSIS_CONTROL_UI_ZERO_SPEED_CONFIRMED_ZERO_SPEED_UNUSED_CHOICE (2u)
#define MODEL3_CAN_ID293_UI_CHASSIS_CONTROL_UI_ZERO_SPEED_CONFIRMED_ZERO_SPEED_SNA_CHOICE (3u)

#define MODEL3_CAN_ID293_UI_CHASSIS_CONTROL_UI_TRAILER_MODE_TRAILER_MODE_OFF_CHOICE (0u)
#define MODEL3_CAN_ID293_UI_CHASSIS_CONTROL_UI_TRAILER_MODE_TRAILER_MODE_ON_CHOICE (1u)

#define MODEL3_CAN_ID293_UI_CHASSIS_CONTROL_UI_DISTANCE_UNITS_DISTANCEUNITS_KM_CHOICE (0u)
#define MODEL3_CAN_ID293_UI_CHASSIS_CONTROL_UI_DISTANCE_UNITS_DISTANCEUNITS_MILES_CHOICE (1u)

#define MODEL3_CAN_ID293_UI_CHASSIS_CONTROL_UI_ACC_OVERTAKE_ENABLE_ACC_OVERTAKE_OFF_CHOICE (0u)
#define MODEL3_CAN_ID293_UI_CHASSIS_CONTROL_UI_ACC_OVERTAKE_ENABLE_ACC_OVERTAKE_ON_CHOICE (1u)
#define MODEL3_CAN_ID293_UI_CHASSIS_CONTROL_UI_ACC_OVERTAKE_ENABLE_SNA_CHOICE (3u)

#define MODEL3_CAN_ID293_UI_CHASSIS_CONTROL_UI_AEB_ENABLE_AEB_OFF_CHOICE (0u)
#define MODEL3_CAN_ID293_UI_CHASSIS_CONTROL_UI_AEB_ENABLE_AEB_ON_CHOICE (1u)
#define MODEL3_CAN_ID293_UI_CHASSIS_CONTROL_UI_AEB_ENABLE_SNA_CHOICE (3u)

#define MODEL3_CAN_ID293_UI_CHASSIS_CONTROL_UI_AES_ENABLE_AES_OFF_CHOICE (0u)
#define MODEL3_CAN_ID293_UI_CHASSIS_CONTROL_UI_AES_ENABLE_AES_ON_CHOICE (1u)
#define MODEL3_CAN_ID293_UI_CHASSIS_CONTROL_UI_AES_ENABLE_SNA_CHOICE (3u)

#define MODEL3_CAN_ID293_UI_CHASSIS_CONTROL_UI_AHLB_ENABLE_AHLB_OFF_CHOICE (0u)
#define MODEL3_CAN_ID293_UI_CHASSIS_CONTROL_UI_AHLB_ENABLE_AHLB_ON_CHOICE (1u)
#define MODEL3_CAN_ID293_UI_CHASSIS_CONTROL_UI_AHLB_ENABLE_SNA_CHOICE (3u)

#define MODEL3_CAN_ID293_UI_CHASSIS_CONTROL_UI_AUTO_LANE_CHANGE_ENABLE_OFF_CHOICE (0u)
#define MODEL3_CAN_ID293_UI_CHASSIS_CONTROL_UI_AUTO_LANE_CHANGE_ENABLE_ON_CHOICE (1u)
#define MODEL3_CAN_ID293_UI_CHASSIS_CONTROL_UI_AUTO_LANE_CHANGE_ENABLE_SNA_CHOICE (3u)

#define MODEL3_CAN_ID293_UI_CHASSIS_CONTROL_UI_AUTO_PARK_REQUEST_NONE_CHOICE (0u)
#define MODEL3_CAN_ID293_UI_CHASSIS_CONTROL_UI_AUTO_PARK_REQUEST_PARK_LEFT_PARALLEL_CHOICE (1u)
#define MODEL3_CAN_ID293_UI_CHASSIS_CONTROL_UI_AUTO_PARK_REQUEST_PARK_LEFT_CROSS_CHOICE (2u)
#define MODEL3_CAN_ID293_UI_CHASSIS_CONTROL_UI_AUTO_PARK_REQUEST_PARK_RIGHT_PARALLEL_CHOICE (3u)
#define MODEL3_CAN_ID293_UI_CHASSIS_CONTROL_UI_AUTO_PARK_REQUEST_PARK_RIGHT_CROSS_CHOICE (4u)
#define MODEL3_CAN_ID293_UI_CHASSIS_CONTROL_UI_AUTO_PARK_REQUEST_PARALLEL_PULL_OUT_TO_LEFT_CHOICE (5u)
#define MODEL3_CAN_ID293_UI_CHASSIS_CONTROL_UI_AUTO_PARK_REQUEST_PARALLEL_PULL_OUT_TO_RIGHT_CHOICE (6u)
#define MODEL3_CAN_ID293_UI_CHASSIS_CONTROL_UI_AUTO_PARK_REQUEST_ABORT_CHOICE (7u)
#define MODEL3_CAN_ID293_UI_CHASSIS_CONTROL_UI_AUTO_PARK_REQUEST_COMPLETE_CHOICE (8u)
#define MODEL3_CAN_ID293_UI_CHASSIS_CONTROL_UI_AUTO_PARK_REQUEST_SEARCH_CHOICE (9u)
#define MODEL3_CAN_ID293_UI_CHASSIS_CONTROL_UI_AUTO_PARK_REQUEST_PAUSE_CHOICE (10u)
#define MODEL3_CAN_ID293_UI_CHASSIS_CONTROL_UI_AUTO_PARK_REQUEST_RESUME_CHOICE (11u)
#define MODEL3_CAN_ID293_UI_CHASSIS_CONTROL_UI_AUTO_PARK_REQUEST_SNA_CHOICE (15u)

#define MODEL3_CAN_ID293_UI_CHASSIS_CONTROL_UI_BSD_ENABLE_BSD_OFF_CHOICE (0u)
#define MODEL3_CAN_ID293_UI_CHASSIS_CONTROL_UI_BSD_ENABLE_BSD_ON_CHOICE (1u)
#define MODEL3_CAN_ID293_UI_CHASSIS_CONTROL_UI_BSD_ENABLE_SNA_CHOICE (3u)

#define MODEL3_CAN_ID293_UI_CHASSIS_CONTROL_UI_FCW_ENABLE_FCW_OFF_CHOICE (0u)
#define MODEL3_CAN_ID293_UI_CHASSIS_CONTROL_UI_FCW_ENABLE_FCW_ON_CHOICE (1u)
#define MODEL3_CAN_ID293_UI_CHASSIS_CONTROL_UI_FCW_ENABLE_SNA_CHOICE (3u)

#define MODEL3_CAN_ID293_UI_CHASSIS_CONTROL_UI_FCW_SENSITIVITY_AEB_SENSITIVITY_EARLY_CHOICE (0u)
#define MODEL3_CAN_ID293_UI_CHASSIS_CONTROL_UI_FCW_SENSITIVITY_AEB_SENSITIVITY_AVERAGE_CHOICE (1u)
#define MODEL3_CAN_ID293_UI_CHASSIS_CONTROL_UI_FCW_SENSITIVITY_AEB_SENSITIVITY_LATE_CHOICE (2u)
#define MODEL3_CAN_ID293_UI_CHASSIS_CONTROL_UI_FCW_SENSITIVITY_SNA_CHOICE (3u)

#define MODEL3_CAN_ID293_UI_CHASSIS_CONTROL_UI_LAT_CONTROL_ENABLE_LATERAL_CONTROL_OFF_CHOICE (0u)
#define MODEL3_CAN_ID293_UI_CHASSIS_CONTROL_UI_LAT_CONTROL_ENABLE_LATERAL_CONTROL_ON_CHOICE (1u)
#define MODEL3_CAN_ID293_UI_CHASSIS_CONTROL_UI_LAT_CONTROL_ENABLE_LATERAL_CONTROL_UNAVAILABLE_CHOICE (2u)
#define MODEL3_CAN_ID293_UI_CHASSIS_CONTROL_UI_LAT_CONTROL_ENABLE_LATERAL_CONTROL_SNA_CHOICE (3u)

#define MODEL3_CAN_ID293_UI_CHASSIS_CONTROL_UI_LDW_ENABLE_NO_HAPTIC_CHOICE (0u)
#define MODEL3_CAN_ID293_UI_CHASSIS_CONTROL_UI_LDW_ENABLE_LDW_TRIGGERS_HAPTIC_CHOICE (1u)
#define MODEL3_CAN_ID293_UI_CHASSIS_CONTROL_UI_LDW_ENABLE_SNA_CHOICE (3u)

#define MODEL3_CAN_ID293_UI_CHASSIS_CONTROL_UI_PEDAL_SAFETY_ENABLE_PEDAL_SAFETY_OFF_CHOICE (0u)
#define MODEL3_CAN_ID293_UI_CHASSIS_CONTROL_UI_PEDAL_SAFETY_ENABLE_PEDAL_SAFETY_ON_CHOICE (1u)
#define MODEL3_CAN_ID293_UI_CHASSIS_CONTROL_UI_PEDAL_SAFETY_ENABLE_SNA_CHOICE (3u)

#define MODEL3_CAN_ID293_UI_CHASSIS_CONTROL_UI_RED_LIGHT_STOP_SIGN_ENABLE_RLSSW_OFF_CHOICE (0u)
#define MODEL3_CAN_ID293_UI_CHASSIS_CONTROL_UI_RED_LIGHT_STOP_SIGN_ENABLE_RLSSW_ON_CHOICE (1u)
#define MODEL3_CAN_ID293_UI_CHASSIS_CONTROL_UI_RED_LIGHT_STOP_SIGN_ENABLE_SNA_CHOICE (3u)

#define MODEL3_CAN_ID293_UI_CHASSIS_CONTROL_UI_SELF_PARK_TUNE_SNA_CHOICE (15u)

#define MODEL3_CAN_ID268_SYSTEM_POWER_DI_PRIMARY_UNIT_SILICON_TYPE_MOSFET_CHOICE (0u)
#define MODEL3_CAN_ID268_SYSTEM_POWER_DI_PRIMARY_UNIT_SILICON_TYPE_IGBT_CHOICE (1u)

#define MODEL3_CAN_ID214_FAST_CHARGE_VA_F_CTYPE214_SUPERCHARGER_CHOICE (0u)
#define MODEL3_CAN_ID214_FAST_CHARGE_VA_F_CTYPE214_CHADEMO_CHOICE (1u)
#define MODEL3_CAN_ID214_FAST_CHARGE_VA_F_CTYPE214_GB_CHOICE (2u)
#define MODEL3_CAN_ID214_FAST_CHARGE_VA_F_CTYPE214_CCS_CHOICE (3u)
#define MODEL3_CAN_ID214_FAST_CHARGE_VA_F_CTYPE214_COMBO_CHOICE (4u)
#define MODEL3_CAN_ID214_FAST_CHARGE_VA_F_CTYPE214_MCEVSE_CHOICE (5u)
#define MODEL3_CAN_ID214_FAST_CHARGE_VA_F_CTYPE214_OTHER_CHOICE (6u)
#define MODEL3_CAN_ID214_FAST_CHARGE_VA_F_CTYPE214_ERROR_CHOICE (7u)

#define MODEL3_CAN_ID217_F_CINFO_F_CCLASS217_ERR_CHOICE (0u)
#define MODEL3_CAN_ID217_F_CINFO_F_CCLASS217_SUPERCHARGER_CHOICE (1u)
#define MODEL3_CAN_ID217_F_CINFO_F_CCLASS217_URBAN_SC_CHOICE (2u)

#define MODEL3_CAN_ID217_F_CINFO_F_CBRAND217_ERR_CHOICE (0u)
#define MODEL3_CAN_ID217_F_CINFO_F_CBRAND217_TESLA_CHOICE (1u)

#define MODEL3_CAN_ID217_F_CINFO_F_CCOOLING_TYPE217_ERR_CHOICE (0u)
#define MODEL3_CAN_ID217_F_CINFO_F_CCOOLING_TYPE217_CONVECTION_CHOICE (1u)
#define MODEL3_CAN_ID217_F_CINFO_F_CCOOLING_TYPE217_LIQUID_CHOICE (2u)

#define MODEL3_CAN_ID321_VCFRONT_SENSORS_VCFRONT_TEMP_COOLANT_BAT_INLET_SNA_CHOICE (1023u)

#define MODEL3_CAN_ID321_VCFRONT_SENSORS_VCFRONT_TEMP_COOLANT_PT_INLET_SNA_CHOICE (2047u)

#define MODEL3_CAN_ID321_VCFRONT_SENSORS_VCFRONT_COOLANT_LEVEL_NOT_OK_CHOICE (0u)
#define MODEL3_CAN_ID321_VCFRONT_SENSORS_VCFRONT_COOLANT_LEVEL_FILLED_CHOICE (1u)

#define MODEL3_CAN_ID321_VCFRONT_SENSORS_VCFRONT_BRAKE_FLUID_LEVEL_SNA_CHOICE (0u)
#define MODEL3_CAN_ID321_VCFRONT_SENSORS_VCFRONT_BRAKE_FLUID_LEVEL_LOW_CHOICE (1u)
#define MODEL3_CAN_ID321_VCFRONT_SENSORS_VCFRONT_BRAKE_FLUID_LEVEL_NORMAL_CHOICE (2u)

#define MODEL3_CAN_ID321_VCFRONT_SENSORS_VCFRONT_TEMP_AMBIENT_SNA_CHOICE (0u)

#define MODEL3_CAN_ID321_VCFRONT_SENSORS_VCFRONT_WASHER_FLUID_LEVEL_SNA_CHOICE (0u)
#define MODEL3_CAN_ID321_VCFRONT_SENSORS_VCFRONT_WASHER_FLUID_LEVEL_LOW_CHOICE (1u)
#define MODEL3_CAN_ID321_VCFRONT_SENSORS_VCFRONT_WASHER_FLUID_LEVEL_NORMAL_CHOICE (2u)

#define MODEL3_CAN_ID321_VCFRONT_SENSORS_VCFRONT_TEMP_AMBIENT_FILTERED_SNA_CHOICE (0u)

#define MODEL3_CAN_ID301_VCFRONT_INFO_VCFRONT_INFO_INDEX_BC_INFO_DEPRECATED_0_CHOICE (0u)
#define MODEL3_CAN_ID301_VCFRONT_INFO_VCFRONT_INFO_INDEX_BC_INFO_DEPRECATED_1_CHOICE (1u)
#define MODEL3_CAN_ID301_VCFRONT_INFO_VCFRONT_INFO_INDEX_BC_INFO_DEPRECATED_2_CHOICE (2u)
#define MODEL3_CAN_ID301_VCFRONT_INFO_VCFRONT_INFO_INDEX_BC_INFO_DEPRECATED_3_CHOICE (3u)
#define MODEL3_CAN_ID301_VCFRONT_INFO_VCFRONT_INFO_INDEX_BC_INFO_DEPRECATED_4_CHOICE (4u)
#define MODEL3_CAN_ID301_VCFRONT_INFO_VCFRONT_INFO_INDEX_BC_INFO_DEPRECATED_5_CHOICE (5u)
#define MODEL3_CAN_ID301_VCFRONT_INFO_VCFRONT_INFO_INDEX_BC_INFO_DEPRECATED_6_CHOICE (6u)
#define MODEL3_CAN_ID301_VCFRONT_INFO_VCFRONT_INFO_INDEX_BC_INFO_DEPRECATED_7_CHOICE (7u)
#define MODEL3_CAN_ID301_VCFRONT_INFO_VCFRONT_INFO_INDEX_BC_INFO_DEPRECATED_8_CHOICE (8u)
#define MODEL3_CAN_ID301_VCFRONT_INFO_VCFRONT_INFO_INDEX_BC_INFO_DEPRECATED_9_CHOICE (9u)
#define MODEL3_CAN_ID301_VCFRONT_INFO_VCFRONT_INFO_INDEX_BC_INFO_BUILD_HWID_COMPONENTID_CHOICE (10u)
#define MODEL3_CAN_ID301_VCFRONT_INFO_VCFRONT_INFO_INDEX_BC_INFO_PCBAID_ASSYID_USAGEID_CHOICE (11u)
#define MODEL3_CAN_ID301_VCFRONT_INFO_VCFRONT_INFO_INDEX_BC_INFO_APP_CRC_CHOICE (13u)
#define MODEL3_CAN_ID301_VCFRONT_INFO_VCFRONT_INFO_INDEX_BC_INFO_BOOTLOADER_SVN_CHOICE (14u)
#define MODEL3_CAN_ID301_VCFRONT_INFO_VCFRONT_INFO_INDEX_BC_INFO_BOOTLOADER_CRC_CHOICE (15u)
#define MODEL3_CAN_ID301_VCFRONT_INFO_VCFRONT_INFO_INDEX_BC_INFO_SUBCOMPONENT1_CHOICE (16u)
#define MODEL3_CAN_ID301_VCFRONT_INFO_VCFRONT_INFO_INDEX_BC_INFO_APP_GITHASH_CHOICE (17u)
#define MODEL3_CAN_ID301_VCFRONT_INFO_VCFRONT_INFO_INDEX_BC_INFO_BOOTLOADER_GITHASH_CHOICE (18u)
#define MODEL3_CAN_ID301_VCFRONT_INFO_VCFRONT_INFO_INDEX_BC_INFO_VERSION_DEPRECATED_CHOICE (19u)
#define MODEL3_CAN_ID301_VCFRONT_INFO_VCFRONT_INFO_INDEX_BC_INFO_UDS_PROTOCOL_BOOTCRC_CHOICE (20u)
#define MODEL3_CAN_ID301_VCFRONT_INFO_VCFRONT_INFO_INDEX_BC_INFO_SUBCOMPONENT2_CHOICE (23u)
#define MODEL3_CAN_ID301_VCFRONT_INFO_VCFRONT_INFO_INDEX_BC_INFO_SUBCOMPONENT3_CHOICE (24u)
#define MODEL3_CAN_ID301_VCFRONT_INFO_VCFRONT_INFO_INDEX_BC_INFO_SUBCOMPONENT4_CHOICE (31u)
#define MODEL3_CAN_ID301_VCFRONT_INFO_VCFRONT_INFO_INDEX_BC_INFO_SUBCOMPONENT5_CHOICE (32u)
#define MODEL3_CAN_ID301_VCFRONT_INFO_VCFRONT_INFO_INDEX_BC_INFO_SUBCOMPONENT6_CHOICE (33u)
#define MODEL3_CAN_ID301_VCFRONT_INFO_VCFRONT_INFO_INDEX_BC_INFO_END_CHOICE (255u)

#define MODEL3_CAN_ID301_VCFRONT_INFO_VCFRONT_INFO_BUILD_TYPE_INFO_UNKNOWN_BUILD_CHOICE (0u)
#define MODEL3_CAN_ID301_VCFRONT_INFO_VCFRONT_INFO_BUILD_TYPE_INFO_PLATFORM_BUILD_CHOICE (1u)
#define MODEL3_CAN_ID301_VCFRONT_INFO_VCFRONT_INFO_BUILD_TYPE_INFO_LOCAL_BUILD_CHOICE (2u)
#define MODEL3_CAN_ID301_VCFRONT_INFO_VCFRONT_INFO_BUILD_TYPE_INFO_TRACEABLE_CI_BUILD_CHOICE (3u)
#define MODEL3_CAN_ID301_VCFRONT_INFO_VCFRONT_INFO_BUILD_TYPE_INFO_MFG_BUILD_CHOICE (4u)

#define MODEL3_CAN_ID301_VCFRONT_INFO_VCFRONT_INFO_ASSEMBLY_ID_ASSEMBLY1_CHOICE (1u)
#define MODEL3_CAN_ID301_VCFRONT_INFO_VCFRONT_INFO_ASSEMBLY_ID_ASSEMBLY_SNA_CHOICE (255u)

#define MODEL3_CAN_ID201_VCFRONT_LOGGING_AND_VITALS10_HZ_VCFRONT_LOGGING_AND_VITALS10_HZ_INDEX_TARGETS_AND_ACTUALS_0_CHOICE (0u)
#define MODEL3_CAN_ID201_VCFRONT_LOGGING_AND_VITALS10_HZ_VCFRONT_LOGGING_AND_VITALS10_HZ_INDEX_TARGETS_SENSORS_AND_ACTUALS_1_CHOICE (1u)
#define MODEL3_CAN_ID201_VCFRONT_LOGGING_AND_VITALS10_HZ_VCFRONT_LOGGING_AND_VITALS10_HZ_INDEX_STATES_AND_SENSORS_CHOICE (2u)
#define MODEL3_CAN_ID201_VCFRONT_LOGGING_AND_VITALS10_HZ_VCFRONT_LOGGING_AND_VITALS10_HZ_INDEX_EXV_FLOW_CHOICE (3u)
#define MODEL3_CAN_ID201_VCFRONT_LOGGING_AND_VITALS10_HZ_VCFRONT_LOGGING_AND_VITALS10_HZ_INDEX_HP_STATE_CHOICE (4u)
#define MODEL3_CAN_ID201_VCFRONT_LOGGING_AND_VITALS10_HZ_VCFRONT_LOGGING_AND_VITALS10_HZ_INDEX_END_CHOICE (5u)

#define MODEL3_CAN_ID201_VCFRONT_LOGGING_AND_VITALS10_HZ_VCFRONT_HP_HIGH_SIDE_HX_NONE_CHOICE (0u)
#define MODEL3_CAN_ID201_VCFRONT_LOGGING_AND_VITALS10_HZ_VCFRONT_HP_HIGH_SIDE_HX_LCC_CHOICE (1u)
#define MODEL3_CAN_ID201_VCFRONT_LOGGING_AND_VITALS10_HZ_VCFRONT_HP_HIGH_SIDE_HX_CC_CHOICE (2u)
#define MODEL3_CAN_ID201_VCFRONT_LOGGING_AND_VITALS10_HZ_VCFRONT_HP_HIGH_SIDE_HX_BOTH_CHOICE (3u)

#define MODEL3_CAN_ID201_VCFRONT_LOGGING_AND_VITALS10_HZ_VCFRONT_PUMP_BATTERY_RPM_ACTUAL_SNA_CHOICE (1023u)

#define MODEL3_CAN_ID201_VCFRONT_LOGGING_AND_VITALS10_HZ_VCFRONT_TEMP_REFRIG_DISCHARGE_SNA_CHOICE (2047u)

#define MODEL3_CAN_ID201_VCFRONT_LOGGING_AND_VITALS10_HZ_VCFRONT_HP_LOW_SIDE_HX_NONE_CHOICE (0u)
#define MODEL3_CAN_ID201_VCFRONT_LOGGING_AND_VITALS10_HZ_VCFRONT_HP_LOW_SIDE_HX_CHILLER_CHOICE (1u)
#define MODEL3_CAN_ID201_VCFRONT_LOGGING_AND_VITALS10_HZ_VCFRONT_HP_LOW_SIDE_HX_EVAP_CHOICE (2u)
#define MODEL3_CAN_ID201_VCFRONT_LOGGING_AND_VITALS10_HZ_VCFRONT_HP_LOW_SIDE_HX_BOTH_CHOICE (3u)

#define MODEL3_CAN_ID201_VCFRONT_LOGGING_AND_VITALS10_HZ_VCFRONT_HP_DOMINANT_LOAD_NONE_CHOICE (0u)
#define MODEL3_CAN_ID201_VCFRONT_LOGGING_AND_VITALS10_HZ_VCFRONT_HP_DOMINANT_LOAD_EVAP_CHOICE (1u)
#define MODEL3_CAN_ID201_VCFRONT_LOGGING_AND_VITALS10_HZ_VCFRONT_HP_DOMINANT_LOAD_CHILLER_CHOICE (2u)
#define MODEL3_CAN_ID201_VCFRONT_LOGGING_AND_VITALS10_HZ_VCFRONT_HP_DOMINANT_LOAD_LOW_BOTH_CHOICE (3u)
#define MODEL3_CAN_ID201_VCFRONT_LOGGING_AND_VITALS10_HZ_VCFRONT_HP_DOMINANT_LOAD_LCC_CHOICE (4u)
#define MODEL3_CAN_ID201_VCFRONT_LOGGING_AND_VITALS10_HZ_VCFRONT_HP_DOMINANT_LOAD_CC_CHOICE (5u)
#define MODEL3_CAN_ID201_VCFRONT_LOGGING_AND_VITALS10_HZ_VCFRONT_HP_DOMINANT_LOAD_HIGH_BOTH_CHOICE (6u)

#define MODEL3_CAN_ID201_VCFRONT_LOGGING_AND_VITALS10_HZ_VCFRONT_HP_BLEND_TYPE_HP_NONE_CHOICE (0u)
#define MODEL3_CAN_ID201_VCFRONT_LOGGING_AND_VITALS10_HZ_VCFRONT_HP_BLEND_TYPE_HP_PARTIAL_CHOICE (1u)
#define MODEL3_CAN_ID201_VCFRONT_LOGGING_AND_VITALS10_HZ_VCFRONT_HP_BLEND_TYPE_HP_FULL_CHOICE (2u)

#define MODEL3_CAN_ID201_VCFRONT_LOGGING_AND_VITALS10_HZ_VCFRONT_PUMP_POWERTRAIN_RPM_ACTUAL_SNA_CHOICE (1023u)

#define MODEL3_CAN_ID201_VCFRONT_LOGGING_AND_VITALS10_HZ_VCFRONT_HP_CABIN_LOAD_TYPE_NONE_CHOICE (0u)
#define MODEL3_CAN_ID201_VCFRONT_LOGGING_AND_VITALS10_HZ_VCFRONT_HP_CABIN_LOAD_TYPE_CC_CHOICE (1u)
#define MODEL3_CAN_ID201_VCFRONT_LOGGING_AND_VITALS10_HZ_VCFRONT_HP_CABIN_LOAD_TYPE_REHEAT_CHOICE (2u)
#define MODEL3_CAN_ID201_VCFRONT_LOGGING_AND_VITALS10_HZ_VCFRONT_HP_CABIN_LOAD_TYPE_EVAP_CHOICE (3u)

#define MODEL3_CAN_ID201_VCFRONT_LOGGING_AND_VITALS10_HZ_VCFRONT_HP_BATTERY_LOAD_TYPE_NONE_CHOICE (0u)
#define MODEL3_CAN_ID201_VCFRONT_LOGGING_AND_VITALS10_HZ_VCFRONT_HP_BATTERY_LOAD_TYPE_BATT_HEAT_CHOICE (1u)
#define MODEL3_CAN_ID201_VCFRONT_LOGGING_AND_VITALS10_HZ_VCFRONT_HP_BATTERY_LOAD_TYPE_BATT_COOL_CHOICE (2u)

#define MODEL3_CAN_ID201_VCFRONT_LOGGING_AND_VITALS10_HZ_VCFRONT_HP_REQ_COOLANT_MODE_ANY_CHOICE (0u)
#define MODEL3_CAN_ID201_VCFRONT_LOGGING_AND_VITALS10_HZ_VCFRONT_HP_REQ_COOLANT_MODE_SERIES_NO_BYPASS_CHOICE (1u)
#define MODEL3_CAN_ID201_VCFRONT_LOGGING_AND_VITALS10_HZ_VCFRONT_HP_REQ_COOLANT_MODE_SERIES_BYPASS_CHOICE (2u)
#define MODEL3_CAN_ID201_VCFRONT_LOGGING_AND_VITALS10_HZ_VCFRONT_HP_REQ_COOLANT_MODE_PARALLEL_CHOICE (3u)
#define MODEL3_CAN_ID201_VCFRONT_LOGGING_AND_VITALS10_HZ_VCFRONT_HP_REQ_COOLANT_MODE_AMBIENT_SOURCE_CHOICE (4u)

#define MODEL3_CAN_ID201_VCFRONT_LOGGING_AND_VITALS10_HZ_VCFRONT_COMPRESSOR_STATE_STANDBY_CHOICE (0u)
#define MODEL3_CAN_ID201_VCFRONT_LOGGING_AND_VITALS10_HZ_VCFRONT_COMPRESSOR_STATE_READY_CHOICE (1u)
#define MODEL3_CAN_ID201_VCFRONT_LOGGING_AND_VITALS10_HZ_VCFRONT_COMPRESSOR_STATE_RUNNING_CHOICE (2u)
#define MODEL3_CAN_ID201_VCFRONT_LOGGING_AND_VITALS10_HZ_VCFRONT_COMPRESSOR_STATE_FAULT_CHOICE (3u)

#define MODEL3_CAN_ID201_VCFRONT_LOGGING_AND_VITALS10_HZ_VCFRONT_RADIATOR_FAN_RPM_ACTUAL_SNA_CHOICE (1023u)

#define MODEL3_CAN_ID201_VCFRONT_LOGGING_AND_VITALS10_HZ_VCFRONT_TEMP_REFRIG_LIQUID_SNA_CHOICE (2047u)

#define MODEL3_CAN_ID201_VCFRONT_LOGGING_AND_VITALS10_HZ_VCFRONT_EXV_STATE_UNINIT_CHOICE (0u)
#define MODEL3_CAN_ID201_VCFRONT_LOGGING_AND_VITALS10_HZ_VCFRONT_EXV_STATE_INIT_OPEN_CHOICE (1u)
#define MODEL3_CAN_ID201_VCFRONT_LOGGING_AND_VITALS10_HZ_VCFRONT_EXV_STATE_INIT_CLOSE_CHOICE (2u)
#define MODEL3_CAN_ID201_VCFRONT_LOGGING_AND_VITALS10_HZ_VCFRONT_EXV_STATE_READY_CHOICE (3u)
#define MODEL3_CAN_ID201_VCFRONT_LOGGING_AND_VITALS10_HZ_VCFRONT_EXV_STATE_FAULTED_CHOICE (4u)
#define MODEL3_CAN_ID201_VCFRONT_LOGGING_AND_VITALS10_HZ_VCFRONT_EXV_STATE_WAIT_CHOICE (5u)

#define MODEL3_CAN_ID201_VCFRONT_LOGGING_AND_VITALS10_HZ_VCFRONT_TEMP_SUPERHEAT_ACTUAL_SNA_CHOICE (1023u)

#define MODEL3_CAN_ID201_VCFRONT_LOGGING_AND_VITALS10_HZ_VCFRONT_SOLENOID_EVAP_STATE_UNDEFINED_CHOICE (0u)
#define MODEL3_CAN_ID201_VCFRONT_LOGGING_AND_VITALS10_HZ_VCFRONT_SOLENOID_EVAP_STATE_OPENED_CHOICE (1u)
#define MODEL3_CAN_ID201_VCFRONT_LOGGING_AND_VITALS10_HZ_VCFRONT_SOLENOID_EVAP_STATE_CLOSED_CHOICE (2u)
#define MODEL3_CAN_ID201_VCFRONT_LOGGING_AND_VITALS10_HZ_VCFRONT_SOLENOID_EVAP_STATE_FAULTED_CHOICE (3u)

#define MODEL3_CAN_ID201_VCFRONT_LOGGING_AND_VITALS10_HZ_VCFRONT_PRESSURE_REFRIG_LIQUID_SNA_CHOICE (255u)

#define MODEL3_CAN_ID201_VCFRONT_LOGGING_AND_VITALS10_HZ_VCFRONT_PRESSURE_REFRIG_SUCTION_VITALS_SNA_CHOICE (127u)

#define MODEL3_CAN_ID201_VCFRONT_LOGGING_AND_VITALS10_HZ_VCFRONT_PRESSURE_REFRIG_DISCHARGE_VITALS_SNA_CHOICE (255u)

#define MODEL3_CAN_ID201_VCFRONT_LOGGING_AND_VITALS10_HZ_VCFRONT_FIVE_WAY_VALVE_MODE_SERIES_CHOICE (0u)
#define MODEL3_CAN_ID201_VCFRONT_LOGGING_AND_VITALS10_HZ_VCFRONT_FIVE_WAY_VALVE_MODE_PARALLEL_CHOICE (1u)
#define MODEL3_CAN_ID201_VCFRONT_LOGGING_AND_VITALS10_HZ_VCFRONT_FIVE_WAY_VALVE_MODE_BLEND_CHOICE (2u)
#define MODEL3_CAN_ID201_VCFRONT_LOGGING_AND_VITALS10_HZ_VCFRONT_FIVE_WAY_VALVE_MODE_AMBIENT_SOURCE_CHOICE (3u)

#define MODEL3_CAN_ID224_PCSDCD_CSTATUS_DCD_CSTATE224_IDLE_CHOICE (0u)
#define MODEL3_CAN_ID224_PCSDCD_CSTATUS_DCD_CSTATE224_12V_CHG_CHOICE (1u)
#define MODEL3_CAN_ID224_PCSDCD_CSTATUS_DCD_CSTATE224_PRECHARGE_START_CHOICE (2u)
#define MODEL3_CAN_ID224_PCSDCD_CSTATUS_DCD_CSTATE224_PRECHARGE_CHOICE (3u)
#define MODEL3_CAN_ID224_PCSDCD_CSTATUS_DCD_CSTATE224_H_VACTIVE_CHOICE (4u)
#define MODEL3_CAN_ID224_PCSDCD_CSTATUS_DCD_CSTATE224_SHUTDOWN_CHOICE (5u)
#define MODEL3_CAN_ID224_PCSDCD_CSTATUS_DCD_CSTATE224_ERROR_CHOICE (6u)

#define MODEL3_CAN_ID224_PCSDCD_CSTATUS_DCDC_SUB_STATE224_PWR_UP_INIT_CHOICE (0u)
#define MODEL3_CAN_ID224_PCSDCD_CSTATUS_DCDC_SUB_STATE224_STANDBY_CHOICE (1u)
#define MODEL3_CAN_ID224_PCSDCD_CSTATUS_DCDC_SUB_STATE224_12_V_SUPPORT_ACTIVE_CHOICE (2u)
#define MODEL3_CAN_ID224_PCSDCD_CSTATUS_DCDC_SUB_STATE224_DIS_HVBUS_CHOICE (3u)
#define MODEL3_CAN_ID224_PCSDCD_CSTATUS_DCDC_SUB_STATE224_PCHG_FAST_DIS_HVBUS_CHOICE (4u)
#define MODEL3_CAN_ID224_PCSDCD_CSTATUS_DCDC_SUB_STATE224_PCHG_SLOW_DIS_HVBUS_CHOICE (5u)
#define MODEL3_CAN_ID224_PCSDCD_CSTATUS_DCDC_SUB_STATE224_PCHG_DWELL_CHARGE_CHOICE (6u)
#define MODEL3_CAN_ID224_PCSDCD_CSTATUS_DCDC_SUB_STATE224_PCHG_DWELL_WAIT_CHOICE (7u)
#define MODEL3_CAN_ID224_PCSDCD_CSTATUS_DCDC_SUB_STATE224_PCHG_DI_RECOVERY_WAIT_CHOICE (8u)
#define MODEL3_CAN_ID224_PCSDCD_CSTATUS_DCDC_SUB_STATE224_PCHG_ACTIVE_CHOICE (9u)
#define MODEL3_CAN_ID224_PCSDCD_CSTATUS_DCDC_SUB_STATE224_PCHG_FLT_FAST_DIS_HVBUS_CHOICE (10u)
#define MODEL3_CAN_ID224_PCSDCD_CSTATUS_DCDC_SUB_STATE224_SHUTDOWN_CHOICE (11u)
#define MODEL3_CAN_ID224_PCSDCD_CSTATUS_DCDC_SUB_STATE224_12_V_SUPPORT_FAULTED_CHOICE (12u)
#define MODEL3_CAN_ID224_PCSDCD_CSTATUS_DCDC_SUB_STATE224_DIS_HVBUS_FAULTED_CHOICE (13u)
#define MODEL3_CAN_ID224_PCSDCD_CSTATUS_DCDC_SUB_STATE224_PCHG_FAULTED_CHOICE (14u)
#define MODEL3_CAN_ID224_PCSDCD_CSTATUS_DCDC_SUB_STATE224_CLEAR_FAULTS_CHOICE (15u)
#define MODEL3_CAN_ID224_PCSDCD_CSTATUS_DCDC_SUB_STATE224_FAULTED_CHOICE (16u)
#define MODEL3_CAN_ID224_PCSDCD_CSTATUS_DCDC_SUB_STATE224_NUM_CHOICE (17u)

#define MODEL3_CAN_ID118_DRIVE_SYSTEM_STATUS_DRIVE_STATE118_IDLE_CHOICE (0u)
#define MODEL3_CAN_ID118_DRIVE_SYSTEM_STATUS_DRIVE_STATE118_CHARGE_HEAT_CHOICE (1u)
#define MODEL3_CAN_ID118_DRIVE_SYSTEM_STATUS_DRIVE_STATE118_STANDBY_CHOICE (2u)
#define MODEL3_CAN_ID118_DRIVE_SYSTEM_STATUS_DRIVE_STATE118_FAULT__CHOICE (3u)
#define MODEL3_CAN_ID118_DRIVE_SYSTEM_STATUS_DRIVE_STATE118_ABORT_CHOICE (4u)
#define MODEL3_CAN_ID118_DRIVE_SYSTEM_STATUS_DRIVE_STATE118_DRIVING_CHOICE (5u)

#define MODEL3_CAN_ID118_DRIVE_SYSTEM_STATUS_BRAKE_PEDAL118_PEDAL_BRAKE_CHOICE (1u)

#define MODEL3_CAN_ID118_DRIVE_SYSTEM_STATUS_D_IGEAR118_PARK_CHOICE (1u)
#define MODEL3_CAN_ID118_DRIVE_SYSTEM_STATUS_D_IGEAR118_REVERSE_CHOICE (2u)
#define MODEL3_CAN_ID118_DRIVE_SYSTEM_STATUS_D_IGEAR118_NEUTRAL_CHOICE (3u)
#define MODEL3_CAN_ID118_DRIVE_SYSTEM_STATUS_D_IGEAR118_DRIVE_CHOICE (4u)
#define MODEL3_CAN_ID118_DRIVE_SYSTEM_STATUS_D_IGEAR118_IDLE_CHOICE (7u)

#define MODEL3_CAN_ID118_DRIVE_SYSTEM_STATUS_BRAKE_STATE118_REGEN_BRAKE_CHOICE (1u)

#define MODEL3_CAN_ID118_DRIVE_SYSTEM_STATUS_IMMOBILIZER_STATE118_DI_IMM_STATE_INIT_SNA_CHOICE (0u)
#define MODEL3_CAN_ID118_DRIVE_SYSTEM_STATUS_IMMOBILIZER_STATE118_DI_IMM_STATE_REQUEST_CHOICE (1u)
#define MODEL3_CAN_ID118_DRIVE_SYSTEM_STATUS_IMMOBILIZER_STATE118_DI_IMM_STATE_AUTHENTICATING_CHOICE (2u)
#define MODEL3_CAN_ID118_DRIVE_SYSTEM_STATUS_IMMOBILIZER_STATE118_DI_IMM_STATE_DISARMED_CHOICE (3u)
#define MODEL3_CAN_ID118_DRIVE_SYSTEM_STATUS_IMMOBILIZER_STATE118_DI_IMM_STATE_IDLE_CHOICE (4u)
#define MODEL3_CAN_ID118_DRIVE_SYSTEM_STATUS_IMMOBILIZER_STATE118_DI_IMM_STATE_RESET_CHOICE (5u)
#define MODEL3_CAN_ID118_DRIVE_SYSTEM_STATUS_IMMOBILIZER_STATE118_DI_IMM_STATE_FAULT_CHOICE (6u)

#define MODEL3_CAN_ID118_DRIVE_SYSTEM_STATUS_TRACTION_CONTROL118_STANDARD_CHOICE (0u)
#define MODEL3_CAN_ID118_DRIVE_SYSTEM_STATUS_TRACTION_CONTROL118_SLIP__START_CHOICE (1u)
#define MODEL3_CAN_ID118_DRIVE_SYSTEM_STATUS_TRACTION_CONTROL118_DEV1_CHOICE (2u)
#define MODEL3_CAN_ID118_DRIVE_SYSTEM_STATUS_TRACTION_CONTROL118_DEV2_CHOICE (3u)
#define MODEL3_CAN_ID118_DRIVE_SYSTEM_STATUS_TRACTION_CONTROL118_ROLLS__MODE_CHOICE (4u)
#define MODEL3_CAN_ID118_DRIVE_SYSTEM_STATUS_TRACTION_CONTROL118_DYNO__MODE_CHOICE (5u)

#define MODEL3_CAN_ID118_DRIVE_SYSTEM_STATUS_PARKING_BRAKE118_IDLE_CHOICE (0u)
#define MODEL3_CAN_ID118_DRIVE_SYSTEM_STATUS_PARKING_BRAKE118_ENGAGE_CHOICE (1u)
#define MODEL3_CAN_ID118_DRIVE_SYSTEM_STATUS_PARKING_BRAKE118_DISENGAGE_CHOICE (2u)

#define MODEL3_CAN_ID118_DRIVE_SYSTEM_STATUS_TRACK_MODE118_TRACK_MODE_UNAVAILABLE_CHOICE (0u)
#define MODEL3_CAN_ID118_DRIVE_SYSTEM_STATUS_TRACK_MODE118_TRACK_MODE_AVAILABLE_CHOICE (1u)
#define MODEL3_CAN_ID118_DRIVE_SYSTEM_STATUS_TRACK_MODE118_TRACK_MODE_ON_CHOICE (2u)

#define MODEL3_CAN_ID252_BMS_POWER_AVAILABLE_BMS_POWER_LIMITS_STATE_POWER_NOT_CALCULATED_FOR_DRIVE_CHOICE (0u)
#define MODEL3_CAN_ID252_BMS_POWER_AVAILABLE_BMS_POWER_LIMITS_STATE_POWER_CALCULATED_FOR_DRIVE_CHOICE (1u)

#define MODEL3_CAN_ID257_U_ISPEED_U_ISPEED_UNITS257_MPH_CHOICE (0u)
#define MODEL3_CAN_ID257_U_ISPEED_U_ISPEED_UNITS257_KPH_CHOICE (1u)

#define MODEL3_CAN_ID3_B6ODOMETER_ODOMETER3_B6_SNA_CHOICE (4294967u)

#define MODEL3_CAN_ID228_EP_BRIGHT_STATUS_EPB_RUNIT_STATUS228_DRIVE_RELEASED_CHOICE (1u)
#define MODEL3_CAN_ID228_EP_BRIGHT_STATUS_EPB_RUNIT_STATUS228_PARK_ENGAGED_CHOICE (3u)
#define MODEL3_CAN_ID228_EP_BRIGHT_STATUS_EPB_RUNIT_STATUS228_ENGAGING_CHOICE (8u)
#define MODEL3_CAN_ID228_EP_BRIGHT_STATUS_EPB_RUNIT_STATUS228_DISENGAGING_CHOICE (10u)

#define MODEL3_CAN_ID228_EP_BRIGHT_STATUS_EPB_RESM_CALIPER_REQUEST228_IDLE_CHOICE (1u)
#define MODEL3_CAN_ID228_EP_BRIGHT_STATUS_EPB_RESM_CALIPER_REQUEST228_ENGAGING_CHOICE (2u)
#define MODEL3_CAN_ID228_EP_BRIGHT_STATUS_EPB_RESM_CALIPER_REQUEST228_DISENGAGING_CHOICE (3u)

#define MODEL3_CAN_ID228_EP_BRIGHT_STATUS_EPB_RESM_OPERATION_TRIGGER228_PARK_ENGAGED_CHOICE (1u)
#define MODEL3_CAN_ID228_EP_BRIGHT_STATUS_EPB_RESM_OPERATION_TRIGGER228_RELEASED_CHOICE (6u)
#define MODEL3_CAN_ID228_EP_BRIGHT_STATUS_EPB_RESM_OPERATION_TRIGGER228_SUPER_PARK_CHOICE (22u)

#define MODEL3_CAN_ID288_EP_BLEFT_STATUS_EPB_LUNIT_STATUS288_DRIVE_RELEASED_CHOICE (1u)
#define MODEL3_CAN_ID288_EP_BLEFT_STATUS_EPB_LUNIT_STATUS288_PARK_ENGAGED_CHOICE (3u)
#define MODEL3_CAN_ID288_EP_BLEFT_STATUS_EPB_LUNIT_STATUS288_ENGAGING_CHOICE (8u)
#define MODEL3_CAN_ID288_EP_BLEFT_STATUS_EPB_LUNIT_STATUS288_DISENGAGING_CHOICE (10u)

#define MODEL3_CAN_ID288_EP_BLEFT_STATUS_EPB_LESM_CALIPER_REQUEST288_IDLE_CHOICE (1u)
#define MODEL3_CAN_ID288_EP_BLEFT_STATUS_EPB_LESM_CALIPER_REQUEST288_ENGAGING_CHOICE (2u)
#define MODEL3_CAN_ID288_EP_BLEFT_STATUS_EPB_LESM_CALIPER_REQUEST288_DISENGAGING_CHOICE (3u)

#define MODEL3_CAN_ID288_EP_BLEFT_STATUS_EPB_LESM_OPERATION_TRIGGER288_PARK_ENGAGED_CHOICE (1u)
#define MODEL3_CAN_ID288_EP_BLEFT_STATUS_EPB_LESM_OPERATION_TRIGGER288_RELEASED_CHOICE (6u)
#define MODEL3_CAN_ID288_EP_BLEFT_STATUS_EPB_LESM_OPERATION_TRIGGER288_SUPER_PARK_CHOICE (22u)

#define MODEL3_CAN_ID7_F_FCAR_CONFIG_GTW_DELIVERY_STATUS_NOT_DELIVERED_CHOICE (0u)
#define MODEL3_CAN_ID7_F_FCAR_CONFIG_GTW_DELIVERY_STATUS_DELIVERED_CHOICE (1u)

#define MODEL3_CAN_ID7_F_FCAR_CONFIG_GTW_HEATED_WIPERS_FALSE_CHOICE (0u)
#define MODEL3_CAN_ID7_F_FCAR_CONFIG_GTW_HEATED_WIPERS_TRUE_CHOICE (1u)

#define MODEL3_CAN_ID7_F_FCAR_CONFIG_GTW_MAP_REGION_US_CHOICE (0u)
#define MODEL3_CAN_ID7_F_FCAR_CONFIG_GTW_MAP_REGION_EU_CHOICE (1u)
#define MODEL3_CAN_ID7_F_FCAR_CONFIG_GTW_MAP_REGION_NONE_CHOICE (2u)
#define MODEL3_CAN_ID7_F_FCAR_CONFIG_GTW_MAP_REGION_CN_CHOICE (3u)
#define MODEL3_CAN_ID7_F_FCAR_CONFIG_GTW_MAP_REGION_AU_CHOICE (4u)
#define MODEL3_CAN_ID7_F_FCAR_CONFIG_GTW_MAP_REGION_JP_CHOICE (5u)
#define MODEL3_CAN_ID7_F_FCAR_CONFIG_GTW_MAP_REGION_TW_CHOICE (6u)
#define MODEL3_CAN_ID7_F_FCAR_CONFIG_GTW_MAP_REGION_KR_CHOICE (7u)
#define MODEL3_CAN_ID7_F_FCAR_CONFIG_GTW_MAP_REGION_ME_CHOICE (8u)
#define MODEL3_CAN_ID7_F_FCAR_CONFIG_GTW_MAP_REGION_HK_CHOICE (9u)
#define MODEL3_CAN_ID7_F_FCAR_CONFIG_GTW_MAP_REGION_MO_CHOICE (10u)

#define MODEL3_CAN_ID7_F_FCAR_CONFIG_GTW_EPAS_TYPE_MANDO_VGR69_GEN3_CHOICE (0u)

#define MODEL3_CAN_ID7_F_FCAR_CONFIG_GTW_FRONT_SEAT_HEATERS_NONE_CHOICE (0u)
#define MODEL3_CAN_ID7_F_FCAR_CONFIG_GTW_FRONT_SEAT_HEATERS_KONGSBERG_LOW_POWER_CHOICE (1u)

#define MODEL3_CAN_ID7_F_FCAR_CONFIG_GTW_DRIVETRAIN_TYPE_RWD_CHOICE (0u)
#define MODEL3_CAN_ID7_F_FCAR_CONFIG_GTW_DRIVETRAIN_TYPE_AWD_CHOICE (1u)

#define MODEL3_CAN_ID7_F_FCAR_CONFIG_GTW_REAR_SEAT_HEATERS_NONE_CHOICE (0u)
#define MODEL3_CAN_ID7_F_FCAR_CONFIG_GTW_REAR_SEAT_HEATERS_KONGSBERG_LOW_POWER_CHOICE (1u)

#define MODEL3_CAN_ID7_F_FCAR_CONFIG_GTW_RIGHT_HAND_DRIVE_LEFT_CHOICE (0u)
#define MODEL3_CAN_ID7_F_FCAR_CONFIG_GTW_RIGHT_HAND_DRIVE_RIGHT_CHOICE (1u)

#define MODEL3_CAN_ID7_F_FCAR_CONFIG_GTW_TPMS_TYPE_CONTI_2_CHOICE (0u)
#define MODEL3_CAN_ID7_F_FCAR_CONFIG_GTW_TPMS_TYPE_TESLA_BLE_CHOICE (1u)

#define MODEL3_CAN_ID7_F_FCAR_CONFIG_GTW_PERFORMANCE_PACKAGE_BASE_CHOICE (0u)
#define MODEL3_CAN_ID7_F_FCAR_CONFIG_GTW_PERFORMANCE_PACKAGE_PERFORMANCE_CHOICE (1u)
#define MODEL3_CAN_ID7_F_FCAR_CONFIG_GTW_PERFORMANCE_PACKAGE_LUDICROUS_CHOICE (2u)
#define MODEL3_CAN_ID7_F_FCAR_CONFIG_GTW_PERFORMANCE_PACKAGE_BASE_PLUS_CHOICE (3u)
#define MODEL3_CAN_ID7_F_FCAR_CONFIG_GTW_PERFORMANCE_PACKAGE_BASE_PLUS_AWD_CHOICE (4u)

#define MODEL3_CAN_ID7_F_FCAR_CONFIG_GTW_HOMELINK_TYPE_NONE_CHOICE (0u)
#define MODEL3_CAN_ID7_F_FCAR_CONFIG_GTW_HOMELINK_TYPE_HOMELINK_V_OPT_2_CHOICE (1u)

#define MODEL3_CAN_ID7_F_FCAR_CONFIG_GTW_VDC_TYPE_BOSCH_VDC_CHOICE (0u)
#define MODEL3_CAN_ID7_F_FCAR_CONFIG_GTW_VDC_TYPE_TESLA_VDC_CHOICE (1u)

#define MODEL3_CAN_ID7_F_FCAR_CONFIG_GTW_TOW_PACKAGE_NONE_CHOICE (0u)
#define MODEL3_CAN_ID7_F_FCAR_CONFIG_GTW_TOW_PACKAGE_TESLA_REV1_CHOICE (1u)

#define MODEL3_CAN_ID7_F_FCAR_CONFIG_GTW_XCP_IBST_FALSE_CHOICE (0u)
#define MODEL3_CAN_ID7_F_FCAR_CONFIG_GTW_XCP_IBST_TRUE_CHOICE (1u)

#define MODEL3_CAN_ID7_F_FCAR_CONFIG_GTW_REAR_LIGHT_TYPE_NA_CHOICE (0u)
#define MODEL3_CAN_ID7_F_FCAR_CONFIG_GTW_REAR_LIGHT_TYPE_EU_CN_CHOICE (1u)

#define MODEL3_CAN_ID7_F_FCAR_CONFIG_GTW_XCP_ESP_FALSE_CHOICE (0u)
#define MODEL3_CAN_ID7_F_FCAR_CONFIG_GTW_XCP_ESP_TRUE_CHOICE (1u)

#define MODEL3_CAN_ID7_F_FCAR_CONFIG_GTW_COOLANT_PUMP_TYPE_DUAL_CHOICE (0u)
#define MODEL3_CAN_ID7_F_FCAR_CONFIG_GTW_COOLANT_PUMP_TYPE_SINGLE_PUMP_BATT_CHOICE (1u)

#define MODEL3_CAN_ID7_F_FCAR_CONFIG_GTW_MEMORY_MIRRORS_NOT_INSTALLED_CHOICE (0u)
#define MODEL3_CAN_ID7_F_FCAR_CONFIG_GTW_MEMORY_MIRRORS_SMR_CHOICE (1u)

#define MODEL3_CAN_ID7_F_FCAR_CONFIG_GTW_CHASSIS_TYPE_MODEL_S_CHASSIS_CHOICE (0u)
#define MODEL3_CAN_ID7_F_FCAR_CONFIG_GTW_CHASSIS_TYPE_MODEL_X_CHASSIS_CHOICE (1u)
#define MODEL3_CAN_ID7_F_FCAR_CONFIG_GTW_CHASSIS_TYPE_MODEL_3_CHASSIS_CHOICE (2u)

#define MODEL3_CAN_ID7_F_FCAR_CONFIG_GTW_POWER_STEERING_COLUMN_NOT_INSTALLED_CHOICE (0u)
#define MODEL3_CAN_ID7_F_FCAR_CONFIG_GTW_POWER_STEERING_COLUMN_TK_CHOICE (1u)

#define MODEL3_CAN_ID7_F_FCAR_CONFIG_GTW_FRONT_FOG_LAMPS_NOT_INSTALLED_CHOICE (0u)
#define MODEL3_CAN_ID7_F_FCAR_CONFIG_GTW_FRONT_FOG_LAMPS_INSTALLED_CHOICE (1u)

#define MODEL3_CAN_ID7_F_FCAR_CONFIG_GTW_HEADLAMPS_BASE_CHOICE (0u)
#define MODEL3_CAN_ID7_F_FCAR_CONFIG_GTW_HEADLAMPS_PREMIUM_CHOICE (1u)

#define MODEL3_CAN_ID7_F_FCAR_CONFIG_GTW_REAR_DRIVE_UNIT_TYPE_LARGE_REAR_CHOICE (0u)
#define MODEL3_CAN_ID7_F_FCAR_CONFIG_GTW_REAR_DRIVE_UNIT_TYPE_SMALL_REAR_CHOICE (1u)

#define MODEL3_CAN_ID7_F_FCAR_CONFIG_GTW_AIR_SUSPENSION_NONE_CHOICE (0u)
#define MODEL3_CAN_ID7_F_FCAR_CONFIG_GTW_AIR_SUSPENSION_TESLA_STANDARD_CHOICE (1u)
#define MODEL3_CAN_ID7_F_FCAR_CONFIG_GTW_AIR_SUSPENSION_TESLA_ADAPTIVE_CHOICE (2u)

#define MODEL3_CAN_ID7_F_FCAR_CONFIG_GTW_LOGGING_VERSION_MESSAGE_BASED_CHOICE (0u)
#define MODEL3_CAN_ID7_F_FCAR_CONFIG_GTW_LOGGING_VERSION_SIGNAL_BASED_CHOICE (1u)

#define MODEL3_CAN_ID7_F_FCAR_CONFIG_GTW_LUMBAR_ECU_TYPE_NONE_CHOICE (0u)
#define MODEL3_CAN_ID7_F_FCAR_CONFIG_GTW_LUMBAR_ECU_TYPE_ALFMEIER_CHOICE (1u)

#define MODEL3_CAN_ID7_F_FCAR_CONFIG_GTW_IBST_WAKE_TYPE_NONE_CHOICE (0u)
#define MODEL3_CAN_ID7_F_FCAR_CONFIG_GTW_IBST_WAKE_TYPE_WAKE_PIN_20_CHOICE (1u)

#define MODEL3_CAN_ID7_F_FCAR_CONFIG_GTW_PASSENGER_OCCUPANCY_SENSOR_TYPE_OCS_CHOICE (0u)
#define MODEL3_CAN_ID7_F_FCAR_CONFIG_GTW_PASSENGER_OCCUPANCY_SENSOR_TYPE_RESISTIVE_PAD_CHOICE (1u)

#define MODEL3_CAN_ID7_F_FCAR_CONFIG_GTW_AUTOPILOT_CAMERA_TYPE_RCCB_CAMERAS_CHOICE (0u)

#define MODEL3_CAN_ID7_F_FCAR_CONFIG_GTW_AUX_PARK_LAMPS_NA_BASE_CHOICE (0u)
#define MODEL3_CAN_ID7_F_FCAR_CONFIG_GTW_AUX_PARK_LAMPS_NA_PREMIUM_CHOICE (1u)
#define MODEL3_CAN_ID7_F_FCAR_CONFIG_GTW_AUX_PARK_LAMPS_EU_CHOICE (2u)
#define MODEL3_CAN_ID7_F_FCAR_CONFIG_GTW_AUX_PARK_LAMPS_NONE_CHOICE (3u)

#define MODEL3_CAN_ID7_F_FCAR_CONFIG_GTW_CONNECTIVITY_PACKAGE_BASE_CHOICE (0u)
#define MODEL3_CAN_ID7_F_FCAR_CONFIG_GTW_CONNECTIVITY_PACKAGE_PREMIUM_CHOICE (1u)

#define MODEL3_CAN_ID7_F_FCAR_CONFIG_GTW_HVAC_QUIET_SNORKEL_TYPE_DEFAULT_CHOICE (0u)
#define MODEL3_CAN_ID7_F_FCAR_CONFIG_GTW_HVAC_QUIET_SNORKEL_TYPE_QUIET_V1_CHOICE (1u)

#define MODEL3_CAN_ID7_F_FCAR_CONFIG_GTW_PLC_SUPPORT_TYPE_NONE_CHOICE (0u)
#define MODEL3_CAN_ID7_F_FCAR_CONFIG_GTW_PLC_SUPPORT_TYPE_ONBOARD_ADAPTER_CHOICE (1u)
#define MODEL3_CAN_ID7_F_FCAR_CONFIG_GTW_PLC_SUPPORT_TYPE_NATIVE_CHARGE_PORT_CHOICE (2u)

#define MODEL3_CAN_ID7_F_FCAR_CONFIG_GTW_HVAC_PANEL_VANE_TYPE_PARALLEL_V1_CHOICE (0u)
#define MODEL3_CAN_ID7_F_FCAR_CONFIG_GTW_HVAC_PANEL_VANE_TYPE_CONVERGENT_V1_CHOICE (1u)

#define MODEL3_CAN_ID7_F_FCAR_CONFIG_GTW_CABIN_BLOWER_CTRL_TYPE_LV8907_CHOICE (0u)
#define MODEL3_CAN_ID7_F_FCAR_CONFIG_GTW_CABIN_BLOWER_CTRL_TYPE_TMS320_F28027_F_CHOICE (1u)

#define MODEL3_CAN_ID7_F_FCAR_CONFIG_GTW_AUDIO_TYPE_BASE_CHOICE (0u)
#define MODEL3_CAN_ID7_F_FCAR_CONFIG_GTW_AUDIO_TYPE_PREMIUM_CHOICE (1u)
#define MODEL3_CAN_ID7_F_FCAR_CONFIG_GTW_AUDIO_TYPE_BASE_WITH_PREMIUM200_CHOICE (2u)

#define MODEL3_CAN_ID7_F_FCAR_CONFIG_GTW_E_BUCK_CONFIG_NONE_CHOICE (0u)
#define MODEL3_CAN_ID7_F_FCAR_CONFIG_GTW_E_BUCK_CONFIG_DEV_BUCK_CHOICE (1u)

#define MODEL3_CAN_ID7_F_FCAR_CONFIG_GTW_PACK_ENERGY_PACK_50_KWH_CHOICE (0u)
#define MODEL3_CAN_ID7_F_FCAR_CONFIG_GTW_PACK_ENERGY_PACK_74_KWH_CHOICE (1u)
#define MODEL3_CAN_ID7_F_FCAR_CONFIG_GTW_PACK_ENERGY_PACK_62_KWH_CHOICE (2u)
#define MODEL3_CAN_ID7_F_FCAR_CONFIG_GTW_PACK_ENERGY_PACK_100_KWH_CHOICE (3u)
#define MODEL3_CAN_ID7_F_FCAR_CONFIG_GTW_PACK_ENERGY_PACK_75_KWH_CHOICE (4u)

#define MODEL3_CAN_ID7_F_FCAR_CONFIG_GTW_TIRE_TYPE_UNKNOWN_CHOICE (0u)
#define MODEL3_CAN_ID7_F_FCAR_CONFIG_GTW_TIRE_TYPE_MICHELIN_ALL_SEASON_18_CHOICE (1u)
#define MODEL3_CAN_ID7_F_FCAR_CONFIG_GTW_TIRE_TYPE_MICHELIN_SUMMER_18_CHOICE (2u)
#define MODEL3_CAN_ID7_F_FCAR_CONFIG_GTW_TIRE_TYPE_HANKOOK_SUMMER_19_CHOICE (3u)
#define MODEL3_CAN_ID7_F_FCAR_CONFIG_GTW_TIRE_TYPE_CONTI_ALL_SEASON_19_CHOICE (4u)
#define MODEL3_CAN_ID7_F_FCAR_CONFIG_GTW_TIRE_TYPE_MICHELIN_SUMMER_20_CHOICE (5u)

#define MODEL3_CAN_ID7_F_FCAR_CONFIG_GTW_WINDSHIELD_TYPE_SEKISUI_ACOUSTIC_CHOICE (0u)
#define MODEL3_CAN_ID7_F_FCAR_CONFIG_GTW_WINDSHIELD_TYPE_EASTMAN_ACOUSTIC_CHOICE (1u)

#define MODEL3_CAN_ID7_F_FCAR_CONFIG_GTW_ACTIVE_HIGH_BEAM_NOT_ACTIVE_CHOICE (0u)
#define MODEL3_CAN_ID7_F_FCAR_CONFIG_GTW_ACTIVE_HIGH_BEAM_ACTIVE_CHOICE (1u)

#define MODEL3_CAN_ID7_F_FCAR_CONFIG_GTW_AIRBAG_CUTOFF_SWITCH_CUTOFF_SWITCH_DISABLED_CHOICE (0u)
#define MODEL3_CAN_ID7_F_FCAR_CONFIG_GTW_AIRBAG_CUTOFF_SWITCH_CUTOFF_SWITCH_ENABLED_CHOICE (1u)

#define MODEL3_CAN_ID7_F_FCAR_CONFIG_GTW_INTRUSION_SENSOR_TYPE_NOT_INSTALLED_CHOICE (0u)
#define MODEL3_CAN_ID7_F_FCAR_CONFIG_GTW_INTRUSION_SENSOR_TYPE_VODAFONE_CHOICE (1u)

#define MODEL3_CAN_ID7_F_FCAR_CONFIG_GTW_FRONT_SEAT_RECLINER_HARDWARE_STANDARD_RANGE_CHOICE (0u)
#define MODEL3_CAN_ID7_F_FCAR_CONFIG_GTW_FRONT_SEAT_RECLINER_HARDWARE_RIGHT_SEAT_REDUCED_RANGE_CHOICE (1u)
#define MODEL3_CAN_ID7_F_FCAR_CONFIG_GTW_FRONT_SEAT_RECLINER_HARDWARE_LEFT_SEAT_REDUCED_RANGE_CHOICE (2u)
#define MODEL3_CAN_ID7_F_FCAR_CONFIG_GTW_FRONT_SEAT_RECLINER_HARDWARE_LEFT_RIGHT_SEAT_REDUCED_RANGE_CHOICE (3u)

#define MODEL3_CAN_ID7_F_FCAR_CONFIG_GTW_SPOILER_TYPE_NOT_INSTALLED_CHOICE (0u)
#define MODEL3_CAN_ID7_F_FCAR_CONFIG_GTW_SPOILER_TYPE_PASSIVE_CHOICE (1u)

#define MODEL3_CAN_ID7_F_FCAR_CONFIG_GTW_REAR_GLASS_TYPE_NX_CHOICE (0u)
#define MODEL3_CAN_ID7_F_FCAR_CONFIG_GTW_REAR_GLASS_TYPE_TSA5_NOPET_CHOICE (1u)

#define MODEL3_CAN_ID7_F_FCAR_CONFIG_GTW_PASSENGER_AIRBAG_TYPE_FULL_SUPPRESSION_CHOICE (0u)
#define MODEL3_CAN_ID7_F_FCAR_CONFIG_GTW_PASSENGER_AIRBAG_TYPE_SAFETY_VENT_CHOICE (1u)

#define MODEL3_CAN_ID7_F_FCAR_CONFIG_GTW_REAR_FOG_LAMPS_NOT_INSTALLED_CHOICE (0u)
#define MODEL3_CAN_ID7_F_FCAR_CONFIG_GTW_REAR_FOG_LAMPS_INSTALLED_CHOICE (1u)

#define MODEL3_CAN_ID7_F_FCAR_CONFIG_GTW_DAS_HW_PARKER_PASCAL_2_5_CHOICE (3u)
#define MODEL3_CAN_ID7_F_FCAR_CONFIG_GTW_DAS_HW_TESLA_AP3_CHOICE (4u)

#define MODEL3_CAN_ID7_F_FCAR_CONFIG_GTW_ESP_VALVE_TYPE_UNKNOWN_CHOICE (0u)
#define MODEL3_CAN_ID7_F_FCAR_CONFIG_GTW_ESP_VALVE_TYPE_VALVE_TYPE_1_CHOICE (1u)
#define MODEL3_CAN_ID7_F_FCAR_CONFIG_GTW_ESP_VALVE_TYPE_VALVE_TYPE_2_CHOICE (2u)

#define MODEL3_CAN_ID7_F_FCAR_CONFIG_GTW_ROOF_TYPE_METAL_CHOICE (0u)
#define MODEL3_CAN_ID7_F_FCAR_CONFIG_GTW_ROOF_TYPE_FIXED_GLASS_CHOICE (1u)
#define MODEL3_CAN_ID7_F_FCAR_CONFIG_GTW_ROOF_TYPE_PANORAMIC_CHOICE (2u)

#define MODEL3_CAN_ID7_F_FCAR_CONFIG_GTW_AUTOPILOT_NONE_CHOICE (0u)
#define MODEL3_CAN_ID7_F_FCAR_CONFIG_GTW_AUTOPILOT_HIGHWAY_CHOICE (1u)
#define MODEL3_CAN_ID7_F_FCAR_CONFIG_GTW_AUTOPILOT_ENHANCED_CHOICE (2u)
#define MODEL3_CAN_ID7_F_FCAR_CONFIG_GTW_AUTOPILOT_SELF_DRIVING_CHOICE (3u)
#define MODEL3_CAN_ID7_F_FCAR_CONFIG_GTW_AUTOPILOT_BASIC_CHOICE (4u)

#define MODEL3_CAN_ID7_F_FCAR_CONFIG_GTW_SOFT_RANGE_STANDARD_CHOICE (0u)
#define MODEL3_CAN_ID7_F_FCAR_CONFIG_GTW_SOFT_RANGE_RANGE_220_MILES_CHOICE (1u)
#define MODEL3_CAN_ID7_F_FCAR_CONFIG_GTW_SOFT_RANGE_RANGE_93_MILES_CHOICE (2u)

#define MODEL3_CAN_ID7_F_FCAR_CONFIG_GTW_REFRIGERANT_TYPE_DEFAULT_CHOICE (0u)
#define MODEL3_CAN_ID7_F_FCAR_CONFIG_GTW_REFRIGERANT_TYPE_R134_A_CHOICE (1u)
#define MODEL3_CAN_ID7_F_FCAR_CONFIG_GTW_REFRIGERANT_TYPE_R1234_YF_CHOICE (2u)

#define MODEL3_CAN_ID7_F_FCAR_CONFIG_GTW_SUPERCHARGING_ACCESS_NOT_ALLOWED_CHOICE (0u)
#define MODEL3_CAN_ID7_F_FCAR_CONFIG_GTW_SUPERCHARGING_ACCESS_ALLOWED_CHOICE (1u)
#define MODEL3_CAN_ID7_F_FCAR_CONFIG_GTW_SUPERCHARGING_ACCESS_PAY_AS_YOU_GO_CHOICE (2u)

#define MODEL3_CAN_ID7_F_FCAR_CONFIG_GTW_HEADLIGHT_LEVELER_TYPE_NONE_CHOICE (0u)
#define MODEL3_CAN_ID7_F_FCAR_CONFIG_GTW_HEADLIGHT_LEVELER_TYPE_GEN1_CHOICE (1u)

#define MODEL3_CAN_ID7_F_FCAR_CONFIG_GTW_EXTERIOR_COLOR_RED_MULTICOAT_CHOICE (0u)
#define MODEL3_CAN_ID7_F_FCAR_CONFIG_GTW_EXTERIOR_COLOR_SOLID_BLACK_CHOICE (1u)
#define MODEL3_CAN_ID7_F_FCAR_CONFIG_GTW_EXTERIOR_COLOR_SILVER_METALLIC_CHOICE (2u)
#define MODEL3_CAN_ID7_F_FCAR_CONFIG_GTW_EXTERIOR_COLOR_MIDNIGHT_SILVER_CHOICE (3u)
#define MODEL3_CAN_ID7_F_FCAR_CONFIG_GTW_EXTERIOR_COLOR_DEEP_BLUE_CHOICE (5u)
#define MODEL3_CAN_ID7_F_FCAR_CONFIG_GTW_EXTERIOR_COLOR_PEARL_WHITE_CHOICE (6u)

#define MODEL3_CAN_ID7_F_FCAR_CONFIG_GTW_RESTRAINTS_HARDWARE_TYPE_NA_M3_CHOICE (21u)
#define MODEL3_CAN_ID7_F_FCAR_CONFIG_GTW_RESTRAINTS_HARDWARE_TYPE_EUROW_ECALL_M3_CHOICE (22u)
#define MODEL3_CAN_ID7_F_FCAR_CONFIG_GTW_RESTRAINTS_HARDWARE_TYPE_EUROW_NO_ECALL_M3_CHOICE (23u)
#define MODEL3_CAN_ID7_F_FCAR_CONFIG_GTW_RESTRAINTS_HARDWARE_TYPE_NA_MY_CHOICE (31u)
#define MODEL3_CAN_ID7_F_FCAR_CONFIG_GTW_RESTRAINTS_HARDWARE_TYPE_EUROW_ECALL_MY_CHOICE (32u)
#define MODEL3_CAN_ID7_F_FCAR_CONFIG_GTW_RESTRAINTS_HARDWARE_TYPE_EUROW_NO_ECALL_MY_CHOICE (33u)

#define MODEL3_CAN_ID7_F_FCAR_CONFIG_GTW_WHEEL_TYPE_PINWHEEL_18_CHOICE (0u)
#define MODEL3_CAN_ID7_F_FCAR_CONFIG_GTW_WHEEL_TYPE_STILETTO_19_CHOICE (1u)
#define MODEL3_CAN_ID7_F_FCAR_CONFIG_GTW_WHEEL_TYPE_STILETTO_20_CHOICE (2u)
#define MODEL3_CAN_ID7_F_FCAR_CONFIG_GTW_WHEEL_TYPE_STILETTO_20_DARK_STAGGERED_CHOICE (3u)
#define MODEL3_CAN_ID7_F_FCAR_CONFIG_GTW_WHEEL_TYPE_GEMINI_19_SQUARE_CHOICE (4u)
#define MODEL3_CAN_ID7_F_FCAR_CONFIG_GTW_WHEEL_TYPE_GEMINI_19_STAGGERED_CHOICE (5u)
#define MODEL3_CAN_ID7_F_FCAR_CONFIG_GTW_WHEEL_TYPE_STILETTO_20_DARK_SQUARE_CHOICE (14u)
#define MODEL3_CAN_ID7_F_FCAR_CONFIG_GTW_WHEEL_TYPE_PINWHEEL_18_CAP_KIT_CHOICE (18u)

#define MODEL3_CAN_ID7_F_FCAR_CONFIG_GTW_NUMBER_HVIL_NODES_HVIL_NODES_0_CHOICE (0u)
#define MODEL3_CAN_ID7_F_FCAR_CONFIG_GTW_NUMBER_HVIL_NODES_HVIL_NODES_1_CHOICE (1u)
#define MODEL3_CAN_ID7_F_FCAR_CONFIG_GTW_NUMBER_HVIL_NODES_HVIL_NODES_2_CHOICE (2u)
#define MODEL3_CAN_ID7_F_FCAR_CONFIG_GTW_NUMBER_HVIL_NODES_HVIL_NODES_3_CHOICE (3u)
#define MODEL3_CAN_ID7_F_FCAR_CONFIG_GTW_NUMBER_HVIL_NODES_HVIL_NODES_4_CHOICE (4u)
#define MODEL3_CAN_ID7_F_FCAR_CONFIG_GTW_NUMBER_HVIL_NODES_HVIL_NODES_5_CHOICE (5u)

#define MODEL3_CAN_ID7_F_FCAR_CONFIG_GTW_PEDESTRIAN_WARNING_SOUND_NONE_CHOICE (0u)
#define MODEL3_CAN_ID7_F_FCAR_CONFIG_GTW_PEDESTRIAN_WARNING_SOUND_SPEAKER_CHOICE (1u)

#define MODEL3_CAN_ID7_F_FCAR_CONFIG_GTW_B_PILLAR_NFC_PARAM_MODEL_3_CHOICE (0u)
#define MODEL3_CAN_ID7_F_FCAR_CONFIG_GTW_B_PILLAR_NFC_PARAM_MODEL_Y_CHOICE (1u)

#define MODEL3_CAN_ID7_F_FCAR_CONFIG_GTW_IMMERSIVE_AUDIO_DISABLED_CHOICE (0u)
#define MODEL3_CAN_ID7_F_FCAR_CONFIG_GTW_IMMERSIVE_AUDIO_BASE_CHOICE (1u)
#define MODEL3_CAN_ID7_F_FCAR_CONFIG_GTW_IMMERSIVE_AUDIO_PREMIUM_CHOICE (2u)

#define MODEL3_CAN_ID7_F_FCAR_CONFIG_GTW_INTERIOR_LIGHTING_BASE_CHOICE (0u)
#define MODEL3_CAN_ID7_F_FCAR_CONFIG_GTW_INTERIOR_LIGHTING_PREMIUM_CHOICE (1u)
#define MODEL3_CAN_ID7_F_FCAR_CONFIG_GTW_INTERIOR_LIGHTING_PREMIUM_NO_POCKET_LIGHT_CHOICE (2u)

#define MODEL3_CAN_ID7_F_FCAR_CONFIG_GTW_EFFICIENCY_PACKAGE_DEFAULT_CHOICE (0u)
#define MODEL3_CAN_ID7_F_FCAR_CONFIG_GTW_EFFICIENCY_PACKAGE_M3_SR_PLUS_2020_CHOICE (1u)
#define MODEL3_CAN_ID7_F_FCAR_CONFIG_GTW_EFFICIENCY_PACKAGE_M3_LR_2020_CHOICE (2u)
#define MODEL3_CAN_ID7_F_FCAR_CONFIG_GTW_EFFICIENCY_PACKAGE_M3_LR_PERFORMANCE_2020_CHOICE (3u)

#define MODEL3_CAN_ID7_F_FCAR_CONFIG_GTW_BRAKE_HW_TYPE_BREMBO_P42_MANDO_43_MOC_CHOICE (0u)
#define MODEL3_CAN_ID7_F_FCAR_CONFIG_GTW_BRAKE_HW_TYPE_BREMBO_LARGE_P42_BREMBO_44_MOC_CHOICE (1u)

#define MODEL3_CAN_ID7_F_FCAR_CONFIG_GTW_FRONT_SEAT_TYPE_BASE_TESLA_CHOICE (0u)
#define MODEL3_CAN_ID7_F_FCAR_CONFIG_GTW_FRONT_SEAT_TYPE_PREMIUM_TESLA_CHOICE (1u)
#define MODEL3_CAN_ID7_F_FCAR_CONFIG_GTW_FRONT_SEAT_TYPE_PREMIUM_L_YANFENG_R_TESLA_CHOICE (2u)
#define MODEL3_CAN_ID7_F_FCAR_CONFIG_GTW_FRONT_SEAT_TYPE_PREMIUM_L_TESLA_R_YANFENG_CHOICE (3u)
#define MODEL3_CAN_ID7_F_FCAR_CONFIG_GTW_FRONT_SEAT_TYPE_PREMIUM_YANFENG_CHOICE (4u)

#define MODEL3_CAN_ID7_F_FCAR_CONFIG_GTW_ROOF_GLASS_TYPE_TSA3_PET_CHOICE (0u)
#define MODEL3_CAN_ID7_F_FCAR_CONFIG_GTW_ROOF_GLASS_TYPE_TSA5_NOPET_CHOICE (1u)

#define MODEL3_CAN_ID7_F_FCAR_CONFIG_GTW_TRACK_MODE_PACKAGE_NONE_CHOICE (0u)
#define MODEL3_CAN_ID7_F_FCAR_CONFIG_GTW_TRACK_MODE_PACKAGE_PERFORMANCE_CHOICE (1u)

#define MODEL3_CAN_ID7_F_FCAR_CONFIG_GTW_E_CALL_ENABLED_DISABLED_CHOICE (0u)
#define MODEL3_CAN_ID7_F_FCAR_CONFIG_GTW_E_CALL_ENABLED_ENABLED_CHOICE (1u)

#define MODEL3_CAN_ID7_F_FCAR_CONFIG_GTW_TWELVE_V_BATTERY_TYPE_ATLASBX_B24_FLOODED_CHOICE (0u)
#define MODEL3_CAN_ID7_F_FCAR_CONFIG_GTW_TWELVE_V_BATTERY_TYPE_CLARIOS_B24_FLOODED_CHOICE (1u)

/**
 * Signals in message ID00CUI_status.
 *
 * All signal values are as on the CAN bus.
 */
struct model3_can_id00_cui_status_t {
    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ui_touch_active;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ui_audio_active;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ui_bluetooth_active;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ui_cell_active;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ui_display_ready;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ui_display_on;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ui_wifi_active;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ui_wifi_connected;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ui_system_active;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ui_ready_for_drive;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ui_cell_connected;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ui_vpn_active;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ui_autopilot_trial;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ui_factory_reset;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ui_gps_active;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ui_screenshot_active;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ui_radio_active;

    /**
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ui_cell_network_technology;

    /**
     * Range: 0..255 (-128..127 dB)
     * Scale: 1
     * Offset: -128
     */
    uint8_t ui_cell_receiver_power;

    /**
     * Range: 0..255 (0..255 1)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ui_false_touch_counter;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ui_development_car;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ui_camera_active;

    /**
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ui_cell_signal_bars;

    /**
     * Range: -60..60 (-20..100 degC)
     * Scale: 1
     * Offset: 40
     */
    int8_t ui_pcb_temperature;

    /**
     * Range: -60..60 (-20..100 degC)
     * Scale: 1
     * Offset: 40
     */
    int8_t ui_cpu_temperature;
};

/**
 * Signals in message ID082UI_tripPlanning.
 *
 * All signal values are as on the CAN bus.
 */
struct model3_can_id082_ui_trip_planning_t {
    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ui_trip_planning_active;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ui_nav_to_supercharger;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ui_request_active_battery_heating;

    /**
     * Range: -32767..32767 (-327.67..327.67 kWh)
     * Scale: 0.01
     * Offset: 0
     */
    int16_t ui_predicted_energy;

    /**
     * Range: -32767..32767 (-327.67..327.67 kWh)
     * Scale: 0.01
     * Offset: 0
     */
    int16_t ui_hindsight_energy;

    /**
     * Range: -32767..32767 (-327.67..327.67 kWh)
     * Scale: 0.01
     * Offset: 0
     */
    int16_t ui_energy_at_destination;
};

/**
 * Signals in message ID102VCLEFT_doorStatus.
 *
 * All signal values are as on the CAN bus.
 */
struct model3_can_id102_vcleft_door_status_t {
    /**
     * Range: 0..8 (0..8 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcleft_front_latch_status;

    /**
     * Range: 0..8 (0..8 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcleft_rear_latch_status;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcleft_front_latch_switch;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcleft_rear_latch_switch;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcleft_front_handle_pulled;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcleft_rear_handle_pulled;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcleft_front_rel_actuator_switch;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcleft_rear_rel_actuator_switch;

    /**
     * Range: 0..100 (0..100 %)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcleft_front_handle_pwm;

    /**
     * Range: 0..100 (0..100 %)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcleft_rear_handle_pwm;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcleft_front_int_switch_pressed;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcleft_rear_int_switch_pressed;

    /**
     * Range: 0..250 (0..5 V)
     * Scale: 0.02
     * Offset: 0
     */
    uint8_t vcleft_mirror_tilt_x_position;

    /**
     * Range: 0..250 (0..5 V)
     * Scale: 0.02
     * Offset: 0
     */
    uint8_t vcleft_mirror_tilt_y_position;

    /**
     * Range: 0..4 (0..4 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcleft_mirror_state;

    /**
     * Range: 0..4 (0..4 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcleft_mirror_fold_state;

    /**
     * Range: 0..5 (0..5 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcleft_mirror_recall_state;

    /**
     * Range: 0..4 (0..4 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcleft_mirror_heat_state;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcleft_mirror_dipped;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcleft_front_handle_pulled_persist;
};

/**
 * Signals in message ID103VCRIGHT_doorStatus.
 *
 * All signal values are as on the CAN bus.
 */
struct model3_can_id103_vcright_door_status_t {
    /**
     * Range: 0..8 (0..8 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcright_front_latch_status;

    /**
     * Range: 0..8 (0..8 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcright_rear_latch_status;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcright_front_latch_switch;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcright_rear_latch_switch;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcright_front_handle_pulled;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcright_rear_handle_pulled;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcright_front_rel_actuator_switch;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcright_rear_rel_actuator_switch;

    /**
     * Range: 0..100 (0..100 %)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcright_front_handle_pwm;

    /**
     * Range: 0..100 (0..100 %)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcright_rear_handle_pwm;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcright_reserved_for_back_compat;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcright_front_handle_pulled_persist;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcright_front_int_switch_pressed;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcright_rear_int_switch_pressed;

    /**
     * Range: 0..250 (0..5 V)
     * Scale: 0.02
     * Offset: 0
     */
    uint8_t vcright_mirror_tilt_x_position;

    /**
     * Range: 0..250 (0..5 V)
     * Scale: 0.02
     * Offset: 0
     */
    uint8_t vcright_mirror_tilt_y_position;

    /**
     * Range: 0..4 (0..4 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcright_mirror_state;

    /**
     * Range: 0..4 (0..4 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcright_mirror_fold_state;

    /**
     * Range: 0..8 (0..8 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcright_trunk_latch_status;

    /**
     * Range: 0..5 (0..5 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcright_mirror_recall_state;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcright_mirror_dipped;
};

/**
 * Signals in message ID123UI_alertMatrix1.
 *
 * All signal values are as on the CAN bus.
 */
struct model3_can_id123_ui_alert_matrix1_t {
    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ui_a001_driver_door_open;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ui_a002_door_open;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ui_a003_trunk_open;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ui_a004_frunk_open;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ui_a005_headlights_on_door_open;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ui_a006_remote_service_alert;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ui_a007_soft_pack_config_mismatch;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ui_a008_touch_screen_error;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ui_a009_squashfs_error;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ui_a010_maps_missing;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ui_a011_incorrect_map;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ui_a012_not_on_private_property;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ui_a013_tpms_hard_warning;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ui_a014_tpms_soft_warning;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ui_a015_tpms_over_pressure_warning;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ui_a016_tpms_temperature_warning;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ui_a017_tpms_system_fault;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ui_a018_slip_start_on;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ui_a019_park_brake_fault;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ui_a020_steering_reduced;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ui_a021_rear_seatbelt_unbuckled;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ui_a022_ape_fuses_etc;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ui_a023_cell_internet_check_failed;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ui_a024_wifi_internet_check_failed;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ui_a025_wifi_online_check_failed;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ui_a026_modem_reset_loop_detected;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ui_a027_auto_steer_mia;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ui_a028_front_trunk_popup_closed;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ui_a029_modem_mia;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ui_a030_modem_vm_crash;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ui_a031_brake_fluid_low;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ui_a032_cell_modem_recovery_resets;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ui_a033_ap_trial_expired;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ui_a034_wakeup_problem;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ui_a035_audio_watchdog_kernel_error;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ui_a036_audio_watchdog_hfp_error;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ui_a037_audio_watchdog_xrun_storm_error;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ui_a038_audio_watchdog_a2b_i2c_lockup_error;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ui_a039_audio_a2b_need_rediscovery;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ui_a040_homelink_transmit;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ui_a041_audio_dmesg_xrun;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ui_a042_audio_dmesg_rt_throttling;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ui_a043_invalid_map_data_override;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ui_a044_audio_dmesg_dsp_exception;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ui_a045_e_call_needs_service;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ui_a046_backup_camera_stream_error;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ui_a047_cell_roaming_disallowed;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ui_a048_audio_premium_amp_check_failed;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ui_a049_brake_shift_required;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ui_a050_backup_camera_ipu_timeout;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ui_a051_backup_camera_frame_timeout;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ui_a052_kernel_panic_reported;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ui_a053_qt_car_exit_error;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ui_a054_audio_boost_power_bad;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ui_a055_manual_e_call_disabled;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ui_a056_manual_e_call_button_disconnected;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ui_a057_cell_antenna_disconnected;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ui_a058_gps_antenna_disconnected;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ui_a059_e_call_speaker_disconnected;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ui_a060_e_call_mic_disconnected;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ui_a061_sim_test_failed;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ui_a062_ens_test_failed;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ui_a063_cellular_test_failed;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ui_a064_modem_firmware_test_failed;
};

/**
 * Signals in message ID247DAS_autopilotDebug.
 *
 * All signal values are as on the CAN bus.
 */
struct model3_can_id247_das_autopilot_debug_t {
    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t das_mission_plan;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t das_road_estimator;

    /**
     * Range: 0..8 (0..8 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t das_localizer_health;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t das_map_availability;

    /**
     * Range: 0..6 (0..6 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t das_controller_ref;

    /**
     * Range: 0..12 (0..12 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t das_alc_internal_state;

    /**
     * Range: 1..38 (1..38 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t das_behavior_report;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t das_controller_health;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t das_construction_zone;

    /**
     * Range: 0..63 (0..126 m)
     * Scale: 2
     * Offset: 0
     */
    uint8_t das_control_distance;

    /**
     * Range: 0..63 (0..63 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t das_autopilot_abort_reason;

    /**
     * Range: 0..22 (0..22 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t das_rqsted_behavior_status;

    /**
     * Range: 0..27 (0..27 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t das_fork_state;

    /**
     * Range: 0..63 (0..63 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t das_lane_change_state;

    /**
     * Range: 0..79 (0..79 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t das_last_watchdog_code;
};

/**
 * Signals in message ID2B4PCS_dcdcRailStatus.
 *
 * All signal values are as on the CAN bus.
 */
struct model3_can_id2_b4_pcs_dcdc_rail_status_t {
    /**
     * DCDC 12v Voltage
     *
     * Range: 0..1023 (0..39.9609375 V)
     * Scale: 0.0390625
     * Offset: 0
     */
    uint16_t pcs_dcdc_lv_bus_volt;

    /**
     * DCDC HV Voltage
     *
     * Range: 0..4095 (0..599.853515625 V)
     * Scale: 0.146484375
     * Offset: 0
     */
    uint16_t pcs_dcdc_hv_bus_volt;

    /**
     * DCDC 12v Output Current
     *
     * Range: 0..4000 (0..400 A)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t pcs_dcdc_lv_output_current;
};

/**
 * Signals in message ID3F5VCFRONT_lighting.
 *
 * All signal values are as on the CAN bus.
 */
struct model3_can_id3_f5_vcfront_lighting_t {
    /**
     * Range: 0..2 (0..2 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcfront_indicator_left_request;

    /**
     * Range: 0..2 (0..2 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcfront_indicator_right_request;

    /**
     * Range: 0..8 (0..8 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcfront_hazard_light_request;

    /**
     * Range: 0..254 (0..127 %)
     * Scale: 0.5
     * Offset: 0
     */
    uint8_t vcfront_ambient_lighting_brightnes;

    /**
     * Range: 0..254 (0..127 %)
     * Scale: 0.5
     * Offset: 0
     */
    uint8_t vcfront_switch_lighting_brightness;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcfront_courtesy_lighting_request;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcfront_approach_lighting_request;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcfront_see_you_home_lighting_req;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcfront_hazard_switch_backlight;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcfront_low_beam_left_status;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcfront_low_beam_right_status;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcfront_high_beam_left_status;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcfront_high_beam_right_status;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcfront_drl_left_status;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcfront_drl_right_status;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcfront_fog_left_status;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcfront_fog_right_status;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcfront_side_markers_status;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcfront_side_repeater_left_status;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcfront_side_repeater_right_status;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcfront_turn_signal_left_status;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcfront_turn_signal_right_status;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcfront_park_left_status;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcfront_park_right_status;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcfront_high_beam_switch_active;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcfront_sim_latching_stalk;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcfront_low_beams_on_for_drl;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcfront_low_beams_calibrated;
};

/**
 * Signals in message ID3E9DAS_bodyControls.
 *
 * All signal values are as on the CAN bus.
 */
struct model3_can_id3_e9_das_body_controls_t {
    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t das_headlight_request;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t das_hazard_light_request;

    /**
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t das_wiper_speed;

    /**
     * Range: 0..4 (0..4 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t das_turn_indicator_request;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t das_high_low_beam_decision;

    /**
     * Range: 0..2 (0..2 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t das_heater_request;

    /**
     * Range: 0..5 (0..5 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t das_high_low_beam_off_reason;

    /**
     * Range: 0..12 (0..12 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t das_turn_indicator_request_reason;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t das_dynamic_brake_light_request;

    /**
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t das_body_controls_counter;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t das_body_controls_checksum;
};

/**
 * Signals in message ID267DI_vehicleEstimates.
 *
 * All signal values are as on the CAN bus.
 */
struct model3_can_id267_di_vehicle_estimates_t {
    /**
     * Range: 0..1023 (1588.1..7010 kg)
     * Scale: 5.3
     * Offset: 1588.1
     */
    uint16_t di_mass;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t di_tire_fitment;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t di_trailer_detected;

    /**
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t di_vehicle_estimates_counter;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t di_mass_confidence;

    /**
     * Range: -40..40 (-40..40 %)
     * Scale: 1
     * Offset: 0
     */
    int8_t di_grade_est;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t di_vehicle_estimates_checksum;

    /**
     * Range: -40..40 (-40..40 %)
     * Scale: 1
     * Offset: 0
     */
    int8_t di_grade_est_internal;

    /**
     * Range: -128..127 (-25.6..25.4 Deg)
     * Scale: 0.2
     * Offset: 0
     */
    int8_t di_steering_angle_offset;
};

/**
 * Signals in message ID335RearDIinfo.
 *
 * All signal values are as on the CAN bus.
 */
struct model3_can_id335_rear_d_iinfo_t {
    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t dir_info_index;

    /**
     * Range: 0..72057594037927900 (0..7.20575940379279E+16 -)
     * Scale: 1
     * Offset: 0
     */
    uint64_t dir_app_git_hash;

    /**
     * Range: 0..72057594037927900 (0..7.20575940379279E+16 -)
     * Scale: 1
     * Offset: 0
     */
    uint64_t dir_boot_git_hash;

    /**
     * Range: 0..4 (0..4 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t dir_build_type;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t dir_info_boot_ld_uds_protocol_version;

    /**
     * Range: 0..4 (0..4 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t dir_oil_pump_build_type;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t dir_platform_typ;

    /**
     * Range: 0..72057594037927900 (0..7.20575940379279E+16 -)
     * Scale: 1
     * Offset: 0
     */
    uint64_t dir_subcomponent_git_hash;

    /**
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t dir_build_configuration_id;

    /**
     * Range: 0..4294967295 (0..4294967295 -)
     * Scale: 1
     * Offset: 0
     */
    uint32_t dir_oil_pump_app_crc;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t dir_pcba_id;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t dir_assembly_id;

    /**
     * Range: 0..4294967295 (0..4294967295 -)
     * Scale: 1
     * Offset: 0
     */
    uint32_t dir_application_crc;

    /**
     * Range: 0..4294967295 (0..4294967295 -)
     * Scale: 1
     * Offset: 0
     */
    uint32_t dir_bootloader_crc;

    /**
     * Range: 0..252 (0..252 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t dir_hardware_id;

    /**
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t dir_usage_id;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t dir_fpga_version;

    /**
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t dir_component_id;

    /**
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t dir_sub_usage_id;
};

/**
 * Signals in message ID656FrontDIinfo.
 *
 * All signal values are as on the CAN bus.
 */
struct model3_can_id656_front_d_iinfo_t {
    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t dif_info_index;

    /**
     * Range: 0..72057594037927900 (0..7.20575940379279E+16 -)
     * Scale: 1
     * Offset: 0
     */
    uint64_t dif_app_git_hash;

    /**
     * Range: 0..72057594037927900 (0..7.20575940379279E+16 -)
     * Scale: 1
     * Offset: 0
     */
    uint64_t dif_boot_git_hash;

    /**
     * Range: 0..4 (0..4 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t dif_build_type;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t dif_info_boot_ld_uds_protocol_version;

    /**
     * Range: 0..4 (0..4 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t dif_oil_pump_build_type;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t dif_platform_typ;

    /**
     * Range: 0..72057594037927900 (0..7.20575940379279E+16 -)
     * Scale: 1
     * Offset: 0
     */
    uint64_t dif_subcomponent_git_hash;

    /**
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t dif_build_configuration_id;

    /**
     * Range: 0..4294967295 (0..4294967295 -)
     * Scale: 1
     * Offset: 0
     */
    uint32_t dif_oil_pump_app_crc;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t dif_pcba_id;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t dif_assembly_id;

    /**
     * Range: 0..4294967295 (0..4294967295 -)
     * Scale: 1
     * Offset: 0
     */
    uint32_t dif_application_crc;

    /**
     * Range: 0..4294967295 (0..4294967295 -)
     * Scale: 1
     * Offset: 0
     */
    uint32_t dif_bootloader_crc;

    /**
     * Range: 0..252 (0..252 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t dif_hardware_id;

    /**
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t dif_usage_id;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t dif_fpga_version;

    /**
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t dif_component_id;

    /**
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t dif_sub_usage_id;
};

/**
 * Signals in message ID300BMS_info.
 *
 * All signal values are as on the CAN bus.
 */
struct model3_can_id300_bms_info_t {
    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_info_index;

    /**
     * Range: 0..72057594037927900 (0..7.20575940379279E+16 -)
     * Scale: 1
     * Offset: 0
     */
    uint64_t bms_app_git_hash;

    /**
     * Range: 0..72057594037927900 (0..7.20575940379279E+16 -)
     * Scale: 1
     * Offset: 0
     */
    uint64_t bms_boot_git_hash;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_boot_uds_proto_version;

    /**
     * Range: 0..4 (0..4 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_build_type;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_platform_type;

    /**
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t bms_build_config_id;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_pcba_id;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_assembly_id;

    /**
     * Range: 0..4294967295 (0..4294967295 -)
     * Scale: 1
     * Offset: 0
     */
    uint32_t bms_app_crc;

    /**
     * Range: 0..4294967295 (0..4294967295 -)
     * Scale: 1
     * Offset: 0
     */
    uint32_t bms_boot_crc;

    /**
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t bms_hardware_id;

    /**
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t bms_usage_id;

    /**
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t bms_component_id;

    /**
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t bms_sub_usage_id;
};

/**
 * Signals in message ID212BMS_status.
 *
 * All signal values are as on the CAN bus.
 */
struct model3_can_id212_bms_status_t {
    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_hvac_power_request;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_not_enough_power_for_drive;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_not_enough_power_for_support;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_precondition_allowed;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_update_allowed;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_active_heating_worthwhile;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_cp_mia_on_hvs;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_pcs_pwm_enabled;

    /**
     * Range: 0..6 (0..6 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_contactor_state;

    /**
     * Range: 0..5 (0..5 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_ui_charge_status;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_ecu_log_upload_request;

    /**
     * Range: 0..6 (0..6 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_hv_state;

    /**
     * Range: 0..1000 (0..10000 kOhm)
     * Scale: 10
     * Offset: 0
     */
    uint16_t bms_isolation_resistance;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_charge_request;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_keep_warm_request;

    /**
     * Range: 0..9 (0..9 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_state;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_di_limp_request;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_ok_to_ship_by_air;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_ok_to_ship_by_land;

    /**
     * Range: 0..2046 (0..255.75 kW)
     * Scale: 0.125
     * Offset: 0
     */
    uint16_t bms_chg_power_available;

    /**
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_charge_retry_count;

    /**
     * Range: 0..9 (0..9 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_sm_state_request;

    /**
     * Range: 0..255 (-40..87.5 C)
     * Scale: 0.5
     * Offset: -40
     */
    uint8_t bms_min_pack_temperature;
};

/**
 * Signals in message ID3B2BMS_log2.
 *
 * All signal values are as on the CAN bus.
 */
struct model3_can_id3_b2_bms_log2_t {
    /**
     * Range: 0..24 (0..24 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_log2_mux_id;

    /**
     * Range: 0..8191 (0..819.1 Ah)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t bms_cac_min_lower_bound_est;

    /**
     * Range: 0..16383 (0..16383 us)
     * Scale: 1
     * Offset: 0
     */
    uint16_t bms_100_hz_task_avg_exec_time;

    /**
     * Range: 0..131071 (0..131071 us)
     * Scale: 1
     * Offset: 0
     */
    uint32_t bms_10_hz_task_avg_exec_time;

    /**
     * Range: 0..1048575 (0..1048575 us)
     * Scale: 1
     * Offset: 0
     */
    uint32_t bms_1_hz_task_avg_exec_time;

    /**
     * Range: 0..8191 (0..819.1 Ah)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t bms_cac_avg;

    /**
     * Range: 0..1000 (0..100 %)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t bms_cac_min_soc_by_ocv_start;

    /**
     * Range: 0..2 (0..2 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_chg_end_evse_charge_type;

    /**
     * Range: -1024..1023 (-102.4..102.3 A)
     * Scale: 0.1
     * Offset: 0
     */
    int16_t bms_load_reg_output;

    /**
     * Range: -4094.009999969053378410233926..4094.009999969053378410233926 (-0.1..0.1 -)
     * Scale: 2.442592959e-05
     * Offset: 0
     */
    int16_t bms_neg_ctr_common_mode_rej_error;

    /**
     * Range: -4094.000999999442958760737276..4094.000999999442958760737276 (-5..5 V)
     * Scale: 0.00122129916431
     * Offset: 0
     */
    int16_t bms_neg_ctr_deviation_filt_min;

    /**
     * Range: -4094.000999999442958760737276..4094.000999999442958760737276 (-5..5 V)
     * Scale: 0.00122129916431
     * Offset: 0
     */
    int16_t bms_neg_ctr_deviation_min;

    /**
     * Range: -4094.000999999442958760737276..4094.000999999442958760737276 (-5..5 V)
     * Scale: 0.00122129916431
     * Offset: 0
     */
    int16_t bms_neg_ctr_drop_corrected_min;

    /**
     * Range: -4094.001000046373322487665277..4094.001000046373322487665277 (-0.1..0.1 -)
     * Scale: 2.4425983286e-05
     * Offset: 0
     */
    int16_t bms_pos_ctr_common_mode_rej_error;

    /**
     * Range: -4094.000999999442958760737276..4094.000999999442958760737276 (-5..5 V)
     * Scale: 0.00122129916431
     * Offset: 0
     */
    int16_t bms_pos_ctr_deviation_filt_min;

    /**
     * Range: -4094.000999999442958760737276..4094.000999999442958760737276 (-5..5 V)
     * Scale: 0.00122129916431
     * Offset: 0
     */
    int16_t bms_pos_ctr_deviation_min;

    /**
     * Range: -4094.000999999442958760737276..4094.000999999442958760737276 (-5..5 V)
     * Scale: 0.00122129916431
     * Offset: 0
     */
    int16_t bms_pos_ctr_drop_corrected_min;

    /**
     * Range: -4094.000999375939555062227343..4094.000999375939555062227343 (-0.01..0.01 Ohm)
     * Scale: 2.442598329e-06
     * Offset: 0
     */
    int16_t bms_pos_ctr_resistance;

    /**
     * Range: 0..2500 (0..5 V)
     * Scale: 0.002
     * Offset: 0
     */
    uint16_t bms_v_change_window_min_brick_v;

    /**
     * Range: 0..16777215 (0..1677721.5 Ah)
     * Scale: 0.1
     * Offset: 0
     */
    uint32_t bms_ah_charge_total;

    /**
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_chg_request_terminated_count;

    /**
     * Range: 0..1022 (0..2044 mS)
     * Scale: 2
     * Offset: 0
     */
    uint16_t bms_fc_link_test_decay_time;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_hv_chain_use_leaky_bucket;

    /**
     * Range: 0..4094.431250562984296952410341 (0..71.99 Hours)
     * Scale: 0.01758241758
     * Offset: 0
     */
    uint16_t bms_pack_rest_time;

    /**
     * Range: 0..16382 (0..2096.896 A)
     * Scale: 0.128
     * Offset: 0
     */
    uint16_t bms_hv_chain_i_limit;

    /**
     * Range: 0..4 (0..4 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_flood_port_state1;

    /**
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_chg_end_charge_state;

    /**
     * Range: 0..4 (0..4 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_flood_port_state2;

    /**
     * Range: 0..1000 (0..100 %)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t bms_cac_min_soc_by_ocv_end;

    /**
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_chg_end_bms_hv_charge_status;

    /**
     * Range: 0..65535 (0..65.535 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bms_energy_reserve_min;

    /**
     * Range: 0..65535 (0..65.535 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bms_flood_port_v1;

    /**
     * Range: 0..250 (0..0.5 V)
     * Scale: 0.002
     * Offset: 0
     */
    uint8_t bms_vsh_test_max_delta_v;

    /**
     * Range: -8192..8191 (-819.2..819.1 A)
     * Scale: 0.1
     * Offset: 0
     */
    int16_t bms_offset_reg_output;

    /**
     * Range: 0..8191 (0..819.1 Ah)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t bms_cac_min_raw_estimate;

    /**
     * Range: 0..4094.431250562984296952410341 (0..71.99 Hours)
     * Scale: 0.01758241758
     * Offset: 0
     */
    uint16_t bms_fc_link_test_time_since_last_run;

    /**
     * Range: 0..127 (1..128 -)
     * Scale: 1
     * Offset: 1
     */
    uint8_t bms_v_change_window_min_brick_v_id;

    /**
     * Range: 0..8191 (0..819.1 Ah)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t bms_cac_min;

    /**
     * Range: 0..6 (0..6 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_chg_end_cp_hv_charge_status;

    /**
     * Range: 0..8190.001000000006947708888316 (0..10000 -)
     * Scale: 1.22100107192
     * Offset: 0
     */
    uint16_t bms_neg_ctr_common_mode_rej_error_conf;

    /**
     * Range: -4094.000999999442958760737276..4094.000999999442958760737276 (-5..5 V)
     * Scale: 0.00122129916431
     * Offset: 0
     */
    int16_t bms_neg_ctr_deviation_filt_max;

    /**
     * Range: -4094.000999999442958760737276..4094.000999999442958760737276 (-5..5 V)
     * Scale: 0.00122129916431
     * Offset: 0
     */
    int16_t bms_neg_ctr_deviation_max;

    /**
     * Range: -4094.000999999442958760737276..4094.000999999442958760737276 (-5..5 V)
     * Scale: 0.00122129916431
     * Offset: 0
     */
    int16_t bms_neg_ctr_drop_corrected_max;

    /**
     * Range: 0..8190.001000000006947708888316 (0..10000 -)
     * Scale: 1.22100107192
     * Offset: 0
     */
    uint16_t bms_pos_ctr_common_mode_rej_error_conf;

    /**
     * Range: -4094.000999999442958760737276..4094.000999999442958760737276 (-5..5 V)
     * Scale: 0.00122129916431
     * Offset: 0
     */
    int16_t bms_pos_ctr_deviation_filt_max;

    /**
     * Range: -4094.000999999442958760737276..4094.000999999442958760737276 (-5..5 V)
     * Scale: 0.00122129916431
     * Offset: 0
     */
    int16_t bms_pos_ctr_deviation_max;

    /**
     * Range: -4094.000999999442958760737276..4094.000999999442958760737276 (-5..5 V)
     * Scale: 0.00122129916431
     * Offset: 0
     */
    int16_t bms_pos_ctr_drop_corrected_max;

    /**
     * Range: 0..8190.001000000006947708888316 (0..100000 -)
     * Scale: 12.2100107192
     * Offset: 0
     */
    uint16_t bms_pos_ctr_resistance_confidence;

    /**
     * Range: 0..2047 (0..2047 us)
     * Scale: 1
     * Offset: 0
     */
    uint16_t bms_1k_hz_task_avg_exec_time;

    /**
     * Range: 0..1022 (0..102.2 KWh)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t bms_ideal_energy_floor;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_chg_end_pcs_hv_charge_status;

    /**
     * Range: 0..2 (0..2 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_chg_end_cp_shutdown_request;

    /**
     * Range: 0..31 (0..31 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_hv_chain_limiting_state;

    /**
     * Range: 0..127 (1..128 -)
     * Scale: 1
     * Offset: 1
     */
    uint8_t bms_vsh_test_max_delta_v_brick_id;

    /**
     * Range: 0..60 (0..0.15 V)
     * Scale: 0.0025
     * Offset: 0
     */
    uint8_t bms_v_change_window_max_v_change;

    /**
     * Range: -1024..1023 (-512..511.5 Ah)
     * Scale: 0.5
     * Offset: 0
     */
    int16_t bms_cac_min_delta_ah;

    /**
     * Range: 0..2 (0..2 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_chg_end_pcs_shutdown_request;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_chg_end_battery_charge_request;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_chg_end_dc_evse_compatible;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_chg_end_disable_under_failure;

    /**
     * Range: 0..1022 (0..102.2 KWh)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t bms_dynamic_energy_buffer;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_pcs_precharge_request_active;

    /**
     * Range: 0..8191 (0..819.1 Ah)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t bms_cac_min_upper_bound_est;

    /**
     * Range: 0..127 (1..128 -)
     * Scale: 1
     * Offset: 1
     */
    uint8_t bms_v_change_window_max_v_change_id;

    /**
     * Range: 0..16383 (0..16383 us)
     * Scale: 1
     * Offset: 0
     */
    uint16_t bms_100_hz_task_max_exec_time;

    /**
     * Range: 0..131071 (0..131071 us)
     * Scale: 1
     * Offset: 0
     */
    uint32_t bms_10_hz_task_max_exec_time;

    /**
     * Range: 0..1048575 (0..1048575 us)
     * Scale: 1
     * Offset: 0
     */
    uint32_t bms_1_hz_task_max_exec_time;

    /**
     * Range: 0..16777215 (0..1677721.5 Ah)
     * Scale: 0.1
     * Offset: 0
     */
    uint32_t bms_ah_discharge_total;

    /**
     * Range: 0..127 (1..128 -)
     * Scale: 1
     * Offset: 1
     */
    uint8_t bms_cac_min_brick_id;

    /**
     * Range: 0..6 (0..6 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_charge_current_limit_mode;

    /**
     * Range: 0..65535 (0..65.535 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bms_energy_reserve_max;

    /**
     * Range: 0..65535 (0..65.535 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bms_flood_port_v2;

    /**
     * Range: -32768..32767 (-327.68..327.67 C)
     * Scale: 0.01
     * Offset: 0
     */
    int16_t bms_hv_chain_limiting_state_temperature;

    /**
     * Range: 0..8190.000999978810894932862820 (0..1 -)
     * Scale: 0.000122100107192
     * Offset: 0
     */
    uint16_t bms_neg_ctr_deviation_confidence_min;

    /**
     * Range: 0..8190.000999978810894932862820 (0..1 -)
     * Scale: 0.000122100107192
     * Offset: 0
     */
    uint16_t bms_neg_ctr_deviation_filt_conf_min;

    /**
     * Range: -4094.000999999442958760737276..4094.000999999442958760737276 (-5..5 V)
     * Scale: 0.00122129916431
     * Offset: 0
     */
    int16_t bms_neg_ctr_drop_corrected_filt_min;

    /**
     * Range: -4094.000999999442958760737276..4094.000999999442958760737276 (-5..5 V)
     * Scale: 0.00122129916431
     * Offset: 0
     */
    int16_t bms_neg_ctr_offset_error;

    /**
     * Range: -4094.000999375939555062227343..4094.000999375939555062227343 (-0.01..0.01 Ohm)
     * Scale: 2.442598329e-06
     * Offset: 0
     */
    int16_t bms_neg_ctr_resistance;

    /**
     * Range: -32768..32767 (-3276.8..3276.7 V)
     * Scale: 0.1
     * Offset: 0
     */
    int16_t bms_pcs_precharge_target_voltage;

    /**
     * Range: 0..8190.000999978810894932862820 (0..1 -)
     * Scale: 0.000122100107192
     * Offset: 0
     */
    uint16_t bms_pos_ctr_deviation_confidence_min;

    /**
     * Range: 0..8190.000999978810894932862820 (0..1 -)
     * Scale: 0.000122100107192
     * Offset: 0
     */
    uint16_t bms_pos_ctr_deviation_filt_conf_min;

    /**
     * Range: -4094.000999999442958760737276..4094.000999999442958760737276 (-5..5 V)
     * Scale: 0.00122129916431
     * Offset: 0
     */
    int16_t bms_pos_ctr_drop_corrected_filt_min;

    /**
     * Range: -4094.000999999442958760737276..4094.000999999442958760737276 (-5..5 V)
     * Scale: 0.00122129916431
     * Offset: 0
     */
    int16_t bms_pos_ctr_offset_error;

    /**
     * Range: 0..250 (0..0.5 V)
     * Scale: 0.002
     * Offset: 0
     */
    uint8_t bms_vsh_test_min_delta_v;

    /**
     * Range: 0..6 (0..6 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_charge_needed_reason;

    /**
     * Range: -256..255 (-12.8..12.75 Ah)
     * Scale: 0.05
     * Offset: 0
     */
    int16_t bms_cac_min_update_ah_error;

    /**
     * Range: 0..2047 (0..1023.5 A)
     * Scale: 0.5
     * Offset: 0
     */
    uint16_t bms_max_dc_current_available;

    /**
     * Range: 0..2500 (0..5 V)
     * Scale: 0.002
     * Offset: 0
     */
    uint16_t bms_v_change_window_change_init_v;

    /**
     * Range: 0..8191 (0..819.1 Ah)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t bms_cac_max;

    /**
     * Range: 0..127 (1..128 -)
     * Scale: 1
     * Offset: 1
     */
    uint8_t bms_vsh_test_min_delta_v_brick_id;

    /**
     * Range: 0..1000 (0..10 Ah)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_cac_max_kalman_error;

    /**
     * Range: 0..8190.000999978810894932862820 (0..1 -)
     * Scale: 0.000122100107192
     * Offset: 0
     */
    uint16_t bms_neg_ctr_deviation_confidence_max;

    /**
     * Range: 0..8190.000999978810894932862820 (0..1 -)
     * Scale: 0.000122100107192
     * Offset: 0
     */
    uint16_t bms_neg_ctr_deviation_filt_conf_max;

    /**
     * Range: -4094.000999999442958760737276..4094.000999999442958760737276 (-5..5 V)
     * Scale: 0.00122129916431
     * Offset: 0
     */
    int16_t bms_neg_ctr_drop_corrected_filt_max;

    /**
     * Range: 0..8190.000999978810894932862820 (0..1 -)
     * Scale: 0.000122100107192
     * Offset: 0
     */
    uint16_t bms_neg_ctr_offset_error_conf;

    /**
     * Range: 0..8190.001000000006947708888316 (0..100000 -)
     * Scale: 12.2100107192
     * Offset: 0
     */
    uint16_t bms_neg_ctr_resistance_confidence;

    /**
     * Range: 0..8190.000999978810894932862820 (0..1 -)
     * Scale: 0.000122100107192
     * Offset: 0
     */
    uint16_t bms_pos_ctr_deviation_confidence_max;

    /**
     * Range: 0..8190.000999978810894932862820 (0..1 -)
     * Scale: 0.000122100107192
     * Offset: 0
     */
    uint16_t bms_pos_ctr_deviation_filt_conf_max;

    /**
     * Range: -4094.000999999442958760737276..4094.000999999442958760737276 (-5..5 V)
     * Scale: 0.00122129916431
     * Offset: 0
     */
    int16_t bms_pos_ctr_drop_corrected_filt_max;

    /**
     * Range: 0..8190.000999978810894932862820 (0..1 -)
     * Scale: 0.000122100107192
     * Offset: 0
     */
    uint16_t bms_pos_ctr_offset_error_conf;

    /**
     * Range: 0..2047 (0..2047 us)
     * Scale: 1
     * Offset: 0
     */
    uint16_t bms_1k_hz_task_max_exec_time;

    /**
     * Range: 0..65535 (0..65.535 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bms_energy_reserve_avg;

    /**
     * Range: 0..2047 (0..1023.5 A)
     * Scale: 0.5
     * Offset: 0
     */
    uint16_t bms_current_reg_target_i;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_v_change_window_change_is_outlier;

    /**
     * Range: 0..120 (0..12 sec)
     * Scale: 0.1
     * Offset: 0
     */
    uint8_t bms_v_change_window_time_after_wake;

    /**
     * Range: 0..1023 (0..102.3 %)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t bms_capacity_imbalance_pct;

    /**
     * Range: 0..127 (1..128 -)
     * Scale: 1
     * Offset: 1
     */
    uint8_t bms_cac_max_brick_id;

    /**
     * Range: 0..63 (0..63 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_v_change_window_num_outlier_changes;

    /**
     * Range: 0..5 (0..5 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_cp_charge_status;
};

/**
 * Signals in message ID320BMS_alertMatrix.
 *
 * All signal values are as on the CAN bus.
 */
struct model3_can_id320_bms_alert_matrix_t {
    /**
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_matrix_index;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_a001_pack_config_mismatch;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_a061_sw_brick_v_change;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_a121_sw_nvram_config_error;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_a062_sw_brick_v_imbalance;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_a122_sw_bms_therm_irrational;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_a063_sw_charge_port_fault;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_a123_sw_internal_isolation;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_a064_sw_soc_imbalance;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_a065_sw_cac_imbalance;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_a126_sw_thermistor_failure;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_a007_sw_slowed_chg_batt_cold;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_a127_sw_shunt_sna;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_a128_sw_shunt_mia;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_a069_sw_low_power;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_a129_sw_vsh_failure;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_a130_io_can_error;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_a071_sw_sm_trans_con_not_met;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_a131_bleed_fet_failure;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_a132_hw_bmb_otp_uncorrctbl;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_a134_sw_delayed_ctr_off;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_a075_sw_chg_disable_failure;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_a135_hw_bmb_diagnostics_failure;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_a016_pack_module_id_mismatch;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_a076_sw_dch_while_charging;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_a136_sw_module_ot_warning;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_a017_sw_brick_ov;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_a077_sw_charger_regulation;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_a137_sw_brick_uv_warning;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_a018_sw_brick_uv;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_a138_sw_brick_ov_warning;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_a019_sw_module_ot;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_a139_sw_dc_link_v_irrational;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_a080_sw_pack_ctr_impedance;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_a021_sw_dr_limits_regulation;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_a081_sw_ctr_close_blocked;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_a141_sw_bmb_status_warning;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_a022_sw_over_current;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_a082_sw_ctr_force_open;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_a023_sw_stack_ov;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_a083_sw_ctr_close_failure;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_a143_sw_cac_change;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_a024_sw_islanded_brick;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_a084_sw_sleep_wake_aborted;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_a144_hvp_config_mismatch;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_a025_sw_pwr_balance_anomaly;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_a145_sw_soc_change;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_a026_sw_hf_current_anomaly;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_a146_sw_brick_overdischarged;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_a087_sw_feim_test_blocked;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_a088_sw_vc_front_mia_in_drive;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_a089_sw_vc_front_mia;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_a149_sw_missing_config_block;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_a090_sw_gateway_mia;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_a091_sw_charge_port_mia;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_a151_sw_external_isolation;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_a092_sw_charge_port_mia_on_hvs;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_a034_sw_passive_isolation;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_a094_sw_drive_inverter_mia;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_a035_sw_isolation;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_a155_sw_weak_short_impedence;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_a036_sw_hvp_hvil_fault;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_a156_sw_bmb_vref_bad;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_a037_sw_flood_port_open;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_a098_sw_bmb_data_integrity_loss;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_a158_sw_hvp_hvi_comms;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_a039_sw_dc_link_over_voltage;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_a099_sw_bmb_communication;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_a159_sw_hvp_ecu_error;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_a040_sw_watch_dog_hw_triggered;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_a160_sw_fc_ctr_clean_failed;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_a041_sw_destructive_reset_source;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_a161_sw_di_open_request;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_a042_sw_mpu_error;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_a162_sw_no_power_for_support;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_a043_sw_watch_dog_reset;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_a163_sw_contactor_mismatch;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_a044_sw_assertion;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_a164_sw_uncontrolled_regen;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_a045_sw_exception;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_a105_sw_one_module_tsense;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_a165_sw_pack_partial_weld;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_a046_sw_task_stack_usage;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_a106_sw_all_module_tsense;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_a166_sw_pack_full_weld;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_a047_sw_task_stack_overflow;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_a107_sw_stack_voltage_mia;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_a167_sw_fc_partial_weld;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_a048_sw_log_upload_request;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_a168_sw_fc_full_weld;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_a169_sw_fc_pack_weld;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_a050_sw_brick_voltage_mia;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_a170_sw_limp_mode;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_a051_sw_hvc_vref_bad;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_a171_sw_stack_voltage_sense;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_a052_sw_pcs_mia;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_a054_sw_ver_supply_fault;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_a174_sw_charge_failure;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_a055_sw_hv_chain_model_fault;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_a056_sw_standby_supply_fault;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_a176_sw_graceful_power_off;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_a057_sw_bandolier_model_warning;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_a058_sw_bandolier_model_reset;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_a178_sw_uncontrolled_regen_pwr_b;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_a059_sw_pack_voltage_sensing;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_a179_sw_hvp_12_v_fault;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_a060_sw_leakage_test_failure;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_a180_sw_ecu_reset_blocked;
};

/**
 * Signals in message ID31CCC_chgStatus.
 *
 * All signal values are as on the CAN bus.
 */
struct model3_can_id31_ccc_chg_status_t {
    /**
     * Range: 0..255 (0..127.5 A)
     * Scale: 0.5
     * Offset: 0
     */
    uint8_t cc_current_limit;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t cc_pilot_state;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t cc_num_phases;

    /**
     * Range: 0..511 (0..511 V)
     * Scale: 1
     * Offset: 0
     */
    uint16_t cc_line1_voltage;

    /**
     * Range: 0..2 (0..2 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t cc_grid_grounding;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t cc_delta_transformer;

    /**
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t cc_num_veh_charging;

    /**
     * Range: 0..511 (0..511 V)
     * Scale: 1
     * Offset: 0
     */
    uint16_t cc_line2_voltage;

    /**
     * Range: 0..511 (0..511 V)
     * Scale: 1
     * Offset: 0
     */
    uint16_t cc_line3_voltage;
};

/**
 * Signals in message ID31DCC_chgStatus2.
 *
 * All signal values are as on the CAN bus.
 */
struct model3_can_id31_dcc_chg_status2_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t cc_chg_status2_index;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t cc_button_state;
};

/**
 * Signals in message ID32CCC_logData.
 *
 * All signal values are as on the CAN bus.
 */
struct model3_can_id32_ccc_log_data_t {
    /**
     * Range: 0..13 (0..13 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t cc_log_index;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t cc_active_connector_id;

    /**
     * Range: 0..255 (0..127.5 A)
     * Scale: 0.5
     * Offset: 0
     */
    uint8_t cc_conn1_current;

    /**
     * Range: 0..255 (0..127.5 A)
     * Scale: 0.5
     * Offset: 0
     */
    uint8_t cc_conn2_current;

    /**
     * Range: 0..255 (0..127.5 A)
     * Scale: 0.5
     * Offset: 0
     */
    uint8_t cc_conn3_current;

    /**
     * Range: 0..255 (0..127.5 A)
     * Scale: 0.5
     * Offset: 0
     */
    uint8_t cc_conn4_current;

    /**
     * Range: 0..268435455 (0..268435455 -)
     * Scale: 1
     * Offset: 0
     */
    uint32_t cc_lifetime_alert_count;

    /**
     * Range: 0..268435455 (0..268435455 -)
     * Scale: 1
     * Offset: 0
     */
    uint32_t cc_lifetime_ctr_cycles;

    /**
     * Range: -128..127 (-40..215 C)
     * Scale: 1
     * Offset: 88
     */
    int8_t cc_temperature1;

    /**
     * Range: -128..127 (-40..215 C)
     * Scale: 1
     * Offset: 88
     */
    int8_t cc_temperature2;

    /**
     * Range: 0..4294967295 (0..429496729.5 A2h)
     * Scale: 0.1
     * Offset: 0
     */
    uint32_t cc_lifetimei2t;

    /**
     * Range: -128..127 (-40..215 C)
     * Scale: 1
     * Offset: 88
     */
    int8_t cc_temperature3;

    /**
     * Range: -134217728..134217727 (-13421772.8..13421772.7 C)
     * Scale: 0.1
     * Offset: 0
     */
    int32_t cc_lifetime_avg_startup_temp;

    /**
     * Range: 0..268435455 (0..268435455 -)
     * Scale: 1
     * Offset: 0
     */
    uint32_t cc_lifetime_ctr_cycles_loaded;

    /**
     * Range: 0..268435455 (0..268435455 -)
     * Scale: 1
     * Offset: 0
     */
    uint32_t cc_lifetime_thermal_foldbacks;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t cc_contactor1_closed;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t cc_contactor2_closed;

    /**
     * Range: -128..127 (-40..215 C)
     * Scale: 1
     * Offset: 88
     */
    int8_t cc_temperature4;
};

/**
 * Signals in message ID23DCP_chargeStatus.
 *
 * All signal values are as on the CAN bus.
 */
struct model3_can_id23_dcp_charge_status_t {
    /**
     * Range: 0..6 (0..6 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t cp_hv_charge_status;

    /**
     * Range: 0..2 (0..2 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t cp_charge_shutdown_request;

    /**
     * Range: 0..255 (0..127.5 A)
     * Scale: 0.5
     * Offset: 0
     */
    uint8_t cp_ac_charge_current_limit;

    /**
     * Range: 0..8190.999920410784106675214430 (0..1200 A)
     * Scale: 0.14650226
     * Offset: 0
     */
    uint16_t cp_internal_max_current_limit;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t cp_vehicle_iso_check_required;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t cp_vehicle_precharge_required;
};

/**
 * Signals in message ID43DCP_chargeStatusLog.
 *
 * All signal values are as on the CAN bus.
 */
struct model3_can_id43_dcp_charge_status_log_t {
    /**
     * Range: 0..6 (0..6 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t cp_hv_charge_status_log;

    /**
     * Range: 0..2 (0..2 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t cp_charge_shutdown_request_log;

    /**
     * Range: 0..255 (0..127.5 A)
     * Scale: 0.5
     * Offset: 0
     */
    uint8_t cp_ac_charge_current_limit_log;

    /**
     * Range: 0..8190.999920410784106675214430 (0..1200 A)
     * Scale: 0.14650226
     * Offset: 0
     */
    uint16_t cp_internal_max_dc_current_limit_log;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t cp_vehicle_iso_check_required_log;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t cp_vehicle_precharge_required_log;

    /**
     * Range: 0..255 (0..127.5 A)
     * Scale: 0.5
     * Offset: 0
     */
    uint8_t cp_internal_max_ac_current_limit_log;

    /**
     * Range: 0..2 (0..2 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t cp_evse_charge_type_log;
};

/**
 * Signals in message ID21DCP_evseStatus.
 *
 * All signal values are as on the CAN bus.
 */
struct model3_can_id21_dcp_evse_status_t {
    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t cp_evse_accept;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t cp_evse_request;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t cp_proximity;

    /**
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t cp_pilot;

    /**
     * Range: 0..255 (0..127.5 A)
     * Scale: 0.5
     * Offset: 0
     */
    uint8_t cp_pilot_current;

    /**
     * Range: 0..4 (0..4 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t cp_cable_type;

    /**
     * Range: 0..127 (0..127 A)
     * Scale: 1
     * Offset: 0
     */
    uint8_t cp_cable_current_limit;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t cp_digital_comms_attempts;

    /**
     * Range: 0..6 (0..6 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t cp_tesla_swcan_state;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t cp_digital_comms_established;

    /**
     * Range: 0..2 (0..2 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t cp_evse_charge_type_ui;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t cp_ac_num_retries;

    /**
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t cp_gb_state;

    /**
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t cp_gbdc_stop_charge_reason;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t cp_gbdc_failure_reason;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t cp_gbdc_charge_attempts;

    /**
     * Range: 0..6 (0..6 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t cp_ac_charge_state;

    /**
     * Range: 0..10 (0..10 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t cp_tesla_dc_state;

    /**
     * Range: 0..12 (0..12 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t cp_iec_combo_state;
};

/**
 * Signals in message ID75DCP_sensorData.
 *
 * All signal values are as on the CAN bus.
 */
struct model3_can_id75_dcp_sensor_data_t {
    /**
     * Range: 0..11 (0..11 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t cp_sensor_data_select;

    /**
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t cp_uhf_chip_state;

    /**
     * Range: 0..4000 (0..100 %)
     * Scale: 0.025
     * Offset: 0
     */
    uint16_t cp_door_pot;

    /**
     * Range: 0..4083.543859649122807017543860 (0..4.65524 V)
     * Scale: 0.00114
     * Offset: 0
     */
    uint16_t cp_fault_line_v;

    /**
     * Range: 0..268435455 (0..268435455 -)
     * Scale: 1
     * Offset: 0
     */
    uint32_t cp_inductive_sensor_raw;

    /**
     * Range: 0..4095 (0..10.2375 A)
     * Scale: 0.0025
     * Offset: 0
     */
    uint16_t cp_latch_i;

    /**
     * Range: -2048..2047 (-20.48..20.47 V)
     * Scale: 0.01
     * Offset: 0
     */
    int16_t cp_pilot_low_value_interval_max10s;

    /**
     * Range: 0..4095 (0..4095 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t cp_pilot_pulse_width;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t cp_uhf_rssi;

    /**
     * Range: 0..65535 (0..100.00000002165 %)
     * Scale: 0.00152590219
     * Offset: 0
     */
    uint16_t cp_door_counts_filtered;

    /**
     * Range: 0..254.9875609843166484238547148 (-55..149.99 C)
     * Scale: 0.8039215686
     * Offset: -55
     */
    uint8_t cp_pin_temperature1;

    /**
     * Range: 0..65535 (0..6.5535 V)
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t cp_proximity_v;

    /**
     * Range: 0..13300 (0..13.3 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t cp_proximity_v_gbcc1;

    /**
     * Range: 0..255 (0..1.7999999925 V)
     * Scale: 0.0070588235
     * Offset: 0
     */
    uint8_t cp_ref_voltage;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t cp_uhf_rx_overflow;

    /**
     * Range: 0..4095 (0..10.2375 A)
     * Scale: 0.0025
     * Offset: 0
     */
    uint16_t cp_door_i;

    /**
     * Range: 0..4095 (0..10.2375 A)
     * Scale: 0.0025
     * Offset: 0
     */
    uint16_t cp_latch2_i;

    /**
     * Range: -2048..2047 (-20.48..20.47 V)
     * Scale: 0.01
     * Offset: 0
     */
    int16_t cp_pilot_low_value_interval_min10s;

    /**
     * Range: 0..4095 (0..4095 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t cp_pilot_period;

    /**
     * Range: 0..254.9875609843166484238547148 (-55..149.99 C)
     * Scale: 0.8039215686
     * Offset: -55
     */
    uint8_t cp_pin_temperature2;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t cp_uhf_rx_num_bytes;

    /**
     * Range: 0..65535 (0..100.00000002165 %)
     * Scale: 0.00152590219
     * Offset: 0
     */
    uint16_t cp_door_counts_debounced;

    /**
     * Range: 0..254.9875609843166484238547148 (-55..149.99 C)
     * Scale: 0.8039215686
     * Offset: -55
     */
    uint8_t cp_pin_temperature3;

    /**
     * Range: 0..13300 (0..13.3 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t cp_proximity_v_gbcc2;

    /**
     * Range: 0..65535 (0..6.5535 V)
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t cp_proximity_v_interval_min10s;

    /**
     * Range: 0..4095 (0..10.2375 A)
     * Scale: 0.0025
     * Offset: 0
     */
    uint16_t cp_door_last_request_max_i;

    /**
     * Range: -2048..2047 (-20.48..20.47 V)
     * Scale: 0.01
     * Offset: 0
     */
    int16_t cp_pilot_high_value_interval_max10s;

    /**
     * Range: -2048..2047 (-20.48..20.47 V)
     * Scale: 0.01
     * Offset: 0
     */
    int16_t cp_pilot_low_value;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t cp_uhf_fifo_data;

    /**
     * Range: 0..255 (-50..280.0000000003 C)
     * Scale: 1.29411764706
     * Offset: -50
     */
    uint8_t cp_board_temperature;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t cp_uhf_self_test_rssi;

    /**
     * Range: 0..65535 (0..100.00000002165 %)
     * Scale: 0.00152590219
     * Offset: 0
     */
    uint16_t cp_back_cover_counts;

    /**
     * Range: -2048..2047 (-20.48..20.47 V)
     * Scale: 0.01
     * Offset: 0
     */
    int16_t cp_pilot_high_value;

    /**
     * Range: -2048..2047 (-20.48..20.47 V)
     * Scale: 0.01
     * Offset: 0
     */
    int16_t cp_pilot_high_value_interval_min10s;

    /**
     * Range: 0..65535 (0..6.5535 V)
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t cp_proximity_v_interval_max10s;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t cp_prox_conn1_sense;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t cp_prox_en;
};

/**
 * Signals in message ID287PTCcabinHeatSensorStatus.
 *
 * All signal values are as on the CAN bus.
 */
struct model3_can_id287_pt_ccabin_heat_sensor_status_t {
    /**
     * Range: 0..240 (-40..200 C)
     * Scale: 1
     * Offset: -40
     */
    uint8_t ptc_left_temp_igbt;

    /**
     * Range: 0..240 (-40..200 C)
     * Scale: 1
     * Offset: -40
     */
    uint8_t ptc_temp_ocp;

    /**
     * Range: 0..240 (-40..200 C)
     * Scale: 1
     * Offset: -40
     */
    uint8_t ptc_right_temp_igbt;

    /**
     * Range: 0..240 (-40..200 C)
     * Scale: 1
     * Offset: -40
     */
    uint8_t ptc_temp_pcb;

    /**
     * Heater Voltage
     *
     * Range: 0..1023 (0..511.5 V)
     * Scale: 0.5
     * Offset: 0
     */
    uint16_t ptc_voltage_hv;

    /**
     * Heater Left Current
     *
     * Range: 0..250 (0..50 A)
     * Scale: 0.2
     * Offset: 0
     */
    uint8_t ptc_left_current_hv;

    /**
     * Heater Right Current
     *
     * Range: 0..250 (0..50 A)
     * Scale: 0.2
     * Offset: 0
     */
    uint8_t ptc_right_current_hv;
};

/**
 * Signals in message ID333UI_chargeRequest.
 *
 * All signal values are as on the CAN bus.
 */
struct model3_can_id333_ui_charge_request_t {
    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ui_open_charge_port_door_request;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ui_close_charge_port_door_request;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ui_charge_enable_request;

    /**
     * UI Charge Current Limit
     *
     * Range: 0..127 (0..127 A)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ui_ac_charge_current_limit;

    /**
     * Range: 250..1000 (25..100 %)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t ui_charge_termination_pct;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ui_smart_ac_charging_enabled;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ui_scheduled_departure_enabled;
};

/**
 * Signals in message ID334UI_powertrainControl.
 *
 * All signal values are as on the CAN bus.
 */
struct model3_can_id334_ui_powertrain_control_t {
    /**
     * Range: 0..31 (20..640 kW)
     * Scale: 20
     * Offset: 20
     */
    uint8_t ui_system_power_limit;

    /**
     * Range: 0..2 (0..2 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ui_pedal_map;

    /**
     * Range: 0..63 (4000..10300 Nm)
     * Scale: 100
     * Offset: 4000
     */
    uint8_t ui_system_torque_limit;

    /**
     * Range: 0..235 (50..285 kph)
     * Scale: 1
     * Offset: 50
     */
    uint8_t ui_speed_limit;

    /**
     * Range: 0..200 (0..100 %)
     * Scale: 0.5
     * Offset: 0
     */
    uint8_t ui_regen_torque_max;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ui_limit_mode;

    /**
     * Range: 0..2 (0..2 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ui_motor_on_mode;

    /**
     * Range: 0..2 (0..2 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ui_waste_mode;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ui_waste_mode_regen_limit;

    /**
     * Range: 0..2 (0..2 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ui_stopping_mode;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ui_di_app_slider_debug;

    /**
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ui_powertrain_control_counter;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ui_powertrain_control_checksum;
};

/**
 * Signals in message ID33AUI_rangeSOC.
 *
 * All signal values are as on the CAN bus.
 */
struct model3_can_id33_aui_range_soc_t {
    /**
     * Range
     *
     * Range: 0..1023 (0..1023 mi)
     * Scale: 1
     * Offset: 0
     */
    uint16_t ui_range;

    /**
     * Range: 0..1023 (0..1023 mi)
     * Scale: 1
     * Offset: 0
     */
    uint16_t ui_ideal_range;

    /**
     * Rating
     *
     * Range: 0..1023 (0..1023 WHpM)
     * Scale: 1
     * Offset: 0
     */
    uint16_t ui_rated_w_hp_m;

    /**
     * State of Charge UI
     *
     * Range: 0..127 (0..127 %)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ui_soc;

    /**
     * Range: 0..127 (0..127 %)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ui_u_soe;
};

/**
 * Signals in message ID241VCFRONT_coolant.
 *
 * All signal values are as on the CAN bus.
 */
struct model3_can_id241_vcfront_coolant_t {
    /**
     * Range: 0..400 (0..40 LPM)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t vcfront_coolant_flow_bat_actual;

    /**
     * Range: 0..400 (0..40 LPM)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t vcfront_coolant_flow_bat_target;

    /**
     * Range: 0..14 (0..14 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcfront_coolant_flow_bat_reason;

    /**
     * Range: 0..400 (0..40 LPM)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t vcfront_coolant_flow_pt_actual;

    /**
     * Range: 0..400 (0..40 LPM)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t vcfront_coolant_flow_pt_target;

    /**
     * Range: 0..14 (0..14 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcfront_coolant_flow_pt_reason;

    /**
     * Range: 0..2 (0..2 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcfront_waste_heat_request_type;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcfront_coolant_has_been_filled;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcfront_radiator_ineffective;

    /**
     * Range: 0..4 (0..4 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcfront_coolant_air_purge_bat_state;
};

/**
 * Signals in message ID2C4PCS_logging.
 *
 * All signal values are as on the CAN bus.
 */
struct model3_can_id2_c4_pcs_logging_t {
    /**
     * Range: 0..26 (0..26 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t pcs_log_message_select;

    /**
     * Range: 0..4095 (40..80.95 Hz)
     * Scale: 0.01
     * Offset: 40
     */
    uint16_t pcs_chg_input_frequency_l1_n;

    /**
     * Range: -512..511 (-512..511 V)
     * Scale: 1
     * Offset: 0
     */
    int16_t pcs_chg_input_l1_n_vdc;

    /**
     * Range: 0..4095 (0..819 V)
     * Scale: 0.2
     * Offset: 0
     */
    uint16_t pcs_chg_input_l1_n_vrms;

    /**
     * Range: 0..511 (0..511 V)
     * Scale: 1
     * Offset: 0
     */
    uint16_t pcs_chg_pha_input_v_peak10s;

    /**
     * Range: 0..511 (0..51.1 A)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t pcs_chg_ph_a_input_irms;

    /**
     * Range: 0..511 (0..511 V)
     * Scale: 1
     * Offset: 0
     */
    uint16_t pcs_chg_ph_a_int_bus_v_min10s;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t pcs_chg_ph_a_machine_enabled;

    /**
     * Range: 0..511 (0..5.11 -)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t pcs_chg_ph_a_no_flow_bucket;

    /**
     * Range: 0..6 (0..6 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t pcs_chg_ph_a_state;

    /**
     * Range: 0..511 (0..51.1 A)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t pcs_chg_ph_b_input_irms;

    /**
     * Range: 0..511 (0..511 V)
     * Scale: 1
     * Offset: 0
     */
    uint16_t pcs_chg_ph_b_int_bus_v_min10s;

    /**
     * Range: 0..511 (0..51.1 A)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t pcs_chg_ph_c_input_irms;

    /**
     * Range: 0..511 (0..511 V)
     * Scale: 1
     * Offset: 0
     */
    uint16_t pcs_chg_ph_c_int_bus_v_min10s;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t pcs_cpu2_boot_state;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t pcs_d_log_ph_a_channel1_content;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t pcs_d_log_ph_a_channel2_content;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t pcs_d_log_ph_a_channel3_content;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t pcs_d_log_ph_a_channel4_content;

    /**
     * Range: 0..1022.999999999999595915000000 (0..8000 uF)
     * Scale: 7.82013685239
     * Offset: 0
     */
    uint16_t pcs_dcdc_hv_bus_estimated_c_u_f;

    /**
     * Range: 0..1023 (0..39.9609375 V)
     * Scale: 0.0390625
     * Offset: 0
     */
    uint16_t pcs_dcdc_pchg_start_lv_bus_volt;

    /**
     * Range: 0..1000 (0..1 1)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t pcs_dcdc_unified_command;

    /**
     * Range: -512..511 (-5.12..5.11 Hz)
     * Scale: 0.01
     * Offset: 0
     */
    int16_t pcs_chg_ph_a_machine_rotor_freq_droop;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t pcs_ac_charge_self_test_state;

    /**
     * Range: 0..2047 (0..2.047 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t pcs_1_v5_min10s;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t pcs_d_log_ph_b_channel1_content;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t pcs_d_log_ph_b_channel2_content;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t pcs_d_log_ph_b_channel3_content;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t pcs_d_log_ph_b_channel4_content;

    /**
     * Range: 0..16777215 (0..167772.15 kWh)
     * Scale: 0.01
     * Offset: 0
     */
    uint32_t pcs_dcdc12v_support_lifetimek_wh;

    /**
     * Range: 0..400 (0..400 kHz)
     * Scale: 1
     * Offset: 0
     */
    uint16_t pcs_dcdc_interval_max_frequency;

    /**
     * Range: 0..400 (0..400 kHz)
     * Scale: 1
     * Offset: 0
     */
    uint16_t pcs_dcdc_interval_min_frequency;

    /**
     * Range: 0..4000 (0..400 A)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t pcs_dcdc_max_lv_output_current;

    /**
     * Range: -32768..32766.976 (-64..63.998 us)
     * Scale: 0.001953125
     * Offset: 0
     */
    int16_t pcs_dcdc_t_comm_measured;

    /**
     * Range: 0..6 (0..6 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t pcs_chg_ph_b_state;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t pcs_d_log_ph_c_channel1_content;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t pcs_d_log_ph_c_channel2_content;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t pcs_d_log_ph_c_channel3_content;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t pcs_d_log_ph_c_channel4_content;

    /**
     * Range: 0..6 (0..6 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t pcs_chg_ph_c_state;

    /**
     * Range: 0..511 (0..511 V)
     * Scale: 1
     * Offset: 0
     */
    uint16_t pcs_chg_phb_input_v_peak10s;

    /**
     * Range: 0..511 (0..511 V)
     * Scale: 1
     * Offset: 0
     */
    uint16_t pcs_chg_ph_a_int_bus_v;

    /**
     * Range: 0..511 (0..511 V)
     * Scale: 1
     * Offset: 0
     */
    uint16_t pcs_chg_ph_a_int_bus_v_max10s;

    /**
     * Range: 0..511 (0..511 V)
     * Scale: 1
     * Offset: 0
     */
    uint16_t pcs_chg_ph_b_int_bus_v;

    /**
     * Range: 0..511 (0..511 V)
     * Scale: 1
     * Offset: 0
     */
    uint16_t pcs_chg_ph_b_int_bus_v_max10s;

    /**
     * Range: 0..511 (0..5.11 -)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t pcs_chg_ph_b_no_flow_bucket;

    /**
     * Range: 0..511 (0..511 V)
     * Scale: 1
     * Offset: 0
     */
    uint16_t pcs_chg_ph_c_int_bus_v;

    /**
     * Range: 0..511 (0..511 V)
     * Scale: 1
     * Offset: 0
     */
    uint16_t pcs_chg_ph_c_int_bus_v_max10s;

    /**
     * Range: -512..511 (-512..511 V)
     * Scale: 1
     * Offset: 0
     */
    int16_t pcs_chg_input_l2_n_vdc;

    /**
     * Range: -128..127 (-25.6..25.4 A)
     * Scale: 0.2
     * Offset: 0
     */
    int8_t pcs_chg_ph_a_machine_stator_current;

    /**
     * Range: -32768..32767 (-655.36..655.34 -)
     * Scale: 0.02
     * Offset: 0
     */
    int16_t pcs_d_log_ph_a_channel1_data;

    /**
     * Range: -32768..32767 (-655.36..655.34 -)
     * Scale: 0.02
     * Offset: 0
     */
    int16_t pcs_d_log_ph_a_channel2_data;

    /**
     * Range: -32768..32767 (-655.36..655.34 -)
     * Scale: 0.02
     * Offset: 0
     */
    int16_t pcs_d_log_ph_a_channel3_data;

    /**
     * Range: -32768..32767 (-655.36..655.34 -)
     * Scale: 0.02
     * Offset: 0
     */
    int16_t pcs_d_log_ph_a_channel4_data;

    /**
     * Range: 0..1000 (0..1 1)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t pcs_dcdc_cla_controller_output;

    /**
     * Range: 0..1023.000000000000642444000000 (0..50 kOhm)
     * Scale: 0.0488758553275
     * Offset: 0
     */
    uint16_t pcs_dcdc_hv_bus_estimated_r_k_ohm;

    /**
     * Range: 0..4095 (0..599.853515625 V)
     * Scale: 0.146484375
     * Offset: 0
     */
    uint16_t pcs_dcdc_pchg_start_hv_bus_volt;

    /**
     * Range: 0..4095 (40..80.95 Hz)
     * Scale: 0.01
     * Offset: 40
     */
    uint16_t pcs_chg_input_frequency_l2_n;

    /**
     * Range: 0..4095 (0..819 V)
     * Scale: 0.2
     * Offset: 0
     */
    uint16_t pcs_chg_input_l2_n_vrms;

    /**
     * Range: 0..17 (0..17 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t pcs_chg_ph_a_last_shutdown_reason;

    /**
     * Range: 0..2047 (0..2.047 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t pcs_1_v5_max10s;

    /**
     * Range: 0..4000 (0..400 A)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t pcs_dcdc_current_limit;

    /**
     * Range: 0..17 (0..17 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t pcs_chg_ph_b_last_shutdown_reason;

    /**
     * Range: 0..511 (0..511 V)
     * Scale: 1
     * Offset: 0
     */
    uint16_t pcs_chg_phc_input_v_peak10s;

    /**
     * Range: 0..511 (0..511 V)
     * Scale: 1
     * Offset: 0
     */
    uint16_t pcs_chg_ph_a_int_bus_v_target;

    /**
     * Range: 0..255 (0..127.5 V)
     * Scale: 0.5
     * Offset: 0
     */
    uint8_t pcs_chg_ph_a_pchg_volt_delta_max10s;

    /**
     * Range: 0..511 (0..511 V)
     * Scale: 1
     * Offset: 0
     */
    uint16_t pcs_chg_ph_b_int_bus_v_target;

    /**
     * Range: 0..255 (0..127.5 V)
     * Scale: 0.5
     * Offset: 0
     */
    uint8_t pcs_chg_ph_b_pchg_volt_delta_max10s;

    /**
     * Range: 0..511 (0..511 V)
     * Scale: 1
     * Offset: 0
     */
    uint16_t pcs_chg_ph_c_int_bus_v_target;

    /**
     * Range: 0..511 (0..5.11 -)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t pcs_chg_ph_c_no_flow_bucket;

    /**
     * Range: 0..255 (0..127.5 V)
     * Scale: 0.5
     * Offset: 0
     */
    uint8_t pcs_chg_ph_c_pchg_volt_delta_max10s;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t pcs_chg_ph_b_machine_enabled;

    /**
     * Range: 0..6000 (0..600 V)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t pcs_dcdc_interval_max_hv_bus_volt;

    /**
     * Range: 0..6000 (0..600 V)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t pcs_dcdc_interval_min_hv_bus_volt;

    /**
     * Range: 0..65534.976 (0..31.9995 us)
     * Scale: 0.00048828125
     * Offset: 0
     */
    uint16_t pcs_dcdc_short_time_us;

    /**
     * Range: -512..511 (-5.12..5.11 Hz)
     * Scale: 0.01
     * Offset: 0
     */
    int16_t pcs_chg_ph_b_machine_rotor_freq_droop;

    /**
     * Range: -512..511 (-512..511 V)
     * Scale: 1
     * Offset: 0
     */
    int16_t pcs_chg_input_l3_n_vdc;

    /**
     * Range: -1024..1023 (-1024..1023 V)
     * Scale: 1
     * Offset: 0
     */
    int16_t pcs_dcdc_tank_voltage;

    /**
     * Range: 0..17 (0..17 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t pcs_chg_ph_c_last_shutdown_reason;

    /**
     * Range: 0..4095 (40..80.95 Hz)
     * Scale: 0.01
     * Offset: 40
     */
    uint16_t pcs_chg_input_frequency_l3_n;

    /**
     * Range: 0..4095 (0..819 V)
     * Scale: 0.2
     * Offset: 0
     */
    uint16_t pcs_chg_input_l3_n_vrms;

    /**
     * Range: 0..16777215 (0..167772.15 kWh)
     * Scale: 0.01
     * Offset: 0
     */
    uint32_t pcs_chg_ph_a_lifetimek_wh;

    /**
     * Range: 0..16777215 (0..167772.15 kWh)
     * Scale: 0.01
     * Offset: 0
     */
    uint32_t pcs_chg_ph_b_lifetimek_wh;

    /**
     * Range: 0..16777215 (0..167772.15 kWh)
     * Scale: 0.01
     * Offset: 0
     */
    uint32_t pcs_chg_ph_c_lifetimek_wh;

    /**
     * Range: 0..2047 (0..2.047 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t pcs_1_v2_min10s;

    /**
     * Range: 0..1023 (0..10.23 us)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t pcs_chg_current_sensor_out_of_band_us;

    /**
     * Range: 0..255 (0..25.5 s)
     * Scale: 0.1
     * Offset: 0
     */
    uint8_t pcs_chg_ph_a_input_freq_wobble_cnt;

    /**
     * Range: 0..255 (0..25.5 A)
     * Scale: 0.1
     * Offset: 0
     */
    uint8_t pcs_chg_ph_a_output_i;

    /**
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t pcs_chg_ph_a_retry_count;

    /**
     * Range: 0..255 (0..25.5 A)
     * Scale: 0.1
     * Offset: 0
     */
    uint8_t pcs_chg_ph_b_output_i;

    /**
     * Range: 0..255 (0..25.5 A)
     * Scale: 0.1
     * Offset: 0
     */
    uint8_t pcs_chg_ph_c_output_i;

    /**
     * Range: 0..1023 (0..1023 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t pcs_chg_pwm_enable_line_error_count;

    /**
     * Range: -32768..32767 (-655.36..655.34 -)
     * Scale: 0.02
     * Offset: 0
     */
    int16_t pcs_d_log_ph_b_channel1_data;

    /**
     * Range: -32768..32767 (-655.36..655.34 -)
     * Scale: 0.02
     * Offset: 0
     */
    int16_t pcs_d_log_ph_b_channel2_data;

    /**
     * Range: -32768..32767 (-655.36..655.34 -)
     * Scale: 0.02
     * Offset: 0
     */
    int16_t pcs_d_log_ph_b_channel3_data;

    /**
     * Range: -32768..32767 (-655.36..655.34 -)
     * Scale: 0.02
     * Offset: 0
     */
    int16_t pcs_d_log_ph_b_channel4_data;

    /**
     * Range: 0..4000 (0..400 A)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t pcs_dcdc_lv_output_current_temp_limit;

    /**
     * Range: -128..127 (-25.6..25.4 A)
     * Scale: 0.2
     * Offset: 0
     */
    int8_t pcs_chg_ph_b_machine_stator_current;

    /**
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t pcs_chg_ph_b_retry_count;

    /**
     * Range: -512..511 (-512..511 V)
     * Scale: 1
     * Offset: 0
     */
    int16_t pcs_chg_input_l1_l2_vdc;

    /**
     * Range: 0..400 (0..40 V)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t pcs_dcdc_interval_max_lv_bus_volt;

    /**
     * Range: 0..400 (0..40 V)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t pcs_dcdc_interval_min_lv_bus_volt;

    /**
     * Range: 0..1023 (0..1023 V)
     * Scale: 1
     * Offset: 0
     */
    uint16_t pcs_dcdc_tank_voltage_target;

    /**
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t pcs_chg_ph_c_retry_count;

    /**
     * Range: 0..255 (0..25.5 s)
     * Scale: 0.1
     * Offset: 0
     */
    uint8_t pcs_chg_ph_b_input_freq_wobble_cnt;

    /**
     * Range: 0..65534.976 (0..31.9995 us)
     * Scale: 0.00048828125
     * Offset: 0
     */
    uint16_t pcs_dcdc_half_period_us;

    /**
     * Range: 0..4095 (0..819 V)
     * Scale: 0.2
     * Offset: 0
     */
    uint16_t pcs_chg_input_l1_l2_vrms;

    /**
     * Range: 0..9 (0..9 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t pcs_chg_internal_phase_config;

    /**
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t pcs_chg_retry_count;

    /**
     * Range: 0..1023 (0..1023 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t pcs_dcdc_pwm_enable_line_error_count;

    /**
     * Range: 0..2047 (0..2.047 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t pcs_1_v2_max10s;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t pcs_chg_ph_c_machine_enabled;

    /**
     * Range: -512..511 (-5.12..5.11 Hz)
     * Scale: 0.01
     * Offset: 0
     */
    int16_t pcs_chg_ph_c_machine_rotor_freq_droop;

    /**
     * Range: 0..1000 (0..100 A)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t pcs_chg_ph_man_current_to_dist;

    /**
     * Range: 0..36 (0..36 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t pcs_chg_phases_priority;

    /**
     * Range: -512..511 (-512..511 V)
     * Scale: 1
     * Offset: 0
     */
    int16_t pcs_chg_input_ng_vdc;

    /**
     * Range: 0..255 (0..25.5 kWh)
     * Scale: 0.1
     * Offset: 0
     */
    uint8_t pcs_chg_kwh_lost_by_freq_droop;

    /**
     * Range: 0..255 (0..25.5 s)
     * Scale: 0.1
     * Offset: 0
     */
    uint8_t pcs_chg_ph_c_input_freq_wobble_cnt;

    /**
     * Range: -32768..32767 (-655.36..655.34 -)
     * Scale: 0.02
     * Offset: 0
     */
    int16_t pcs_d_log_ph_c_channel1_data;

    /**
     * Range: -32768..32767 (-655.36..655.34 -)
     * Scale: 0.02
     * Offset: 0
     */
    int16_t pcs_d_log_ph_c_channel2_data;

    /**
     * Range: -32768..32767 (-655.36..655.34 -)
     * Scale: 0.02
     * Offset: 0
     */
    int16_t pcs_d_log_ph_c_channel3_data;

    /**
     * Range: -32768..32767 (-655.36..655.34 -)
     * Scale: 0.02
     * Offset: 0
     */
    int16_t pcs_d_log_ph_c_channel4_data;

    /**
     * Range: 0..4094.976 (0..399.9 kHz)
     * Scale: 0.09765625
     * Offset: 0
     */
    uint16_t pcs_dcdc_cla_current_freq;

    /**
     * Range: 0..400 (0..400 A)
     * Scale: 1
     * Offset: 0
     */
    uint16_t pcs_dcdc_interval_max_lv_output_curr;

    /**
     * Range: 0..400 (0..400 A)
     * Scale: 1
     * Offset: 0
     */
    uint16_t pcs_dcdc_interval_min_lv_output_curr;

    /**
     * Range: 0..4095 (0..599.853515625 V)
     * Scale: 0.146484375
     * Offset: 0
     */
    uint16_t pcs_chg_output_v;

    /**
     * Range: 0..511 (0..511 V)
     * Scale: 1
     * Offset: 0
     */
    uint16_t pcs_chg_input_ng_vrms;

    /**
     * Range: 0..1023 (0..10.23 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t pcs_5_vn_max10s;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t pcs_chg_l1_n_pll_locked;

    /**
     * Range: -128..127 (-25.6..25.4 A)
     * Scale: 0.2
     * Offset: 0
     */
    int8_t pcs_chg_ph_c_machine_stator_current;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t pcs_chg_l2_n_pll_locked;

    /**
     * Range: 0..511 (0..51.1 -)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t pcs_chg_ph_a_transient_retry_count;

    /**
     * Range: 0..511 (0..51.1 -)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t pcs_chg_ph_b_transient_retry_count;

    /**
     * Range: 0..511 (0..51.1 -)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t pcs_chg_ph_c_transient_retry_count;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t pcs_chg_l3_n_pll_locked;

    /**
     * Range: 0..255 (0..25.5 kWh)
     * Scale: 0.1
     * Offset: 0
     */
    uint8_t pcs_chg_req_kwh_lost_by_freq_droop;

    /**
     * Range: 0..127 (0..127 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t pcs_num_alerts_set;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t pcs_chg_l1_l2_pll_locked;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t pcs_chg_ng_pll_locked;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t pcs_chg_ph_man_optimal_phs_to_use;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t pcs_chg5_vl1_enable;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t pcs_chg_acpw_heartbeat_state;
};

/**
 * Signals in message ID3BBUI_power.
 *
 * All signal values are as on the CAN bus.
 */
struct model3_can_id3_bbui_power_t {
    /**
     * Range: 0..100 (0..100 kW)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ui_power_expected;

    /**
     * Range: 0..100 (0..100 kW)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ui_power_ideal;
};

/**
 * Signals in message ID5D5RearTBD.
 *
 * All signal values are as on the CAN bus.
 */
struct model3_can_id5_d5_rear_tbd_t {
    /**
     * Range: 0..255 (-40..215 C)
     * Scale: 1
     * Offset: -40
     */
    uint8_t test_temp5_d5_a;

    /**
     * Range: 0..255 (-40..215 C)
     * Scale: 1
     * Offset: -40
     */
    uint8_t rear_temp5_d5_b;

    /**
     * Range: -
     * Scale: 0.2
     * Offset: 0
     */
    uint8_t rear_flow5_d5;
};

/**
 * Signals in message ID556FrontTBD.
 *
 * All signal values are as on the CAN bus.
 */
struct model3_can_id556_front_tbd_t {
    /**
     * Range: 0..255 (-40..215 C)
     * Scale: 1
     * Offset: -40
     */
    uint8_t front_temp556_a;

    /**
     * Range: 0..255 (-40..215 C)
     * Scale: 1
     * Offset: -40
     */
    uint8_t front_temp556_b;

    /**
     * Range: -
     * Scale: 0.2
     * Offset: 0
     */
    uint8_t front_flow556;
};

/**
 * Signals in message ID557FrontThermalControl.
 *
 * swapped with 5D7 in old firmware
 *
 * All signal values are as on the CAN bus.
 */
struct model3_can_id557_front_thermal_control_t {
    /**
     * Range: 0..160 (-40..120 C)
     * Scale: 1
     * Offset: -40
     */
    uint8_t dis_passive_inlet_temp_req;

    /**
     * Range: 0..160 (-40..120 C)
     * Scale: 1
     * Offset: -40
     */
    uint8_t dis_active_inlet_temp_req;

    /**
     * Range: 0..250 (0..50 LPM)
     * Scale: 0.2
     * Offset: 0
     */
    uint8_t dis_coolant_flow_req;

    /**
     * Range: 0..250 (0..15 LPM)
     * Scale: 0.06
     * Offset: 0
     */
    uint8_t dis_oil_flow_req;
};

/**
 * Signals in message ID5D7RearThermalControl.
 *
 * swapped with 557 in old firmware
 *
 * All signal values are as on the CAN bus.
 */
struct model3_can_id5_d7_rear_thermal_control_t {
    /**
     * Range: 0..160 (-40..120 C)
     * Scale: 1
     * Offset: -40
     */
    uint8_t di_passive_inlet_temp_req;

    /**
     * Range: 0..160 (-40..120 C)
     * Scale: 1
     * Offset: -40
     */
    uint8_t di_active_inlet_temp_req;

    /**
     * Range: 0..250 (0..50 LPM)
     * Scale: 0.2
     * Offset: 0
     */
    uint8_t di_coolant_flow_req;

    /**
     * Range: 0..250 (0..15 LPM)
     * Scale: 0.06
     * Offset: 0
     */
    uint8_t di_oil_flow_req;
};

/**
 * Signals in message ID7D5DIR_debug.
 *
 * swapped with 757in old firmware
 *
 * All signal values are as on the CAN bus.
 */
struct model3_can_id7_d5_dir_debug_t {
    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t dir_debug_selector;

    /**
     * Range: 0..255 (0..102 %)
     * Scale: 0.4
     * Offset: 0
     */
    uint8_t dir_cpu10_hz_min;

    /**
     * Range: 0..255 (0..102 %)
     * Scale: 0.4
     * Offset: 0
     */
    uint8_t dir_cpu1k_hz_min;

    /**
     * Range: 0..255 (-40..215 C)
     * Scale: 1
     * Offset: -40
     */
    uint8_t dir_dc_cap_temp;

    /**
     * Range: 0..255 (0..2.55 scale)
     * Scale: 0.01
     * Offset: 0
     */
    uint8_t dir_gain_scale;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t dir_gate_drive_supply_state;

    /**
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t dir_hw_fault_count;

    /**
     * Range: 0..255 (0..1.02 scale)
     * Scale: 0.004
     * Offset: 0
     */
    uint8_t dir_lm_scale;

    /**
     * Range: -128.5..126.5 (-15..5.4 m/s^2)
     * Scale: 0.08
     * Offset: -4.72
     */
    int8_t dir_loc_target_accel;

    /**
     * Range: 0..26 (0..26 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t dir_motor_type;

    /**
     * Range: 0..240 (0..1.2 N/N)
     * Scale: 0.005
     * Offset: 0
     */
    uint8_t dir_mu_surf_high;

    /**
     * Range: -128..127 (-12.8..12.7 A)
     * Scale: 0.1
     * Offset: 0
     */
    int8_t dir_offset_a;

    /**
     * Range: -128..127 (-12.8..12.7 A)
     * Scale: 0.1
     * Offset: 0
     */
    int8_t dir_offset_b;

    /**
     * Range: 0..255 (0..10200 RPM)
     * Scale: 40
     * Offset: 0
     */
    uint8_t dir_oil_pump_motor_speed;

    /**
     * Range: 0..255 (-40..215 C)
     * Scale: 1
     * Offset: -40
     */
    uint8_t dir_phase_out_busbar_temp;

    /**
     * Range: 0..255 (0..102 %)
     * Scale: 0.4
     * Offset: 0
     */
    uint8_t dir_pwr_sat_charge_current;

    /**
     * Range: 0..255 (0..102 %)
     * Scale: 0.4
     * Offset: 0
     */
    uint8_t dir_pwr_sat_discharge_current;

    /**
     * Range: 0..220 (0..3.3 V)
     * Scale: 0.015
     * Offset: 0
     */
    uint8_t dir_resolver_offset_cos;

    /**
     * Range: -2000..2000 (-20..20 deg)
     * Scale: 0.01
     * Offset: 0
     */
    int16_t dir_rotor_offset_est;

    /**
     * Range: 0..9 (0..9 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t dir_rotor_offset_learning_state;

    /**
     * Range: 0..255 (0..2.55 scale)
     * Scale: 0.01
     * Offset: 0
     */
    uint8_t dir_rs_scale;

    /**
     * Range: 0..200 (0..10 ms)
     * Scale: 0.05
     * Offset: 0
     */
    uint8_t dir_sopt_time_to_trip;

    /**
     * Range: 0..8 (0..8 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t dir_ssm_state;

    /**
     * Range: 0..255 (-40..215 C)
     * Scale: 1
     * Offset: -40
     */
    uint8_t dir_stator_end_winding_temp;

    /**
     * Range: 0..16383 (-1638.3..0 Nm)
     * Scale: 0.1
     * Offset: -1638.3
     */
    uint16_t dir_sys_pedal_min_torque;

    /**
     * Range: 0..250 (0..100 %)
     * Scale: 0.4
     * Offset: 0
     */
    uint8_t dir_system_stack;

    /**
     * Range: 0..255 (0..102 %)
     * Scale: 0.4
     * Offset: 0
     */
    uint8_t dir_tq_sat_thermal;

    /**
     * Range: 0..255 (0..102 %)
     * Scale: 0.4
     * Offset: 0
     */
    uint8_t dir_tq_scale_differential;

    /**
     * Range: 0..4000 (0.0001..0.0005 1/kg)
     * Scale: 1e-07
     * Offset: 0.0001
     */
    uint16_t dir_ve_mass_inv_raw;

    /**
     * Range: 0..4 (0..4 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t dir_velocity_estimator_state;

    /**
     * Range: 0..4 (0..4 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t dir_gate_drive_state;

    /**
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t dir_usm_state;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t dir_power_stage_safe_state;

    /**
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t dir_aeb_fault_reason;

    /**
     * Range: -150..150 (-1..2 N/N)
     * Scale: 0.01
     * Offset: 0.5
     */
    int16_t dir_brake_cp_scale;

    /**
     * Range: 0..255 (-40..215 C)
     * Scale: 1
     * Offset: -40
     */
    uint8_t dir_busbar_temp;

    /**
     * Range: 0..255 (0..102 %)
     * Scale: 0.4
     * Offset: 0
     */
    uint8_t dir_cpu10_hz_max;

    /**
     * Range: 0..255 (0..102 %)
     * Scale: 0.4
     * Offset: 0
     */
    uint8_t dir_cpu1_hz_min;

    /**
     * Range: 0..255 (0..102 %)
     * Scale: 0.4
     * Offset: 0
     */
    uint8_t dir_cpu1k_hz_max;

    /**
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t dir_cpu_id_word0;

    /**
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t dir_cpu_id_word1;

    /**
     * Range: -32768..32767 (-3276.8..3276.7 A)
     * Scale: 0.1
     * Offset: 0
     */
    int16_t dir_dc_cable_current_est;

    /**
     * Range: 0..10 (0..10 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t dir_flux_state;

    /**
     * Range: 0..250 (0..100 %)
     * Scale: 0.4
     * Offset: 0
     */
    uint8_t dir_idle_stack;

    /**
     * Range: 0..250 (0..250 kph)
     * Scale: 1
     * Offset: 0
     */
    uint8_t dir_loc_target_speed;

    /**
     * Range: 0..65535 (0..6553.5 A)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t dir_motor_ia;

    /**
     * Range: 0..254 (0..25.4 V)
     * Scale: 0.1
     * Offset: 0
     */
    uint8_t dir_oil_pump_phase_voltage;

    /**
     * Range: 0..65535 (0..6553.5 A)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t dir_peak_i_qref;

    /**
     * Range: 0..255 (-40..215 C)
     * Scale: 1
     * Offset: -40
     */
    uint8_t dir_phase_out_busbar_weld_temp;

    /**
     * Range: 0..255 (0..102 %)
     * Scale: 0.4
     * Offset: 0
     */
    uint8_t dir_pwr_sat_max_discharge_power;

    /**
     * Range: 0..200 (0..1 1)
     * Scale: 0.005
     * Offset: 0
     */
    uint8_t dir_resolver_cos_rms_squared;

    /**
     * Range: 0..220 (0..3.3 V)
     * Scale: 0.015
     * Offset: 0
     */
    uint8_t dir_resolver_offset_sin;

    /**
     * Range: 0..65535 (0..6.5535 Wb)
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t dir_rotor_flux;

    /**
     * Range: 0..255 (-40..215 C)
     * Scale: 1
     * Offset: -40
     */
    uint8_t dir_rotor_max_magnet_temp;

    /**
     * Range: 0..200 (0..10 ms)
     * Scale: 0.05
     * Offset: 0
     */
    uint8_t dir_sopt_trip_delay;

    /**
     * Range: 0..65535 (0..6.5535 Wb)
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t dir_stator_flux_ref;

    /**
     * Range: -32768..32767 (-3276.8..3276.7 A)
     * Scale: 0.1
     * Offset: 0
     */
    int16_t dir_stator_i_dref;

    /**
     * Range: -32768..32767 (-3276.8..3276.7 A)
     * Scale: 0.1
     * Offset: 0
     */
    int16_t dir_stator_i_qref;

    /**
     * Range: -32768..32767 (-1.31072..1.31068 mindex)
     * Scale: 4e-05
     * Offset: 0
     */
    int16_t dir_stator_vd_filtered;

    /**
     * Range: -32768..32767 (-1.31072..1.31068 mindex)
     * Scale: 4e-05
     * Offset: 0
     */
    int16_t dir_stator_vq;

    /**
     * Range: 0..250 (0..20 kW)
     * Scale: 0.08
     * Offset: 0
     */
    uint8_t dir_sys_heat_power_optimal;

    /**
     * Range: 0..255 (0..1275 Nm)
     * Scale: 5
     * Offset: 0
     */
    uint8_t dir_tc_max_request;

    /**
     * Range: -2000..2000 (-20..20 deg)
     * Scale: 0.01
     * Offset: 0
     */
    int16_t dir_rotor_offset_mean;

    /**
     * Range: -2048..2047 (-1.024..1.0235 G)
     * Scale: 0.0005
     * Offset: 0
     */
    int16_t dir_ve_res_force;

    /**
     * Range: 0..16383 (0..1638.3 Nm)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t dir_sys_pedal_max_torque;

    /**
     * Range: 0..9 (0..9 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t dir_aeb_unavailable_reason;

    /**
     * Range: 0..6 (0..6 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t dir_brk_st_state;

    /**
     * Range: 0..255 (0..102 %)
     * Scale: 0.4
     * Offset: 0
     */
    uint8_t dir_cpu10_hz_avg;

    /**
     * Range: 0..255 (0..102 %)
     * Scale: 0.4
     * Offset: 0
     */
    uint8_t dir_cpu1_hz_max;

    /**
     * Range: 0..255 (0..102 %)
     * Scale: 0.4
     * Offset: 0
     */
    uint8_t dir_cpu1k_hz_avg;

    /**
     * Range: 0..250 (0..100 %)
     * Scale: 0.4
     * Offset: 0
     */
    uint8_t dir_decode_hardware_stack;

    /**
     * Range: 0..255 (0..1.02 scale)
     * Scale: 0.004
     * Offset: 0
     */
    uint8_t dir_lls_scale;

    /**
     * Range: -500..500 (-5000..5000 Nm)
     * Scale: 10
     * Offset: 0
     */
    int16_t dir_loc_up;

    /**
     * Range: 0..250 (0..500 kPa)
     * Scale: 2
     * Offset: 0
     */
    uint8_t dir_oil_pump_pressure_estimate_max;

    /**
     * Range: 0..255 (-40..215 C)
     * Scale: 1
     * Offset: -40
     */
    uint8_t dir_pcs_temp;

    /**
     * Range: 0..255 (-40..215 C)
     * Scale: 1
     * Offset: -40
     */
    uint8_t dir_phase_out_lug_temp;

    /**
     * Range: 0..255 (0..102 %)
     * Scale: 0.4
     * Offset: 0
     */
    uint8_t dir_pwr_sat_max_regen_power;

    /**
     * Range: 0..250 (7.5..32.5 us)
     * Scale: 0.1
     * Offset: 7.5
     */
    uint8_t dir_resolver_phase_offset;

    /**
     * Range: 0..200 (0..1 1)
     * Scale: 0.005
     * Offset: 0
     */
    uint8_t dir_resolver_sin_rms_squared;

    /**
     * Range: 0..2000 (0..100 ms)
     * Scale: 0.05
     * Offset: 0
     */
    uint16_t dir_sopt_time_to_off;

    /**
     * Range: 0..255 (0..1275 Nm)
     * Scale: 5
     * Offset: 0
     */
    uint8_t dir_tc_min_request;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t dir_aeb_cancel_reason;

    /**
     * Range: 0..255 (0..102 %)
     * Scale: 0.4
     * Offset: 0
     */
    uint8_t dir_cpu100_hz_min;

    /**
     * Range: 0..255 (0..102 %)
     * Scale: 0.4
     * Offset: 0
     */
    uint8_t dir_cpu1_hz_avg;

    /**
     * Range: 0..255 (0..102 %)
     * Scale: 0.4
     * Offset: 0
     */
    uint8_t dir_cpu20k_hz_min;

    /**
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t dir_cpu_id_word2;

    /**
     * Range: 0..4294967295 (0..4294967295 -)
     * Scale: 1
     * Offset: 0
     */
    uint32_t dir_crc;

    /**
     * Range: 0..65535 (0..6553.5 A)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t dir_current_limit;

    /**
     * Range: 0..65535 (0..65.535 kA2s)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t dir_dc_cable_heat;

    /**
     * Range: 0..255 (-40..215 C)
     * Scale: 1
     * Offset: -40
     */
    uint8_t dir_dc_link_cap_temp;

    /**
     * Range: 0..4294967295 (0..42949672950 rev)
     * Scale: 10
     * Offset: 0
     */
    uint32_t dir_drive_unit_odometer;

    /**
     * Range: 0..250 (0..100 %)
     * Scale: 0.4
     * Offset: 0
     */
    uint8_t dir_eeprom_stack;

    /**
     * Range: 0..255 (0..3.825 scale)
     * Scale: 0.015
     * Offset: 0
     */
    uint8_t dir_llr_scale;

    /**
     * Range: -13333.33333333333333333333333..13333.33333333333333333333333 (-4..4 rad)
     * Scale: 0.0003
     * Offset: 0
     */
    int16_t dir_load_angle_margin;

    /**
     * Range: -32768..32767 (-3276.8..3276.7 A)
     * Scale: 0.1
     * Offset: 0
     */
    int16_t dir_motor_i_aavg;

    /**
     * Range: 0..65535 (0..6553.5 A)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t dir_motor_ib;

    /**
     * Range: 0..250 (0..500 kPa)
     * Scale: 2
     * Offset: 0
     */
    uint8_t dir_oil_pump_pressure_expected_min;

    /**
     * Range: 0..250 (0..100 %)
     * Scale: 0.4
     * Offset: 0
     */
    uint8_t dir_pedal_pos_filt;

    /**
     * Range: 0..200 (0..5 1)
     * Scale: 0.025
     * Offset: 0
     */
    uint8_t dir_resolver_common_gain;

    /**
     * Range: -100..100 (-1..1 1)
     * Scale: 0.01
     * Offset: 0
     */
    int8_t dir_resolver_cos_filtered;

    /**
     * Range: 0..65535 (0..6.5535 Wb)
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t dir_stator_flux_fdb;

    /**
     * Range: -32768..32767 (-3276.8..3276.7 A)
     * Scale: 0.1
     * Offset: 0
     */
    int16_t dir_stator_i_dfdb;

    /**
     * Range: -32768..32767 (-3276.8..3276.7 A)
     * Scale: 0.1
     * Offset: 0
     */
    int16_t dir_stator_i_qfdb;

    /**
     * Range: 0..255 (-40..215 C)
     * Scale: 1
     * Offset: -40
     */
    uint8_t dir_stator_temp1;

    /**
     * Range: -32768..32767 (-1.31072..1.31068 mindex)
     * Scale: 4e-05
     * Offset: 0
     */
    int16_t dir_stator_vd;

    /**
     * Range: -32768..32767 (-1.31072..1.31068 mindex)
     * Scale: 4e-05
     * Offset: 0
     */
    int16_t dir_stator_vq_filtered;

    /**
     * Range: 0..255 (0..102 %)
     * Scale: 0.4
     * Offset: 0
     */
    uint8_t dir_tq_sat_motor_voltage;

    /**
     * Range: 0..255 (0..102 %)
     * Scale: 0.4
     * Offset: 0
     */
    uint8_t dir_tq_sat_ui_drive_torque;

    /**
     * Range: -500..500 (-5000..5000 Nm)
     * Scale: 10
     * Offset: 0
     */
    int16_t dir_loc_ui;

    /**
     * Range: 0..16383 (-1638.3..0 Nm)
     * Scale: 0.1
     * Offset: -1638.3
     */
    uint16_t dir_sys_post_pedal_min_torque;

    /**
     * Range: 0..255 (0..102 %)
     * Scale: 0.4
     * Offset: 0
     */
    uint8_t dir_cpu100_hz_max;

    /**
     * Range: 0..255 (0..102 %)
     * Scale: 0.4
     * Offset: 0
     */
    uint8_t dir_cpu20k_hz_max;

    /**
     * Range: 0..255 (-40..215 C)
     * Scale: 1
     * Offset: -40
     */
    uint8_t dir_hv_dc_cable_temp;

    /**
     * Range: -13333.33333333333333333333333..13333.33333333333333333333333 (-4..4 rad)
     * Scale: 0.0003
     * Offset: 0
     */
    int16_t dir_load_angle;

    /**
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t dir_opd_unavailable_reason;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t dir_resolver_ready;

    /**
     * Range: -100..100 (-1..1 1)
     * Scale: 0.01
     * Offset: 0
     */
    int8_t dir_resolver_sin_filtered;

    /**
     * Range: 0..65535 (0..6553500 A2)
     * Scale: 100
     * Offset: 0
     */
    uint16_t dir_sopt_max_current_mag_sqrd;

    /**
     * Range: 0..255 (-40..215 C)
     * Scale: 1
     * Offset: -40
     */
    uint8_t dir_stator_temp2;

    /**
     * Range: 0..255 (0..102 %)
     * Scale: 0.4
     * Offset: 0
     */
    uint8_t dir_tq_sat_motor_current;

    /**
     * Range: 0..255 (0..102 %)
     * Scale: 0.4
     * Offset: 0
     */
    uint8_t dir_tq_sat_ui_regen_torque;

    /**
     * Range: 0..250 (0..100 %)
     * Scale: 0.4
     * Offset: 0
     */
    uint8_t dir_uds_stack;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t dir_resolver_no_carrier;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t dir_resolver_no_phase_lock;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t dir_resolver_cla_mia;

    /**
     * Range: -500..500 (-5000..5000 Nm)
     * Scale: 10
     * Offset: 0
     */
    int16_t dir_loc_feed_fw_trq;

    /**
     * Range: 0..255 (0..102 %)
     * Scale: 0.4
     * Offset: 0
     */
    uint8_t dir_cpu100_hz_avg;

    /**
     * Range: 0..255 (0..102 %)
     * Scale: 0.4
     * Offset: 0
     */
    uint8_t dir_cpu20k_hz_avg;

    /**
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t dir_cpu_id_word3;

    /**
     * Range: 0..26666.66666666666666666666667 (0..8 rad)
     * Scale: 0.0003
     * Offset: 0
     */
    uint16_t dir_internal_angle_filt;

    /**
     * Range: 0..220 (-40..180 C)
     * Scale: 1
     * Offset: -40
     */
    uint8_t dir_magnet_temp_est;

    /**
     * Range: -32768..32767 (-3276.8..3276.7 A)
     * Scale: 0.1
     * Offset: 0
     */
    int16_t dir_motor_i_bavg;

    /**
     * Range: 0..65535 (0..6553.5 A)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t dir_motor_ic;

    /**
     * Range: 0..65535 (0..1.3107 mindex)
     * Scale: 2e-05
     * Offset: 0
     */
    uint16_t dir_motor_v;

    /**
     * Range: 0..255 (-40..215 C)
     * Scale: 1
     * Offset: -40
     */
    uint8_t dir_neg_dc_busbar_temp;

    /**
     * Range: 0..65535 (0..6.5535 Wb)
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t dir_peak_flux;

    /**
     * Range: 0..255 (0..102 %)
     * Scale: 0.4
     * Offset: 0
     */
    uint8_t dir_pwr_sat_max_bus_voltage;

    /**
     * Range: 0..200 (0..1 1)
     * Scale: 0.005
     * Offset: 0
     */
    uint8_t dir_resolver_error_rms_squared;

    /**
     * Range: -32768..32767 (-1146.88..1146.845 Nm)
     * Scale: 0.035
     * Offset: 0
     */
    int16_t dir_system_torque_command;

    /**
     * Range: 0..65535 (0..6.5535 Nm/A)
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t dir_torque_per_amp;

    /**
     * Range: 0..255 (0..102 %)
     * Scale: 0.4
     * Offset: 0
     */
    uint8_t dir_tq_scale_max_motor_speed;

    /**
     * Range: 0..65535 (0..6553.5 A)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t dir_waste_current_limit;

    /**
     * Range: 0..250 (0..100 %)
     * Scale: 0.4
     * Offset: 0
     */
    uint8_t dir_xcp_stack;

    /**
     * Range: 0..16383 (0..1638.3 Nm)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t dir_sys_post_pedal_max_torque;

    /**
     * Range: 0..250 (0..250 kph)
     * Scale: 1
     * Offset: 0
     */
    uint8_t dir_loc_check_speed_ref;

    /**
     * Range: 0..250 (0..100 %)
     * Scale: 0.4
     * Offset: 0
     */
    uint8_t dir_control_stack;

    /**
     * Range: 0..250 (0..100 %)
     * Scale: 0.4
     * Offset: 0
     */
    uint8_t dir_immobilizer_stack;

    /**
     * Range: 0..250 (0..100 %)
     * Scale: 0.4
     * Offset: 0
     */
    uint8_t dir_module10_hz_stack;

    /**
     * Range: 0..255 (-40..215 C)
     * Scale: 1
     * Offset: -40
     */
    uint8_t dir_pos_dc_busbar_temp;

    /**
     * Range: 0..255 (0..102 %)
     * Scale: 0.4
     * Offset: 0
     */
    uint8_t dir_pwr_sat_min_bus_voltage;

    /**
     * Range: 0..255 (0..102 %)
     * Scale: 0.4
     * Offset: 0
     */
    uint8_t dir_tq_scale_shift;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t dir_brake_switch_no;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t dir_brake_switch_nc;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t dir_immobilizer_condition;
};

/**
 * Signals in message ID757DIF_debug.
 *
 * swapped with 7D5in old firmware
 *
 * All signal values are as on the CAN bus.
 */
struct model3_can_id757_dif_debug_t {
    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t dif_debug_selector;

    /**
     * Range: 0..255 (0..102 %)
     * Scale: 0.4
     * Offset: 0
     */
    uint8_t dif_cpu10_hz_min;

    /**
     * Range: 0..255 (0..102 %)
     * Scale: 0.4
     * Offset: 0
     */
    uint8_t dif_cpu1k_hz_min;

    /**
     * Range: 0..255 (-40..215 C)
     * Scale: 1
     * Offset: -40
     */
    uint8_t dif_dc_cap_temp;

    /**
     * Range: 0..255 (0..2.55 scale)
     * Scale: 0.01
     * Offset: 0
     */
    uint8_t dif_gain_scale;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t dif_gate_drive_supply_state;

    /**
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t dif_hw_fault_count;

    /**
     * Range: 0..255 (0..1.02 scale)
     * Scale: 0.004
     * Offset: 0
     */
    uint8_t dif_lm_scale;

    /**
     * Range: -128.5..126.5 (-15..5.4 m/s^2)
     * Scale: 0.08
     * Offset: -4.72
     */
    int8_t dif_loc_target_accel;

    /**
     * Range: 0..26 (0..26 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t dif_motor_type;

    /**
     * Range: 0..240 (0..1.2 N/N)
     * Scale: 0.005
     * Offset: 0
     */
    uint8_t dif_mu_surf_high;

    /**
     * Range: -128..127 (-12.8..12.7 A)
     * Scale: 0.1
     * Offset: 0
     */
    int8_t dif_offset_a;

    /**
     * Range: -128..127 (-12.8..12.7 A)
     * Scale: 0.1
     * Offset: 0
     */
    int8_t dif_offset_b;

    /**
     * Range: 0..255 (0..10200 RPM)
     * Scale: 40
     * Offset: 0
     */
    uint8_t dif_oil_pump_motor_speed;

    /**
     * Range: 0..255 (-40..215 C)
     * Scale: 1
     * Offset: -40
     */
    uint8_t dif_phase_out_busbar_temp;

    /**
     * Range: 0..255 (0..102 %)
     * Scale: 0.4
     * Offset: 0
     */
    uint8_t dif_pwr_sat_charge_current;

    /**
     * Range: 0..255 (0..102 %)
     * Scale: 0.4
     * Offset: 0
     */
    uint8_t dif_pwr_sat_discharge_current;

    /**
     * Range: 0..220 (0..3.3 V)
     * Scale: 0.015
     * Offset: 0
     */
    uint8_t dif_resolver_offset_cos;

    /**
     * Range: -2000..2000 (-20..20 deg)
     * Scale: 0.01
     * Offset: 0
     */
    int16_t dif_rotor_offset_est;

    /**
     * Range: 0..9 (0..9 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t dif_rotor_offset_learning_state;

    /**
     * Range: 0..255 (0..2.55 scale)
     * Scale: 0.01
     * Offset: 0
     */
    uint8_t dif_rs_scale;

    /**
     * Range: 0..200 (0..10 ms)
     * Scale: 0.05
     * Offset: 0
     */
    uint8_t dif_sopt_time_to_trip;

    /**
     * Range: 0..8 (0..8 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t dif_ssm_state;

    /**
     * Range: 0..255 (-40..215 C)
     * Scale: 1
     * Offset: -40
     */
    uint8_t dif_stator_end_winding_temp;

    /**
     * Range: 0..16383 (-1638.3..0 Nm)
     * Scale: 0.1
     * Offset: -1638.3
     */
    uint16_t dif_sys_pedal_min_torque;

    /**
     * Range: 0..250 (0..100 %)
     * Scale: 0.4
     * Offset: 0
     */
    uint8_t dif_system_stack;

    /**
     * Range: 0..255 (0..102 %)
     * Scale: 0.4
     * Offset: 0
     */
    uint8_t dif_tq_sat_thermal;

    /**
     * Range: 0..255 (0..102 %)
     * Scale: 0.4
     * Offset: 0
     */
    uint8_t dif_tq_scale_differential;

    /**
     * Range: 0..4000 (0.0001..0.0005 1/kg)
     * Scale: 1e-07
     * Offset: 0.0001
     */
    uint16_t dif_ve_mass_inv_raw;

    /**
     * Range: 0..4 (0..4 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t dif_velocity_estimator_state;

    /**
     * Range: 0..4 (0..4 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t dif_gate_drive_state;

    /**
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t dif_usm_state;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t dif_power_stage_safe_state;

    /**
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t dif_aeb_fault_reason;

    /**
     * Range: -150..150 (-1..2 N/N)
     * Scale: 0.01
     * Offset: 0.5
     */
    int16_t dif_brake_cp_scale;

    /**
     * Range: 0..255 (-40..215 C)
     * Scale: 1
     * Offset: -40
     */
    uint8_t dif_busbar_temp;

    /**
     * Range: 0..255 (0..102 %)
     * Scale: 0.4
     * Offset: 0
     */
    uint8_t dif_cpu10_hz_max;

    /**
     * Range: 0..255 (0..102 %)
     * Scale: 0.4
     * Offset: 0
     */
    uint8_t dif_cpu1_hz_min;

    /**
     * Range: 0..255 (0..102 %)
     * Scale: 0.4
     * Offset: 0
     */
    uint8_t dif_cpu1k_hz_max;

    /**
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t dif_cpu_id_word0;

    /**
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t dif_cpu_id_word1;

    /**
     * Range: -32768..32767 (-3276.8..3276.7 A)
     * Scale: 0.1
     * Offset: 0
     */
    int16_t dif_dc_cable_current_est;

    /**
     * Range: 0..10 (0..10 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t dif_flux_state;

    /**
     * Range: 0..250 (0..100 %)
     * Scale: 0.4
     * Offset: 0
     */
    uint8_t dif_idle_stack;

    /**
     * Range: 0..250 (0..250 kph)
     * Scale: 1
     * Offset: 0
     */
    uint8_t dif_loc_target_speed;

    /**
     * Range: 0..65535 (0..6553.5 A)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t dif_motor_ia;

    /**
     * Range: 0..254 (0..25.4 V)
     * Scale: 0.1
     * Offset: 0
     */
    uint8_t dif_oil_pump_phase_voltage;

    /**
     * Range: 0..65535 (0..6553.5 A)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t dif_peak_i_qref;

    /**
     * Range: 0..255 (-40..215 C)
     * Scale: 1
     * Offset: -40
     */
    uint8_t dif_phase_out_busbar_weld_temp;

    /**
     * Range: 0..255 (0..102 %)
     * Scale: 0.4
     * Offset: 0
     */
    uint8_t dif_pwr_sat_max_discharge_power;

    /**
     * Range: 0..200 (0..1 1)
     * Scale: 0.005
     * Offset: 0
     */
    uint8_t dif_resolver_cos_rms_squared;

    /**
     * Range: 0..220 (0..3.3 V)
     * Scale: 0.015
     * Offset: 0
     */
    uint8_t dif_resolver_offset_sin;

    /**
     * Range: 0..65535 (0..6.5535 Wb)
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t dif_rotor_flux;

    /**
     * Range: 0..255 (-40..215 C)
     * Scale: 1
     * Offset: -40
     */
    uint8_t dif_rotor_max_magnet_temp;

    /**
     * Range: 0..200 (0..10 ms)
     * Scale: 0.05
     * Offset: 0
     */
    uint8_t dif_sopt_trip_delay;

    /**
     * Range: 0..65535 (0..6.5535 Wb)
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t dif_stator_flux_ref;

    /**
     * Range: -32768..32767 (-3276.8..3276.7 A)
     * Scale: 0.1
     * Offset: 0
     */
    int16_t dif_stator_i_dref;

    /**
     * Range: -32768..32767 (-3276.8..3276.7 A)
     * Scale: 0.1
     * Offset: 0
     */
    int16_t dif_stator_i_qref;

    /**
     * Range: -32768..32767 (-1.31072..1.31068 mindex)
     * Scale: 4e-05
     * Offset: 0
     */
    int16_t dif_stator_vd_filtered;

    /**
     * Range: -32768..32767 (-1.31072..1.31068 mindex)
     * Scale: 4e-05
     * Offset: 0
     */
    int16_t dif_stator_vq;

    /**
     * Range: 0..250 (0..20 kW)
     * Scale: 0.08
     * Offset: 0
     */
    uint8_t dif_sys_heat_power_optimal;

    /**
     * Range: 0..255 (0..1275 Nm)
     * Scale: 5
     * Offset: 0
     */
    uint8_t dif_tc_max_request;

    /**
     * Range: -2000..2000 (-20..20 deg)
     * Scale: 0.01
     * Offset: 0
     */
    int16_t dif_rotor_offset_mean;

    /**
     * Range: -2048..2047 (-1.024..1.0235 G)
     * Scale: 0.0005
     * Offset: 0
     */
    int16_t dif_ve_res_force;

    /**
     * Range: 0..16383 (0..1638.3 Nm)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t dif_sys_pedal_max_torque;

    /**
     * Range: 0..9 (0..9 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t dif_aeb_unavailable_reason;

    /**
     * Range: 0..6 (0..6 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t dif_brk_st_state;

    /**
     * Range: 0..255 (0..102 %)
     * Scale: 0.4
     * Offset: 0
     */
    uint8_t dif_cpu10_hz_avg;

    /**
     * Range: 0..255 (0..102 %)
     * Scale: 0.4
     * Offset: 0
     */
    uint8_t dif_cpu1_hz_max;

    /**
     * Range: 0..255 (0..102 %)
     * Scale: 0.4
     * Offset: 0
     */
    uint8_t dif_cpu1k_hz_avg;

    /**
     * Range: 0..250 (0..100 %)
     * Scale: 0.4
     * Offset: 0
     */
    uint8_t dif_decode_hardware_stack;

    /**
     * Range: 0..255 (0..1.02 scale)
     * Scale: 0.004
     * Offset: 0
     */
    uint8_t dif_lls_scale;

    /**
     * Range: -500..500 (-5000..5000 Nm)
     * Scale: 10
     * Offset: 0
     */
    int16_t dif_loc_up;

    /**
     * Range: 0..250 (0..500 kPa)
     * Scale: 2
     * Offset: 0
     */
    uint8_t dif_oil_pump_pressure_estimate_max;

    /**
     * Range: 0..255 (-40..215 C)
     * Scale: 1
     * Offset: -40
     */
    uint8_t dif_pcs_temp;

    /**
     * Range: 0..255 (-40..215 C)
     * Scale: 1
     * Offset: -40
     */
    uint8_t dif_phase_out_lug_temp;

    /**
     * Range: 0..255 (0..102 %)
     * Scale: 0.4
     * Offset: 0
     */
    uint8_t dif_pwr_sat_max_regen_power;

    /**
     * Range: 0..250 (7.5..32.5 us)
     * Scale: 0.1
     * Offset: 7.5
     */
    uint8_t dif_resolver_phase_offset;

    /**
     * Range: 0..200 (0..1 1)
     * Scale: 0.005
     * Offset: 0
     */
    uint8_t dif_resolver_sin_rms_squared;

    /**
     * Range: 0..2000 (0..100 ms)
     * Scale: 0.05
     * Offset: 0
     */
    uint16_t dif_sopt_time_to_off;

    /**
     * Range: 0..255 (0..1275 Nm)
     * Scale: 5
     * Offset: 0
     */
    uint8_t dif_tc_min_request;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t dif_aeb_cancel_reason;

    /**
     * Range: 0..255 (0..102 %)
     * Scale: 0.4
     * Offset: 0
     */
    uint8_t dif_cpu100_hz_min;

    /**
     * Range: 0..255 (0..102 %)
     * Scale: 0.4
     * Offset: 0
     */
    uint8_t dif_cpu1_hz_avg;

    /**
     * Range: 0..255 (0..102 %)
     * Scale: 0.4
     * Offset: 0
     */
    uint8_t dif_cpu20k_hz_min;

    /**
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t dif_cpu_id_word2;

    /**
     * Range: 0..4294967295 (0..4294967295 -)
     * Scale: 1
     * Offset: 0
     */
    uint32_t dif_crc;

    /**
     * Range: 0..65535 (0..6553.5 A)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t dif_current_limit;

    /**
     * Range: 0..65535 (0..65.535 kA2s)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t dif_dc_cable_heat;

    /**
     * Range: 0..255 (-40..215 C)
     * Scale: 1
     * Offset: -40
     */
    uint8_t dif_dc_link_cap_temp;

    /**
     * Range: 0..4294967295 (0..42949672950 rev)
     * Scale: 10
     * Offset: 0
     */
    uint32_t dif_drive_unit_odometer;

    /**
     * Range: 0..250 (0..100 %)
     * Scale: 0.4
     * Offset: 0
     */
    uint8_t dif_eeprom_stack;

    /**
     * Range: 0..255 (0..3.825 scale)
     * Scale: 0.015
     * Offset: 0
     */
    uint8_t dif_llr_scale;

    /**
     * Range: -13333.33333333333333333333333..13333.33333333333333333333333 (-4..4 rad)
     * Scale: 0.0003
     * Offset: 0
     */
    int16_t dif_load_angle_margin;

    /**
     * Range: -32768..32767 (-3276.8..3276.7 A)
     * Scale: 0.1
     * Offset: 0
     */
    int16_t dif_motor_i_aavg;

    /**
     * Range: 0..65535 (0..6553.5 A)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t dif_motor_ib;

    /**
     * Range: 0..250 (0..500 kPa)
     * Scale: 2
     * Offset: 0
     */
    uint8_t dif_oil_pump_pressure_expected_min;

    /**
     * Range: 0..250 (0..100 %)
     * Scale: 0.4
     * Offset: 0
     */
    uint8_t dif_pedal_pos_filt;

    /**
     * Range: 0..200 (0..5 1)
     * Scale: 0.025
     * Offset: 0
     */
    uint8_t dif_resolver_common_gain;

    /**
     * Range: -100..100 (-1..1 1)
     * Scale: 0.01
     * Offset: 0
     */
    int8_t dif_resolver_cos_filtered;

    /**
     * Range: 0..65535 (0..6.5535 Wb)
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t dif_stator_flux_fdb;

    /**
     * Range: -32768..32767 (-3276.8..3276.7 A)
     * Scale: 0.1
     * Offset: 0
     */
    int16_t dif_stator_i_dfdb;

    /**
     * Range: -32768..32767 (-3276.8..3276.7 A)
     * Scale: 0.1
     * Offset: 0
     */
    int16_t dif_stator_i_qfdb;

    /**
     * Range: 0..255 (-40..215 C)
     * Scale: 1
     * Offset: -40
     */
    uint8_t dif_stator_temp1;

    /**
     * Range: -32768..32767 (-1.31072..1.31068 mindex)
     * Scale: 4e-05
     * Offset: 0
     */
    int16_t dif_stator_vd;

    /**
     * Range: -32768..32767 (-1.31072..1.31068 mindex)
     * Scale: 4e-05
     * Offset: 0
     */
    int16_t dif_stator_vq_filtered;

    /**
     * Range: 0..255 (0..102 %)
     * Scale: 0.4
     * Offset: 0
     */
    uint8_t dif_tq_sat_motor_voltage;

    /**
     * Range: 0..255 (0..102 %)
     * Scale: 0.4
     * Offset: 0
     */
    uint8_t dif_tq_sat_ui_drive_torque;

    /**
     * Range: -500..500 (-5000..5000 Nm)
     * Scale: 10
     * Offset: 0
     */
    int16_t dif_loc_ui;

    /**
     * Range: 0..16383 (-1638.3..0 Nm)
     * Scale: 0.1
     * Offset: -1638.3
     */
    uint16_t dif_sys_post_pedal_min_torque;

    /**
     * Range: 0..255 (0..102 %)
     * Scale: 0.4
     * Offset: 0
     */
    uint8_t dif_cpu100_hz_max;

    /**
     * Range: 0..255 (0..102 %)
     * Scale: 0.4
     * Offset: 0
     */
    uint8_t dif_cpu20k_hz_max;

    /**
     * Range: 0..255 (-40..215 C)
     * Scale: 1
     * Offset: -40
     */
    uint8_t dif_hv_dc_cable_temp;

    /**
     * Range: -13333.33333333333333333333333..13333.33333333333333333333333 (-4..4 rad)
     * Scale: 0.0003
     * Offset: 0
     */
    int16_t dif_load_angle;

    /**
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t dif_opd_unavailable_reason;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t dif_resolver_ready;

    /**
     * Range: -100..100 (-1..1 1)
     * Scale: 0.01
     * Offset: 0
     */
    int8_t dif_resolver_sin_filtered;

    /**
     * Range: 0..65535 (0..6553500 A2)
     * Scale: 100
     * Offset: 0
     */
    uint16_t dif_sopt_max_current_mag_sqrd;

    /**
     * Range: 0..255 (-40..215 C)
     * Scale: 1
     * Offset: -40
     */
    uint8_t dif_stator_temp2;

    /**
     * Range: 0..255 (0..102 %)
     * Scale: 0.4
     * Offset: 0
     */
    uint8_t dif_tq_sat_motor_current;

    /**
     * Range: 0..255 (0..102 %)
     * Scale: 0.4
     * Offset: 0
     */
    uint8_t dif_tq_sat_ui_regen_torque;

    /**
     * Range: 0..250 (0..100 %)
     * Scale: 0.4
     * Offset: 0
     */
    uint8_t dif_uds_stack;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t dif_resolver_no_carrier;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t dif_resolver_no_phase_lock;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t dif_resolver_cla_mia;

    /**
     * Range: -500..500 (-5000..5000 Nm)
     * Scale: 10
     * Offset: 0
     */
    int16_t dif_loc_feed_fw_trq;

    /**
     * Range: 0..255 (0..102 %)
     * Scale: 0.4
     * Offset: 0
     */
    uint8_t dif_cpu100_hz_avg;

    /**
     * Range: 0..255 (0..102 %)
     * Scale: 0.4
     * Offset: 0
     */
    uint8_t dif_cpu20k_hz_avg;

    /**
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t dif_cpu_id_word3;

    /**
     * Range: 0..26666.66666666666666666666667 (0..8 rad)
     * Scale: 0.0003
     * Offset: 0
     */
    uint16_t dif_internal_angle_filt;

    /**
     * Range: 0..220 (-40..180 C)
     * Scale: 1
     * Offset: -40
     */
    uint8_t dif_magnet_temp_est;

    /**
     * Range: -32768..32767 (-3276.8..3276.7 A)
     * Scale: 0.1
     * Offset: 0
     */
    int16_t dif_motor_i_bavg;

    /**
     * Range: 0..65535 (0..6553.5 A)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t dif_motor_ic;

    /**
     * Range: 0..65535 (0..1.3107 mindex)
     * Scale: 2e-05
     * Offset: 0
     */
    uint16_t dif_motor_v;

    /**
     * Range: 0..255 (-40..215 C)
     * Scale: 1
     * Offset: -40
     */
    uint8_t dif_neg_dc_busbar_temp;

    /**
     * Range: 0..65535 (0..6.5535 Wb)
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t dif_peak_flux;

    /**
     * Range: 0..255 (0..102 %)
     * Scale: 0.4
     * Offset: 0
     */
    uint8_t dif_pwr_sat_max_bus_voltage;

    /**
     * Range: 0..200 (0..1 1)
     * Scale: 0.005
     * Offset: 0
     */
    uint8_t dif_resolver_error_rms_squared;

    /**
     * Range: -32768..32767 (-1146.88..1146.845 Nm)
     * Scale: 0.035
     * Offset: 0
     */
    int16_t dif_system_torque_command;

    /**
     * Range: 0..65535 (0..6.5535 Nm/A)
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t dif_torque_per_amp;

    /**
     * Range: 0..255 (0..102 %)
     * Scale: 0.4
     * Offset: 0
     */
    uint8_t dif_tq_scale_max_motor_speed;

    /**
     * Range: 0..65535 (0..6553.5 A)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t dif_waste_current_limit;

    /**
     * Range: 0..250 (0..100 %)
     * Scale: 0.4
     * Offset: 0
     */
    uint8_t dif_xcp_stack;

    /**
     * Range: 0..16383 (0..1638.3 Nm)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t dif_sys_post_pedal_max_torque;

    /**
     * Range: 0..250 (0..250 kph)
     * Scale: 1
     * Offset: 0
     */
    uint8_t dif_loc_check_speed_ref;

    /**
     * Range: 0..250 (0..100 %)
     * Scale: 0.4
     * Offset: 0
     */
    uint8_t dif_control_stack;

    /**
     * Range: 0..250 (0..100 %)
     * Scale: 0.4
     * Offset: 0
     */
    uint8_t dif_immobilizer_stack;

    /**
     * Range: 0..250 (0..100 %)
     * Scale: 0.4
     * Offset: 0
     */
    uint8_t dif_module10_hz_stack;

    /**
     * Range: 0..255 (-40..215 C)
     * Scale: 1
     * Offset: -40
     */
    uint8_t dif_pos_dc_busbar_temp;

    /**
     * Range: 0..255 (0..102 %)
     * Scale: 0.4
     * Offset: 0
     */
    uint8_t dif_pwr_sat_min_bus_voltage;

    /**
     * Range: 0..255 (0..102 %)
     * Scale: 0.4
     * Offset: 0
     */
    uint8_t dif_tq_scale_shift;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t dif_brake_switch_no;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t dif_brake_switch_nc;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t dif_immobilizer_condition;
};

/**
 * Signals in message ID2B6DI_chassisControlStatus.
 *
 * All signal values are as on the CAN bus.
 */
struct model3_can_id2_b6_di_chassis_control_status_t {
    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t di_vdc_telltale_flash;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t di_vdc_telltale_on;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t di_tc_telltale_flash;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t di_tc_telltale_on;

    /**
     * Range: 0..5 (0..5 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t di_traction_control_mode_ui;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t di_ptc_state_ui;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t di_btc_state_ui;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t di_vehicle_hold_telltale_on;
};

/**
 * Signals in message ID284UIvehicleModes.
 *
 * All signal values are as on the CAN bus.
 */
struct model3_can_id284_u_ivehicle_modes_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t u_ifactory_mode284;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t u_itransport_mode284;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t u_ishowroom_mode284;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t u_iservice_mode284;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t u_iis_delivered284;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t u_isentry_mode284;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t u_ihomelink_v2_command0284;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t u_ihomelink_v2_command1284;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t u_ihomelink_v2_command2284;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t u_icar_wash_mode_request284;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t u_ivalet_mode284;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t u_igame_mode284;
};

/**
 * Signals in message ID221VCFRONT_LVPowerState.
 *
 * All signal values are as on the CAN bus.
 */
struct model3_can_id221_vcfront_lv_power_state_t {
    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcfront_lv_power_state_index;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcfront_cp_lv_request;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcfront_park_lv_state;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcfront_epas_lv_state;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcfront_esp_lv_state;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcfront_hvc_lv_request;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcfront_radc_lv_state;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcfront_hvac_comp_lv_state;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcfront_tas_lv_state;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcfront_pcs_lv_state;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcfront_ptc_lv_request;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcfront_cmpdlv_state;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcfront_sccm_lv_request;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcfront_tpms_lv_request;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcfront_rcm_lv_request;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcfront_i_booster_lv_state;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcfront_tuner_lv_request;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcfront_amplifier_lv_request;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcfront_das1_high_current_lv_state;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcfront_das2_high_current_lv_state;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcfront_dir_lv_request;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcfront_dif_lv_state;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcfront_oil_pump_front_lv_state;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcfront_oil_pump_rear_lv_request;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcfront_ocs_lv_request;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcfront_vcleft_hi_current_lv_state;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcfront_vcright_hi_current_lv_state;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcfront_ui_hi_current_lv_state;
};

/**
 * Signals in message ID2F1VCFRONT_eFuseDebugStatus.
 *
 * All signal values are as on the CAN bus.
 */
struct model3_can_id2_f1_vcfront_e_fuse_debug_status_t {
    /**
     * Range: 0..18 (0..18 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcfront_e_fuse_debug_status_index;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcfront_pump1_and_fan_state;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcfront_ui_audio_state;

    /**
     * Range: 0..65535 (0..6553.5 A)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t vcfront_pump1_and_fan_current;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcfront_ui_audio_fault;

    /**
     * Range: 0..2 (0..2 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcfront_epas3_p_state;

    /**
     * Range: 0..2 (0..2 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcfront_epas3_s_state;

    /**
     * Range: 0..2 (0..2 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcfront_esp_motor_state;

    /**
     * Range: 0..2 (0..2 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcfront_esp_valve_state;

    /**
     * Range: 0..2 (0..2 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcfront_pcs_state;

    /**
     * Range: 0..2 (0..2 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcfront_autopilot1_state;

    /**
     * Range: 0..2 (0..2 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcfront_autopilot2_state;

    /**
     * Range: 0..65535 (0..65535 Ah)
     * Scale: 1
     * Offset: 0
     */
    uint16_t vcfront_charged_ibs_amp_hours;

    /**
     * Range: 0..4095 (0..22.29185362131 V)
     * Scale: 0.005443676098
     * Offset: 0
     */
    uint16_t vcfront_e_fuse_lockout_voltage;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcfront_headlamp_left_state;

    /**
     * Range: 0..2 (0..2 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcfront_i_booster_state;

    /**
     * Range: 0..2 (0..2 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcfront_left_controller_state;

    /**
     * Range: 0..4095 (0..22.29185362131 V)
     * Scale: 0.005443676098
     * Offset: 0
     */
    uint16_t vcfront_rail_a_12v;

    /**
     * Range: 0..2 (0..2 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcfront_right_controller_state;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcfront_sleep_bypass_state;

    /**
     * Range: 0..65535 (0..6553.5 A)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t vcfront_ui_audio_current;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcfront_vbat_fused_high_state;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcfront_headlamp_left_fault;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcfront_sleep_bypass_fault;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcfront_vbat_fused_high_fault;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcfront_epas3_p_fault;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcfront_epas3_s_fault;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcfront_esp_motor_fault;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcfront_esp_valve_fault;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcfront_pcs_fault;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcfront_autopilot1_fault;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcfront_autopilot2_fault;

    /**
     * Range: 0..1023 (0..102.3 A)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t vcfront_headlamp_left_current;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcfront_i_booster_fault;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcfront_left_controller_fault;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcfront_right_controller_fault;

    /**
     * Range: 0..65535 (0..6553.5 V)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t vcfront_sleep_bypass_voltage;

    /**
     * Range: 0..11 (0..11 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcfront_vbat_fused_self_test_result;

    /**
     * Range: 0..11 (0..11 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcfront_epas3_p_self_test_result;

    /**
     * Range: 0..11 (0..11 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcfront_epas3_s_self_test_result;

    /**
     * Range: 0..11 (0..11 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcfront_esp_motor_self_test_result;

    /**
     * Range: 0..1520 (-40..150 C)
     * Scale: 0.125
     * Offset: -40
     */
    uint16_t vcfront_autopilot1_temp;

    /**
     * Range: 0..1520 (-40..150 C)
     * Scale: 0.125
     * Offset: -40
     */
    uint16_t vcfront_autopilot2_temp;

    /**
     * Range: 0..11 (0..11 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcfront_i_booster_self_test_result;

    /**
     * Range: 0..11 (0..11 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcfront_pcs_self_test_result;

    /**
     * Range: 0..11 (0..11 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcfront_vcleft_self_test_result;

    /**
     * Range: 0..11 (0..11 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcfront_vcright_self_test_result;

    /**
     * Range: 0..1520 (-40..150 C)
     * Scale: 0.125
     * Offset: -40
     */
    uint16_t vcfront_esp_valve_temp;

    /**
     * Range: 0..1520 (-40..150 C)
     * Scale: 0.125
     * Offset: -40
     */
    uint16_t vcfront_vbat_fused_high_temp;

    /**
     * Range: 0..1520 (-40..150 C)
     * Scale: 0.125
     * Offset: -40
     */
    uint16_t vcfront_epas3_p_temp;

    /**
     * Range: 0..1520 (-40..150 C)
     * Scale: 0.125
     * Offset: -40
     */
    uint16_t vcfront_epas3_s_temp;

    /**
     * Range: 0..1520 (-40..150 C)
     * Scale: 0.125
     * Offset: -40
     */
    uint16_t vcfront_esp_motor_temp;

    /**
     * Range: 0..1520 (-40..150 C)
     * Scale: 0.125
     * Offset: -40
     */
    uint16_t vcfront_pcs_temp;

    /**
     * Range: 0..1520 (-40..150 C)
     * Scale: 0.125
     * Offset: -40
     */
    uint16_t vcfront_i_booster_temp;

    /**
     * Range: 0..1520 (-40..150 C)
     * Scale: 0.125
     * Offset: -40
     */
    uint16_t vcfront_left_controller_temp;

    /**
     * Range: 0..1520 (-40..150 C)
     * Scale: 0.125
     * Offset: -40
     */
    uint16_t vcfront_right_controller_temp;

    /**
     * Range: 0..254 (0..25.4 V)
     * Scale: 0.1
     * Offset: 0
     */
    uint8_t vcfront_headlamp_left_voltage;

    /**
     * Range: 0..4095 (0..22.29185362131 V)
     * Scale: 0.005443676098
     * Offset: 0
     */
    uint16_t vcfront_rail_b_12v;

    /**
     * Range: 0..4095 (0..409.5 V)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t vcfront_pump1_and_fan_voltage;

    /**
     * Range: 0..65535 (0..356.75131308243 V)
     * Scale: 0.005443676098
     * Offset: 0
     */
    uint16_t vcfront_charge_pump_voltage;

    /**
     * Range: 0..65535 (0..65535 Ah)
     * Scale: 1
     * Offset: 0
     */
    uint16_t vcfront_discharged_ibs_amp_hours;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcfront_ui_state;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcfront_ui_fault;

    /**
     * Range: 0..65535 (0..6553.5 A)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t vcfront_sleep_bypass_current;

    /**
     * Range: 0..65535 (0..6553.5 V)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t vcfront_autopilot1_voltage;

    /**
     * Range: 0..65535 (0..6553.5 V)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t vcfront_autopilot2_voltage;

    /**
     * Range: 0..65535 (0..6553.5 V)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t vcfront_esp_valve_voltage;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcfront_headlamp_right_state;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcfront_headlamp_right_fault;

    /**
     * Range: 0..1023 (0..102.3 A)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t vcfront_headlamp_right_current;

    /**
     * Range: 0..65535 (0..6553.5 V)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t vcfront_vbat_fused_high_voltage;

    /**
     * Range: 0..65535 (0..6553.5 V)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t vcfront_epas3_p_voltage;

    /**
     * Range: 0..65535 (0..6553.5 V)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t vcfront_epas3_s_voltage;

    /**
     * Range: 0..65535 (0..6553.5 V)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t vcfront_esp_motor_voltage;

    /**
     * Range: 0..65535 (0..6553.5 V)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t vcfront_pcs_voltage;

    /**
     * Range: 0..65535 (0..6553.5 V)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t vcfront_i_booster_voltage;

    /**
     * Range: 0..65535 (0..6553.5 V)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t vcfront_left_controller_voltage;

    /**
     * Range: 0..65535 (0..6553.5 V)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t vcfront_right_controller_voltage;

    /**
     * Range: 0..4095 (0..22.29185362131 V)
     * Scale: 0.005443676098
     * Offset: 0
     */
    uint16_t vcfront_rail_a_5v;

    /**
     * Range: 0..65535 (0..6553.5 A)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t vcfront_ui_current;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcfront_pump2_and_air_comp_state;

    /**
     * Range: 0..65535 (0..6553.5 A)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t vcfront_pump2_and_air_comp_current;

    /**
     * Range: -32768..32767 (-327.68..327.67 C)
     * Scale: 0.01
     * Offset: 0
     */
    int16_t vcfront_ibs_unfiltered_temperature;

    /**
     * Range: 0..254 (0..25.4 V)
     * Scale: 0.1
     * Offset: 0
     */
    uint8_t vcfront_headlamp_right_voltage;

    /**
     * Range: 0..65535 (0..6553.5 A)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t vcfront_autopilot1_current;

    /**
     * Range: 0..65535 (0..6553.5 A)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t vcfront_autopilot2_current;

    /**
     * Range: 0..65535 (0..6553.5 A)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t vcfront_esp_valve_current;

    /**
     * Range: 0..4095 (0..22.29185362131 V)
     * Scale: 0.005443676098
     * Offset: 0
     */
    uint16_t vcfront_rail_b_5v;

    /**
     * Range: 0..65535 (0..6553.5 A)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t vcfront_vbat_fused_high_current;

    /**
     * Range: 0..65535 (0..6553.5 A)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t vcfront_epas3_p_current;

    /**
     * Range: 0..65535 (0..6553.5 A)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t vcfront_epas3_s_current;

    /**
     * Range: 0..65535 (0..6553.5 A)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t vcfront_esp_motor_current;

    /**
     * Range: -32768..32767 (-3276.8..3276.7 A)
     * Scale: 0.1
     * Offset: 0
     */
    int16_t vcfront_pcs_current;

    /**
     * Range: 0..65535 (0..6553.5 A)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t vcfront_i_booster_current;

    /**
     * Range: 0..65535 (0..6553.5 A)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t vcfront_left_controller_current;

    /**
     * Range: 0..65535 (0..6553.5 A)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t vcfront_right_controller_current;

    /**
     * Range: 0..190 (-40..150 C)
     * Scale: 1
     * Offset: -40
     */
    int8_t vcfront_headlamp_left_temperature;

    /**
     * Range: 0..4095 (0..409.5 V)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t vcfront_pump2_and_air_comp_voltage;

    /**
     * Range: 0..190 (-40..150 C)
     * Scale: 1
     * Offset: -40
     */
    int8_t vcfront_headlamp_right_temperature;
};

/**
 * Signals in message ID243VCRighthvacFeedback.
 *
 * All signal values are as on the CAN bus.
 */
struct model3_can_id243_vc_righthvac_feedback_t {
    /**
     * Range: 0..65535 (-32767..32768 W)
     * Scale: 1
     * Offset: -32767
     */
    uint16_t vc_righthvac_qdot_left;

    /**
     * Range: 0..65535 (-32767..32768 W)
     * Scale: 1
     * Offset: -32767
     */
    uint16_t vc_righthvac_qdot_right;

    /**
     * Range: 0..2047 (-40..164.7 C)
     * Scale: 0.1
     * Offset: -40
     */
    uint16_t vc_righthvac_cabin_temp_est;

    /**
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vc_righthvac_air_distribution_mode;

    /**
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vc_righthvac_blower_segment;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vc_righthvac_recirc;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vc_righthvac_ac_running;

    /**
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vc_righthvac_power_state;

    /**
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vc_righthvac_second_row_state;
};

/**
 * Signals in message ID20CVCRighthvacRequest.
 *
 * All signal values are as on the CAN bus.
 */
struct model3_can_id20_cvc_righthvac_request_t {
    /**
     * Range: 0..2047 (0..10235 W)
     * Scale: 5
     * Offset: 0
     */
    uint16_t vc_rightwatts_demand_evap;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vc_righthvac_evap_enabled;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vc_rightconditioning_request;

    /**
     * Range: 0..2047 (-40..164.7 C)
     * Scale: 0.1
     * Offset: -40
     */
    uint16_t vc_righttemp_evaporator;

    /**
     * Range: 0..255 (0..51 C)
     * Scale: 0.2
     * Offset: 0
     */
    uint8_t vc_righttemp_evaporator_target;

    /**
     * Range: 0..1023 (0..5115 RPM)
     * Scale: 5
     * Offset: 0
     */
    uint16_t vc_righthvac_blower_speed_rpm_req;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vc_rightdemand_evap_skip_rate_limit;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vc_rightevap_performance_low;
};

/**
 * Signals in message ID2B3VCRightlogging1Hz.
 *
 * All signal values are as on the CAN bus.
 */
struct model3_can_id2_b3_vc_rightlogging1_hz_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t vc_rightlogging1_hz_index;

    /**
     * Range: -
     * Scale: 0.3
     * Offset: -40
     */
    uint16_t vc_righttemp_duct_left;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t vc_righthvac_estimate_windshield_rh;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t vc_rightptc_heater_temp_duct_high;

    /**
     * Range: -
     * Scale: 0.3
     * Offset: -40
     */
    uint16_t vc_righttemp_duct_modeled_left;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t vc_rightptc_heater_temp_duct_fault;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t vc_rightptc_heater_no_airflow;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t vc_rightptc_heater_hvac_act_not_ready;

    /**
     * Range: -
     * Scale: 0.5
     * Offset: -40
     */
    uint8_t vc_rightcabin_temp_glass_roof;

    /**
     * Range: -
     * Scale: 0.1
     * Offset: 15
     */
    uint8_t vc_righthvac_set_temp_actual_left;

    /**
     * Range: -
     * Scale: 2
     * Offset: -254
     */
    uint8_t vc_rightconvection_target_left;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t vc_rightptc_heater_no_ui_request;

    /**
     * Range: -
     * Scale: 0.02
     * Offset: 0
     */
    uint8_t vc_righthvac_lh_bleed_voltage;

    /**
     * Range: -
     * Scale: 0.02
     * Offset: 0
     */
    uint8_t vc_righthvac_lh_bleed_end_stop;

    /**
     * Range: -
     * Scale: 0.02
     * Offset: 0
     */
    uint8_t vc_righthvac_lh_bleed_zero_stop;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t vc_righttime_left_to_cabin_model_init;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t vc_rightptc_heater_no_high_voltage;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t vc_rightptc_heater_l_air_path_blocked;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t vc_rightptc_heater_r_air_path_blocked;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t vc_righthvac_fogging_risk_level;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t vc_rightptc_heater_req_airpath_blocked;

    /**
     * Range: -
     * Scale: 0.3
     * Offset: -40
     */
    uint16_t vc_righttemp_duct_right;

    /**
     * Range: -
     * Scale: 0.5
     * Offset: -40
     */
    uint8_t vc_righthvac_duct_target_left;

    /**
     * Range: -
     * Scale: 0.3
     * Offset: -40
     */
    uint16_t vc_righttemp_duct_modeled_right;

    /**
     * Range: -
     * Scale: 0.5
     * Offset: -40
     */
    uint8_t vc_rightcabin_temp_windshield;

    /**
     * Range: -
     * Scale: 0.1
     * Offset: 15
     */
    uint8_t vc_righthvac_set_temp_actual_right;

    /**
     * Range: -
     * Scale: 2
     * Offset: -254
     */
    uint8_t vc_rightconvection_target_right;

    /**
     * Range: -
     * Scale: 0.02
     * Offset: 0
     */
    uint8_t vc_righthvac_rh_bleed_voltage;

    /**
     * Range: -
     * Scale: 0.02
     * Offset: 0
     */
    uint8_t vc_righthvac_rh_bleed_end_stop;

    /**
     * Range: -
     * Scale: 0.02
     * Offset: 0
     */
    uint8_t vc_righthvac_rh_bleed_zero_stop;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t vc_righthvac_flash_fogging_detected;

    /**
     * Range: -
     * Scale: 4
     * Offset: 0
     */
    uint8_t vc_rightsolar_load_on_veh_filtered;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t vc_righthvac_cabin_humidity_level;

    /**
     * Range: -
     * Scale: 0.5
     * Offset: -40
     */
    uint8_t vc_righthvac_duct_target_right;

    /**
     * Range: -
     * Scale: 0.3
     * Offset: -40
     */
    uint16_t vc_righttemp_htr_surface_modeled_l;

    /**
     * Range: -
     * Scale: 0.5
     * Offset: -40
     */
    uint8_t vc_righttemp_incar_cabin_probe;

    /**
     * Range: -
     * Scale: 0.5
     * Offset: -40
     */
    uint8_t vc_rightcabin_temp_interior;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t vc_righthvac_auto_transition_reason;

    /**
     * Range: -
     * Scale: 2
     * Offset: -254
     */
    uint8_t vc_rightconvection_delivered_left;

    /**
     * Range: -
     * Scale: 0.02
     * Offset: 0
     */
    uint8_t vc_righthvac_lh_vane_voltage;

    /**
     * Range: -
     * Scale: 0.02
     * Offset: 0
     */
    uint8_t vc_righthvac_lh_vane_end_stop;

    /**
     * Range: -
     * Scale: 0.02
     * Offset: 0
     */
    uint8_t vc_righthvac_lh_vane_zero_stop;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t vc_righthvac_cabin_purge_active;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t vc_righthvac_cab_ovrheat_prot_active;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t vc_righthvac_cabin_purge_allowed;

    /**
     * Range: 0..1023 (0..5115 W)
     * Scale: 5
     * Offset: 0
     */
    uint16_t vc_rightwatts_heater_left_total;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t vc_righthvac_cab_ovrheat_prot_allowed;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t vc_righthvac_air_flow_mode_row1;

    /**
     * Range: 0..65535 (-32767..32768 W)
     * Scale: 1
     * Offset: -32767
     */
    uint16_t vc_righthvac_qdot_feedforward;

    /**
     * Range: 0..127 (0..127 %)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vc_rightcloudiness_probability;

    /**
     * Range: -
     * Scale: 0.3
     * Offset: -40
     */
    uint16_t vc_righttemp_htr_surface_modeled_r;

    /**
     * Range: -
     * Scale: 0.5
     * Offset: -40
     */
    uint8_t vc_righttemp_incar_cabin_mid;

    /**
     * Range: -
     * Scale: 0.6
     * Offset: -40
     */
    uint8_t vc_rightcabin_temp_interior_sunny;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t vc_righthvac_air_flow_mode_row2;

    /**
     * Range: -
     * Scale: 2
     * Offset: -254
     */
    uint8_t vc_rightconvection_delivered_right;

    /**
     * Range: -
     * Scale: 0.02
     * Offset: 0
     */
    uint8_t vc_righthvac_rh_vane_voltage;

    /**
     * Range: -
     * Scale: 0.02
     * Offset: 0
     */
    uint8_t vc_righthvac_rh_vane_end_stop;

    /**
     * Range: -
     * Scale: 0.02
     * Offset: 0
     */
    uint8_t vc_righthvac_rh_vane_zero_stop;

    /**
     * Range: -
     * Scale: 0.5
     * Offset: -40
     */
    uint8_t vc_rightcabin_temp_interior_l3;

    /**
     * Range: 0..1023 (0..5115 W)
     * Scale: 5
     * Offset: 0
     */
    uint16_t vc_rightwatts_heater_right_total;

    /**
     * Range: -
     * Scale: 0.5
     * Offset: -40
     */
    uint8_t vc_righttemp_incar_cabin_deep;

    /**
     * Range: -
     * Scale: 0.5
     * Offset: -40
     */
    uint8_t vc_rightcabin_temp_side_glass_left;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t vc_righthvac_massflow_target;

    /**
     * Range: -
     * Scale: 2
     * Offset: 0
     */
    uint8_t vc_rightsolar_load_right_occupant;

    /**
     * Range: -
     * Scale: 0.02
     * Offset: 0
     */
    uint8_t vc_righthvac_upper_mode_voltage;

    /**
     * Range: -
     * Scale: 0.02
     * Offset: 0
     */
    uint8_t vc_righthvac_upper_mode_end_stop;

    /**
     * Range: -
     * Scale: 0.02
     * Offset: 0
     */
    uint8_t vc_righthvac_upper_mode_zero_stop;

    /**
     * Range: -
     * Scale: 0.6
     * Offset: -40
     */
    uint8_t vc_rightcabin_temp_interior_sunny_l3;

    /**
     * Range: -
     * Scale: 35
     * Offset: 0
     */
    uint8_t vc_rightevap_load_in_fresh;

    /**
     * Range: -
     * Scale: 0.5
     * Offset: -40
     */
    uint8_t vc_rightcabin_temp_interior_l2;

    /**
     * Range: -
     * Scale: 0.5
     * Offset: -40
     */
    uint8_t vc_rightcabin_temp_side_glass_right;

    /**
     * Range: -
     * Scale: 20
     * Offset: 0
     */
    uint8_t vc_rightptc_heater_pwr_demand_left;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t vc_righthvac_airflow_reason;

    /**
     * Range: -
     * Scale: 2
     * Offset: 0
     */
    uint8_t vc_rightsolar_load_left_occupant;

    /**
     * Range: -
     * Scale: 0.02
     * Offset: 0
     */
    uint8_t vc_righthvac_lower_mode_voltage;

    /**
     * Range: -
     * Scale: 0.02
     * Offset: 0
     */
    uint8_t vc_righthvac_lower_mode_end_stop;

    /**
     * Range: -
     * Scale: 0.02
     * Offset: 0
     */
    uint8_t vc_righthvac_lower_mode_zero_stop;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t vc_righthvac_qdot_limited_left;

    /**
     * Range: -
     * Scale: 0.6
     * Offset: -40
     */
    uint8_t vc_rightcabin_temp_top_pad_air;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t vc_righthvac_qdot_limited_right;

    /**
     * Range: -
     * Scale: 35
     * Offset: 0
     */
    uint8_t vc_rightevap_load_in_recirc;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t vc_right_lh_panel_airflow_blocked;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t vc_right_rh_panel_airflow_blocked;

    /**
     * Range: -
     * Scale: 0.6
     * Offset: -40
     */
    uint8_t vc_rightcabin_temp_interior_sunny_l2;

    /**
     * Range: -
     * Scale: 0.5
     * Offset: -40
     */
    uint8_t vc_rightcabin_temp_breath_level;

    /**
     * Range: -
     * Scale: 20
     * Offset: 0
     */
    uint8_t vc_rightptc_heater_pwr_demand_right;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t vc_rightfloor_airflow_blocked;

    /**
     * Range: -
     * Scale: 4
     * Offset: 0
     */
    uint8_t vc_rightsolar_load_on_vehicle;

    /**
     * Range: -
     * Scale: 0.02
     * Offset: 0
     */
    uint8_t vc_righthvac_intake_voltage;

    /**
     * Range: -
     * Scale: 0.02
     * Offset: 0
     */
    uint8_t vc_righthvac_intake_end_stop;

    /**
     * Range: -
     * Scale: 0.02
     * Offset: 0
     */
    uint8_t vc_righthvac_intake_zero_stop;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t vc_rightdefrost_airflow_blocked;
};

/**
 * Signals in message ID2C1VCFront10hz.
 *
 * All signal values are as on the CAN bus.
 */
struct model3_can_id2_c1_vc_front10hz_t {
    /**
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vc_front10_hz_index;

    /**
     * Range: 0..1023 (0..10230 rpm)
     * Scale: 10
     * Offset: 0
     */
    uint16_t v_cfrontpump_battery_rpm_actual;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t v_cfrontfive_way_valve_mode;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t v_cfrontrefrigerant_has_been_filled;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t v_cfrontcoolant_temp_based_mode;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t v_cfrontfive_way_valve_mode_wrong;

    /**
     * Range: -
     * Scale: 0.25
     * Offset: -70
     */
    uint16_t v_cfrontfive_way_valve_angle_actual;

    /**
     * Range: -
     * Scale: 0.2
     * Offset: 0
     */
    uint8_t v_cfrontradiator_fan_out_voltage;

    /**
     * Range: -
     * Scale: 0.5
     * Offset: -40
     */
    uint8_t v_cfronttemp_refrig_suction;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t v_cfrontcomp_demand_chiller;

    /**
     * Range: -
     * Scale: 10
     * Offset: 0
     */
    uint16_t v_cfrontpump_battery_rpm_target;

    /**
     * Range: -
     * Scale: 10
     * Offset: 0
     */
    uint16_t v_cfrontradiator_fan_rpm_target;

    /**
     * Range: -
     * Scale: 0.25
     * Offset: -10
     */
    uint16_t v_cfrontfive_way_valve_angle_target;

    /**
     * Range: -
     * Scale: 0.125
     * Offset: -40
     */
    uint16_t v_cfronttemp_refrig_discharge;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t v_cfrontcomp_demand_evap;

    /**
     * Range: -
     * Scale: 10
     * Offset: 0
     */
    uint16_t v_cfrontpump_powertrain_rpm_actual;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t v_cfrontcompressor_state;

    /**
     * Range: -
     * Scale: 10
     * Offset: 0
     */
    uint16_t v_cfrontradiator_fan_rpm_actual;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t v_cfrontfive_way_valve_rad_bypass;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t v_cfrontcomp_limit_pres_discharge_hi;

    /**
     * Range: -
     * Scale: 0.1
     * Offset: -20
     */
    uint16_t v_cfronttemp_superheat_actual;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t v_cfrontcomp_limit_temp_discharge_hi;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t v_cfrontcomp_limit_scroll_sep_region;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t v_cfrontcomp_limit_nvh;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t v_cfrontcomp_limit_scroll_sep_ramp;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t v_cfrontcomp_limit_deadband;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t v_cfrontcomp_standby_self_not_ready;

    /**
     * Range: -
     * Scale: 10
     * Offset: 0
     */
    uint16_t v_cfrontpump_powertrain_rpm_target;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t v_cfrontfive_way_valve_state;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t v_cfrontcomp_standby_communication;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t v_cfrontcomp_standby_hv_not_ready;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    int8_t v_cfrontfive_way_valve_duty;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t v_cfrontcomp_standby_low_ambient;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t v_cfrontradiator_fan_initd;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t v_cfrontcomp_standby_low_disch_press;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t v_cfrontradiator_fan_enabled;

    /**
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t v_cfronttemp_superheat_target;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t v_cfrontcomp_standby_refrig_not_ok;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t v_cfrontradiator_fan_power_on;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t v_cfrontcomp_limit_temp_discharge_sim;

    /**
     * Range: -
     * Scale: 0.5
     * Offset: -25
     */
    uint8_t v_cfrontradiator_fan_phase_current;

    /**
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    uint8_t v_cfrontcomp_ramp_rate_up_max;

    /**
     * Range: -
     * Scale: 0.2
     * Offset: 0
     */
    uint8_t v_cfrontpump_battery_out_voltage;

    /**
     * Range: -
     * Scale: 5
     * Offset: 0
     */
    uint16_t v_cfrontfive_way_valve_angle_travel;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t v_cfrontrefrigerant_valves_closed;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t v_cfrontpump_bat_spi_error;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t v_cfrontpump_pt_spi_error;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t v_cfrontthml_fan_spi_error;

    /**
     * Range: -
     * Scale: 0.2
     * Offset: 0
     */
    uint8_t v_cfrontpump_powertrain_out_voltage;

    /**
     * Range: -
     * Scale: 0.125
     * Offset: -40
     */
    uint16_t v_cfronttemp_discharge_simulated;

    /**
     * Range: -
     * Scale: 0.01
     * Offset: 0
     */
    uint8_t v_cfrontfive_way_valve_i_sense;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t v_cfrontpump_battery_initd;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t v_cfrontpump_powertrain_initd;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t v_cfrontpump_battery_enabled;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t v_cfrontpump_powertrain_enabled;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t v_cfrontpump_battery_power_on;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t v_cfrontis_only_suct_temp_not_ready;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t v_cfrontpump_powertrain_power_on;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t v_cfrontusing_simulated_disch_temp;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t v_cfrontpumps_wake;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t v_cfrontusing_simulated_amb_temp;
};

/**
 * Signals in message ID2E1VCFRONT_status.
 *
 * All signal values are as on the CAN bus.
 */
struct model3_can_id2_e1_vcfront_status_t {
    /**
     * Range: 0..6 (0..6 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcfront_status_index;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcfront_5_va_rail_stable;

    /**
     * Range: 0..8 (0..8 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcfront_frunk_latch_status;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcfront_i_booster_wake_line;

    /**
     * Range: 0..700 (9..16 V)
     * Scale: 0.01
     * Offset: 9
     */
    uint16_t vcfront_temp_comp_target_voltage;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcfront_5_vb_rail_stable;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcfront_epas_wake_line;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcfront_12_va_rail_stable;

    /**
     * Range: 0..4 (0..4 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcfront_i_booster_state_dbg;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcfront_12_vb_rail_stable;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcfront_rail_a_state;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcfront_homelink_v2_response0;

    /**
     * Range: 0..250 (0..8000 W)
     * Scale: 32
     * Offset: 0
     */
    uint8_t vcfront_max_evap_heat_rejection;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcfront_rail_b_state;

    /**
     * Range: 0..17 (0..17 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcfront_vehicle_status_dbg;

    /**
     * Range: 0..8 (0..8 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcfront_wiper_speed;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcfront_charge_pump_voltage_stable;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcfront_pe_reset_line_state;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcfront_hsd_init_complete_u13;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcfront_hsd_init_complete_u16;

    /**
     * Range: 0..4 (0..4 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcfront_wiper_position;

    /**
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcfront_battery_sm_state;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcfront_charge_needed;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcfront_pcs_mia;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcfront_ibs_fault;

    /**
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcfront_12_v_overcharge_counter;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcfront_homelink_v2_response1;

    /**
     * Range: 0..250 (0..2500 W)
     * Scale: 10
     * Offset: 0
     */
    uint8_t vcfront_min_evap_heat_rejection;

    /**
     * Range: 0..1023 (0..1023 min)
     * Scale: 1
     * Offset: 0
     */
    uint16_t vcfront_time_spent_charging;

    /**
     * Range: 0..4094 (0..22.286409945212 V)
     * Scale: 0.005443676098
     * Offset: 0
     */
    uint16_t vcfront_vbat_monitor_voltage;

    /**
     * Range: 0..12 (0..12 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcfront_wiper_state;

    /**
     * Range: 0..2 (0..2 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcfront_crash_detected_type;

    /**
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcfront_voltage_drop_counter;

    /**
     * Range: 0..2 (0..2 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcfront_crash_state;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcfront_crash_unlock_override_set;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcfront_freeze_evap_i_term;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcfront_homelink_v2_response2;

    /**
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcfront_voltage_floor_reached_counter;

    /**
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcfront_air_compressor_status;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcfront_is_evap_operation_allowed;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcfront_chiller_demand_active;

    /**
     * Range: 0..1023 (0..1023 min)
     * Scale: 1
     * Offset: 0
     */
    uint16_t vcfront_time_spent_discharging;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcfront_comp_perf_recovery_limited;

    /**
     * Range: 0..4094 (0..22.286409945212 V)
     * Scale: 0.005443676098
     * Offset: 0
     */
    uint16_t vcfront_as8510_voltage;

    /**
     * Range: 0..1023 (0..1023 ticks)
     * Scale: 1
     * Offset: 0
     */
    uint16_t vcfront_headlight_left_v_position;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcfront_voltage_profile;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcfront_has_low_refrigerant;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcfront_reverse_battery_fault;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcfront_homelink_v2_response3;

    /**
     * Range: 0..92 (0..11.5 bar)
     * Scale: 0.125
     * Offset: 0
     */
    uint8_t vcfront_pressure_refrig_suction;

    /**
     * Range: 0..1023 (0..1023 ticks)
     * Scale: 1
     * Offset: 0
     */
    uint16_t vcfront_headlight_right_v_position;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcfront_homelink_v2_response4;

    /**
     * Range: 0..254 (0..31.75 bar)
     * Scale: 0.125
     * Offset: 0
     */
    uint8_t vcfront_pressure_refrig_discharge;

    /**
     * Range: 0..255 (0..255 s)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcfront_time_spent_sleeping;

    /**
     * Range: 0..4095 (0..22.29185362131 V)
     * Scale: 0.005443676098
     * Offset: 0
     */
    uint16_t vcfront_vbat_prot;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcfront_frunk_interior_rel_switch;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcfront_homelink_comm_status;

    /**
     * Range: -512..511 (-512..511 mA)
     * Scale: 1
     * Offset: 0
     */
    int16_t vcfront_sleep_current;

    /**
     * Range: 0..65535 (0..6553500 Cycles)
     * Scale: 100
     * Offset: 0
     */
    uint16_t vcfront_wiper_cycles;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcfront_any_closure_open;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcfront_any_door_open;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcfront_horn_on;

    /**
     * Wiper Angle
     *
     * Range: 0..255 (0..255 deg)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcfront_wiper_position_deg;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcfront_headlamp_left_fan_status;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcfront_headlamp_right_fan_status;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcfront_frunk_access_post;
};

/**
 * Signals in message ID381VCFRONT_logging1Hz.
 *
 * All signal values are as on the CAN bus.
 */
struct model3_can_id381_vcfront_logging1_hz_t {
    /**
     * Range: 0..11 (0..11 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcfront_logging1_hz_index;

    /**
     * Range: 0..1023 (0..1023 Steps)
     * Scale: 1
     * Offset: 0
     */
    uint16_t vcfront_calibrated_position_hcml;

    /**
     * Range: 0..500 (750..1250 ticks)
     * Scale: 1
     * Offset: 750
     */
    uint16_t vcfront_chiller_exv_range;

    /**
     * Range: 0..127 (0..25.4 bar)
     * Scale: 0.2
     * Offset: 0
     */
    uint8_t vcfront_est_pressure_liq;

    /**
     * Range: 0..5 (0..5 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcfront_five_way_valve_recal_reason;

    /**
     * Range: 0..9 (0..9 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcfront_homelink_region_code;

    /**
     * Range: -63..62 (-10..40 C)
     * Scale: 0.4
     * Offset: 15.2
     */
    int8_t vcfront_subcool_actual;

    /**
     * Range: 0..126.25 (0..10100 W)
     * Scale: 80
     * Offset: 0
     */
    uint8_t vcfront_cc_qdot_fd_frwrd_target;

    /**
     * Range: -127..127 (-60..194 C)
     * Scale: 1
     * Offset: 67
     */
    int8_t vcfront_hcml_low_beam_spot_temp;

    /**
     * Range: -127..127 (-60..194 C)
     * Scale: 1
     * Offset: 67
     */
    int8_t vcfront_hcmr_low_beam_spot_temp;

    /**
     * Range: 0..100 (10..20 bar)
     * Scale: 0.1
     * Offset: 10
     */
    uint8_t vcfront_condenser_pressure_limit;

    /**
     * Range: 0..1000 (375..1375 ticks)
     * Scale: 1
     * Offset: 375
     */
    uint16_t vcfront_five_way_valve_count_range;

    /**
     * Range: 0..29 (0..29 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcfront_mode_transition_id;

    /**
     * Range: 0..92 (0..11.5 bar)
     * Scale: 0.125
     * Offset: 0
     */
    uint8_t vcfront_est_pressure_suct;

    /**
     * Range: 0..31 (0..31 C)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcfront_hp_subcool_target;

    /**
     * Range: 0..500 (750..1250 ticks)
     * Scale: 1
     * Offset: 750
     */
    uint16_t vcfront_evap_exv_range;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcfront_mode_desired;

    /**
     * Range: 0..1023 (0..1023 Steps)
     * Scale: 1
     * Offset: 0
     */
    uint16_t vcfront_calibrated_position_hcmr;

    /**
     * Range: -62.5..62.5 (-5000..5000 W)
     * Scale: 80
     * Offset: 0
     */
    int8_t vcfront_cc_qdot_fdbk;

    /**
     * Range: -16..15 (-10..21 C)
     * Scale: 1
     * Offset: 6
     */
    int8_t vcfront_cmp_discharge_superheat;

    /**
     * Range: -127..127 (-60..194 C)
     * Scale: 1
     * Offset: 67
     */
    int8_t vcfront_hcml_high_beam_temp;

    /**
     * Range: -127..127 (-60..194 C)
     * Scale: 1
     * Offset: 67
     */
    int8_t vcfront_hcmr_high_beam_temp;

    /**
     * Range: 0..100 (0..100 %)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcfront_fan_demand_condenser;

    /**
     * Range: 0..160 (-40..120 C)
     * Scale: 1
     * Offset: -40
     */
    uint8_t vcfront_target_pt_active_cool;

    /**
     * Range: 0..127 (0..25.4 bar)
     * Scale: 0.2
     * Offset: 0
     */
    uint8_t vcfront_est_pressure_disch;

    /**
     * Range: 0..1016 (-127..127 degrees)
     * Scale: 0.25
     * Offset: -127
     */
    uint16_t vcfront_five_way_valve_angle_drift;

    /**
     * Range: 0..60 (0..6 -)
     * Scale: 0.1
     * Offset: 0
     */
    uint8_t vcfront_hp_cop;

    /**
     * Range: 0..500 (750..1250 ticks)
     * Scale: 1
     * Offset: 750
     */
    uint16_t vcfront_recirc_exv_range;

    /**
     * Range: 0..126.25 (0..10100 W)
     * Scale: 80
     * Offset: 0
     */
    uint8_t vcfront_cc_qdot_actual;

    /**
     * Range: -127..127 (-60..194 C)
     * Scale: 1
     * Offset: 67
     */
    int8_t vcfront_hcml_turn_temp;

    /**
     * Range: -127..127 (-60..194 C)
     * Scale: 1
     * Offset: 67
     */
    int8_t vcfront_hcmr_turn_temp;

    /**
     * Range: 0..1023 (0..1023 Steps)
     * Scale: 1
     * Offset: 0
     */
    uint16_t vcfront_current_position_hcml;

    /**
     * Range: 0..100 (0..100 %)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcfront_fan_demand_radiator;

    /**
     * Range: 0..160 (-40..120 C)
     * Scale: 1
     * Offset: -40
     */
    uint8_t vcfront_target_pt_passive;

    /**
     * Range: -128.5..126.5 (-34..170 C)
     * Scale: 0.8
     * Offset: 68.8
     */
    int8_t vcfront_est_temp_liq;

    /**
     * Range: 0..120 (-40..80 C)
     * Scale: 1
     * Offset: -40
     */
    uint8_t vcfront_hp_batt_stag_target;

    /**
     * Range: 0..500 (750..1250 ticks)
     * Scale: 1
     * Offset: 750
     */
    uint16_t vcfront_lcc_exv_range;

    /**
     * Range: -127..127 (-60..194 C)
     * Scale: 1
     * Offset: 67
     */
    int8_t vcfront_hcml_blade_temp;

    /**
     * Range: -127..127 (-60..194 C)
     * Scale: 1
     * Offset: 67
     */
    int8_t vcfront_hcmr_blade_temp;

    /**
     * Range: 0..126.25 (0..10100 W)
     * Scale: 80
     * Offset: 0
     */
    uint8_t vcfront_evap_fd_frwrd_target;

    /**
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t vcfront_five_way_valve_recal_count;

    /**
     * Range: 0..100 (0..100 C)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcfront_target_bat_active_cool;

    /**
     * Range: 0..250 (-40..85 C)
     * Scale: 0.5
     * Offset: -40
     */
    uint8_t vcfront_temp_refrig_suction;

    /**
     * Range: -32..31 (-30..33 C)
     * Scale: 1
     * Offset: 2
     */
    int8_t vcfront_est_temp_suct;

    /**
     * Range: 0..126.6666666666666666666666667 (0..19000 Wh)
     * Scale: 150
     * Offset: 0
     */
    uint8_t vcfront_comp_energy_during_drive;

    /**
     * Range: 0..1023 (0..1023 Steps)
     * Scale: 1
     * Offset: 0
     */
    uint16_t vcfront_current_position_hcmr;

    /**
     * Range: -128.5..126.5 (-34..170 C)
     * Scale: 0.8
     * Offset: 68.8
     */
    int8_t vcfront_est_temp_disch;

    /**
     * Range: -127..127 (-60..194 C)
     * Scale: 1
     * Offset: 67
     */
    int8_t vcfront_hcml_diffuse_temp;

    /**
     * Range: -127..127 (-60..194 C)
     * Scale: 1
     * Offset: 67
     */
    int8_t vcfront_hcmr_diffuse_temp;

    /**
     * Range: 0..500 (750..1250 ticks)
     * Scale: 1
     * Offset: 750
     */
    uint16_t vcfront_cc_left_exv_range;

    /**
     * Range: -62.5..62.5 (-5000..5000 W)
     * Scale: 80
     * Offset: 0
     */
    int8_t vcfront_evap_fdbk;

    /**
     * Range: 0..190 (-40..150 C)
     * Scale: 1
     * Offset: -40
     */
    uint8_t vcfront_pump_battery_fet_temp;

    /**
     * Range: 0..100 (-20..80 C)
     * Scale: 1
     * Offset: -20
     */
    uint8_t vcfront_target_bat_passive;

    /**
     * Range: 0..126.6666666666666666666666667 (0..19000 Wh)
     * Scale: 150
     * Offset: 0
     */
    uint8_t vcfront_cabin_heat_energy_during_drive;

    /**
     * Range: 0..62 (0..12400 rpm)
     * Scale: 200
     * Offset: 0
     */
    uint8_t vcfront_est_compressor_rpm;

    /**
     * Range: 0..125 (0..10000 W)
     * Scale: 80
     * Offset: 0
     */
    uint8_t vcfront_di_qdot_a;

    /**
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcfront_five_way_valve_windup_est_l;

    /**
     * Range: 0..126.6666666666666666666666667 (0..19000 Wh)
     * Scale: 150
     * Offset: 0
     */
    uint8_t vcfront_low_side_lift_energy_drive;

    /**
     * Range: 0..190 (-40..150 C)
     * Scale: 1
     * Offset: -40
     */
    uint8_t vcfront_pump_powertrain_fet_temp;

    /**
     * Range: 0..100 (-40..60 C)
     * Scale: 1
     * Offset: -40
     */
    uint8_t vcfront_target_bat_active_heat;

    /**
     * Range: 0..500 (750..1250 ticks)
     * Scale: 1
     * Offset: 750
     */
    uint16_t vcfront_cc_right_exv_range;

    /**
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcfront_five_way_valve_windup_est_r;

    /**
     * Range: 0..126.6666666666666666666666667 (0..7600 W)
     * Scale: 60
     * Offset: 0
     */
    uint8_t vcfront_est_q_lift;

    /**
     * Range: 0..500 (0..5 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t vcfront_coolant_level_voltage;

    /**
     * Range: 0..125 (0..10000 W)
     * Scale: 80
     * Offset: 0
     */
    uint8_t vcfront_evap_qdot_actual;

    /**
     * Range: 0..126.6666666666666666666666667 (0..7600 W)
     * Scale: 60
     * Offset: 0
     */
    uint8_t vcfront_low_side_watts_lift;

    /**
     * Range: 0..100 (0..100 %)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcfront_five_way_valve_rad_bypass;

    /**
     * Range: 0..190 (-40..150 C)
     * Scale: 1
     * Offset: -40
     */
    uint8_t vcfront_radiator_fan_fet_temp;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcfront_cycle_model_converged;

    /**
     * Range: 0..2 (0..2 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcfront_passive_cooling_state;
};

/**
 * Signals in message ID318SystemTimeUTC.
 *
 * All signal values are as on the CAN bus.
 */
struct model3_can_id318_system_time_utc_t {
    /**
     * Year
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t ut_cyear318;

    /**
     * Month
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t ut_cmonth318;

    /**
     * Seconds
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t ut_cseconds318;

    /**
     * Hour
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t ut_chour318;

    /**
     * Day
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t ut_cday318;

    /**
     * Minute
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t ut_cminutes318;
};

/**
 * Signals in message ID528UnixTime.
 *
 * All signal values are as on the CAN bus.
 */
struct model3_can_id528_unix_time_t {
    /**
     * Range: 0..4294967295 (0..4294967295 sec)
     * Scale: 1
     * Offset: 0
     */
    uint32_t unix_time_seconds528;
};

/**
 * Signals in message ID229GearLever.
 *
 * All signal values are as on the CAN bus.
 */
struct model3_can_id229_gear_lever_t {
    /**
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t gear_lever_position229;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t gear_lever_button229;
};

/**
 * Signals in message ID249LeftStalk.
 *
 * All signal values are as on the CAN bus.
 */
struct model3_can_id249_left_stalk_t {
    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t left_stalk_f_rpos249;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t left_stalk_button249;

    /**
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t left_stalk_u_dpos249;
};

/**
 * Signals in message ID628UDSPCStoMCU.
 *
 * All signal values are as on the CAN bus.
 */
struct model3_can_id628_udspc_sto_mcu_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Signals in message ID628UDSMCUtoPCS.
 *
 * All signal values are as on the CAN bus.
 */
struct model3_can_id628_udsmc_uto_pcs_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Signals in message ID186FrontDriveTorqueRPM.
 *
 * All signal values are as on the CAN bus.
 */
struct model3_can_id186_front_drive_torque_rpm_t {
    /**
     * Front Axle Torque Request
     *
     * Range: -4096..4095 (-8192..8190 NM)
     * Scale: 2
     * Offset: 0
     */
    int16_t front_torque_request186;

    /**
     * Front Axle Torque
     *
     * Range: -4096..4095 (-8192..8190 NM)
     * Scale: 2
     * Offset: 0
     */
    int16_t front_torque_actual186;

    /**
     * Front Axle Speed
     *
     * Range: -32768..32767 (-3276.8..3276.7 RPM)
     * Scale: 0.1
     * Offset: 0
     */
    int16_t front_axle_rpm186;
};

/**
 * Signals in message ID396FrontOilPump.
 *
 * swapped with 395 in old firmware
 *
 * All signal values are as on the CAN bus.
 */
struct model3_can_id396_front_oil_pump_t {
    /**
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t front_oil_pump_state396;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t front_oil_pump_oil_temp_est_confident39;

    /**
     * Range: 0..15 (0..28.125 deg)
     * Scale: 1.875
     * Offset: 0
     */
    uint8_t front_oil_pump_lead_angle396;

    /**
     * Range: 0..250 (0..100 %)
     * Scale: 0.4
     * Offset: 0
     */
    uint8_t front_oil_pump_duty_cycle396;

    /**
     * Range: 0..250 (0..15 LPM)
     * Scale: 0.06
     * Offset: 0
     */
    uint8_t front_oil_flow_actual396;

    /**
     * Range: 40..254 (0..214 C)
     * Scale: 1
     * Offset: -40
     */
    uint8_t front_oil_pump_fluid_temp396;

    /**
     * Range: 40..254 (0..214 C)
     * Scale: 1
     * Offset: -40
     */
    uint8_t front_oil_pump_oil_temp_est396;

    /**
     * Range: 0..250 (0..500 kPa)
     * Scale: 2
     * Offset: 0
     */
    uint8_t front_oil_pump_pressure_estimate396;

    /**
     * Range: 0..250 (0..500 kPa)
     * Scale: 2
     * Offset: 0
     */
    uint8_t front_oil_pump_pressure_expected396;

    /**
     * Range: 0..254 (0..25.4 A)
     * Scale: 0.1
     * Offset: 0
     */
    uint8_t front_oil_pump_phase_current396;
};

/**
 * Signals in message ID395RearOilPump.
 *
 * swapped with 396 in old firmware
 *
 * All signal values are as on the CAN bus.
 */
struct model3_can_id395_rear_oil_pump_t {
    /**
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t rear_oil_pump_state395;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t rear_oil_pump_oil_temp_est_confident395;

    /**
     * Range: 0..15 (0..28.125 deg)
     * Scale: 1.875
     * Offset: 0
     */
    uint8_t rear_oil_pump_lead_angle395;

    /**
     * Range: 0..250 (0..100 %)
     * Scale: 0.4
     * Offset: 0
     */
    uint8_t rear_oil_pump_duty_cycle395;

    /**
     * Range: 0..250 (0..15 LPM)
     * Scale: 0.06
     * Offset: 0
     */
    uint8_t rear_oil_flow_actual395;

    /**
     * Range: 40..254 (0..214 C)
     * Scale: 1
     * Offset: -40
     */
    uint8_t rear_oil_pump_fluid_temp395;

    /**
     * Range: 40..254 (0..214 C)
     * Scale: 1
     * Offset: -40
     */
    uint8_t rear_oil_pump_oil_temp_est395;

    /**
     * Range: 0..250 (0..500 kPa)
     * Scale: 2
     * Offset: 0
     */
    uint8_t rear_oil_pump_pressure_estimate395;

    /**
     * Range: 0..250 (0..500 kPa)
     * Scale: 2
     * Offset: 0
     */
    uint8_t rear_oil_pump_pressure_expected395;

    /**
     * Range: 0..254 (0..25.4 A)
     * Scale: 0.1
     * Offset: 0
     */
    uint8_t rear_oil_pump_phase_current395;
};

/**
 * Signals in message ID1D8RearTorque.
 *
 * All signal values are as on the CAN bus.
 */
struct model3_can_id1_d8_rear_torque_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t torque_flags1_d8;

    /**
     * Rear Motor Torque Request
     *
     * Range: -16384..16383 (-1638.4..1638.3 NM)
     * Scale: 0.1
     * Offset: 0
     */
    int16_t rear_torque_request1_d8;

    /**
     * Rear Motor Torque
     *
     * Range: -4096..4095 (-1024..1023.75 NM)
     * Scale: 0.25
     * Offset: 0
     */
    int16_t rear_torque1_d8;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t counter1_d8;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t checksum1_d8;
};

/**
 * Signals in message ID155WheelAngles.
 *
 * All signal values are as on the CAN bus.
 */
struct model3_can_id155_wheel_angles_t {
    /**
     * Range: 0..255 (0..358.59375 deg)
     * Scale: 1.40625
     * Offset: 0
     */
    uint8_t wheel_angle_tics_fl155;

    /**
     * Range: 0..255 (0..358.59375 deg)
     * Scale: 1.40625
     * Offset: 0
     */
    uint8_t wheel_angle_tics_fr155;

    /**
     * Range: 0..255 (0..358.59375 deg)
     * Scale: 1.40625
     * Offset: 0
     */
    uint8_t wheel_angle_tics_rl155;

    /**
     * Range: 0..255 (0..358.59375 deg)
     * Scale: 1.40625
     * Offset: 0
     */
    uint8_t wheel_angle_tics_rr155;
};

/**
 * Signals in message ID175WheelSpeed.
 *
 * All signal values are as on the CAN bus.
 */
struct model3_can_id175_wheel_speed_t {
    /**
     * Range: 0..8191 (0..327.64 rpm)
     * Scale: 0.04
     * Offset: 0
     */
    uint16_t wheel_speed_fl175;

    /**
     * Range: 0..8191 (0..327.64 rpm)
     * Scale: 0.04
     * Offset: 0
     */
    uint16_t wheel_speed_fr175;

    /**
     * Range: 0..8191 (0..327.64 rpm)
     * Scale: 0.04
     * Offset: 0
     */
    uint16_t wheel_speed_rl175;

    /**
     * Range: 0..8191 (0..327.64 rpm)
     * Scale: 0.04
     * Offset: 0
     */
    uint16_t wheel_speed_rr175;
};

/**
 * Signals in message ID1D4FrontTorqueOld.
 *
 * All signal values are as on the CAN bus.
 */
struct model3_can_id1_d4_front_torque_old_t {
    /**
     * Front Torque Old, Axle torque 2 with 9/1 gearing
     *
     * Range: -2048..2047 (-512..511.75 NM)
     * Scale: 0.25
     * Offset: 0
     */
    int16_t raw_torque_front1_d4;
};

/**
 * Signals in message ID1D5FrontTorque.
 *
 * All signal values are as on the CAN bus.
 */
struct model3_can_id1_d5_front_torque_t {
    /**
     * Front Motor Torque Request
     *
     * Range: -16384..16383 (-1638.4..1638.3 NM)
     * Scale: 0.1
     * Offset: 0
     */
    int16_t front_torque_request1_d5;

    /**
     * Front Motor Torque
     *
     * Range: -4096..4095 (-1024..1023.75 NM)
     * Scale: 0.25
     * Offset: 0
     */
    int16_t front_torque1_d5;
};

/**
 * Signals in message ID2E5FrontInverterPower.
 *
 * All signal values are as on the CAN bus.
 */
struct model3_can_id2_e5_front_inverter_power_t {
    /**
     * Front Motor Power
     *
     * Range: -1024..1023 (-512..511.5 kW)
     * Scale: 0.5
     * Offset: 0
     */
    int16_t front_power2_e5;

    /**
     * Range: 0..255 (0..20.4 kW)
     * Scale: 0.08
     * Offset: 0
     */
    uint8_t front_heat_power_optimal2_e5;

    /**
     * Range: 0..255 (0..20.4 kW)
     * Scale: 0.08
     * Offset: 0
     */
    uint8_t front_heat_power_max2_e5;

    /**
     * Rear Waste Heat Power
     *
     * Range: 0..255 (0..20.4 kW)
     * Scale: 0.08
     * Offset: 0
     */
    uint8_t front_heat_power2_e5;

    /**
     * Range: 0..250 (0..20 kW)
     * Scale: 0.08
     * Offset: 0
     */
    uint8_t front_excess_heat_cmd;

    /**
     * Front Power Limit, approx offset Orig scale 1
     *
     * Range: 0..400 (0..400 kW)
     * Scale: 1
     * Offset: 0
     */
    uint16_t front_power_limit2_e5;
};

/**
 * Signals in message ID3C2VCLeftswitches.
 *
 * All signal values are as on the CAN bus.
 */
struct model3_can_id3_c2_vc_leftswitches_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t vc_lswitch_status_index3_c2;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t vc_lhorn_switch_pressed3_c2;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t vc_lhazard_button_pressed3_c2;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t vc_lswc_left_tilt_right3_c2;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t vc_ldriver_present3_c2;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t vc_lright_mirror_tilt3_c2;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t vc_lswc_left_pressed3_c2;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t vc_lfront_seat_track_back3_c2;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t vc_lswc_right_tilt_left3_c2;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t vc_lfront_seat_track_forward3_c2;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t vc_lswc_right_tilt_right3_c2;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t vc_lfront_seat_tilt_down3_c2;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t vc_lswc_right_pressed3_c2;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t vc_lfront_seat_tilt_up3_c2;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t vc_lswc_left_tilt_left3_c2;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t vc_lfront_seat_lift_down3_c2;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    int8_t vc_lswc_left_scroll_ticks3_c2;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t vc_lfront_seat_lift_up3_c2;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t vc_lfront_seat_backrest_back3_c2;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t vc_lfront_seat_backrest_forward3_c2;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t vc_lfront_seat_lumbar_down3_c2;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    int8_t vc_lswc_right_scroll_ticks3_c2;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t vc_lfront_seat_lumbar_up3_c2;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t vc_lfront_seat_lumbar_in3_c2;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t vc_lfront_seat_lumbar_out3_c2;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t vc_lbtn_window_sw_pack_up_lf3_c2;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t vc_lbtn_window_up_lr3_c2;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t vc_lbtn_window_sw_pack_auto_up_lf3_c2;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t vc_lbtn_window_auto_up_lr3_c2;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t vc_lbtn_window_sw_pack_down_lf3_c2;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t vc_lbtn_window_down_lr3_c2;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t vc_lbtn_window_sw_pack_auto_down_lf3_c2;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t vc_lbtn_window_auto_down_lr3_c2;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t vc_lbtn_window_sw_pack_up_lr3_c2;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t vc_lbtn_window_sw_pack_auto_up_lr3_c2;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t vc_lbtn_window_sw_pack_down_lr3_c2;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t vc_lbtn_window_sw_pack_auto_down_lr3_c2;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t vc_lbtn_window_sw_pack_up_rf3_c2;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t vc_lbtn_window_sw_pack_auto_up_rf3_c2;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t vc_lbtn_window_sw_pack_down_rf3_c2;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t vc_lbtn_window_sw_pack_auto_down_rf3_c2;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t vc_lbtn_window_sw_pack_up_rr3_c2;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t vc_lbtn_window_sw_pack_auto_up_rr3_c2;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t vc_lbtn_window_sw_pack_down_rr3_c2;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t vc_lbtn_window_sw_pack_auto_down_rr3_c2;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t vc_lfront_buckle_switch3_c2;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t vc_lfront_occupancy_switch3_c2;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t vc_lrear_left_buckle_switch3_c2;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t vc_lrear_center_occupancy_switch3_c2;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t vc_lrear_left_occupancy_switch3_c2;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t vc_lrear_right_occupancy_switch3_c2;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t vc_lbrake_pressed3_c2;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t vc_lrear_hvac_button_pressed3_c2;
};

/**
 * Signals in message ID336MaxPowerRating.
 *
 * All signal values are as on the CAN bus.
 */
struct model3_can_id336_max_power_rating_t {
    /**
     * Power Rating
     *
     * Range: 0..600 (0..600 kW)
     * Scale: 1
     * Offset: 0
     */
    uint16_t drive_power_rating336;

    /**
     * Regen Rating
     *
     * Range: 0..255 (-100..155 kW)
     * Scale: 1
     * Offset: -100
     */
    uint8_t drive_regen_rating336;
};

/**
 * Signals in message ID293UI_chassisControl.
 *
 * All signal values are as on the CAN bus.
 */
struct model3_can_id293_ui_chassis_control_t {
    /**
     * Range: 0..2 (0..2 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ui_steering_tune_request;

    /**
     * Range: 0..5 (0..5 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ui_traction_control_mode;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ui_park_brake_request;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ui_narrow_garages;

    /**
     * Range: 0..2 (0..2 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ui_winch_mode_request;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ui_zero_speed_confirmed;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ui_trailer_mode;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ui_distance_units;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ui_das_debug_enable;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ui_acc_overtake_enable;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ui_aeb_enable;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ui_aes_enable;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ui_ahlb_enable;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ui_auto_lane_change_enable;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ui_reboot_autopilot;

    /**
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ui_auto_park_request;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ui_bsd_enable;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ui_fcw_enable;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ui_fcw_sensitivity;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ui_lat_control_enable;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ui_ldw_enable;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ui_pedal_safety_enable;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ui_red_light_stop_sign_enable;

    /**
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ui_self_park_tune;

    /**
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ui_chassis_control_counter;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ui_chassis_control_checksum;
};

/**
 * Signals in message ID268SystemPower.
 *
 * All signal values are as on the CAN bus.
 */
struct model3_can_id268_system_power_t {
    /**
     * System Max Waste Heat Power
     *
     * Range: 0..398437.5 (0..31875 kW)
     * Scale: 0.08
     * Offset: 0
     */
    uint8_t system_heat_power_max268;

    /**
     * System Waste Heat Power
     *
     * Range: 0..398437.5 (0..31875 kW)
     * Scale: 0.08
     * Offset: 0
     */
    uint8_t system_heat_power268;

    /**
     * Max Drive Power
     *
     * Range: 0..511 (0..511 kW)
     * Scale: 1
     * Offset: 0
     */
    uint16_t system_drive_power_max268;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t di_primary_unit_silicon_type;

    /**
     * Max Regen Power
     *
     * Range: 0..255 (-100..155 kW)
     * Scale: 1
     * Offset: -100
     */
    uint8_t system_regen_power_max268;
};

/**
 * Signals in message ID04FGPSLatLong.
 *
 * All signal values are as on the CAN bus.
 */
struct model3_can_id04_fgps_lat_long_t {
    /**
     * Lattitude
     *
     * Range: -134217728..134217727 (-134.217728..134.217727 Deg)
     * Scale: 1e-06
     * Offset: 0
     */
    int32_t gps_lattitude04_f;

    /**
     * Longitude
     *
     * Range: -1342177280..1342177270 (-1342.17728..1342.17727 Deg)
     * Scale: 1e-06
     * Offset: 0
     */
    int32_t gps_longitude04_f;
};

/**
 * Signals in message ID3D2TotalChargeDischarge.
 *
 * All signal values are as on the CAN bus.
 */
struct model3_can_id3_d2_total_charge_discharge_t {
    /**
     * Range: 0..4294967295 (0..4294967.295 kWh)
     * Scale: 0.001
     * Offset: 0
     */
    uint32_t total_discharge_k_wh3_d2;

    /**
     * Range: 0..4294967295 (0..4294967.295 kWh)
     * Scale: 0.001
     * Offset: 0
     */
    uint32_t total_charge_k_wh3_d2;
};

/**
 * Signals in message ID3F2BMSCounters.
 *
 * All signal values are as on the CAN bus.
 */
struct model3_can_id3_f2_bms_counters_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_counters_index3_f2;

    /**
     * Range: 0..4294967295 (0..4294967.295 KWh)
     * Scale: 0.001
     * Offset: 0
     */
    uint32_t bm_stotal_a_ccharge3_f2;

    /**
     * Range: 0..4294967295 (0..4294967.295 KWh)
     * Scale: 0.001
     * Offset: 0
     */
    uint32_t bm_stotal_d_ccharge3_f2;

    /**
     * Range: 0..4294967295 (0..4294967.295 KWh)
     * Scale: 0.001
     * Offset: 0
     */
    uint32_t bm_stotal_regen_charge3_f2;

    /**
     * Range: 0..4294967295 (0..4294967.295 KWh)
     * Scale: 0.001
     * Offset: 0
     */
    uint32_t bm_stotal_drive_discharge3_f2;
};

/**
 * Signals in message ID2D2BMSVAlimits.
 *
 * All signal values are as on the CAN bus.
 */
struct model3_can_id2_d2_bmsv_alimits_t {
    /**
     * BMS Min Voltage
     *
     * Range: 0..65535 (0..655.35 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t min_voltage2_d2;

    /**
     * BMS Max Voltage
     *
     * Range: 0..65535 (0..655.35 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t max_voltage2_d2;

    /**
     * BMS Max Charge Current
     *
     * Range: 0..16383 (0..1638.3 A)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t max_charge_current2_d2;

    /**
     * BMS Max Discharge Current
     *
     * Range: 0..16383 (0..2097.024 A)
     * Scale: 0.128
     * Offset: 0
     */
    uint16_t max_discharge_current2_d2;
};

/**
 * Signals in message ID541FastChargeMaxLimits.
 *
 * All signal values are as on the CAN bus.
 */
struct model3_can_id541_fast_charge_max_limits_t {
    /**
     * Range: 0..8191 (0..509.938896 kW)
     * Scale: 0.062256
     * Offset: 0
     */
    uint16_t fc_max_power_limit541;

    /**
     * Range: 0..8191 (0..599.925222 A)
     * Scale: 0.073242
     * Offset: 0
     */
    uint16_t fc_max_current_limit541;
};

/**
 * Signals in message ID244FastChargeLimits.
 *
 * All signal values are as on the CAN bus.
 */
struct model3_can_id244_fast_charge_limits_t {
    /**
     * Supercharger Max Power
     *
     * Range: 0..8191 (0..509.938896 kW)
     * Scale: 0.062256
     * Offset: 0
     */
    uint16_t fc_power_limit244;

    /**
     * Supercharger Max Current
     *
     * Range: 0..8191 (0..599.925222 A)
     * Scale: 0.073242
     * Offset: 0
     */
    uint16_t fc_current_limit244;

    /**
     * Supercharger Max Voltage
     *
     * Range: 0..8191 (0..599.925222 V)
     * Scale: 0.073242
     * Offset: 0
     */
    uint16_t fc_max_vlimit244;

    /**
     * Supercharger Min Voltage
     *
     * Range: 0..8191 (0..599.925222 V)
     * Scale: 0.073242
     * Offset: 0
     */
    uint16_t fc_min_vlimit244;
};

/**
 * Signals in message ID214FastChargeVA.
 *
 * All signal values are as on the CAN bus.
 */
struct model3_can_id214_fast_charge_va_t {
    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t f_cprotocol_version214;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t f_cstatus_code214;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t f_ccurrent_limit_achieved214;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t f_cpower_limit_achieved214;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t f_cvoltage_limit_achieved214;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t f_cadapter_locked214;

    /**
     * Range: 0..8191 (0..819.1 A)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t f_cmin_current_limit214;

    /**
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t f_ctype214;

    /**
     * Range: -8192..8191 (-600.0001024..599.9268602 A)
     * Scale: 0.0732422
     * Offset: 0
     */
    int16_t fc_current214;

    /**
     * Range: 0..3 (0..6 -)
     * Scale: 2
     * Offset: 0
     */
    uint8_t f_cpost_id214;

    /**
     * Range: 0..8191 (0..599.9268602 V)
     * Scale: 0.0732422
     * Offset: 0
     */
    uint16_t fc_voltage214;
};

/**
 * Signals in message ID215FCisolation.
 *
 * All signal values are as on the CAN bus.
 */
struct model3_can_id215_f_cisolation_t {
    /**
     * Range: 0..255 (0..10200 kOhm)
     * Scale: 40
     * Offset: 0
     */
    uint8_t fc_isolation215;
};

/**
 * Signals in message ID217FCinfo.
 *
 * All signal values are as on the CAN bus.
 */
struct model3_can_id217_f_cinfo_t {
    /**
     * Range: 0..127 (0..127 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t f_cinfo_mux217;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t f_cclass217;

    /**
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t f_cbrand217;

    /**
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t f_ccooling_type217;

    /**
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t f_cui_stop_type217;
};

/**
 * Signals in message ID321VCFRONT_sensors.
 *
 * All signal values are as on the CAN bus.
 */
struct model3_can_id321_vcfront_sensors_t {
    /**
     * Range: 0..1000 (-40..85 C)
     * Scale: 0.125
     * Offset: -40
     */
    uint16_t vcfront_temp_coolant_bat_inlet;

    /**
     * Range: 0..1920 (-40..200 C)
     * Scale: 0.125
     * Offset: -40
     */
    uint16_t vcfront_temp_coolant_pt_inlet;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcfront_coolant_level;

    /**
     * Range: 0..2 (0..2 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcfront_brake_fluid_level;

    /**
     * Range: 0..240 (-40..80 C)
     * Scale: 0.5
     * Offset: -40
     */
    uint8_t vcfront_temp_ambient;

    /**
     * Range: 0..2 (0..2 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcfront_washer_fluid_level;

    /**
     * Outside Temperature
     *
     * Range: 0..240 (-40..80 C)
     * Scale: 0.5
     * Offset: -40
     */
    uint8_t vcfront_temp_ambient_filtered;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcfront_batt_sensor_irrational;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcfront_pt_sensor_irrational;
};

/**
 * Signals in message ID301VCFRONT_info.
 *
 * All signal values are as on the CAN bus.
 */
struct model3_can_id301_vcfront_info_t {
    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcfront_info_index;

    /**
     * Range: 0..4294967295 (0..4294967295 -)
     * Scale: 1
     * Offset: 0
     */
    uint32_t vcfront_info_app_crc;

    /**
     * Range: 0..72057594037927900 (0..7.20575940379279E+16 -)
     * Scale: 1
     * Offset: 0
     */
    uint64_t vcfront_info_app_git_hash;

    /**
     * Range: 0..72057594037927900 (0..7.20575940379279E+16 -)
     * Scale: 1
     * Offset: 0
     */
    uint64_t vcfront_info_boot_git_hash;

    /**
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t vcfront_info_boot_uds_proto_version;

    /**
     * Range: 0..4 (0..4 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcfront_info_build_type;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcfront_info_pcba_id;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcfront_info_platform_type;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcfront_info_assembly_id;

    /**
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t vcfront_info_build_config_id;

    /**
     * Range: 0..4294967295 (0..4294967295 -)
     * Scale: 1
     * Offset: 0
     */
    uint32_t vcfront_info_boot_crc;

    /**
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t vcfront_info_usage_id;

    /**
     * Range: 0..4294967295 (0..4294967295 -)
     * Scale: 1
     * Offset: 0
     */
    uint32_t vcfront_hcml_app_crc;

    /**
     * Range: 0..4294967295 (0..4294967295 -)
     * Scale: 1
     * Offset: 0
     */
    uint32_t vcfront_hcmr_app_crc;

    /**
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t vcfront_info_hardware_id;

    /**
     * Range: 0..4294967295 (0..4294967295 -)
     * Scale: 1
     * Offset: 0
     */
    uint32_t vcfront_info_subcomponent3;

    /**
     * Range: 0..4294967295 (0..4294967295 -)
     * Scale: 1
     * Offset: 0
     */
    uint32_t vcfront_info_subcomponent4;

    /**
     * Range: 0..4294967295 (0..4294967295 -)
     * Scale: 1
     * Offset: 0
     */
    uint32_t vcfront_info_subcomponent5;

    /**
     * Range: 0..4294967295 (0..4294967295 -)
     * Scale: 1
     * Offset: 0
     */
    uint32_t vcfront_info_subcomponent6;

    /**
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t vcfront_info_sub_usage_id;

    /**
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t vcfront_info_component_id;
};

/**
 * Signals in message ID201VCFRONT_loggingAndVitals10Hz.
 *
 * All signal values are as on the CAN bus.
 */
struct model3_can_id201_vcfront_logging_and_vitals10_hz_t {
    /**
     * Range: 0..5 (0..5 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcfront_logging_and_vitals10_hz_index;

    /**
     * Range: 0..1000 (0..100 %)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t vcfront_exv_flow_chiller;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcfront_hp_high_side_hx;

    /**
     * Range: 0..1000 (0..10000 rpm)
     * Scale: 10
     * Offset: 0
     */
    uint16_t vcfront_pump_battery_rpm_actual;

    /**
     * Range: 0..1520 (-40..150 C)
     * Scale: 0.125
     * Offset: -40
     */
    uint16_t vcfront_temp_refrig_discharge;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcfront_hp_low_side_hx;

    /**
     * Range: 0..100 (0..100 %)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcfront_active_louver_open_pos_targ;

    /**
     * Range: 0..6 (0..6 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcfront_hp_dominant_load;

    /**
     * Range: 0..2 (0..2 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcfront_hp_blend_type;

    /**
     * Range: 0..1000 (0..100 %)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t vcfront_exv_flow_lcc;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcfront_hp_quiet_mode_enabled;

    /**
     * Range: 0..1000 (0..10000 rpm)
     * Scale: 10
     * Offset: 0
     */
    uint16_t vcfront_pump_powertrain_rpm_actual;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcfront_hp_cabin_load_type;

    /**
     * Range: 0..100 (0..100 %)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcfront_active_louver_open_pos;

    /**
     * Range: 0..100 (0..100 %)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcfront_fan_demand;

    /**
     * Range: 0..2 (0..2 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcfront_hp_battery_load_type;

    /**
     * Range: 0..4 (0..4 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcfront_hp_req_coolant_mode;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcfront_compressor_state;

    /**
     * Range: 0..1000 (0..100 %)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t vcfront_exv_flow_cc_left;

    /**
     * Range: 0..1000 (0..10000 rpm)
     * Scale: 10
     * Offset: 0
     */
    uint16_t vcfront_radiator_fan_rpm_actual;

    /**
     * Range: 0..1520 (-40..150 C)
     * Scale: 0.125
     * Offset: -40
     */
    uint16_t vcfront_temp_refrig_liquid;

    /**
     * Range: 0..100 (0..100 %)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcfront_comp_demand_evap;

    /**
     * Range: 0..5 (0..5 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcfront_exv_state;

    /**
     * Range: 0..1000 (0..100 %)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t vcfront_exv_flow_cc_right;

    /**
     * Range: 0..1000 (-20..80 C)
     * Scale: 0.1
     * Offset: -20
     */
    uint16_t vcfront_temp_superheat_actual;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcfront_solenoid_evap_state;

    /**
     * Range: 0..100 (0..100 %)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcfront_comp_demand_chiller;

    /**
     * Range: 0..254 (0..31.75 bar)
     * Scale: 0.125
     * Offset: 0
     */
    uint8_t vcfront_pressure_refrig_liquid;

    /**
     * Range: 0..1000 (0..100 %)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t vcfront_exv_flow_evap;

    /**
     * Range: 0..600 (0..60 C)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t vcfront_temp_superheat_target;

    /**
     * Range: 0..92 (0..11.5 bar)
     * Scale: 0.125
     * Offset: 0
     */
    uint8_t vcfront_pressure_refrig_suction_vitals;

    /**
     * Range: 0..254 (0..31.75 bar)
     * Scale: 0.125
     * Offset: 0
     */
    uint8_t vcfront_pressure_refrig_discharge_vitals;

    /**
     * Range: 0..1000 (0..100 %)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t vcfront_exv_flow_recirc;

    /**
     * Range: 0..1000 (0..100 %)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t vcfront_exv_flow_target;

    /**
     * Five Way Valve Mode
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcfront_five_way_valve_mode;
};

/**
 * Signals in message ID3D8Elevation.
 *
 * All signal values are as on the CAN bus.
 */
struct model3_can_id3_d8_elevation_t {
    /**
     * Elevation
     *
     * Range: -32768..32767 (-32768..32767 M)
     * Scale: 1
     * Offset: 0
     */
    int16_t elevation3_d8;
};

/**
 * Signals in message ID261_12vBattStatus.
 *
 * All signal values are as on the CAN bus.
 */
struct model3_can_id261_12v_batt_status_t {
    /**
     * 12V Battery Voltage
     *
     * Range: 0..4095 (0..22.29185362131 V)
     * Scale: 0.005443676098
     * Offset: 0
     */
    uint16_t v12v_batt_voltage261;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcfront_is12_v_battery_supported;

    /**
     * 12V Battery Temp
     *
     * Range: -32768..32767 (-327.68..327.67 C)
     * Scale: 0.01
     * Offset: 0
     */
    int16_t v12v_batt_temp261;

    /**
     * Range: -8192..8191 (-81.92..81.91 AH)
     * Scale: 0.01
     * Offset: 0
     */
    int16_t v12v_batt_ah261;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcfront_good12_vfor_update;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcfront_lv_load_request;

    /**
     * 12V Battery Current
     *
     * Range: -32768..32767 (-163.84..163.835 A)
     * Scale: 0.005
     * Offset: 0
     */
    int16_t v12v_batt_current261;
};

/**
 * Signals in message ID129SteeringAngle.
 *
 * All signal values are as on the CAN bus.
 */
struct model3_can_id129_steering_angle_t {
    /**
     * Steering Angle
     *
     * Range: 0..16383 (-819.2..819.1 Deg)
     * Scale: 0.1
     * Offset: -819.2
     */
    uint16_t steering_angle129;

    /**
     * Steering Speed
     *
     * Range: 0..16383 (-4096..4095.5 D/S)
     * Scale: 0.5
     * Offset: -4096
     */
    uint16_t steering_speed129;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t steering_sensor_a129;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t steering_sensor_b129;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t steering_sensor_c129;
};

/**
 * Signals in message ID264ChargeLineStatus.
 *
 * All signal values are as on the CAN bus.
 */
struct model3_can_id264_charge_line_status_t {
    /**
     * Charger Line Voltage
     *
     * Range: 0..16383 (0..545.5539 V)
     * Scale: 0.0333
     * Offset: 0
     */
    uint16_t charge_line_voltage264;

    /**
     * Charger Line Current
     *
     * Range: 0..511 (0..51.1 A)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t charge_line_current264;

    /**
     * Charger Line Power
     *
     * Range: 0..255 (0..25.5 kW)
     * Scale: 0.1
     * Offset: 0
     */
    uint8_t charge_line_power264;

    /**
     * Charge Connector Current Limit
     *
     * Range: 0..1023 (0..102.3 A)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t charge_line_current_limit264;
};

/**
 * Signals in message ID224PCSDCDCstatus.
 *
 * All signal values are as on the CAN bus.
 */
struct model3_can_id224_pcsdcd_cstatus_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t dcdc_precharge_status224;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t dcdc12_v_support_status224;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t dcdc_hv_bus_discharge_status224;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t dcd_cstate224;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t dcdc_sub_state224;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t dcdc_faulted224;

    /**
     * DCDC Output Current
     *
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t dcd_coutput_current224;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t dcdc_output_is_limited224;

    /**
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t dcd_coutput_current_max224;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t dcdc_precharge_rty_cnt224;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t dcdc12_v_support_rty_cnt224;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t dcdc_discharge_rty_cnt224;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t dcdc_pwm_enable_line224;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t dcdc_supporting_fixed_lv_target224;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t pcs_ecu_log_upload_request224;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t dcdc_precharge_restart_cnt224;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t dcdc_initial_precharge_sub_state224;
};

/**
 * Signals in message ID118DriveSystemStatus.
 *
 * All signal values are as on the CAN bus.
 */
struct model3_can_id118_drive_system_status_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t drive_system_status_checksum118;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t drive_system_status_counter118;

    /**
     * Drive State, Verify charge heat and fault
     *
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t drive_state118;

    /**
     * Brake Pedal
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t brake_pedal118;

    /**
     * Gear
     *
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t d_igear118;

    /**
     * Regen Brake
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t brake_state118;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t immobilizer_state118;

    /**
     * Pedal Position
     *
     * Range: 0..250 (0..100 %)
     * Scale: 0.4
     * Offset: 0
     */
    uint8_t pedal_position118;

    /**
     * Traction Control Mode
     *
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t traction_control118;

    /**
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t parking_brake118;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t proximity118;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t keep_alive_req118;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t track_mode118;
};

/**
 * Signals in message ID352BMSenergy.
 *
 * All signal values are as on the CAN bus.
 */
struct model3_can_id352_bm_senergy_t {
    /**
     * Batt Full kWh
     *
     * Range: 0..1023 (0..102.3 kWh)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t bfull_k_wh_nom352;

    /**
     * Batt Remaining kWh
     *
     * Range: 0..1023 (0..102.3 kWh)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t bremaining_k_wh_nom352;

    /**
     * Range: 0..1023 (0..102.3 kWh)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t bexpectedremain_k_wh352;

    /**
     * Range: 0..1023 (0..102.3 kWh)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t bidealremain_k_wh352;

    /**
     * Charge Remaining kWh
     *
     * Range: 0..1023 (0..102.3 kWh)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t btochargecomplete_k_wh352;

    /**
     * Battery Buffer kWh
     *
     * Range: 0..255 (0..25.5 kWh)
     * Scale: 0.1
     * Offset: 0
     */
    uint8_t bbuffer_k_wh352;

    /**
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_energy_counter;

    /**
     * Charge Complete
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_full_charge_complete;
};

/**
 * Signals in message ID252BMS_powerAvailable.
 *
 * All signal values are as on the CAN bus.
 */
struct model3_can_id252_bms_power_available_t {
    /**
     * BMS Max Regen Power
     *
     * Range: 0..65535 (0..655.35 kW)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_max_regen_power;

    /**
     * BMS Max Discharge Power
     *
     * Range: 0..65535 (0..655.35 kW)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_max_discharge_power;

    /**
     * BMS Max Waste Heat Power
     *
     * Range: 0..1023 (0..10.23 kW)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t bms_max_stationary_heat_power;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_power_limits_state;

    /**
     * BMS Max HVAC Power
     *
     * Range: 0..1023 (0..20.46 kW)
     * Scale: 0.02
     * Offset: 0
     */
    uint16_t bms_hvac_power_budget;
};

/**
 * Signals in message ID312BMSthermal.
 *
 * All signal values are as on the CAN bus.
 */
struct model3_can_id312_bm_sthermal_t {
    /**
     * Battery Dissipation
     *
     * Range: 0..1000 (0..20 kW)
     * Scale: 0.02
     * Offset: 0
     */
    uint16_t bm_sdissipation312;

    /**
     * Range: 0..100 (0..30 LPM)
     * Scale: 0.3
     * Offset: 0
     */
    uint8_t bm_sflow_request312;

    /**
     * Battery Cool Target
     *
     * Range: 0..500 (-25..100 C)
     * Scale: 0.25
     * Offset: -25
     */
    uint16_t bm_sinlet_active_cool_target312;

    /**
     * Range: 0..500 (-25..100 C)
     * Scale: 0.25
     * Offset: -25
     */
    uint16_t bm_sinlet_passive_target312;

    /**
     * Battery Heat Target
     *
     * Range: 0..500 (-25..100 C)
     * Scale: 0.25
     * Offset: -25
     */
    uint16_t bm_sinlet_active_heat_target312;

    /**
     * Min Battery Temp 2
     *
     * Range: 0..500 (-25..100 C)
     * Scale: 0.25
     * Offset: -25
     */
    uint16_t bm_smin_pack_temperature2;

    /**
     * Max Battery Temp
     *
     * Range: 0..500 (-25..100 C)
     * Scale: 0.25
     * Offset: -25
     */
    uint16_t bm_smax_pack_temperature;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bm_spcs_no_flow_request312;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bm_sno_flow_request312;
};

/**
 * Signals in message ID292BMS_SOC.
 *
 * All signal values are as on the CAN bus.
 */
struct model3_can_id292_bms_soc_t {
    /**
     * BMS Min SOC
     *
     * Range: 0..1023 (0..102.3 %)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t so_cmin292;

    /**
     * Range: 0..1023 (0..102.3 %)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t socui292;

    /**
     * BMS Max SOC
     *
     * Range: 0..1023 (0..102.3 %)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t so_cmax292;

    /**
     * BMS Ave SOC
     *
     * Range: 0..1023 (0..102.3 %)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t so_cave292;

    /**
     * HV Battery Original Energy
     *
     * Range: 0..1023 (0..102.3 kWh)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t batt_beginning_of_life_energy292;
};

/**
 * Signals in message ID257UIspeed.
 *
 * All signal values are as on the CAN bus.
 */
struct model3_can_id257_u_ispeed_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t u_ispeed_checksum257;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t u_ispeed_counter257;

    /**
     * Vehicle Speed, .05 -25 for mph
     *
     * Range: 0..4095 (-40..287.6 KPH)
     * Scale: 0.08
     * Offset: -40
     */
    uint16_t u_ispeed_signed257;

    /**
     * UI Speed
     *
     * Range: 0..255 (0..255 MPHKPH)
     * Scale: 1
     * Offset: 0
     */
    uint8_t u_ispeed_abs257;

    /**
     * Speed Units, 0-mph 1-kph
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t u_ispeed_units257;

    /**
     * Range: 0..510 (0..510 MPHKPH)
     * Scale: 1
     * Offset: 0
     */
    uint16_t ui_speed_high_speed257;
};

/**
 * Signals in message ID405VIN.
 *
 * All signal values are as on the CAN bus.
 */
struct model3_can_id405_vin_t {
    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t mux405;

    /**
     * VIN3, last 7 of VIN (ASCII)
     *
     * Range: 0..72057594038000000 (0..7.2057594038E+16 -)
     * Scale: 1
     * Offset: 0
     */
    uint64_t vinb405;

    /**
     * VIN2, part two of VIN (ASCII)
     *
     * Range: 0..72057594038000000 (0..7.2057594038E+16 -)
     * Scale: 1
     * Offset: 0
     */
    uint64_t vinc405;

    /**
     * VIN1, four zeros then first 3 characters of VIN
     *
     * Range: 0..72057594038000000 (0..7.2057594038E+16 -)
     * Scale: 1
     * Offset: 0
     */
    uint64_t vina405;
};

/**
 * Signals in message ID51EFC_info.
 *
 * All signal values are as on the CAN bus.
 */
struct model3_can_id51_efc_info_t {
    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t fc_info_index;

    /**
     * Range: 0..72057594037927900 (0..7.20575940379279E+16 -)
     * Scale: 1
     * Offset: 0
     */
    uint64_t fc_info_app_git_hash_bytes;

    /**
     * Range: 0..72057594037927900 (0..7.20575940379279E+16 -)
     * Scale: 1
     * Offset: 0
     */
    uint64_t fc_info_boot_git_hash_bytes;

    /**
     * Range: 0..16777215 (0..16777215 -)
     * Scale: 1
     * Offset: 0
     */
    uint32_t fc_info_boot_svn_rev;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t fc_info_boot_uds_proto_version;

    /**
     * Range: 0..4 (0..4 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t fc_info_build_type;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t fc_info_platform_type;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t fc_part_num_char01;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t fc_part_num_char08;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t fc_part_num_char15;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t fc_info_build_config_id;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t fc_info_cpld_version_major;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t fc_info_major_version;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t fc_info_pcba_id;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t fc_part_num_char02;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t fc_part_num_char09;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t fc_part_num_char16;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t fc_info_assembly_id;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t fc_info_branch_origin;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t fc_info_cpld_version_minor;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t fc_part_num_char03;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t fc_part_num_char10;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t fc_part_num_char17;

    /**
     * Range: 0..4294967295 (0..4294967295 -)
     * Scale: 1
     * Offset: 0
     */
    uint32_t fc_info_application_crc;

    /**
     * Range: 0..4294967295 (0..4294967295 -)
     * Scale: 1
     * Offset: 0
     */
    uint32_t fc_info_boot_crc;

    /**
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t fc_info_hardware_id;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t fc_info_maturity;

    /**
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t fc_info_usage_id;

    /**
     * Range: 0..4294967295 (0..4294967295 -)
     * Scale: 1
     * Offset: 0
     */
    uint32_t fc_info_variant_crc;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t fc_part_num_char04;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t fc_part_num_char11;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t fc_part_num_char18;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t fc_info_hardware_revision;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t fc_part_num_char05;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t fc_part_num_char12;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t fc_part_num_char19;

    /**
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t fc_info_component_id;

    /**
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t fc_info_sub_usage_id;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t fc_part_num_char06;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t fc_part_num_char13;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t fc_part_num_char20;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t fc_part_num_char07;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t fc_part_num_char14;
};

/**
 * Signals in message ID376FrontInverterTemps.
 *
 * All signal values are as on the CAN bus.
 */
struct model3_can_id376_front_inverter_temps_t {
    /**
     * Range: 0..255 (-40..215 C)
     * Scale: 1
     * Offset: -40
     */
    uint8_t temp_inv_pcb376;

    /**
     * Range: 0..255 (-40..215 C)
     * Scale: 1
     * Offset: -40
     */
    uint8_t temp_inverter376;

    /**
     * Front Stator Temp
     *
     * Range: 0..255 (-40..215 C)
     * Scale: 1
     * Offset: -40
     */
    uint8_t temp_stator376;

    /**
     * Range: 0..255 (-40..215 C)
     * Scale: 1
     * Offset: -40
     */
    uint8_t temp_inv_capbank376;

    /**
     * Range: 0..255 (-40..215 C)
     * Scale: 1
     * Offset: -40
     */
    uint8_t temp_inv_heatsink376;

    /**
     * Range: 0..255 (0..102 %)
     * Scale: 0.4
     * Offset: 0
     */
    uint8_t temp_pct_inverter376;

    /**
     * Range: 0..255 (0..102 %)
     * Scale: 0.4
     * Offset: 0
     */
    uint8_t temp_pct_stator376;
};

/**
 * Signals in message ID315RearInverterTemps.
 *
 * All signal values are as on the CAN bus.
 */
struct model3_can_id315_rear_inverter_temps_t {
    /**
     * Range: 0..255 (-40..215 C)
     * Scale: 1
     * Offset: -40
     */
    uint8_t rear_temp_inv_pcb315;

    /**
     * Range: 0..255 (-40..215 C)
     * Scale: 1
     * Offset: -40
     */
    uint8_t rear_temp_inverter315;

    /**
     * Rear Stator Temp
     *
     * Range: 0..255 (-40..215 C)
     * Scale: 1
     * Offset: -40
     */
    uint8_t rear_temp_stator315;

    /**
     * Range: 0..255 (-40..215 C)
     * Scale: 1
     * Offset: -40
     */
    uint8_t rear_temp_inv_capbank315;

    /**
     * Range: 0..255 (-40..215 C)
     * Scale: 1
     * Offset: -40
     */
    uint8_t rear_temp_inv_heatsink315;

    /**
     * Range: 0..255 (0..102 %)
     * Scale: 0.4
     * Offset: 0
     */
    uint8_t rear_temp_pct_inverter315;

    /**
     * Range: 0..255 (0..102 %)
     * Scale: 0.4
     * Offset: 0
     */
    uint8_t rear_temp_pct_stator315;
};

/**
 * Signals in message ID154RearTorqueOld.
 *
 * All signal values are as on the CAN bus.
 */
struct model3_can_id154_rear_torque_old_t {
    /**
     * Rear Torque Old, Axle torque 2 with 9/1 gearing
     *
     * Range: -2048..2047 (-512..511.75 NM)
     * Scale: 0.25
     * Offset: 0
     */
    int16_t raw_torque_rear154;
};

/**
 * Signals in message ID3B6odometer.
 *
 * All signal values are as on the CAN bus.
 */
struct model3_can_id3_b6odometer_t {
    /**
     * Odometer
     *
     * Range: 0..4294967294 (0..4294967.294 KM)
     * Scale: 0.001
     * Offset: 0
     */
    uint32_t odometer3_b6;
};

/**
 * Signals in message ID266RearInverterPower.
 *
 * All signal values are as on the CAN bus.
 */
struct model3_can_id266_rear_inverter_power_t {
    /**
     * Rear Motor Power
     *
     * Range: -1000..1000 (-500..500 kW)
     * Scale: 0.5
     * Offset: 0
     */
    int16_t rear_power266;

    /**
     * Range: 0..250 (0..20 kW)
     * Scale: 0.08
     * Offset: 0
     */
    uint8_t rear_heat_power_optimal266;

    /**
     * Range: 0..250 (0..20 kW)
     * Scale: 0.08
     * Offset: 0
     */
    uint8_t rear_heat_power_max266;

    /**
     * Rear Waste Heat Power
     *
     * Range: 0..250 (0..20 kW)
     * Scale: 0.08
     * Offset: 0
     */
    uint8_t rear_heat_power266;

    /**
     * Range: 0..250 (0..20 kW)
     * Scale: 0.08
     * Offset: 0
     */
    uint8_t rear_excess_heat_cmd;

    /**
     * Rear Power Limit, approx offset Orig scale 1
     *
     * Range: 0..400 (0..400 kW)
     * Scale: 1
     * Offset: 0
     */
    uint16_t rear_power_limit266;
};

/**
 * Signals in message ID108RearDriveTorqueRPM.
 *
 * All signal values are as on the CAN bus.
 */
struct model3_can_id108_rear_drive_torque_rpm_t {
    /**
     * Rear Axle Torque Request
     *
     * Range: -3750..3750 (-7500..7500 NM)
     * Scale: 2
     * Offset: 0
     */
    int16_t rear_torque_request108;

    /**
     * Rear Axle Torque
     *
     * Range: -3750..3750 (-7500..7500 NM)
     * Scale: 2
     * Offset: 0
     */
    int16_t rear_torque_actual108;

    /**
     * Rear Axle Speed
     *
     * Range: -27500..27500 (-2750..2750 RPM)
     * Scale: 0.1
     * Offset: 0
     */
    int16_t rear_axle_rpm108;
};

/**
 * Signals in message ID132HVBattAmpVolt.
 *
 * All signal values are as on the CAN bus.
 */
struct model3_can_id132_hv_batt_amp_volt_t {
    /**
     * HV Battery Voltage
     *
     * Range: 0..65535 (0..655.35 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t batt_voltage132;

    /**
     * HV Battery Current
     *
     * Range: 32767..-32767 (-3276.7..3276.7 A)
     * Scale: -0.1
     * Offset: 0
     */
    int16_t smooth_batt_current132;

    /**
     * HV Raw Current, old offset 1000
     *
     * Range: 32767..-32768 (-1138.35..2138.4 A)
     * Scale: -0.05
     * Offset: 500
     */
    int16_t raw_batt_current132;

    /**
     * Charge Time Remaining
     *
     * Range: 0..4095 (0..4095 Min)
     * Scale: 1
     * Offset: 0
     */
    uint16_t charge_hours_remaining132;
};

/**
 * Signals in message ID126RearHVStatus.
 *
 * All signal values are as on the CAN bus.
 */
struct model3_can_id126_rear_hv_status_t {
    /**
     * Rear Motor Voltage
     *
     * Range: 0..1000 (0..500 V)
     * Scale: 0.5
     * Offset: 0
     */
    uint16_t rear_high_voltage126;

    /**
     * Rear Motor Current
     *
     * Range: 0..2047 (0..2047 A)
     * Scale: 1
     * Offset: 0
     */
    uint16_t rear_motor_current126;
};

/**
 * Signals in message ID1A5FrontHVStatus.
 *
 * All signal values are as on the CAN bus.
 */
struct model3_can_id1_a5_front_hv_status_t {
    /**
     * Front Motor Voltage
     *
     * Range: 0..1000 (0..500 V)
     * Scale: 0.5
     * Offset: 0
     */
    uint16_t front_high_voltage1_a5;

    /**
     * Front Motor Current
     *
     * Range: 0..2047 (0..2047 A)
     * Scale: 1
     * Offset: 0
     */
    uint16_t front_motor_current1_a5;
};

/**
 * Signals in message ID31FTPMSsensors.
 *
 * All signal values are as on the CAN bus.
 */
struct model3_can_id31_ftpm_ssensors_t {
    /**
     * Range: -
     * Scale: 0.025
     * Offset: 0
     */
    uint8_t tpmsf_lpressure31_f;

    /**
     * Range: -
     * Scale: 1
     * Offset: -40
     */
    uint8_t tpmsf_ltemp31_f;

    /**
     * Range: -
     * Scale: 0.025
     * Offset: 0
     */
    uint8_t tpmsf_rpressure31_f;

    /**
     * Range: -
     * Scale: 1
     * Offset: -40
     */
    uint8_t tpmsf_rtemp31_f;

    /**
     * Range: -
     * Scale: 0.025
     * Offset: 0
     */
    uint8_t tpmsr_lpressure31_f;

    /**
     * Range: -
     * Scale: 1
     * Offset: -40
     */
    uint8_t tpmsr_ltemp31_f;

    /**
     * Range: -
     * Scale: 0.025
     * Offset: 0
     */
    uint8_t tpmsr_rpressure31_f;

    /**
     * Range: -
     * Scale: 1
     * Offset: -40
     */
    uint8_t tpmsr_rtemp31_f;
};

/**
 * Signals in message ID3FEbrakeTemps.
 *
 * All signal values are as on the CAN bus.
 */
struct model3_can_id3_f_ebrake_temps_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: -40
     */
    uint16_t brake_temp_fl3_fe;

    /**
     * Range: -
     * Scale: 1
     * Offset: -40
     */
    uint16_t brake_temp_fr3_fe;

    /**
     * Range: -
     * Scale: 1
     * Offset: -40
     */
    uint16_t brake_temp_rl3_fe;

    /**
     * Range: -
     * Scale: 1
     * Offset: -40
     */
    uint16_t brake_temp_rr3_fe;
};

/**
 * Signals in message ID228EPBrightStatus.
 *
 * All signal values are as on the CAN bus.
 */
struct model3_can_id228_ep_bright_status_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t epb_runit_status228;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t epb_runit_fault_status228;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t epb_rsummon_state228;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t epb_rdisconnected228;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t epb_rlockout_unlock_count228;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t epb_resm_caliper_request228;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t epb_rcsm_fault_reason228;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t epb_resm_operation_trigger228;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t epb_rsummon_fault_reason228;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t epb_rlocal_service_mode_active228;

    /**
     * Range: -
     * Scale: 0.00544368
     * Offset: 0
     */
    uint16_t epbr12_v_filt228;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t epbrcdp_qualified228;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t epb_rinternal_cdp_request228;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t epb_rinternal_status_counter228;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t epb_rinternal_status_checksum228;
};

/**
 * Signals in message ID288EPBleftStatus.
 *
 * All signal values are as on the CAN bus.
 */
struct model3_can_id288_ep_bleft_status_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t epb_lunit_status288;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t epb_lunit_fault_status288;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t epb_lsummon_state288;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t epb_ldisconnected288;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t epb_llockout_unlock_count288;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t epb_lesm_caliper_request288;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t epb_lcsm_fault_reason288;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t epb_lesm_operation_trigger288;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t epb_lsummon_fault_reason288;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t epb_llocal_service_mode_active288;

    /**
     * Range: -
     * Scale: 0.00544368
     * Offset: 0
     */
    uint16_t epbl12_v_filt288;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t epblcdp_qualified288;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t epb_linternal_cdp_request288;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t epb_linternal_status_counter288;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t epb_linternal_status_checksum288;
};

/**
 * Signals in message ID7FFcarConfig.
 *
 * All signal values are as on the CAN bus.
 */
struct model3_can_id7_f_fcar_config_t {
    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t gtw_car_config_multiplexer;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t gtw_delivery_status;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t gtw_heated_wipers;

    /**
     * Range: 0..10 (0..10 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t gtw_map_region;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t gtw_epas_type;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t gtw_front_seat_heaters;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t gtw_drivetrain_type;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t gtw_rear_seat_heaters;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t gtw_right_hand_drive;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t gtw_tpms_type;

    /**
     * Range: 0..4 (0..4 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t gtw_performance_package;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t gtw_homelink_type;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t gtw_vdc_type;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t gtw_tow_package;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t gtw_xcp_ibst;

    /**
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t gtw_country;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t gtw_rear_light_type;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t gtw_xcp_esp;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t gtw_coolant_pump_type;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t gtw_memory_mirrors;

    /**
     * Model
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t gtw_chassis_type;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t gtw_power_steering_column;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t gtw_front_fog_lamps;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t gtw_headlamps;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t gtw_rear_drive_unit_type;

    /**
     * Range: 0..2 (0..2 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t gtw_air_suspension;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t gtw_logging_version;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t gtw_lumbar_ecu_type;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t gtw_ibst_wake_type;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t gtw_passenger_occupancy_sensor_type;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t gtw_autopilot_camera_type;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t gtw_aux_park_lamps;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t gtw_connectivity_package;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t gtw_hvac_quiet_snorkel_type;

    /**
     * Range: 0..2 (0..2 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t gtw_plc_support_type;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t gtw_hvac_panel_vane_type;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t gtw_cabin_blower_ctrl_type;

    /**
     * Range: 0..2 (0..2 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t gtw_audio_type;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t gtw_e_buck_config;

    /**
     * Battery Pack Size
     *
     * Range: 0..4 (0..4 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t gtw_pack_energy;

    /**
     * Range: 0..16 (0..16 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t gtw_tire_type;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t gtw_windshield_type;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t gtw_active_high_beam;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t gtw_airbag_cutoff_switch;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t gtw_intrusion_sensor_type;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t gtw_front_seat_recliner_hardware;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t gtw_spoiler_type;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t gtw_rear_glass_type;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t gtw_passenger_airbag_type;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t gtw_rear_fog_lamps;

    /**
     * Range: 3..4 (3..4 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t gtw_das_hw;

    /**
     * Range: 0..2 (0..2 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t gtw_esp_valve_type;

    /**
     * Range: 0..2 (0..2 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t gtw_roof_type;

    /**
     * Range: 0..4 (0..4 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t gtw_autopilot;

    /**
     * Range: 0..2 (0..2 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t gtw_soft_range;

    /**
     * Range: 0..2 (0..2 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t gtw_refrigerant_type;

    /**
     * Range: 0..2 (0..2 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t gtw_supercharging_access;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t gtw_headlight_leveler_type;

    /**
     * Range: 0..6 (0..6 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t gtw_exterior_color;

    /**
     * Range: 21..163 (21..163 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t gtw_restraints_hardware_type;

    /**
     * Range: 0..18 (0..18 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t gtw_wheel_type;

    /**
     * Range: 0..5 (0..5 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t gtw_number_hvil_nodes;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t gtw_pedestrian_warning_sound;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t gtw_b_pillar_nfc_param;

    /**
     * Range: 0..2 (0..2 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t gtw_immersive_audio;

    /**
     * Range: 0..2 (0..2 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t gtw_interior_lighting;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t gtw_efficiency_package;

    /**
     * Range: 0..2 (0..2 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t gtw_brake_hw_type;

    /**
     * Range: 0..4 (0..4 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t gtw_front_seat_type;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t gtw_roof_glass_type;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t gtw_track_mode_package;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t gtw_e_call_enabled;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t gtw_twelve_v_battery_type;
};

/**
 * Signals in message ID332BattCellMinMax.
 *
 * All signal values are as on the CAN bus.
 */
struct model3_can_id332_batt_cell_min_max_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t batt_cell_multiplexer332;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t batt_cell_temp_max_num332;

    /**
     * Range: -
     * Scale: 0.002
     * Offset: 0
     */
    uint16_t batt_cell_brick_voltage_max332;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t batt_cell_temp_min_num332;

    /**
     * Range: -
     * Scale: 0.5
     * Offset: -40
     */
    uint8_t batt_cell_temp_max332;

    /**
     * Range: -
     * Scale: 0.002
     * Offset: 0
     */
    uint16_t batt_cell_brick_voltage_min332;

    /**
     * Range: -
     * Scale: 0.5
     * Offset: -40
     */
    uint8_t batt_cell_temp_min332;

    /**
     * Range: -
     * Scale: 0.5
     * Offset: -40
     */
    uint8_t batt_cell_model_t_max332;

    /**
     * Range: -
     * Scale: 1
     * Offset: 1
     */
    uint8_t batt_cell_brick_voltage_max_num332;

    /**
     * Range: -
     * Scale: 0.5
     * Offset: -40
     */
    uint8_t batt_cell_model_t_min332;

    /**
     * Range: -
     * Scale: 1
     * Offset: 1
     */
    uint8_t batt_cell_brick_voltage_min_num332;
};

/**
 * Signals in message ID401CellVoltages.
 *
 * All signal values are as on the CAN bus.
 */
struct model3_can_id401_cell_voltages_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t multiplex_selector;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t status_flags;

    /**
     * Range: -
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t cell0;

    /**
     * Range: -
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t cell3;

    /**
     * Range: -
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t cell6;

    /**
     * Range: -
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t cell9;

    /**
     * Range: -
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t cell12;

    /**
     * Range: -
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t cell15;

    /**
     * Range: -
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t cell18;

    /**
     * Range: -
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t cell21;

    /**
     * Range: -
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t cell24;

    /**
     * Range: -
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t cell27;

    /**
     * Range: -
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t cell30;

    /**
     * Range: -
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t cell34;

    /**
     * Range: -
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t cell36;

    /**
     * Range: -
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t cell39;

    /**
     * Range: -
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t cell42;

    /**
     * Range: -
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t cell45;

    /**
     * Range: -
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t cell48;

    /**
     * Range: -
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t cell51;

    /**
     * Range: -
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t cell54;

    /**
     * Range: -
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t cell57;

    /**
     * Range: -
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t cell60;

    /**
     * Range: -
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t cell63;

    /**
     * Range: -
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t cell66;

    /**
     * Range: -
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t cell69;

    /**
     * Range: -
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t cell72;

    /**
     * Range: -
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t cell75;

    /**
     * Range: -
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t cell78;

    /**
     * Range: -
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t cell81;

    /**
     * Range: -
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t cell84;

    /**
     * Range: -
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t cell87;

    /**
     * Range: -
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t cell90;

    /**
     * Range: -
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t cell93;

    /**
     * Range: -
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t cell96;

    /**
     * Range: -
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t cell99;

    /**
     * Range: -
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t cell102;

    /**
     * Range: -
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t cell105;

    /**
     * Range: -
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t cell1;

    /**
     * Range: -
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t cell4;

    /**
     * Range: -
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t cell7;

    /**
     * Range: -
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t cell10;

    /**
     * Range: -
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t cell13;

    /**
     * Range: -
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t cell16;

    /**
     * Range: -
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t cell19;

    /**
     * Range: -
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t cell22;

    /**
     * Range: -
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t cell25;

    /**
     * Range: -
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t cell28;

    /**
     * Range: -
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t cell31;

    /**
     * Range: -
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t cell33;

    /**
     * Range: -
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t cell37;

    /**
     * Range: -
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t cell40;

    /**
     * Range: -
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t cell43;

    /**
     * Range: -
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t cell46;

    /**
     * Range: -
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t cell49;

    /**
     * Range: -
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t cell52;

    /**
     * Range: -
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t cell55;

    /**
     * Range: -
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t cell58;

    /**
     * Range: -
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t cell61;

    /**
     * Range: -
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t cell64;

    /**
     * Range: -
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t cell67;

    /**
     * Range: -
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t cell70;

    /**
     * Range: -
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t cell73;

    /**
     * Range: -
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t cell76;

    /**
     * Range: -
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t cell79;

    /**
     * Range: -
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t cell82;

    /**
     * Range: -
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t cell85;

    /**
     * Range: -
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t cell88;

    /**
     * Range: -
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t cell91;

    /**
     * Range: -
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t cell94;

    /**
     * Range: -
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t cell97;

    /**
     * Range: -
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t cell100;

    /**
     * Range: -
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t cell103;

    /**
     * Range: -
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t cell106;

    /**
     * Range: -
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t cell2;

    /**
     * Range: -
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t cell5;

    /**
     * Range: -
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t cell8;

    /**
     * Range: -
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t cell11;

    /**
     * Range: -
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t cell14;

    /**
     * Range: -
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t cell17;

    /**
     * Range: -
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t cell20;

    /**
     * Range: -
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t cell23;

    /**
     * Range: -
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t cell26;

    /**
     * Range: -
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t cell29;

    /**
     * Range: -
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t cell32;

    /**
     * Range: -
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t cell35;

    /**
     * Range: -
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t cell38;

    /**
     * Range: -
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t cell41;

    /**
     * Range: -
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t cell44;

    /**
     * Range: -
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t cell47;

    /**
     * Range: -
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t cell50;

    /**
     * Range: -
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t cell53;

    /**
     * Range: -
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t cell56;

    /**
     * Range: -
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t cell59;

    /**
     * Range: -
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t cell62;

    /**
     * Range: -
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t cell65;

    /**
     * Range: -
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t cell68;

    /**
     * Range: -
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t cell71;

    /**
     * Range: -
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t cell74;

    /**
     * Range: -
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t cell77;

    /**
     * Range: -
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t cell80;

    /**
     * Range: -
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t cell83;

    /**
     * Range: -
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t cell86;

    /**
     * Range: -
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t cell89;

    /**
     * Range: -
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t cell92;

    /**
     * Range: -
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t cell95;

    /**
     * Range: -
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t cell98;

    /**
     * Range: -
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t cell101;

    /**
     * Range: -
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t cell104;

    /**
     * Range: -
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t cell107;
};

/**
 * Pack message ID00CUI_status.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int model3_can_id00_cui_status_pack(
    uint8_t *dst_p,
    const struct model3_can_id00_cui_status_t *src_p,
    size_t size);

/**
 * Unpack message ID00CUI_status.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int model3_can_id00_cui_status_unpack(
    struct model3_can_id00_cui_status_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id00_cui_status_ui_touch_active_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id00_cui_status_ui_touch_active_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id00_cui_status_ui_touch_active_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id00_cui_status_ui_audio_active_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id00_cui_status_ui_audio_active_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id00_cui_status_ui_audio_active_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id00_cui_status_ui_bluetooth_active_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id00_cui_status_ui_bluetooth_active_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id00_cui_status_ui_bluetooth_active_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id00_cui_status_ui_cell_active_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id00_cui_status_ui_cell_active_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id00_cui_status_ui_cell_active_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id00_cui_status_ui_display_ready_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id00_cui_status_ui_display_ready_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id00_cui_status_ui_display_ready_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id00_cui_status_ui_display_on_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id00_cui_status_ui_display_on_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id00_cui_status_ui_display_on_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id00_cui_status_ui_wifi_active_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id00_cui_status_ui_wifi_active_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id00_cui_status_ui_wifi_active_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id00_cui_status_ui_wifi_connected_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id00_cui_status_ui_wifi_connected_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id00_cui_status_ui_wifi_connected_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id00_cui_status_ui_system_active_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id00_cui_status_ui_system_active_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id00_cui_status_ui_system_active_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id00_cui_status_ui_ready_for_drive_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id00_cui_status_ui_ready_for_drive_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id00_cui_status_ui_ready_for_drive_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id00_cui_status_ui_cell_connected_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id00_cui_status_ui_cell_connected_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id00_cui_status_ui_cell_connected_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id00_cui_status_ui_vpn_active_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id00_cui_status_ui_vpn_active_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id00_cui_status_ui_vpn_active_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id00_cui_status_ui_autopilot_trial_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id00_cui_status_ui_autopilot_trial_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id00_cui_status_ui_autopilot_trial_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id00_cui_status_ui_factory_reset_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id00_cui_status_ui_factory_reset_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id00_cui_status_ui_factory_reset_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id00_cui_status_ui_gps_active_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id00_cui_status_ui_gps_active_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id00_cui_status_ui_gps_active_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id00_cui_status_ui_screenshot_active_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id00_cui_status_ui_screenshot_active_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id00_cui_status_ui_screenshot_active_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id00_cui_status_ui_radio_active_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id00_cui_status_ui_radio_active_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id00_cui_status_ui_radio_active_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id00_cui_status_ui_cell_network_technology_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id00_cui_status_ui_cell_network_technology_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id00_cui_status_ui_cell_network_technology_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id00_cui_status_ui_cell_receiver_power_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id00_cui_status_ui_cell_receiver_power_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id00_cui_status_ui_cell_receiver_power_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id00_cui_status_ui_false_touch_counter_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id00_cui_status_ui_false_touch_counter_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id00_cui_status_ui_false_touch_counter_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id00_cui_status_ui_development_car_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id00_cui_status_ui_development_car_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id00_cui_status_ui_development_car_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id00_cui_status_ui_camera_active_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id00_cui_status_ui_camera_active_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id00_cui_status_ui_camera_active_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id00_cui_status_ui_cell_signal_bars_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id00_cui_status_ui_cell_signal_bars_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id00_cui_status_ui_cell_signal_bars_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t model3_can_id00_cui_status_ui_pcb_temperature_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id00_cui_status_ui_pcb_temperature_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id00_cui_status_ui_pcb_temperature_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t model3_can_id00_cui_status_ui_cpu_temperature_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id00_cui_status_ui_cpu_temperature_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id00_cui_status_ui_cpu_temperature_is_in_range(int8_t value);

/**
 * Pack message ID082UI_tripPlanning.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int model3_can_id082_ui_trip_planning_pack(
    uint8_t *dst_p,
    const struct model3_can_id082_ui_trip_planning_t *src_p,
    size_t size);

/**
 * Unpack message ID082UI_tripPlanning.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int model3_can_id082_ui_trip_planning_unpack(
    struct model3_can_id082_ui_trip_planning_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id082_ui_trip_planning_ui_trip_planning_active_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id082_ui_trip_planning_ui_trip_planning_active_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id082_ui_trip_planning_ui_trip_planning_active_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id082_ui_trip_planning_ui_nav_to_supercharger_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id082_ui_trip_planning_ui_nav_to_supercharger_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id082_ui_trip_planning_ui_nav_to_supercharger_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id082_ui_trip_planning_ui_request_active_battery_heating_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id082_ui_trip_planning_ui_request_active_battery_heating_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id082_ui_trip_planning_ui_request_active_battery_heating_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t model3_can_id082_ui_trip_planning_ui_predicted_energy_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id082_ui_trip_planning_ui_predicted_energy_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id082_ui_trip_planning_ui_predicted_energy_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t model3_can_id082_ui_trip_planning_ui_hindsight_energy_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id082_ui_trip_planning_ui_hindsight_energy_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id082_ui_trip_planning_ui_hindsight_energy_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t model3_can_id082_ui_trip_planning_ui_energy_at_destination_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id082_ui_trip_planning_ui_energy_at_destination_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id082_ui_trip_planning_ui_energy_at_destination_is_in_range(int16_t value);

/**
 * Pack message ID102VCLEFT_doorStatus.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int model3_can_id102_vcleft_door_status_pack(
    uint8_t *dst_p,
    const struct model3_can_id102_vcleft_door_status_t *src_p,
    size_t size);

/**
 * Unpack message ID102VCLEFT_doorStatus.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int model3_can_id102_vcleft_door_status_unpack(
    struct model3_can_id102_vcleft_door_status_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id102_vcleft_door_status_vcleft_front_latch_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id102_vcleft_door_status_vcleft_front_latch_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id102_vcleft_door_status_vcleft_front_latch_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id102_vcleft_door_status_vcleft_rear_latch_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id102_vcleft_door_status_vcleft_rear_latch_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id102_vcleft_door_status_vcleft_rear_latch_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id102_vcleft_door_status_vcleft_front_latch_switch_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id102_vcleft_door_status_vcleft_front_latch_switch_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id102_vcleft_door_status_vcleft_front_latch_switch_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id102_vcleft_door_status_vcleft_rear_latch_switch_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id102_vcleft_door_status_vcleft_rear_latch_switch_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id102_vcleft_door_status_vcleft_rear_latch_switch_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id102_vcleft_door_status_vcleft_front_handle_pulled_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id102_vcleft_door_status_vcleft_front_handle_pulled_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id102_vcleft_door_status_vcleft_front_handle_pulled_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id102_vcleft_door_status_vcleft_rear_handle_pulled_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id102_vcleft_door_status_vcleft_rear_handle_pulled_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id102_vcleft_door_status_vcleft_rear_handle_pulled_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id102_vcleft_door_status_vcleft_front_rel_actuator_switch_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id102_vcleft_door_status_vcleft_front_rel_actuator_switch_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id102_vcleft_door_status_vcleft_front_rel_actuator_switch_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id102_vcleft_door_status_vcleft_rear_rel_actuator_switch_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id102_vcleft_door_status_vcleft_rear_rel_actuator_switch_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id102_vcleft_door_status_vcleft_rear_rel_actuator_switch_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id102_vcleft_door_status_vcleft_front_handle_pwm_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id102_vcleft_door_status_vcleft_front_handle_pwm_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id102_vcleft_door_status_vcleft_front_handle_pwm_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id102_vcleft_door_status_vcleft_rear_handle_pwm_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id102_vcleft_door_status_vcleft_rear_handle_pwm_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id102_vcleft_door_status_vcleft_rear_handle_pwm_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id102_vcleft_door_status_vcleft_front_int_switch_pressed_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id102_vcleft_door_status_vcleft_front_int_switch_pressed_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id102_vcleft_door_status_vcleft_front_int_switch_pressed_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id102_vcleft_door_status_vcleft_rear_int_switch_pressed_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id102_vcleft_door_status_vcleft_rear_int_switch_pressed_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id102_vcleft_door_status_vcleft_rear_int_switch_pressed_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id102_vcleft_door_status_vcleft_mirror_tilt_x_position_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id102_vcleft_door_status_vcleft_mirror_tilt_x_position_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id102_vcleft_door_status_vcleft_mirror_tilt_x_position_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id102_vcleft_door_status_vcleft_mirror_tilt_y_position_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id102_vcleft_door_status_vcleft_mirror_tilt_y_position_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id102_vcleft_door_status_vcleft_mirror_tilt_y_position_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id102_vcleft_door_status_vcleft_mirror_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id102_vcleft_door_status_vcleft_mirror_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id102_vcleft_door_status_vcleft_mirror_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id102_vcleft_door_status_vcleft_mirror_fold_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id102_vcleft_door_status_vcleft_mirror_fold_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id102_vcleft_door_status_vcleft_mirror_fold_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id102_vcleft_door_status_vcleft_mirror_recall_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id102_vcleft_door_status_vcleft_mirror_recall_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id102_vcleft_door_status_vcleft_mirror_recall_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id102_vcleft_door_status_vcleft_mirror_heat_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id102_vcleft_door_status_vcleft_mirror_heat_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id102_vcleft_door_status_vcleft_mirror_heat_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id102_vcleft_door_status_vcleft_mirror_dipped_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id102_vcleft_door_status_vcleft_mirror_dipped_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id102_vcleft_door_status_vcleft_mirror_dipped_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id102_vcleft_door_status_vcleft_front_handle_pulled_persist_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id102_vcleft_door_status_vcleft_front_handle_pulled_persist_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id102_vcleft_door_status_vcleft_front_handle_pulled_persist_is_in_range(uint8_t value);

/**
 * Pack message ID103VCRIGHT_doorStatus.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int model3_can_id103_vcright_door_status_pack(
    uint8_t *dst_p,
    const struct model3_can_id103_vcright_door_status_t *src_p,
    size_t size);

/**
 * Unpack message ID103VCRIGHT_doorStatus.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int model3_can_id103_vcright_door_status_unpack(
    struct model3_can_id103_vcright_door_status_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id103_vcright_door_status_vcright_front_latch_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id103_vcright_door_status_vcright_front_latch_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id103_vcright_door_status_vcright_front_latch_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id103_vcright_door_status_vcright_rear_latch_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id103_vcright_door_status_vcright_rear_latch_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id103_vcright_door_status_vcright_rear_latch_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id103_vcright_door_status_vcright_front_latch_switch_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id103_vcright_door_status_vcright_front_latch_switch_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id103_vcright_door_status_vcright_front_latch_switch_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id103_vcright_door_status_vcright_rear_latch_switch_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id103_vcright_door_status_vcright_rear_latch_switch_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id103_vcright_door_status_vcright_rear_latch_switch_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id103_vcright_door_status_vcright_front_handle_pulled_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id103_vcright_door_status_vcright_front_handle_pulled_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id103_vcright_door_status_vcright_front_handle_pulled_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id103_vcright_door_status_vcright_rear_handle_pulled_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id103_vcright_door_status_vcright_rear_handle_pulled_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id103_vcright_door_status_vcright_rear_handle_pulled_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id103_vcright_door_status_vcright_front_rel_actuator_switch_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id103_vcright_door_status_vcright_front_rel_actuator_switch_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id103_vcright_door_status_vcright_front_rel_actuator_switch_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id103_vcright_door_status_vcright_rear_rel_actuator_switch_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id103_vcright_door_status_vcright_rear_rel_actuator_switch_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id103_vcright_door_status_vcright_rear_rel_actuator_switch_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id103_vcright_door_status_vcright_front_handle_pwm_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id103_vcright_door_status_vcright_front_handle_pwm_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id103_vcright_door_status_vcright_front_handle_pwm_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id103_vcright_door_status_vcright_rear_handle_pwm_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id103_vcright_door_status_vcright_rear_handle_pwm_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id103_vcright_door_status_vcright_rear_handle_pwm_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id103_vcright_door_status_vcright_reserved_for_back_compat_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id103_vcright_door_status_vcright_reserved_for_back_compat_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id103_vcright_door_status_vcright_reserved_for_back_compat_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id103_vcright_door_status_vcright_front_handle_pulled_persist_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id103_vcright_door_status_vcright_front_handle_pulled_persist_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id103_vcright_door_status_vcright_front_handle_pulled_persist_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id103_vcright_door_status_vcright_front_int_switch_pressed_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id103_vcright_door_status_vcright_front_int_switch_pressed_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id103_vcright_door_status_vcright_front_int_switch_pressed_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id103_vcright_door_status_vcright_rear_int_switch_pressed_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id103_vcright_door_status_vcright_rear_int_switch_pressed_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id103_vcright_door_status_vcright_rear_int_switch_pressed_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id103_vcright_door_status_vcright_mirror_tilt_x_position_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id103_vcright_door_status_vcright_mirror_tilt_x_position_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id103_vcright_door_status_vcright_mirror_tilt_x_position_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id103_vcright_door_status_vcright_mirror_tilt_y_position_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id103_vcright_door_status_vcright_mirror_tilt_y_position_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id103_vcright_door_status_vcright_mirror_tilt_y_position_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id103_vcright_door_status_vcright_mirror_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id103_vcright_door_status_vcright_mirror_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id103_vcright_door_status_vcright_mirror_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id103_vcright_door_status_vcright_mirror_fold_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id103_vcright_door_status_vcright_mirror_fold_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id103_vcright_door_status_vcright_mirror_fold_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id103_vcright_door_status_vcright_trunk_latch_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id103_vcright_door_status_vcright_trunk_latch_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id103_vcright_door_status_vcright_trunk_latch_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id103_vcright_door_status_vcright_mirror_recall_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id103_vcright_door_status_vcright_mirror_recall_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id103_vcright_door_status_vcright_mirror_recall_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id103_vcright_door_status_vcright_mirror_dipped_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id103_vcright_door_status_vcright_mirror_dipped_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id103_vcright_door_status_vcright_mirror_dipped_is_in_range(uint8_t value);

/**
 * Pack message ID123UI_alertMatrix1.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int model3_can_id123_ui_alert_matrix1_pack(
    uint8_t *dst_p,
    const struct model3_can_id123_ui_alert_matrix1_t *src_p,
    size_t size);

/**
 * Unpack message ID123UI_alertMatrix1.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int model3_can_id123_ui_alert_matrix1_unpack(
    struct model3_can_id123_ui_alert_matrix1_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id123_ui_alert_matrix1_ui_a001_driver_door_open_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id123_ui_alert_matrix1_ui_a001_driver_door_open_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id123_ui_alert_matrix1_ui_a001_driver_door_open_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id123_ui_alert_matrix1_ui_a002_door_open_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id123_ui_alert_matrix1_ui_a002_door_open_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id123_ui_alert_matrix1_ui_a002_door_open_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id123_ui_alert_matrix1_ui_a003_trunk_open_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id123_ui_alert_matrix1_ui_a003_trunk_open_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id123_ui_alert_matrix1_ui_a003_trunk_open_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id123_ui_alert_matrix1_ui_a004_frunk_open_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id123_ui_alert_matrix1_ui_a004_frunk_open_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id123_ui_alert_matrix1_ui_a004_frunk_open_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id123_ui_alert_matrix1_ui_a005_headlights_on_door_open_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id123_ui_alert_matrix1_ui_a005_headlights_on_door_open_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id123_ui_alert_matrix1_ui_a005_headlights_on_door_open_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id123_ui_alert_matrix1_ui_a006_remote_service_alert_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id123_ui_alert_matrix1_ui_a006_remote_service_alert_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id123_ui_alert_matrix1_ui_a006_remote_service_alert_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id123_ui_alert_matrix1_ui_a007_soft_pack_config_mismatch_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id123_ui_alert_matrix1_ui_a007_soft_pack_config_mismatch_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id123_ui_alert_matrix1_ui_a007_soft_pack_config_mismatch_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id123_ui_alert_matrix1_ui_a008_touch_screen_error_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id123_ui_alert_matrix1_ui_a008_touch_screen_error_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id123_ui_alert_matrix1_ui_a008_touch_screen_error_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id123_ui_alert_matrix1_ui_a009_squashfs_error_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id123_ui_alert_matrix1_ui_a009_squashfs_error_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id123_ui_alert_matrix1_ui_a009_squashfs_error_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id123_ui_alert_matrix1_ui_a010_maps_missing_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id123_ui_alert_matrix1_ui_a010_maps_missing_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id123_ui_alert_matrix1_ui_a010_maps_missing_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id123_ui_alert_matrix1_ui_a011_incorrect_map_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id123_ui_alert_matrix1_ui_a011_incorrect_map_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id123_ui_alert_matrix1_ui_a011_incorrect_map_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id123_ui_alert_matrix1_ui_a012_not_on_private_property_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id123_ui_alert_matrix1_ui_a012_not_on_private_property_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id123_ui_alert_matrix1_ui_a012_not_on_private_property_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id123_ui_alert_matrix1_ui_a013_tpms_hard_warning_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id123_ui_alert_matrix1_ui_a013_tpms_hard_warning_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id123_ui_alert_matrix1_ui_a013_tpms_hard_warning_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id123_ui_alert_matrix1_ui_a014_tpms_soft_warning_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id123_ui_alert_matrix1_ui_a014_tpms_soft_warning_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id123_ui_alert_matrix1_ui_a014_tpms_soft_warning_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id123_ui_alert_matrix1_ui_a015_tpms_over_pressure_warning_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id123_ui_alert_matrix1_ui_a015_tpms_over_pressure_warning_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id123_ui_alert_matrix1_ui_a015_tpms_over_pressure_warning_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id123_ui_alert_matrix1_ui_a016_tpms_temperature_warning_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id123_ui_alert_matrix1_ui_a016_tpms_temperature_warning_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id123_ui_alert_matrix1_ui_a016_tpms_temperature_warning_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id123_ui_alert_matrix1_ui_a017_tpms_system_fault_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id123_ui_alert_matrix1_ui_a017_tpms_system_fault_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id123_ui_alert_matrix1_ui_a017_tpms_system_fault_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id123_ui_alert_matrix1_ui_a018_slip_start_on_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id123_ui_alert_matrix1_ui_a018_slip_start_on_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id123_ui_alert_matrix1_ui_a018_slip_start_on_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id123_ui_alert_matrix1_ui_a019_park_brake_fault_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id123_ui_alert_matrix1_ui_a019_park_brake_fault_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id123_ui_alert_matrix1_ui_a019_park_brake_fault_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id123_ui_alert_matrix1_ui_a020_steering_reduced_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id123_ui_alert_matrix1_ui_a020_steering_reduced_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id123_ui_alert_matrix1_ui_a020_steering_reduced_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id123_ui_alert_matrix1_ui_a021_rear_seatbelt_unbuckled_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id123_ui_alert_matrix1_ui_a021_rear_seatbelt_unbuckled_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id123_ui_alert_matrix1_ui_a021_rear_seatbelt_unbuckled_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id123_ui_alert_matrix1_ui_a022_ape_fuses_etc_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id123_ui_alert_matrix1_ui_a022_ape_fuses_etc_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id123_ui_alert_matrix1_ui_a022_ape_fuses_etc_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id123_ui_alert_matrix1_ui_a023_cell_internet_check_failed_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id123_ui_alert_matrix1_ui_a023_cell_internet_check_failed_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id123_ui_alert_matrix1_ui_a023_cell_internet_check_failed_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id123_ui_alert_matrix1_ui_a024_wifi_internet_check_failed_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id123_ui_alert_matrix1_ui_a024_wifi_internet_check_failed_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id123_ui_alert_matrix1_ui_a024_wifi_internet_check_failed_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id123_ui_alert_matrix1_ui_a025_wifi_online_check_failed_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id123_ui_alert_matrix1_ui_a025_wifi_online_check_failed_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id123_ui_alert_matrix1_ui_a025_wifi_online_check_failed_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id123_ui_alert_matrix1_ui_a026_modem_reset_loop_detected_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id123_ui_alert_matrix1_ui_a026_modem_reset_loop_detected_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id123_ui_alert_matrix1_ui_a026_modem_reset_loop_detected_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id123_ui_alert_matrix1_ui_a027_auto_steer_mia_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id123_ui_alert_matrix1_ui_a027_auto_steer_mia_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id123_ui_alert_matrix1_ui_a027_auto_steer_mia_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id123_ui_alert_matrix1_ui_a028_front_trunk_popup_closed_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id123_ui_alert_matrix1_ui_a028_front_trunk_popup_closed_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id123_ui_alert_matrix1_ui_a028_front_trunk_popup_closed_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id123_ui_alert_matrix1_ui_a029_modem_mia_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id123_ui_alert_matrix1_ui_a029_modem_mia_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id123_ui_alert_matrix1_ui_a029_modem_mia_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id123_ui_alert_matrix1_ui_a030_modem_vm_crash_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id123_ui_alert_matrix1_ui_a030_modem_vm_crash_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id123_ui_alert_matrix1_ui_a030_modem_vm_crash_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id123_ui_alert_matrix1_ui_a031_brake_fluid_low_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id123_ui_alert_matrix1_ui_a031_brake_fluid_low_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id123_ui_alert_matrix1_ui_a031_brake_fluid_low_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id123_ui_alert_matrix1_ui_a032_cell_modem_recovery_resets_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id123_ui_alert_matrix1_ui_a032_cell_modem_recovery_resets_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id123_ui_alert_matrix1_ui_a032_cell_modem_recovery_resets_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id123_ui_alert_matrix1_ui_a033_ap_trial_expired_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id123_ui_alert_matrix1_ui_a033_ap_trial_expired_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id123_ui_alert_matrix1_ui_a033_ap_trial_expired_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id123_ui_alert_matrix1_ui_a034_wakeup_problem_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id123_ui_alert_matrix1_ui_a034_wakeup_problem_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id123_ui_alert_matrix1_ui_a034_wakeup_problem_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id123_ui_alert_matrix1_ui_a035_audio_watchdog_kernel_error_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id123_ui_alert_matrix1_ui_a035_audio_watchdog_kernel_error_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id123_ui_alert_matrix1_ui_a035_audio_watchdog_kernel_error_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id123_ui_alert_matrix1_ui_a036_audio_watchdog_hfp_error_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id123_ui_alert_matrix1_ui_a036_audio_watchdog_hfp_error_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id123_ui_alert_matrix1_ui_a036_audio_watchdog_hfp_error_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id123_ui_alert_matrix1_ui_a037_audio_watchdog_xrun_storm_error_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id123_ui_alert_matrix1_ui_a037_audio_watchdog_xrun_storm_error_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id123_ui_alert_matrix1_ui_a037_audio_watchdog_xrun_storm_error_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id123_ui_alert_matrix1_ui_a038_audio_watchdog_a2b_i2c_lockup_error_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id123_ui_alert_matrix1_ui_a038_audio_watchdog_a2b_i2c_lockup_error_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id123_ui_alert_matrix1_ui_a038_audio_watchdog_a2b_i2c_lockup_error_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id123_ui_alert_matrix1_ui_a039_audio_a2b_need_rediscovery_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id123_ui_alert_matrix1_ui_a039_audio_a2b_need_rediscovery_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id123_ui_alert_matrix1_ui_a039_audio_a2b_need_rediscovery_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id123_ui_alert_matrix1_ui_a040_homelink_transmit_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id123_ui_alert_matrix1_ui_a040_homelink_transmit_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id123_ui_alert_matrix1_ui_a040_homelink_transmit_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id123_ui_alert_matrix1_ui_a041_audio_dmesg_xrun_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id123_ui_alert_matrix1_ui_a041_audio_dmesg_xrun_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id123_ui_alert_matrix1_ui_a041_audio_dmesg_xrun_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id123_ui_alert_matrix1_ui_a042_audio_dmesg_rt_throttling_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id123_ui_alert_matrix1_ui_a042_audio_dmesg_rt_throttling_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id123_ui_alert_matrix1_ui_a042_audio_dmesg_rt_throttling_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id123_ui_alert_matrix1_ui_a043_invalid_map_data_override_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id123_ui_alert_matrix1_ui_a043_invalid_map_data_override_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id123_ui_alert_matrix1_ui_a043_invalid_map_data_override_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id123_ui_alert_matrix1_ui_a044_audio_dmesg_dsp_exception_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id123_ui_alert_matrix1_ui_a044_audio_dmesg_dsp_exception_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id123_ui_alert_matrix1_ui_a044_audio_dmesg_dsp_exception_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id123_ui_alert_matrix1_ui_a045_e_call_needs_service_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id123_ui_alert_matrix1_ui_a045_e_call_needs_service_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id123_ui_alert_matrix1_ui_a045_e_call_needs_service_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id123_ui_alert_matrix1_ui_a046_backup_camera_stream_error_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id123_ui_alert_matrix1_ui_a046_backup_camera_stream_error_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id123_ui_alert_matrix1_ui_a046_backup_camera_stream_error_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id123_ui_alert_matrix1_ui_a047_cell_roaming_disallowed_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id123_ui_alert_matrix1_ui_a047_cell_roaming_disallowed_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id123_ui_alert_matrix1_ui_a047_cell_roaming_disallowed_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id123_ui_alert_matrix1_ui_a048_audio_premium_amp_check_failed_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id123_ui_alert_matrix1_ui_a048_audio_premium_amp_check_failed_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id123_ui_alert_matrix1_ui_a048_audio_premium_amp_check_failed_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id123_ui_alert_matrix1_ui_a049_brake_shift_required_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id123_ui_alert_matrix1_ui_a049_brake_shift_required_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id123_ui_alert_matrix1_ui_a049_brake_shift_required_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id123_ui_alert_matrix1_ui_a050_backup_camera_ipu_timeout_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id123_ui_alert_matrix1_ui_a050_backup_camera_ipu_timeout_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id123_ui_alert_matrix1_ui_a050_backup_camera_ipu_timeout_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id123_ui_alert_matrix1_ui_a051_backup_camera_frame_timeout_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id123_ui_alert_matrix1_ui_a051_backup_camera_frame_timeout_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id123_ui_alert_matrix1_ui_a051_backup_camera_frame_timeout_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id123_ui_alert_matrix1_ui_a052_kernel_panic_reported_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id123_ui_alert_matrix1_ui_a052_kernel_panic_reported_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id123_ui_alert_matrix1_ui_a052_kernel_panic_reported_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id123_ui_alert_matrix1_ui_a053_qt_car_exit_error_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id123_ui_alert_matrix1_ui_a053_qt_car_exit_error_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id123_ui_alert_matrix1_ui_a053_qt_car_exit_error_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id123_ui_alert_matrix1_ui_a054_audio_boost_power_bad_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id123_ui_alert_matrix1_ui_a054_audio_boost_power_bad_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id123_ui_alert_matrix1_ui_a054_audio_boost_power_bad_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id123_ui_alert_matrix1_ui_a055_manual_e_call_disabled_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id123_ui_alert_matrix1_ui_a055_manual_e_call_disabled_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id123_ui_alert_matrix1_ui_a055_manual_e_call_disabled_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id123_ui_alert_matrix1_ui_a056_manual_e_call_button_disconnected_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id123_ui_alert_matrix1_ui_a056_manual_e_call_button_disconnected_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id123_ui_alert_matrix1_ui_a056_manual_e_call_button_disconnected_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id123_ui_alert_matrix1_ui_a057_cell_antenna_disconnected_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id123_ui_alert_matrix1_ui_a057_cell_antenna_disconnected_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id123_ui_alert_matrix1_ui_a057_cell_antenna_disconnected_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id123_ui_alert_matrix1_ui_a058_gps_antenna_disconnected_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id123_ui_alert_matrix1_ui_a058_gps_antenna_disconnected_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id123_ui_alert_matrix1_ui_a058_gps_antenna_disconnected_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id123_ui_alert_matrix1_ui_a059_e_call_speaker_disconnected_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id123_ui_alert_matrix1_ui_a059_e_call_speaker_disconnected_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id123_ui_alert_matrix1_ui_a059_e_call_speaker_disconnected_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id123_ui_alert_matrix1_ui_a060_e_call_mic_disconnected_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id123_ui_alert_matrix1_ui_a060_e_call_mic_disconnected_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id123_ui_alert_matrix1_ui_a060_e_call_mic_disconnected_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id123_ui_alert_matrix1_ui_a061_sim_test_failed_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id123_ui_alert_matrix1_ui_a061_sim_test_failed_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id123_ui_alert_matrix1_ui_a061_sim_test_failed_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id123_ui_alert_matrix1_ui_a062_ens_test_failed_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id123_ui_alert_matrix1_ui_a062_ens_test_failed_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id123_ui_alert_matrix1_ui_a062_ens_test_failed_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id123_ui_alert_matrix1_ui_a063_cellular_test_failed_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id123_ui_alert_matrix1_ui_a063_cellular_test_failed_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id123_ui_alert_matrix1_ui_a063_cellular_test_failed_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id123_ui_alert_matrix1_ui_a064_modem_firmware_test_failed_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id123_ui_alert_matrix1_ui_a064_modem_firmware_test_failed_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id123_ui_alert_matrix1_ui_a064_modem_firmware_test_failed_is_in_range(uint8_t value);

/**
 * Pack message ID247DAS_autopilotDebug.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int model3_can_id247_das_autopilot_debug_pack(
    uint8_t *dst_p,
    const struct model3_can_id247_das_autopilot_debug_t *src_p,
    size_t size);

/**
 * Unpack message ID247DAS_autopilotDebug.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int model3_can_id247_das_autopilot_debug_unpack(
    struct model3_can_id247_das_autopilot_debug_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id247_das_autopilot_debug_das_mission_plan_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id247_das_autopilot_debug_das_mission_plan_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id247_das_autopilot_debug_das_mission_plan_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id247_das_autopilot_debug_das_road_estimator_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id247_das_autopilot_debug_das_road_estimator_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id247_das_autopilot_debug_das_road_estimator_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id247_das_autopilot_debug_das_localizer_health_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id247_das_autopilot_debug_das_localizer_health_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id247_das_autopilot_debug_das_localizer_health_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id247_das_autopilot_debug_das_map_availability_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id247_das_autopilot_debug_das_map_availability_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id247_das_autopilot_debug_das_map_availability_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id247_das_autopilot_debug_das_controller_ref_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id247_das_autopilot_debug_das_controller_ref_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id247_das_autopilot_debug_das_controller_ref_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id247_das_autopilot_debug_das_alc_internal_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id247_das_autopilot_debug_das_alc_internal_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id247_das_autopilot_debug_das_alc_internal_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id247_das_autopilot_debug_das_behavior_report_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id247_das_autopilot_debug_das_behavior_report_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id247_das_autopilot_debug_das_behavior_report_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id247_das_autopilot_debug_das_controller_health_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id247_das_autopilot_debug_das_controller_health_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id247_das_autopilot_debug_das_controller_health_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id247_das_autopilot_debug_das_construction_zone_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id247_das_autopilot_debug_das_construction_zone_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id247_das_autopilot_debug_das_construction_zone_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id247_das_autopilot_debug_das_control_distance_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id247_das_autopilot_debug_das_control_distance_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id247_das_autopilot_debug_das_control_distance_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id247_das_autopilot_debug_das_autopilot_abort_reason_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id247_das_autopilot_debug_das_autopilot_abort_reason_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id247_das_autopilot_debug_das_autopilot_abort_reason_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id247_das_autopilot_debug_das_rqsted_behavior_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id247_das_autopilot_debug_das_rqsted_behavior_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id247_das_autopilot_debug_das_rqsted_behavior_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id247_das_autopilot_debug_das_fork_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id247_das_autopilot_debug_das_fork_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id247_das_autopilot_debug_das_fork_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id247_das_autopilot_debug_das_lane_change_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id247_das_autopilot_debug_das_lane_change_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id247_das_autopilot_debug_das_lane_change_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id247_das_autopilot_debug_das_last_watchdog_code_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id247_das_autopilot_debug_das_last_watchdog_code_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id247_das_autopilot_debug_das_last_watchdog_code_is_in_range(uint8_t value);

/**
 * Pack message ID2B4PCS_dcdcRailStatus.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int model3_can_id2_b4_pcs_dcdc_rail_status_pack(
    uint8_t *dst_p,
    const struct model3_can_id2_b4_pcs_dcdc_rail_status_t *src_p,
    size_t size);

/**
 * Unpack message ID2B4PCS_dcdcRailStatus.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int model3_can_id2_b4_pcs_dcdc_rail_status_unpack(
    struct model3_can_id2_b4_pcs_dcdc_rail_status_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id2_b4_pcs_dcdc_rail_status_pcs_dcdc_lv_bus_volt_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_b4_pcs_dcdc_rail_status_pcs_dcdc_lv_bus_volt_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_b4_pcs_dcdc_rail_status_pcs_dcdc_lv_bus_volt_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id2_b4_pcs_dcdc_rail_status_pcs_dcdc_hv_bus_volt_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_b4_pcs_dcdc_rail_status_pcs_dcdc_hv_bus_volt_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_b4_pcs_dcdc_rail_status_pcs_dcdc_hv_bus_volt_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id2_b4_pcs_dcdc_rail_status_pcs_dcdc_lv_output_current_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_b4_pcs_dcdc_rail_status_pcs_dcdc_lv_output_current_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_b4_pcs_dcdc_rail_status_pcs_dcdc_lv_output_current_is_in_range(uint16_t value);

/**
 * Pack message ID3F5VCFRONT_lighting.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int model3_can_id3_f5_vcfront_lighting_pack(
    uint8_t *dst_p,
    const struct model3_can_id3_f5_vcfront_lighting_t *src_p,
    size_t size);

/**
 * Unpack message ID3F5VCFRONT_lighting.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int model3_can_id3_f5_vcfront_lighting_unpack(
    struct model3_can_id3_f5_vcfront_lighting_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id3_f5_vcfront_lighting_vcfront_indicator_left_request_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id3_f5_vcfront_lighting_vcfront_indicator_left_request_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id3_f5_vcfront_lighting_vcfront_indicator_left_request_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id3_f5_vcfront_lighting_vcfront_indicator_right_request_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id3_f5_vcfront_lighting_vcfront_indicator_right_request_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id3_f5_vcfront_lighting_vcfront_indicator_right_request_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id3_f5_vcfront_lighting_vcfront_hazard_light_request_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id3_f5_vcfront_lighting_vcfront_hazard_light_request_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id3_f5_vcfront_lighting_vcfront_hazard_light_request_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id3_f5_vcfront_lighting_vcfront_ambient_lighting_brightnes_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id3_f5_vcfront_lighting_vcfront_ambient_lighting_brightnes_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id3_f5_vcfront_lighting_vcfront_ambient_lighting_brightnes_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id3_f5_vcfront_lighting_vcfront_switch_lighting_brightness_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id3_f5_vcfront_lighting_vcfront_switch_lighting_brightness_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id3_f5_vcfront_lighting_vcfront_switch_lighting_brightness_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id3_f5_vcfront_lighting_vcfront_courtesy_lighting_request_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id3_f5_vcfront_lighting_vcfront_courtesy_lighting_request_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id3_f5_vcfront_lighting_vcfront_courtesy_lighting_request_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id3_f5_vcfront_lighting_vcfront_approach_lighting_request_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id3_f5_vcfront_lighting_vcfront_approach_lighting_request_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id3_f5_vcfront_lighting_vcfront_approach_lighting_request_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id3_f5_vcfront_lighting_vcfront_see_you_home_lighting_req_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id3_f5_vcfront_lighting_vcfront_see_you_home_lighting_req_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id3_f5_vcfront_lighting_vcfront_see_you_home_lighting_req_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id3_f5_vcfront_lighting_vcfront_hazard_switch_backlight_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id3_f5_vcfront_lighting_vcfront_hazard_switch_backlight_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id3_f5_vcfront_lighting_vcfront_hazard_switch_backlight_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id3_f5_vcfront_lighting_vcfront_low_beam_left_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id3_f5_vcfront_lighting_vcfront_low_beam_left_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id3_f5_vcfront_lighting_vcfront_low_beam_left_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id3_f5_vcfront_lighting_vcfront_low_beam_right_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id3_f5_vcfront_lighting_vcfront_low_beam_right_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id3_f5_vcfront_lighting_vcfront_low_beam_right_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id3_f5_vcfront_lighting_vcfront_high_beam_left_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id3_f5_vcfront_lighting_vcfront_high_beam_left_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id3_f5_vcfront_lighting_vcfront_high_beam_left_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id3_f5_vcfront_lighting_vcfront_high_beam_right_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id3_f5_vcfront_lighting_vcfront_high_beam_right_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id3_f5_vcfront_lighting_vcfront_high_beam_right_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id3_f5_vcfront_lighting_vcfront_drl_left_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id3_f5_vcfront_lighting_vcfront_drl_left_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id3_f5_vcfront_lighting_vcfront_drl_left_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id3_f5_vcfront_lighting_vcfront_drl_right_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id3_f5_vcfront_lighting_vcfront_drl_right_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id3_f5_vcfront_lighting_vcfront_drl_right_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id3_f5_vcfront_lighting_vcfront_fog_left_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id3_f5_vcfront_lighting_vcfront_fog_left_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id3_f5_vcfront_lighting_vcfront_fog_left_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id3_f5_vcfront_lighting_vcfront_fog_right_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id3_f5_vcfront_lighting_vcfront_fog_right_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id3_f5_vcfront_lighting_vcfront_fog_right_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id3_f5_vcfront_lighting_vcfront_side_markers_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id3_f5_vcfront_lighting_vcfront_side_markers_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id3_f5_vcfront_lighting_vcfront_side_markers_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id3_f5_vcfront_lighting_vcfront_side_repeater_left_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id3_f5_vcfront_lighting_vcfront_side_repeater_left_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id3_f5_vcfront_lighting_vcfront_side_repeater_left_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id3_f5_vcfront_lighting_vcfront_side_repeater_right_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id3_f5_vcfront_lighting_vcfront_side_repeater_right_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id3_f5_vcfront_lighting_vcfront_side_repeater_right_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id3_f5_vcfront_lighting_vcfront_turn_signal_left_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id3_f5_vcfront_lighting_vcfront_turn_signal_left_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id3_f5_vcfront_lighting_vcfront_turn_signal_left_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id3_f5_vcfront_lighting_vcfront_turn_signal_right_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id3_f5_vcfront_lighting_vcfront_turn_signal_right_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id3_f5_vcfront_lighting_vcfront_turn_signal_right_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id3_f5_vcfront_lighting_vcfront_park_left_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id3_f5_vcfront_lighting_vcfront_park_left_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id3_f5_vcfront_lighting_vcfront_park_left_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id3_f5_vcfront_lighting_vcfront_park_right_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id3_f5_vcfront_lighting_vcfront_park_right_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id3_f5_vcfront_lighting_vcfront_park_right_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id3_f5_vcfront_lighting_vcfront_high_beam_switch_active_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id3_f5_vcfront_lighting_vcfront_high_beam_switch_active_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id3_f5_vcfront_lighting_vcfront_high_beam_switch_active_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id3_f5_vcfront_lighting_vcfront_sim_latching_stalk_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id3_f5_vcfront_lighting_vcfront_sim_latching_stalk_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id3_f5_vcfront_lighting_vcfront_sim_latching_stalk_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id3_f5_vcfront_lighting_vcfront_low_beams_on_for_drl_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id3_f5_vcfront_lighting_vcfront_low_beams_on_for_drl_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id3_f5_vcfront_lighting_vcfront_low_beams_on_for_drl_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id3_f5_vcfront_lighting_vcfront_low_beams_calibrated_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id3_f5_vcfront_lighting_vcfront_low_beams_calibrated_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id3_f5_vcfront_lighting_vcfront_low_beams_calibrated_is_in_range(uint8_t value);

/**
 * Pack message ID3E9DAS_bodyControls.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int model3_can_id3_e9_das_body_controls_pack(
    uint8_t *dst_p,
    const struct model3_can_id3_e9_das_body_controls_t *src_p,
    size_t size);

/**
 * Unpack message ID3E9DAS_bodyControls.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int model3_can_id3_e9_das_body_controls_unpack(
    struct model3_can_id3_e9_das_body_controls_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id3_e9_das_body_controls_das_headlight_request_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id3_e9_das_body_controls_das_headlight_request_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id3_e9_das_body_controls_das_headlight_request_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id3_e9_das_body_controls_das_hazard_light_request_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id3_e9_das_body_controls_das_hazard_light_request_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id3_e9_das_body_controls_das_hazard_light_request_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id3_e9_das_body_controls_das_wiper_speed_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id3_e9_das_body_controls_das_wiper_speed_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id3_e9_das_body_controls_das_wiper_speed_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id3_e9_das_body_controls_das_turn_indicator_request_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id3_e9_das_body_controls_das_turn_indicator_request_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id3_e9_das_body_controls_das_turn_indicator_request_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id3_e9_das_body_controls_das_high_low_beam_decision_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id3_e9_das_body_controls_das_high_low_beam_decision_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id3_e9_das_body_controls_das_high_low_beam_decision_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id3_e9_das_body_controls_das_heater_request_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id3_e9_das_body_controls_das_heater_request_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id3_e9_das_body_controls_das_heater_request_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id3_e9_das_body_controls_das_high_low_beam_off_reason_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id3_e9_das_body_controls_das_high_low_beam_off_reason_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id3_e9_das_body_controls_das_high_low_beam_off_reason_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id3_e9_das_body_controls_das_turn_indicator_request_reason_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id3_e9_das_body_controls_das_turn_indicator_request_reason_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id3_e9_das_body_controls_das_turn_indicator_request_reason_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id3_e9_das_body_controls_das_dynamic_brake_light_request_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id3_e9_das_body_controls_das_dynamic_brake_light_request_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id3_e9_das_body_controls_das_dynamic_brake_light_request_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id3_e9_das_body_controls_das_body_controls_counter_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id3_e9_das_body_controls_das_body_controls_counter_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id3_e9_das_body_controls_das_body_controls_counter_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id3_e9_das_body_controls_das_body_controls_checksum_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id3_e9_das_body_controls_das_body_controls_checksum_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id3_e9_das_body_controls_das_body_controls_checksum_is_in_range(uint8_t value);

/**
 * Pack message ID267DI_vehicleEstimates.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int model3_can_id267_di_vehicle_estimates_pack(
    uint8_t *dst_p,
    const struct model3_can_id267_di_vehicle_estimates_t *src_p,
    size_t size);

/**
 * Unpack message ID267DI_vehicleEstimates.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int model3_can_id267_di_vehicle_estimates_unpack(
    struct model3_can_id267_di_vehicle_estimates_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id267_di_vehicle_estimates_di_mass_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id267_di_vehicle_estimates_di_mass_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id267_di_vehicle_estimates_di_mass_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id267_di_vehicle_estimates_di_tire_fitment_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id267_di_vehicle_estimates_di_tire_fitment_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id267_di_vehicle_estimates_di_tire_fitment_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id267_di_vehicle_estimates_di_trailer_detected_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id267_di_vehicle_estimates_di_trailer_detected_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id267_di_vehicle_estimates_di_trailer_detected_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id267_di_vehicle_estimates_di_vehicle_estimates_counter_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id267_di_vehicle_estimates_di_vehicle_estimates_counter_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id267_di_vehicle_estimates_di_vehicle_estimates_counter_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id267_di_vehicle_estimates_di_mass_confidence_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id267_di_vehicle_estimates_di_mass_confidence_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id267_di_vehicle_estimates_di_mass_confidence_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t model3_can_id267_di_vehicle_estimates_di_grade_est_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id267_di_vehicle_estimates_di_grade_est_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id267_di_vehicle_estimates_di_grade_est_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id267_di_vehicle_estimates_di_vehicle_estimates_checksum_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id267_di_vehicle_estimates_di_vehicle_estimates_checksum_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id267_di_vehicle_estimates_di_vehicle_estimates_checksum_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t model3_can_id267_di_vehicle_estimates_di_grade_est_internal_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id267_di_vehicle_estimates_di_grade_est_internal_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id267_di_vehicle_estimates_di_grade_est_internal_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t model3_can_id267_di_vehicle_estimates_di_steering_angle_offset_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id267_di_vehicle_estimates_di_steering_angle_offset_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id267_di_vehicle_estimates_di_steering_angle_offset_is_in_range(int8_t value);

/**
 * Pack message ID335RearDIinfo.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int model3_can_id335_rear_d_iinfo_pack(
    uint8_t *dst_p,
    const struct model3_can_id335_rear_d_iinfo_t *src_p,
    size_t size);

/**
 * Unpack message ID335RearDIinfo.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int model3_can_id335_rear_d_iinfo_unpack(
    struct model3_can_id335_rear_d_iinfo_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id335_rear_d_iinfo_dir_info_index_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id335_rear_d_iinfo_dir_info_index_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id335_rear_d_iinfo_dir_info_index_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint64_t model3_can_id335_rear_d_iinfo_dir_app_git_hash_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id335_rear_d_iinfo_dir_app_git_hash_decode(uint64_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id335_rear_d_iinfo_dir_app_git_hash_is_in_range(uint64_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint64_t model3_can_id335_rear_d_iinfo_dir_boot_git_hash_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id335_rear_d_iinfo_dir_boot_git_hash_decode(uint64_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id335_rear_d_iinfo_dir_boot_git_hash_is_in_range(uint64_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id335_rear_d_iinfo_dir_build_type_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id335_rear_d_iinfo_dir_build_type_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id335_rear_d_iinfo_dir_build_type_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id335_rear_d_iinfo_dir_info_boot_ld_uds_protocol_version_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id335_rear_d_iinfo_dir_info_boot_ld_uds_protocol_version_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id335_rear_d_iinfo_dir_info_boot_ld_uds_protocol_version_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id335_rear_d_iinfo_dir_oil_pump_build_type_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id335_rear_d_iinfo_dir_oil_pump_build_type_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id335_rear_d_iinfo_dir_oil_pump_build_type_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id335_rear_d_iinfo_dir_platform_typ_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id335_rear_d_iinfo_dir_platform_typ_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id335_rear_d_iinfo_dir_platform_typ_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint64_t model3_can_id335_rear_d_iinfo_dir_subcomponent_git_hash_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id335_rear_d_iinfo_dir_subcomponent_git_hash_decode(uint64_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id335_rear_d_iinfo_dir_subcomponent_git_hash_is_in_range(uint64_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id335_rear_d_iinfo_dir_build_configuration_id_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id335_rear_d_iinfo_dir_build_configuration_id_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id335_rear_d_iinfo_dir_build_configuration_id_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t model3_can_id335_rear_d_iinfo_dir_oil_pump_app_crc_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id335_rear_d_iinfo_dir_oil_pump_app_crc_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id335_rear_d_iinfo_dir_oil_pump_app_crc_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id335_rear_d_iinfo_dir_pcba_id_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id335_rear_d_iinfo_dir_pcba_id_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id335_rear_d_iinfo_dir_pcba_id_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id335_rear_d_iinfo_dir_assembly_id_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id335_rear_d_iinfo_dir_assembly_id_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id335_rear_d_iinfo_dir_assembly_id_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t model3_can_id335_rear_d_iinfo_dir_application_crc_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id335_rear_d_iinfo_dir_application_crc_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id335_rear_d_iinfo_dir_application_crc_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t model3_can_id335_rear_d_iinfo_dir_bootloader_crc_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id335_rear_d_iinfo_dir_bootloader_crc_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id335_rear_d_iinfo_dir_bootloader_crc_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id335_rear_d_iinfo_dir_hardware_id_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id335_rear_d_iinfo_dir_hardware_id_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id335_rear_d_iinfo_dir_hardware_id_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id335_rear_d_iinfo_dir_usage_id_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id335_rear_d_iinfo_dir_usage_id_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id335_rear_d_iinfo_dir_usage_id_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id335_rear_d_iinfo_dir_fpga_version_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id335_rear_d_iinfo_dir_fpga_version_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id335_rear_d_iinfo_dir_fpga_version_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id335_rear_d_iinfo_dir_component_id_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id335_rear_d_iinfo_dir_component_id_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id335_rear_d_iinfo_dir_component_id_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id335_rear_d_iinfo_dir_sub_usage_id_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id335_rear_d_iinfo_dir_sub_usage_id_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id335_rear_d_iinfo_dir_sub_usage_id_is_in_range(uint16_t value);

/**
 * Pack message ID656FrontDIinfo.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int model3_can_id656_front_d_iinfo_pack(
    uint8_t *dst_p,
    const struct model3_can_id656_front_d_iinfo_t *src_p,
    size_t size);

/**
 * Unpack message ID656FrontDIinfo.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int model3_can_id656_front_d_iinfo_unpack(
    struct model3_can_id656_front_d_iinfo_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id656_front_d_iinfo_dif_info_index_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id656_front_d_iinfo_dif_info_index_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id656_front_d_iinfo_dif_info_index_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint64_t model3_can_id656_front_d_iinfo_dif_app_git_hash_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id656_front_d_iinfo_dif_app_git_hash_decode(uint64_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id656_front_d_iinfo_dif_app_git_hash_is_in_range(uint64_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint64_t model3_can_id656_front_d_iinfo_dif_boot_git_hash_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id656_front_d_iinfo_dif_boot_git_hash_decode(uint64_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id656_front_d_iinfo_dif_boot_git_hash_is_in_range(uint64_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id656_front_d_iinfo_dif_build_type_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id656_front_d_iinfo_dif_build_type_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id656_front_d_iinfo_dif_build_type_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id656_front_d_iinfo_dif_info_boot_ld_uds_protocol_version_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id656_front_d_iinfo_dif_info_boot_ld_uds_protocol_version_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id656_front_d_iinfo_dif_info_boot_ld_uds_protocol_version_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id656_front_d_iinfo_dif_oil_pump_build_type_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id656_front_d_iinfo_dif_oil_pump_build_type_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id656_front_d_iinfo_dif_oil_pump_build_type_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id656_front_d_iinfo_dif_platform_typ_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id656_front_d_iinfo_dif_platform_typ_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id656_front_d_iinfo_dif_platform_typ_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint64_t model3_can_id656_front_d_iinfo_dif_subcomponent_git_hash_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id656_front_d_iinfo_dif_subcomponent_git_hash_decode(uint64_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id656_front_d_iinfo_dif_subcomponent_git_hash_is_in_range(uint64_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id656_front_d_iinfo_dif_build_configuration_id_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id656_front_d_iinfo_dif_build_configuration_id_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id656_front_d_iinfo_dif_build_configuration_id_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t model3_can_id656_front_d_iinfo_dif_oil_pump_app_crc_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id656_front_d_iinfo_dif_oil_pump_app_crc_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id656_front_d_iinfo_dif_oil_pump_app_crc_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id656_front_d_iinfo_dif_pcba_id_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id656_front_d_iinfo_dif_pcba_id_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id656_front_d_iinfo_dif_pcba_id_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id656_front_d_iinfo_dif_assembly_id_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id656_front_d_iinfo_dif_assembly_id_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id656_front_d_iinfo_dif_assembly_id_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t model3_can_id656_front_d_iinfo_dif_application_crc_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id656_front_d_iinfo_dif_application_crc_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id656_front_d_iinfo_dif_application_crc_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t model3_can_id656_front_d_iinfo_dif_bootloader_crc_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id656_front_d_iinfo_dif_bootloader_crc_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id656_front_d_iinfo_dif_bootloader_crc_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id656_front_d_iinfo_dif_hardware_id_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id656_front_d_iinfo_dif_hardware_id_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id656_front_d_iinfo_dif_hardware_id_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id656_front_d_iinfo_dif_usage_id_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id656_front_d_iinfo_dif_usage_id_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id656_front_d_iinfo_dif_usage_id_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id656_front_d_iinfo_dif_fpga_version_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id656_front_d_iinfo_dif_fpga_version_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id656_front_d_iinfo_dif_fpga_version_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id656_front_d_iinfo_dif_component_id_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id656_front_d_iinfo_dif_component_id_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id656_front_d_iinfo_dif_component_id_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id656_front_d_iinfo_dif_sub_usage_id_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id656_front_d_iinfo_dif_sub_usage_id_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id656_front_d_iinfo_dif_sub_usage_id_is_in_range(uint16_t value);

/**
 * Pack message ID300BMS_info.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int model3_can_id300_bms_info_pack(
    uint8_t *dst_p,
    const struct model3_can_id300_bms_info_t *src_p,
    size_t size);

/**
 * Unpack message ID300BMS_info.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int model3_can_id300_bms_info_unpack(
    struct model3_can_id300_bms_info_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id300_bms_info_bms_info_index_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id300_bms_info_bms_info_index_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id300_bms_info_bms_info_index_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint64_t model3_can_id300_bms_info_bms_app_git_hash_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id300_bms_info_bms_app_git_hash_decode(uint64_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id300_bms_info_bms_app_git_hash_is_in_range(uint64_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint64_t model3_can_id300_bms_info_bms_boot_git_hash_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id300_bms_info_bms_boot_git_hash_decode(uint64_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id300_bms_info_bms_boot_git_hash_is_in_range(uint64_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id300_bms_info_bms_boot_uds_proto_version_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id300_bms_info_bms_boot_uds_proto_version_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id300_bms_info_bms_boot_uds_proto_version_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id300_bms_info_bms_build_type_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id300_bms_info_bms_build_type_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id300_bms_info_bms_build_type_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id300_bms_info_bms_platform_type_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id300_bms_info_bms_platform_type_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id300_bms_info_bms_platform_type_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id300_bms_info_bms_build_config_id_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id300_bms_info_bms_build_config_id_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id300_bms_info_bms_build_config_id_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id300_bms_info_bms_pcba_id_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id300_bms_info_bms_pcba_id_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id300_bms_info_bms_pcba_id_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id300_bms_info_bms_assembly_id_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id300_bms_info_bms_assembly_id_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id300_bms_info_bms_assembly_id_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t model3_can_id300_bms_info_bms_app_crc_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id300_bms_info_bms_app_crc_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id300_bms_info_bms_app_crc_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t model3_can_id300_bms_info_bms_boot_crc_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id300_bms_info_bms_boot_crc_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id300_bms_info_bms_boot_crc_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id300_bms_info_bms_hardware_id_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id300_bms_info_bms_hardware_id_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id300_bms_info_bms_hardware_id_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id300_bms_info_bms_usage_id_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id300_bms_info_bms_usage_id_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id300_bms_info_bms_usage_id_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id300_bms_info_bms_component_id_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id300_bms_info_bms_component_id_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id300_bms_info_bms_component_id_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id300_bms_info_bms_sub_usage_id_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id300_bms_info_bms_sub_usage_id_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id300_bms_info_bms_sub_usage_id_is_in_range(uint16_t value);

/**
 * Pack message ID212BMS_status.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int model3_can_id212_bms_status_pack(
    uint8_t *dst_p,
    const struct model3_can_id212_bms_status_t *src_p,
    size_t size);

/**
 * Unpack message ID212BMS_status.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int model3_can_id212_bms_status_unpack(
    struct model3_can_id212_bms_status_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id212_bms_status_bms_hvac_power_request_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id212_bms_status_bms_hvac_power_request_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id212_bms_status_bms_hvac_power_request_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id212_bms_status_bms_not_enough_power_for_drive_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id212_bms_status_bms_not_enough_power_for_drive_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id212_bms_status_bms_not_enough_power_for_drive_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id212_bms_status_bms_not_enough_power_for_support_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id212_bms_status_bms_not_enough_power_for_support_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id212_bms_status_bms_not_enough_power_for_support_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id212_bms_status_bms_precondition_allowed_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id212_bms_status_bms_precondition_allowed_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id212_bms_status_bms_precondition_allowed_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id212_bms_status_bms_update_allowed_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id212_bms_status_bms_update_allowed_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id212_bms_status_bms_update_allowed_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id212_bms_status_bms_active_heating_worthwhile_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id212_bms_status_bms_active_heating_worthwhile_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id212_bms_status_bms_active_heating_worthwhile_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id212_bms_status_bms_cp_mia_on_hvs_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id212_bms_status_bms_cp_mia_on_hvs_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id212_bms_status_bms_cp_mia_on_hvs_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id212_bms_status_bms_pcs_pwm_enabled_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id212_bms_status_bms_pcs_pwm_enabled_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id212_bms_status_bms_pcs_pwm_enabled_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id212_bms_status_bms_contactor_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id212_bms_status_bms_contactor_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id212_bms_status_bms_contactor_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id212_bms_status_bms_ui_charge_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id212_bms_status_bms_ui_charge_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id212_bms_status_bms_ui_charge_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id212_bms_status_bms_ecu_log_upload_request_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id212_bms_status_bms_ecu_log_upload_request_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id212_bms_status_bms_ecu_log_upload_request_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id212_bms_status_bms_hv_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id212_bms_status_bms_hv_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id212_bms_status_bms_hv_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id212_bms_status_bms_isolation_resistance_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id212_bms_status_bms_isolation_resistance_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id212_bms_status_bms_isolation_resistance_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id212_bms_status_bms_charge_request_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id212_bms_status_bms_charge_request_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id212_bms_status_bms_charge_request_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id212_bms_status_bms_keep_warm_request_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id212_bms_status_bms_keep_warm_request_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id212_bms_status_bms_keep_warm_request_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id212_bms_status_bms_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id212_bms_status_bms_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id212_bms_status_bms_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id212_bms_status_bms_di_limp_request_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id212_bms_status_bms_di_limp_request_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id212_bms_status_bms_di_limp_request_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id212_bms_status_bms_ok_to_ship_by_air_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id212_bms_status_bms_ok_to_ship_by_air_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id212_bms_status_bms_ok_to_ship_by_air_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id212_bms_status_bms_ok_to_ship_by_land_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id212_bms_status_bms_ok_to_ship_by_land_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id212_bms_status_bms_ok_to_ship_by_land_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id212_bms_status_bms_chg_power_available_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id212_bms_status_bms_chg_power_available_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id212_bms_status_bms_chg_power_available_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id212_bms_status_bms_charge_retry_count_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id212_bms_status_bms_charge_retry_count_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id212_bms_status_bms_charge_retry_count_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id212_bms_status_bms_sm_state_request_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id212_bms_status_bms_sm_state_request_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id212_bms_status_bms_sm_state_request_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id212_bms_status_bms_min_pack_temperature_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id212_bms_status_bms_min_pack_temperature_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id212_bms_status_bms_min_pack_temperature_is_in_range(uint8_t value);

/**
 * Pack message ID3B2BMS_log2.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int model3_can_id3_b2_bms_log2_pack(
    uint8_t *dst_p,
    const struct model3_can_id3_b2_bms_log2_t *src_p,
    size_t size);

/**
 * Unpack message ID3B2BMS_log2.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int model3_can_id3_b2_bms_log2_unpack(
    struct model3_can_id3_b2_bms_log2_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id3_b2_bms_log2_bms_log2_mux_id_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id3_b2_bms_log2_bms_log2_mux_id_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id3_b2_bms_log2_bms_log2_mux_id_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id3_b2_bms_log2_bms_cac_min_lower_bound_est_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id3_b2_bms_log2_bms_cac_min_lower_bound_est_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id3_b2_bms_log2_bms_cac_min_lower_bound_est_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id3_b2_bms_log2_bms_100_hz_task_avg_exec_time_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id3_b2_bms_log2_bms_100_hz_task_avg_exec_time_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id3_b2_bms_log2_bms_100_hz_task_avg_exec_time_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t model3_can_id3_b2_bms_log2_bms_10_hz_task_avg_exec_time_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id3_b2_bms_log2_bms_10_hz_task_avg_exec_time_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id3_b2_bms_log2_bms_10_hz_task_avg_exec_time_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t model3_can_id3_b2_bms_log2_bms_1_hz_task_avg_exec_time_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id3_b2_bms_log2_bms_1_hz_task_avg_exec_time_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id3_b2_bms_log2_bms_1_hz_task_avg_exec_time_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id3_b2_bms_log2_bms_cac_avg_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id3_b2_bms_log2_bms_cac_avg_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id3_b2_bms_log2_bms_cac_avg_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id3_b2_bms_log2_bms_cac_min_soc_by_ocv_start_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id3_b2_bms_log2_bms_cac_min_soc_by_ocv_start_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id3_b2_bms_log2_bms_cac_min_soc_by_ocv_start_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id3_b2_bms_log2_bms_chg_end_evse_charge_type_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id3_b2_bms_log2_bms_chg_end_evse_charge_type_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id3_b2_bms_log2_bms_chg_end_evse_charge_type_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t model3_can_id3_b2_bms_log2_bms_load_reg_output_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id3_b2_bms_log2_bms_load_reg_output_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id3_b2_bms_log2_bms_load_reg_output_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t model3_can_id3_b2_bms_log2_bms_neg_ctr_common_mode_rej_error_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id3_b2_bms_log2_bms_neg_ctr_common_mode_rej_error_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id3_b2_bms_log2_bms_neg_ctr_common_mode_rej_error_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t model3_can_id3_b2_bms_log2_bms_neg_ctr_deviation_filt_min_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id3_b2_bms_log2_bms_neg_ctr_deviation_filt_min_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id3_b2_bms_log2_bms_neg_ctr_deviation_filt_min_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t model3_can_id3_b2_bms_log2_bms_neg_ctr_deviation_min_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id3_b2_bms_log2_bms_neg_ctr_deviation_min_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id3_b2_bms_log2_bms_neg_ctr_deviation_min_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t model3_can_id3_b2_bms_log2_bms_neg_ctr_drop_corrected_min_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id3_b2_bms_log2_bms_neg_ctr_drop_corrected_min_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id3_b2_bms_log2_bms_neg_ctr_drop_corrected_min_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t model3_can_id3_b2_bms_log2_bms_pos_ctr_common_mode_rej_error_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id3_b2_bms_log2_bms_pos_ctr_common_mode_rej_error_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id3_b2_bms_log2_bms_pos_ctr_common_mode_rej_error_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t model3_can_id3_b2_bms_log2_bms_pos_ctr_deviation_filt_min_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id3_b2_bms_log2_bms_pos_ctr_deviation_filt_min_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id3_b2_bms_log2_bms_pos_ctr_deviation_filt_min_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t model3_can_id3_b2_bms_log2_bms_pos_ctr_deviation_min_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id3_b2_bms_log2_bms_pos_ctr_deviation_min_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id3_b2_bms_log2_bms_pos_ctr_deviation_min_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t model3_can_id3_b2_bms_log2_bms_pos_ctr_drop_corrected_min_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id3_b2_bms_log2_bms_pos_ctr_drop_corrected_min_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id3_b2_bms_log2_bms_pos_ctr_drop_corrected_min_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t model3_can_id3_b2_bms_log2_bms_pos_ctr_resistance_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id3_b2_bms_log2_bms_pos_ctr_resistance_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id3_b2_bms_log2_bms_pos_ctr_resistance_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id3_b2_bms_log2_bms_v_change_window_min_brick_v_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id3_b2_bms_log2_bms_v_change_window_min_brick_v_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id3_b2_bms_log2_bms_v_change_window_min_brick_v_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t model3_can_id3_b2_bms_log2_bms_ah_charge_total_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id3_b2_bms_log2_bms_ah_charge_total_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id3_b2_bms_log2_bms_ah_charge_total_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id3_b2_bms_log2_bms_chg_request_terminated_count_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id3_b2_bms_log2_bms_chg_request_terminated_count_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id3_b2_bms_log2_bms_chg_request_terminated_count_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id3_b2_bms_log2_bms_fc_link_test_decay_time_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id3_b2_bms_log2_bms_fc_link_test_decay_time_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id3_b2_bms_log2_bms_fc_link_test_decay_time_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id3_b2_bms_log2_bms_hv_chain_use_leaky_bucket_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id3_b2_bms_log2_bms_hv_chain_use_leaky_bucket_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id3_b2_bms_log2_bms_hv_chain_use_leaky_bucket_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id3_b2_bms_log2_bms_pack_rest_time_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id3_b2_bms_log2_bms_pack_rest_time_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id3_b2_bms_log2_bms_pack_rest_time_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id3_b2_bms_log2_bms_hv_chain_i_limit_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id3_b2_bms_log2_bms_hv_chain_i_limit_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id3_b2_bms_log2_bms_hv_chain_i_limit_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id3_b2_bms_log2_bms_flood_port_state1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id3_b2_bms_log2_bms_flood_port_state1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id3_b2_bms_log2_bms_flood_port_state1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id3_b2_bms_log2_bms_chg_end_charge_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id3_b2_bms_log2_bms_chg_end_charge_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id3_b2_bms_log2_bms_chg_end_charge_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id3_b2_bms_log2_bms_flood_port_state2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id3_b2_bms_log2_bms_flood_port_state2_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id3_b2_bms_log2_bms_flood_port_state2_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id3_b2_bms_log2_bms_cac_min_soc_by_ocv_end_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id3_b2_bms_log2_bms_cac_min_soc_by_ocv_end_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id3_b2_bms_log2_bms_cac_min_soc_by_ocv_end_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id3_b2_bms_log2_bms_chg_end_bms_hv_charge_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id3_b2_bms_log2_bms_chg_end_bms_hv_charge_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id3_b2_bms_log2_bms_chg_end_bms_hv_charge_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id3_b2_bms_log2_bms_energy_reserve_min_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id3_b2_bms_log2_bms_energy_reserve_min_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id3_b2_bms_log2_bms_energy_reserve_min_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id3_b2_bms_log2_bms_flood_port_v1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id3_b2_bms_log2_bms_flood_port_v1_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id3_b2_bms_log2_bms_flood_port_v1_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id3_b2_bms_log2_bms_vsh_test_max_delta_v_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id3_b2_bms_log2_bms_vsh_test_max_delta_v_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id3_b2_bms_log2_bms_vsh_test_max_delta_v_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t model3_can_id3_b2_bms_log2_bms_offset_reg_output_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id3_b2_bms_log2_bms_offset_reg_output_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id3_b2_bms_log2_bms_offset_reg_output_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id3_b2_bms_log2_bms_cac_min_raw_estimate_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id3_b2_bms_log2_bms_cac_min_raw_estimate_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id3_b2_bms_log2_bms_cac_min_raw_estimate_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id3_b2_bms_log2_bms_fc_link_test_time_since_last_run_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id3_b2_bms_log2_bms_fc_link_test_time_since_last_run_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id3_b2_bms_log2_bms_fc_link_test_time_since_last_run_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id3_b2_bms_log2_bms_v_change_window_min_brick_v_id_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id3_b2_bms_log2_bms_v_change_window_min_brick_v_id_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id3_b2_bms_log2_bms_v_change_window_min_brick_v_id_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id3_b2_bms_log2_bms_cac_min_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id3_b2_bms_log2_bms_cac_min_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id3_b2_bms_log2_bms_cac_min_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id3_b2_bms_log2_bms_chg_end_cp_hv_charge_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id3_b2_bms_log2_bms_chg_end_cp_hv_charge_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id3_b2_bms_log2_bms_chg_end_cp_hv_charge_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id3_b2_bms_log2_bms_neg_ctr_common_mode_rej_error_conf_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id3_b2_bms_log2_bms_neg_ctr_common_mode_rej_error_conf_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id3_b2_bms_log2_bms_neg_ctr_common_mode_rej_error_conf_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t model3_can_id3_b2_bms_log2_bms_neg_ctr_deviation_filt_max_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id3_b2_bms_log2_bms_neg_ctr_deviation_filt_max_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id3_b2_bms_log2_bms_neg_ctr_deviation_filt_max_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t model3_can_id3_b2_bms_log2_bms_neg_ctr_deviation_max_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id3_b2_bms_log2_bms_neg_ctr_deviation_max_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id3_b2_bms_log2_bms_neg_ctr_deviation_max_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t model3_can_id3_b2_bms_log2_bms_neg_ctr_drop_corrected_max_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id3_b2_bms_log2_bms_neg_ctr_drop_corrected_max_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id3_b2_bms_log2_bms_neg_ctr_drop_corrected_max_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id3_b2_bms_log2_bms_pos_ctr_common_mode_rej_error_conf_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id3_b2_bms_log2_bms_pos_ctr_common_mode_rej_error_conf_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id3_b2_bms_log2_bms_pos_ctr_common_mode_rej_error_conf_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t model3_can_id3_b2_bms_log2_bms_pos_ctr_deviation_filt_max_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id3_b2_bms_log2_bms_pos_ctr_deviation_filt_max_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id3_b2_bms_log2_bms_pos_ctr_deviation_filt_max_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t model3_can_id3_b2_bms_log2_bms_pos_ctr_deviation_max_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id3_b2_bms_log2_bms_pos_ctr_deviation_max_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id3_b2_bms_log2_bms_pos_ctr_deviation_max_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t model3_can_id3_b2_bms_log2_bms_pos_ctr_drop_corrected_max_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id3_b2_bms_log2_bms_pos_ctr_drop_corrected_max_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id3_b2_bms_log2_bms_pos_ctr_drop_corrected_max_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id3_b2_bms_log2_bms_pos_ctr_resistance_confidence_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id3_b2_bms_log2_bms_pos_ctr_resistance_confidence_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id3_b2_bms_log2_bms_pos_ctr_resistance_confidence_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id3_b2_bms_log2_bms_1k_hz_task_avg_exec_time_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id3_b2_bms_log2_bms_1k_hz_task_avg_exec_time_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id3_b2_bms_log2_bms_1k_hz_task_avg_exec_time_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id3_b2_bms_log2_bms_ideal_energy_floor_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id3_b2_bms_log2_bms_ideal_energy_floor_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id3_b2_bms_log2_bms_ideal_energy_floor_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id3_b2_bms_log2_bms_chg_end_pcs_hv_charge_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id3_b2_bms_log2_bms_chg_end_pcs_hv_charge_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id3_b2_bms_log2_bms_chg_end_pcs_hv_charge_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id3_b2_bms_log2_bms_chg_end_cp_shutdown_request_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id3_b2_bms_log2_bms_chg_end_cp_shutdown_request_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id3_b2_bms_log2_bms_chg_end_cp_shutdown_request_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id3_b2_bms_log2_bms_hv_chain_limiting_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id3_b2_bms_log2_bms_hv_chain_limiting_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id3_b2_bms_log2_bms_hv_chain_limiting_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id3_b2_bms_log2_bms_vsh_test_max_delta_v_brick_id_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id3_b2_bms_log2_bms_vsh_test_max_delta_v_brick_id_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id3_b2_bms_log2_bms_vsh_test_max_delta_v_brick_id_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id3_b2_bms_log2_bms_v_change_window_max_v_change_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id3_b2_bms_log2_bms_v_change_window_max_v_change_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id3_b2_bms_log2_bms_v_change_window_max_v_change_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t model3_can_id3_b2_bms_log2_bms_cac_min_delta_ah_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id3_b2_bms_log2_bms_cac_min_delta_ah_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id3_b2_bms_log2_bms_cac_min_delta_ah_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id3_b2_bms_log2_bms_chg_end_pcs_shutdown_request_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id3_b2_bms_log2_bms_chg_end_pcs_shutdown_request_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id3_b2_bms_log2_bms_chg_end_pcs_shutdown_request_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id3_b2_bms_log2_bms_chg_end_battery_charge_request_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id3_b2_bms_log2_bms_chg_end_battery_charge_request_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id3_b2_bms_log2_bms_chg_end_battery_charge_request_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id3_b2_bms_log2_bms_chg_end_dc_evse_compatible_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id3_b2_bms_log2_bms_chg_end_dc_evse_compatible_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id3_b2_bms_log2_bms_chg_end_dc_evse_compatible_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id3_b2_bms_log2_bms_chg_end_disable_under_failure_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id3_b2_bms_log2_bms_chg_end_disable_under_failure_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id3_b2_bms_log2_bms_chg_end_disable_under_failure_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id3_b2_bms_log2_bms_dynamic_energy_buffer_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id3_b2_bms_log2_bms_dynamic_energy_buffer_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id3_b2_bms_log2_bms_dynamic_energy_buffer_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id3_b2_bms_log2_bms_pcs_precharge_request_active_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id3_b2_bms_log2_bms_pcs_precharge_request_active_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id3_b2_bms_log2_bms_pcs_precharge_request_active_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id3_b2_bms_log2_bms_cac_min_upper_bound_est_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id3_b2_bms_log2_bms_cac_min_upper_bound_est_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id3_b2_bms_log2_bms_cac_min_upper_bound_est_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id3_b2_bms_log2_bms_v_change_window_max_v_change_id_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id3_b2_bms_log2_bms_v_change_window_max_v_change_id_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id3_b2_bms_log2_bms_v_change_window_max_v_change_id_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id3_b2_bms_log2_bms_100_hz_task_max_exec_time_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id3_b2_bms_log2_bms_100_hz_task_max_exec_time_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id3_b2_bms_log2_bms_100_hz_task_max_exec_time_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t model3_can_id3_b2_bms_log2_bms_10_hz_task_max_exec_time_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id3_b2_bms_log2_bms_10_hz_task_max_exec_time_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id3_b2_bms_log2_bms_10_hz_task_max_exec_time_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t model3_can_id3_b2_bms_log2_bms_1_hz_task_max_exec_time_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id3_b2_bms_log2_bms_1_hz_task_max_exec_time_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id3_b2_bms_log2_bms_1_hz_task_max_exec_time_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t model3_can_id3_b2_bms_log2_bms_ah_discharge_total_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id3_b2_bms_log2_bms_ah_discharge_total_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id3_b2_bms_log2_bms_ah_discharge_total_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id3_b2_bms_log2_bms_cac_min_brick_id_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id3_b2_bms_log2_bms_cac_min_brick_id_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id3_b2_bms_log2_bms_cac_min_brick_id_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id3_b2_bms_log2_bms_charge_current_limit_mode_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id3_b2_bms_log2_bms_charge_current_limit_mode_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id3_b2_bms_log2_bms_charge_current_limit_mode_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id3_b2_bms_log2_bms_energy_reserve_max_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id3_b2_bms_log2_bms_energy_reserve_max_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id3_b2_bms_log2_bms_energy_reserve_max_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id3_b2_bms_log2_bms_flood_port_v2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id3_b2_bms_log2_bms_flood_port_v2_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id3_b2_bms_log2_bms_flood_port_v2_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t model3_can_id3_b2_bms_log2_bms_hv_chain_limiting_state_temperature_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id3_b2_bms_log2_bms_hv_chain_limiting_state_temperature_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id3_b2_bms_log2_bms_hv_chain_limiting_state_temperature_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id3_b2_bms_log2_bms_neg_ctr_deviation_confidence_min_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id3_b2_bms_log2_bms_neg_ctr_deviation_confidence_min_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id3_b2_bms_log2_bms_neg_ctr_deviation_confidence_min_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id3_b2_bms_log2_bms_neg_ctr_deviation_filt_conf_min_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id3_b2_bms_log2_bms_neg_ctr_deviation_filt_conf_min_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id3_b2_bms_log2_bms_neg_ctr_deviation_filt_conf_min_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t model3_can_id3_b2_bms_log2_bms_neg_ctr_drop_corrected_filt_min_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id3_b2_bms_log2_bms_neg_ctr_drop_corrected_filt_min_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id3_b2_bms_log2_bms_neg_ctr_drop_corrected_filt_min_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t model3_can_id3_b2_bms_log2_bms_neg_ctr_offset_error_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id3_b2_bms_log2_bms_neg_ctr_offset_error_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id3_b2_bms_log2_bms_neg_ctr_offset_error_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t model3_can_id3_b2_bms_log2_bms_neg_ctr_resistance_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id3_b2_bms_log2_bms_neg_ctr_resistance_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id3_b2_bms_log2_bms_neg_ctr_resistance_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t model3_can_id3_b2_bms_log2_bms_pcs_precharge_target_voltage_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id3_b2_bms_log2_bms_pcs_precharge_target_voltage_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id3_b2_bms_log2_bms_pcs_precharge_target_voltage_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id3_b2_bms_log2_bms_pos_ctr_deviation_confidence_min_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id3_b2_bms_log2_bms_pos_ctr_deviation_confidence_min_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id3_b2_bms_log2_bms_pos_ctr_deviation_confidence_min_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id3_b2_bms_log2_bms_pos_ctr_deviation_filt_conf_min_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id3_b2_bms_log2_bms_pos_ctr_deviation_filt_conf_min_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id3_b2_bms_log2_bms_pos_ctr_deviation_filt_conf_min_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t model3_can_id3_b2_bms_log2_bms_pos_ctr_drop_corrected_filt_min_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id3_b2_bms_log2_bms_pos_ctr_drop_corrected_filt_min_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id3_b2_bms_log2_bms_pos_ctr_drop_corrected_filt_min_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t model3_can_id3_b2_bms_log2_bms_pos_ctr_offset_error_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id3_b2_bms_log2_bms_pos_ctr_offset_error_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id3_b2_bms_log2_bms_pos_ctr_offset_error_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id3_b2_bms_log2_bms_vsh_test_min_delta_v_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id3_b2_bms_log2_bms_vsh_test_min_delta_v_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id3_b2_bms_log2_bms_vsh_test_min_delta_v_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id3_b2_bms_log2_bms_charge_needed_reason_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id3_b2_bms_log2_bms_charge_needed_reason_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id3_b2_bms_log2_bms_charge_needed_reason_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t model3_can_id3_b2_bms_log2_bms_cac_min_update_ah_error_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id3_b2_bms_log2_bms_cac_min_update_ah_error_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id3_b2_bms_log2_bms_cac_min_update_ah_error_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id3_b2_bms_log2_bms_max_dc_current_available_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id3_b2_bms_log2_bms_max_dc_current_available_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id3_b2_bms_log2_bms_max_dc_current_available_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id3_b2_bms_log2_bms_v_change_window_change_init_v_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id3_b2_bms_log2_bms_v_change_window_change_init_v_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id3_b2_bms_log2_bms_v_change_window_change_init_v_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id3_b2_bms_log2_bms_cac_max_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id3_b2_bms_log2_bms_cac_max_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id3_b2_bms_log2_bms_cac_max_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id3_b2_bms_log2_bms_vsh_test_min_delta_v_brick_id_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id3_b2_bms_log2_bms_vsh_test_min_delta_v_brick_id_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id3_b2_bms_log2_bms_vsh_test_min_delta_v_brick_id_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id3_b2_bms_log2_bms_cac_max_kalman_error_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id3_b2_bms_log2_bms_cac_max_kalman_error_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id3_b2_bms_log2_bms_cac_max_kalman_error_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id3_b2_bms_log2_bms_neg_ctr_deviation_confidence_max_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id3_b2_bms_log2_bms_neg_ctr_deviation_confidence_max_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id3_b2_bms_log2_bms_neg_ctr_deviation_confidence_max_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id3_b2_bms_log2_bms_neg_ctr_deviation_filt_conf_max_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id3_b2_bms_log2_bms_neg_ctr_deviation_filt_conf_max_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id3_b2_bms_log2_bms_neg_ctr_deviation_filt_conf_max_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t model3_can_id3_b2_bms_log2_bms_neg_ctr_drop_corrected_filt_max_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id3_b2_bms_log2_bms_neg_ctr_drop_corrected_filt_max_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id3_b2_bms_log2_bms_neg_ctr_drop_corrected_filt_max_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id3_b2_bms_log2_bms_neg_ctr_offset_error_conf_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id3_b2_bms_log2_bms_neg_ctr_offset_error_conf_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id3_b2_bms_log2_bms_neg_ctr_offset_error_conf_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id3_b2_bms_log2_bms_neg_ctr_resistance_confidence_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id3_b2_bms_log2_bms_neg_ctr_resistance_confidence_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id3_b2_bms_log2_bms_neg_ctr_resistance_confidence_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id3_b2_bms_log2_bms_pos_ctr_deviation_confidence_max_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id3_b2_bms_log2_bms_pos_ctr_deviation_confidence_max_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id3_b2_bms_log2_bms_pos_ctr_deviation_confidence_max_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id3_b2_bms_log2_bms_pos_ctr_deviation_filt_conf_max_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id3_b2_bms_log2_bms_pos_ctr_deviation_filt_conf_max_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id3_b2_bms_log2_bms_pos_ctr_deviation_filt_conf_max_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t model3_can_id3_b2_bms_log2_bms_pos_ctr_drop_corrected_filt_max_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id3_b2_bms_log2_bms_pos_ctr_drop_corrected_filt_max_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id3_b2_bms_log2_bms_pos_ctr_drop_corrected_filt_max_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id3_b2_bms_log2_bms_pos_ctr_offset_error_conf_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id3_b2_bms_log2_bms_pos_ctr_offset_error_conf_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id3_b2_bms_log2_bms_pos_ctr_offset_error_conf_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id3_b2_bms_log2_bms_1k_hz_task_max_exec_time_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id3_b2_bms_log2_bms_1k_hz_task_max_exec_time_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id3_b2_bms_log2_bms_1k_hz_task_max_exec_time_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id3_b2_bms_log2_bms_energy_reserve_avg_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id3_b2_bms_log2_bms_energy_reserve_avg_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id3_b2_bms_log2_bms_energy_reserve_avg_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id3_b2_bms_log2_bms_current_reg_target_i_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id3_b2_bms_log2_bms_current_reg_target_i_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id3_b2_bms_log2_bms_current_reg_target_i_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id3_b2_bms_log2_bms_v_change_window_change_is_outlier_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id3_b2_bms_log2_bms_v_change_window_change_is_outlier_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id3_b2_bms_log2_bms_v_change_window_change_is_outlier_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id3_b2_bms_log2_bms_v_change_window_time_after_wake_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id3_b2_bms_log2_bms_v_change_window_time_after_wake_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id3_b2_bms_log2_bms_v_change_window_time_after_wake_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id3_b2_bms_log2_bms_capacity_imbalance_pct_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id3_b2_bms_log2_bms_capacity_imbalance_pct_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id3_b2_bms_log2_bms_capacity_imbalance_pct_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id3_b2_bms_log2_bms_cac_max_brick_id_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id3_b2_bms_log2_bms_cac_max_brick_id_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id3_b2_bms_log2_bms_cac_max_brick_id_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id3_b2_bms_log2_bms_v_change_window_num_outlier_changes_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id3_b2_bms_log2_bms_v_change_window_num_outlier_changes_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id3_b2_bms_log2_bms_v_change_window_num_outlier_changes_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id3_b2_bms_log2_bms_cp_charge_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id3_b2_bms_log2_bms_cp_charge_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id3_b2_bms_log2_bms_cp_charge_status_is_in_range(uint8_t value);

/**
 * Pack message ID320BMS_alertMatrix.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int model3_can_id320_bms_alert_matrix_pack(
    uint8_t *dst_p,
    const struct model3_can_id320_bms_alert_matrix_t *src_p,
    size_t size);

/**
 * Unpack message ID320BMS_alertMatrix.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int model3_can_id320_bms_alert_matrix_unpack(
    struct model3_can_id320_bms_alert_matrix_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id320_bms_alert_matrix_bms_matrix_index_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id320_bms_alert_matrix_bms_matrix_index_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id320_bms_alert_matrix_bms_matrix_index_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id320_bms_alert_matrix_bms_a001_pack_config_mismatch_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id320_bms_alert_matrix_bms_a001_pack_config_mismatch_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id320_bms_alert_matrix_bms_a001_pack_config_mismatch_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id320_bms_alert_matrix_bms_a061_sw_brick_v_change_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id320_bms_alert_matrix_bms_a061_sw_brick_v_change_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id320_bms_alert_matrix_bms_a061_sw_brick_v_change_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id320_bms_alert_matrix_bms_a121_sw_nvram_config_error_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id320_bms_alert_matrix_bms_a121_sw_nvram_config_error_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id320_bms_alert_matrix_bms_a121_sw_nvram_config_error_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id320_bms_alert_matrix_bms_a062_sw_brick_v_imbalance_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id320_bms_alert_matrix_bms_a062_sw_brick_v_imbalance_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id320_bms_alert_matrix_bms_a062_sw_brick_v_imbalance_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id320_bms_alert_matrix_bms_a122_sw_bms_therm_irrational_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id320_bms_alert_matrix_bms_a122_sw_bms_therm_irrational_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id320_bms_alert_matrix_bms_a122_sw_bms_therm_irrational_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id320_bms_alert_matrix_bms_a063_sw_charge_port_fault_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id320_bms_alert_matrix_bms_a063_sw_charge_port_fault_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id320_bms_alert_matrix_bms_a063_sw_charge_port_fault_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id320_bms_alert_matrix_bms_a123_sw_internal_isolation_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id320_bms_alert_matrix_bms_a123_sw_internal_isolation_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id320_bms_alert_matrix_bms_a123_sw_internal_isolation_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id320_bms_alert_matrix_bms_a064_sw_soc_imbalance_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id320_bms_alert_matrix_bms_a064_sw_soc_imbalance_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id320_bms_alert_matrix_bms_a064_sw_soc_imbalance_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id320_bms_alert_matrix_bms_a065_sw_cac_imbalance_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id320_bms_alert_matrix_bms_a065_sw_cac_imbalance_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id320_bms_alert_matrix_bms_a065_sw_cac_imbalance_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id320_bms_alert_matrix_bms_a126_sw_thermistor_failure_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id320_bms_alert_matrix_bms_a126_sw_thermistor_failure_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id320_bms_alert_matrix_bms_a126_sw_thermistor_failure_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id320_bms_alert_matrix_bms_a007_sw_slowed_chg_batt_cold_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id320_bms_alert_matrix_bms_a007_sw_slowed_chg_batt_cold_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id320_bms_alert_matrix_bms_a007_sw_slowed_chg_batt_cold_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id320_bms_alert_matrix_bms_a127_sw_shunt_sna_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id320_bms_alert_matrix_bms_a127_sw_shunt_sna_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id320_bms_alert_matrix_bms_a127_sw_shunt_sna_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id320_bms_alert_matrix_bms_a128_sw_shunt_mia_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id320_bms_alert_matrix_bms_a128_sw_shunt_mia_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id320_bms_alert_matrix_bms_a128_sw_shunt_mia_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id320_bms_alert_matrix_bms_a069_sw_low_power_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id320_bms_alert_matrix_bms_a069_sw_low_power_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id320_bms_alert_matrix_bms_a069_sw_low_power_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id320_bms_alert_matrix_bms_a129_sw_vsh_failure_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id320_bms_alert_matrix_bms_a129_sw_vsh_failure_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id320_bms_alert_matrix_bms_a129_sw_vsh_failure_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id320_bms_alert_matrix_bms_a130_io_can_error_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id320_bms_alert_matrix_bms_a130_io_can_error_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id320_bms_alert_matrix_bms_a130_io_can_error_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id320_bms_alert_matrix_bms_a071_sw_sm_trans_con_not_met_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id320_bms_alert_matrix_bms_a071_sw_sm_trans_con_not_met_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id320_bms_alert_matrix_bms_a071_sw_sm_trans_con_not_met_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id320_bms_alert_matrix_bms_a131_bleed_fet_failure_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id320_bms_alert_matrix_bms_a131_bleed_fet_failure_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id320_bms_alert_matrix_bms_a131_bleed_fet_failure_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id320_bms_alert_matrix_bms_a132_hw_bmb_otp_uncorrctbl_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id320_bms_alert_matrix_bms_a132_hw_bmb_otp_uncorrctbl_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id320_bms_alert_matrix_bms_a132_hw_bmb_otp_uncorrctbl_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id320_bms_alert_matrix_bms_a134_sw_delayed_ctr_off_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id320_bms_alert_matrix_bms_a134_sw_delayed_ctr_off_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id320_bms_alert_matrix_bms_a134_sw_delayed_ctr_off_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id320_bms_alert_matrix_bms_a075_sw_chg_disable_failure_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id320_bms_alert_matrix_bms_a075_sw_chg_disable_failure_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id320_bms_alert_matrix_bms_a075_sw_chg_disable_failure_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id320_bms_alert_matrix_bms_a135_hw_bmb_diagnostics_failure_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id320_bms_alert_matrix_bms_a135_hw_bmb_diagnostics_failure_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id320_bms_alert_matrix_bms_a135_hw_bmb_diagnostics_failure_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id320_bms_alert_matrix_bms_a016_pack_module_id_mismatch_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id320_bms_alert_matrix_bms_a016_pack_module_id_mismatch_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id320_bms_alert_matrix_bms_a016_pack_module_id_mismatch_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id320_bms_alert_matrix_bms_a076_sw_dch_while_charging_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id320_bms_alert_matrix_bms_a076_sw_dch_while_charging_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id320_bms_alert_matrix_bms_a076_sw_dch_while_charging_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id320_bms_alert_matrix_bms_a136_sw_module_ot_warning_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id320_bms_alert_matrix_bms_a136_sw_module_ot_warning_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id320_bms_alert_matrix_bms_a136_sw_module_ot_warning_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id320_bms_alert_matrix_bms_a017_sw_brick_ov_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id320_bms_alert_matrix_bms_a017_sw_brick_ov_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id320_bms_alert_matrix_bms_a017_sw_brick_ov_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id320_bms_alert_matrix_bms_a077_sw_charger_regulation_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id320_bms_alert_matrix_bms_a077_sw_charger_regulation_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id320_bms_alert_matrix_bms_a077_sw_charger_regulation_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id320_bms_alert_matrix_bms_a137_sw_brick_uv_warning_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id320_bms_alert_matrix_bms_a137_sw_brick_uv_warning_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id320_bms_alert_matrix_bms_a137_sw_brick_uv_warning_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id320_bms_alert_matrix_bms_a018_sw_brick_uv_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id320_bms_alert_matrix_bms_a018_sw_brick_uv_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id320_bms_alert_matrix_bms_a018_sw_brick_uv_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id320_bms_alert_matrix_bms_a138_sw_brick_ov_warning_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id320_bms_alert_matrix_bms_a138_sw_brick_ov_warning_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id320_bms_alert_matrix_bms_a138_sw_brick_ov_warning_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id320_bms_alert_matrix_bms_a019_sw_module_ot_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id320_bms_alert_matrix_bms_a019_sw_module_ot_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id320_bms_alert_matrix_bms_a019_sw_module_ot_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id320_bms_alert_matrix_bms_a139_sw_dc_link_v_irrational_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id320_bms_alert_matrix_bms_a139_sw_dc_link_v_irrational_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id320_bms_alert_matrix_bms_a139_sw_dc_link_v_irrational_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id320_bms_alert_matrix_bms_a080_sw_pack_ctr_impedance_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id320_bms_alert_matrix_bms_a080_sw_pack_ctr_impedance_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id320_bms_alert_matrix_bms_a080_sw_pack_ctr_impedance_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id320_bms_alert_matrix_bms_a021_sw_dr_limits_regulation_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id320_bms_alert_matrix_bms_a021_sw_dr_limits_regulation_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id320_bms_alert_matrix_bms_a021_sw_dr_limits_regulation_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id320_bms_alert_matrix_bms_a081_sw_ctr_close_blocked_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id320_bms_alert_matrix_bms_a081_sw_ctr_close_blocked_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id320_bms_alert_matrix_bms_a081_sw_ctr_close_blocked_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id320_bms_alert_matrix_bms_a141_sw_bmb_status_warning_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id320_bms_alert_matrix_bms_a141_sw_bmb_status_warning_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id320_bms_alert_matrix_bms_a141_sw_bmb_status_warning_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id320_bms_alert_matrix_bms_a022_sw_over_current_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id320_bms_alert_matrix_bms_a022_sw_over_current_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id320_bms_alert_matrix_bms_a022_sw_over_current_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id320_bms_alert_matrix_bms_a082_sw_ctr_force_open_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id320_bms_alert_matrix_bms_a082_sw_ctr_force_open_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id320_bms_alert_matrix_bms_a082_sw_ctr_force_open_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id320_bms_alert_matrix_bms_a023_sw_stack_ov_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id320_bms_alert_matrix_bms_a023_sw_stack_ov_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id320_bms_alert_matrix_bms_a023_sw_stack_ov_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id320_bms_alert_matrix_bms_a083_sw_ctr_close_failure_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id320_bms_alert_matrix_bms_a083_sw_ctr_close_failure_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id320_bms_alert_matrix_bms_a083_sw_ctr_close_failure_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id320_bms_alert_matrix_bms_a143_sw_cac_change_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id320_bms_alert_matrix_bms_a143_sw_cac_change_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id320_bms_alert_matrix_bms_a143_sw_cac_change_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id320_bms_alert_matrix_bms_a024_sw_islanded_brick_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id320_bms_alert_matrix_bms_a024_sw_islanded_brick_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id320_bms_alert_matrix_bms_a024_sw_islanded_brick_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id320_bms_alert_matrix_bms_a084_sw_sleep_wake_aborted_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id320_bms_alert_matrix_bms_a084_sw_sleep_wake_aborted_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id320_bms_alert_matrix_bms_a084_sw_sleep_wake_aborted_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id320_bms_alert_matrix_bms_a144_hvp_config_mismatch_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id320_bms_alert_matrix_bms_a144_hvp_config_mismatch_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id320_bms_alert_matrix_bms_a144_hvp_config_mismatch_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id320_bms_alert_matrix_bms_a025_sw_pwr_balance_anomaly_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id320_bms_alert_matrix_bms_a025_sw_pwr_balance_anomaly_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id320_bms_alert_matrix_bms_a025_sw_pwr_balance_anomaly_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id320_bms_alert_matrix_bms_a145_sw_soc_change_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id320_bms_alert_matrix_bms_a145_sw_soc_change_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id320_bms_alert_matrix_bms_a145_sw_soc_change_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id320_bms_alert_matrix_bms_a026_sw_hf_current_anomaly_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id320_bms_alert_matrix_bms_a026_sw_hf_current_anomaly_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id320_bms_alert_matrix_bms_a026_sw_hf_current_anomaly_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id320_bms_alert_matrix_bms_a146_sw_brick_overdischarged_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id320_bms_alert_matrix_bms_a146_sw_brick_overdischarged_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id320_bms_alert_matrix_bms_a146_sw_brick_overdischarged_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id320_bms_alert_matrix_bms_a087_sw_feim_test_blocked_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id320_bms_alert_matrix_bms_a087_sw_feim_test_blocked_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id320_bms_alert_matrix_bms_a087_sw_feim_test_blocked_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id320_bms_alert_matrix_bms_a088_sw_vc_front_mia_in_drive_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id320_bms_alert_matrix_bms_a088_sw_vc_front_mia_in_drive_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id320_bms_alert_matrix_bms_a088_sw_vc_front_mia_in_drive_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id320_bms_alert_matrix_bms_a089_sw_vc_front_mia_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id320_bms_alert_matrix_bms_a089_sw_vc_front_mia_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id320_bms_alert_matrix_bms_a089_sw_vc_front_mia_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id320_bms_alert_matrix_bms_a149_sw_missing_config_block_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id320_bms_alert_matrix_bms_a149_sw_missing_config_block_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id320_bms_alert_matrix_bms_a149_sw_missing_config_block_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id320_bms_alert_matrix_bms_a090_sw_gateway_mia_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id320_bms_alert_matrix_bms_a090_sw_gateway_mia_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id320_bms_alert_matrix_bms_a090_sw_gateway_mia_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id320_bms_alert_matrix_bms_a091_sw_charge_port_mia_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id320_bms_alert_matrix_bms_a091_sw_charge_port_mia_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id320_bms_alert_matrix_bms_a091_sw_charge_port_mia_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id320_bms_alert_matrix_bms_a151_sw_external_isolation_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id320_bms_alert_matrix_bms_a151_sw_external_isolation_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id320_bms_alert_matrix_bms_a151_sw_external_isolation_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id320_bms_alert_matrix_bms_a092_sw_charge_port_mia_on_hvs_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id320_bms_alert_matrix_bms_a092_sw_charge_port_mia_on_hvs_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id320_bms_alert_matrix_bms_a092_sw_charge_port_mia_on_hvs_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id320_bms_alert_matrix_bms_a034_sw_passive_isolation_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id320_bms_alert_matrix_bms_a034_sw_passive_isolation_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id320_bms_alert_matrix_bms_a034_sw_passive_isolation_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id320_bms_alert_matrix_bms_a094_sw_drive_inverter_mia_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id320_bms_alert_matrix_bms_a094_sw_drive_inverter_mia_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id320_bms_alert_matrix_bms_a094_sw_drive_inverter_mia_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id320_bms_alert_matrix_bms_a035_sw_isolation_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id320_bms_alert_matrix_bms_a035_sw_isolation_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id320_bms_alert_matrix_bms_a035_sw_isolation_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id320_bms_alert_matrix_bms_a155_sw_weak_short_impedence_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id320_bms_alert_matrix_bms_a155_sw_weak_short_impedence_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id320_bms_alert_matrix_bms_a155_sw_weak_short_impedence_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id320_bms_alert_matrix_bms_a036_sw_hvp_hvil_fault_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id320_bms_alert_matrix_bms_a036_sw_hvp_hvil_fault_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id320_bms_alert_matrix_bms_a036_sw_hvp_hvil_fault_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id320_bms_alert_matrix_bms_a156_sw_bmb_vref_bad_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id320_bms_alert_matrix_bms_a156_sw_bmb_vref_bad_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id320_bms_alert_matrix_bms_a156_sw_bmb_vref_bad_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id320_bms_alert_matrix_bms_a037_sw_flood_port_open_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id320_bms_alert_matrix_bms_a037_sw_flood_port_open_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id320_bms_alert_matrix_bms_a037_sw_flood_port_open_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id320_bms_alert_matrix_bms_a098_sw_bmb_data_integrity_loss_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id320_bms_alert_matrix_bms_a098_sw_bmb_data_integrity_loss_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id320_bms_alert_matrix_bms_a098_sw_bmb_data_integrity_loss_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id320_bms_alert_matrix_bms_a158_sw_hvp_hvi_comms_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id320_bms_alert_matrix_bms_a158_sw_hvp_hvi_comms_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id320_bms_alert_matrix_bms_a158_sw_hvp_hvi_comms_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id320_bms_alert_matrix_bms_a039_sw_dc_link_over_voltage_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id320_bms_alert_matrix_bms_a039_sw_dc_link_over_voltage_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id320_bms_alert_matrix_bms_a039_sw_dc_link_over_voltage_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id320_bms_alert_matrix_bms_a099_sw_bmb_communication_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id320_bms_alert_matrix_bms_a099_sw_bmb_communication_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id320_bms_alert_matrix_bms_a099_sw_bmb_communication_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id320_bms_alert_matrix_bms_a159_sw_hvp_ecu_error_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id320_bms_alert_matrix_bms_a159_sw_hvp_ecu_error_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id320_bms_alert_matrix_bms_a159_sw_hvp_ecu_error_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id320_bms_alert_matrix_bms_a040_sw_watch_dog_hw_triggered_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id320_bms_alert_matrix_bms_a040_sw_watch_dog_hw_triggered_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id320_bms_alert_matrix_bms_a040_sw_watch_dog_hw_triggered_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id320_bms_alert_matrix_bms_a160_sw_fc_ctr_clean_failed_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id320_bms_alert_matrix_bms_a160_sw_fc_ctr_clean_failed_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id320_bms_alert_matrix_bms_a160_sw_fc_ctr_clean_failed_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id320_bms_alert_matrix_bms_a041_sw_destructive_reset_source_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id320_bms_alert_matrix_bms_a041_sw_destructive_reset_source_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id320_bms_alert_matrix_bms_a041_sw_destructive_reset_source_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id320_bms_alert_matrix_bms_a161_sw_di_open_request_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id320_bms_alert_matrix_bms_a161_sw_di_open_request_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id320_bms_alert_matrix_bms_a161_sw_di_open_request_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id320_bms_alert_matrix_bms_a042_sw_mpu_error_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id320_bms_alert_matrix_bms_a042_sw_mpu_error_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id320_bms_alert_matrix_bms_a042_sw_mpu_error_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id320_bms_alert_matrix_bms_a162_sw_no_power_for_support_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id320_bms_alert_matrix_bms_a162_sw_no_power_for_support_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id320_bms_alert_matrix_bms_a162_sw_no_power_for_support_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id320_bms_alert_matrix_bms_a043_sw_watch_dog_reset_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id320_bms_alert_matrix_bms_a043_sw_watch_dog_reset_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id320_bms_alert_matrix_bms_a043_sw_watch_dog_reset_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id320_bms_alert_matrix_bms_a163_sw_contactor_mismatch_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id320_bms_alert_matrix_bms_a163_sw_contactor_mismatch_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id320_bms_alert_matrix_bms_a163_sw_contactor_mismatch_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id320_bms_alert_matrix_bms_a044_sw_assertion_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id320_bms_alert_matrix_bms_a044_sw_assertion_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id320_bms_alert_matrix_bms_a044_sw_assertion_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id320_bms_alert_matrix_bms_a164_sw_uncontrolled_regen_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id320_bms_alert_matrix_bms_a164_sw_uncontrolled_regen_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id320_bms_alert_matrix_bms_a164_sw_uncontrolled_regen_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id320_bms_alert_matrix_bms_a045_sw_exception_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id320_bms_alert_matrix_bms_a045_sw_exception_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id320_bms_alert_matrix_bms_a045_sw_exception_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id320_bms_alert_matrix_bms_a105_sw_one_module_tsense_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id320_bms_alert_matrix_bms_a105_sw_one_module_tsense_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id320_bms_alert_matrix_bms_a105_sw_one_module_tsense_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id320_bms_alert_matrix_bms_a165_sw_pack_partial_weld_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id320_bms_alert_matrix_bms_a165_sw_pack_partial_weld_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id320_bms_alert_matrix_bms_a165_sw_pack_partial_weld_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id320_bms_alert_matrix_bms_a046_sw_task_stack_usage_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id320_bms_alert_matrix_bms_a046_sw_task_stack_usage_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id320_bms_alert_matrix_bms_a046_sw_task_stack_usage_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id320_bms_alert_matrix_bms_a106_sw_all_module_tsense_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id320_bms_alert_matrix_bms_a106_sw_all_module_tsense_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id320_bms_alert_matrix_bms_a106_sw_all_module_tsense_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id320_bms_alert_matrix_bms_a166_sw_pack_full_weld_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id320_bms_alert_matrix_bms_a166_sw_pack_full_weld_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id320_bms_alert_matrix_bms_a166_sw_pack_full_weld_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id320_bms_alert_matrix_bms_a047_sw_task_stack_overflow_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id320_bms_alert_matrix_bms_a047_sw_task_stack_overflow_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id320_bms_alert_matrix_bms_a047_sw_task_stack_overflow_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id320_bms_alert_matrix_bms_a107_sw_stack_voltage_mia_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id320_bms_alert_matrix_bms_a107_sw_stack_voltage_mia_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id320_bms_alert_matrix_bms_a107_sw_stack_voltage_mia_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id320_bms_alert_matrix_bms_a167_sw_fc_partial_weld_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id320_bms_alert_matrix_bms_a167_sw_fc_partial_weld_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id320_bms_alert_matrix_bms_a167_sw_fc_partial_weld_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id320_bms_alert_matrix_bms_a048_sw_log_upload_request_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id320_bms_alert_matrix_bms_a048_sw_log_upload_request_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id320_bms_alert_matrix_bms_a048_sw_log_upload_request_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id320_bms_alert_matrix_bms_a168_sw_fc_full_weld_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id320_bms_alert_matrix_bms_a168_sw_fc_full_weld_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id320_bms_alert_matrix_bms_a168_sw_fc_full_weld_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id320_bms_alert_matrix_bms_a169_sw_fc_pack_weld_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id320_bms_alert_matrix_bms_a169_sw_fc_pack_weld_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id320_bms_alert_matrix_bms_a169_sw_fc_pack_weld_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id320_bms_alert_matrix_bms_a050_sw_brick_voltage_mia_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id320_bms_alert_matrix_bms_a050_sw_brick_voltage_mia_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id320_bms_alert_matrix_bms_a050_sw_brick_voltage_mia_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id320_bms_alert_matrix_bms_a170_sw_limp_mode_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id320_bms_alert_matrix_bms_a170_sw_limp_mode_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id320_bms_alert_matrix_bms_a170_sw_limp_mode_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id320_bms_alert_matrix_bms_a051_sw_hvc_vref_bad_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id320_bms_alert_matrix_bms_a051_sw_hvc_vref_bad_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id320_bms_alert_matrix_bms_a051_sw_hvc_vref_bad_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id320_bms_alert_matrix_bms_a171_sw_stack_voltage_sense_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id320_bms_alert_matrix_bms_a171_sw_stack_voltage_sense_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id320_bms_alert_matrix_bms_a171_sw_stack_voltage_sense_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id320_bms_alert_matrix_bms_a052_sw_pcs_mia_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id320_bms_alert_matrix_bms_a052_sw_pcs_mia_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id320_bms_alert_matrix_bms_a052_sw_pcs_mia_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id320_bms_alert_matrix_bms_a054_sw_ver_supply_fault_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id320_bms_alert_matrix_bms_a054_sw_ver_supply_fault_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id320_bms_alert_matrix_bms_a054_sw_ver_supply_fault_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id320_bms_alert_matrix_bms_a174_sw_charge_failure_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id320_bms_alert_matrix_bms_a174_sw_charge_failure_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id320_bms_alert_matrix_bms_a174_sw_charge_failure_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id320_bms_alert_matrix_bms_a055_sw_hv_chain_model_fault_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id320_bms_alert_matrix_bms_a055_sw_hv_chain_model_fault_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id320_bms_alert_matrix_bms_a055_sw_hv_chain_model_fault_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id320_bms_alert_matrix_bms_a056_sw_standby_supply_fault_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id320_bms_alert_matrix_bms_a056_sw_standby_supply_fault_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id320_bms_alert_matrix_bms_a056_sw_standby_supply_fault_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id320_bms_alert_matrix_bms_a176_sw_graceful_power_off_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id320_bms_alert_matrix_bms_a176_sw_graceful_power_off_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id320_bms_alert_matrix_bms_a176_sw_graceful_power_off_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id320_bms_alert_matrix_bms_a057_sw_bandolier_model_warning_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id320_bms_alert_matrix_bms_a057_sw_bandolier_model_warning_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id320_bms_alert_matrix_bms_a057_sw_bandolier_model_warning_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id320_bms_alert_matrix_bms_a058_sw_bandolier_model_reset_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id320_bms_alert_matrix_bms_a058_sw_bandolier_model_reset_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id320_bms_alert_matrix_bms_a058_sw_bandolier_model_reset_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id320_bms_alert_matrix_bms_a178_sw_uncontrolled_regen_pwr_b_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id320_bms_alert_matrix_bms_a178_sw_uncontrolled_regen_pwr_b_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id320_bms_alert_matrix_bms_a178_sw_uncontrolled_regen_pwr_b_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id320_bms_alert_matrix_bms_a059_sw_pack_voltage_sensing_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id320_bms_alert_matrix_bms_a059_sw_pack_voltage_sensing_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id320_bms_alert_matrix_bms_a059_sw_pack_voltage_sensing_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id320_bms_alert_matrix_bms_a179_sw_hvp_12_v_fault_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id320_bms_alert_matrix_bms_a179_sw_hvp_12_v_fault_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id320_bms_alert_matrix_bms_a179_sw_hvp_12_v_fault_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id320_bms_alert_matrix_bms_a060_sw_leakage_test_failure_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id320_bms_alert_matrix_bms_a060_sw_leakage_test_failure_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id320_bms_alert_matrix_bms_a060_sw_leakage_test_failure_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id320_bms_alert_matrix_bms_a180_sw_ecu_reset_blocked_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id320_bms_alert_matrix_bms_a180_sw_ecu_reset_blocked_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id320_bms_alert_matrix_bms_a180_sw_ecu_reset_blocked_is_in_range(uint8_t value);

/**
 * Pack message ID31CCC_chgStatus.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int model3_can_id31_ccc_chg_status_pack(
    uint8_t *dst_p,
    const struct model3_can_id31_ccc_chg_status_t *src_p,
    size_t size);

/**
 * Unpack message ID31CCC_chgStatus.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int model3_can_id31_ccc_chg_status_unpack(
    struct model3_can_id31_ccc_chg_status_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id31_ccc_chg_status_cc_current_limit_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id31_ccc_chg_status_cc_current_limit_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id31_ccc_chg_status_cc_current_limit_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id31_ccc_chg_status_cc_pilot_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id31_ccc_chg_status_cc_pilot_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id31_ccc_chg_status_cc_pilot_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id31_ccc_chg_status_cc_num_phases_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id31_ccc_chg_status_cc_num_phases_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id31_ccc_chg_status_cc_num_phases_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id31_ccc_chg_status_cc_line1_voltage_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id31_ccc_chg_status_cc_line1_voltage_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id31_ccc_chg_status_cc_line1_voltage_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id31_ccc_chg_status_cc_grid_grounding_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id31_ccc_chg_status_cc_grid_grounding_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id31_ccc_chg_status_cc_grid_grounding_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id31_ccc_chg_status_cc_delta_transformer_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id31_ccc_chg_status_cc_delta_transformer_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id31_ccc_chg_status_cc_delta_transformer_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id31_ccc_chg_status_cc_num_veh_charging_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id31_ccc_chg_status_cc_num_veh_charging_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id31_ccc_chg_status_cc_num_veh_charging_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id31_ccc_chg_status_cc_line2_voltage_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id31_ccc_chg_status_cc_line2_voltage_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id31_ccc_chg_status_cc_line2_voltage_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id31_ccc_chg_status_cc_line3_voltage_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id31_ccc_chg_status_cc_line3_voltage_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id31_ccc_chg_status_cc_line3_voltage_is_in_range(uint16_t value);

/**
 * Pack message ID31DCC_chgStatus2.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int model3_can_id31_dcc_chg_status2_pack(
    uint8_t *dst_p,
    const struct model3_can_id31_dcc_chg_status2_t *src_p,
    size_t size);

/**
 * Unpack message ID31DCC_chgStatus2.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int model3_can_id31_dcc_chg_status2_unpack(
    struct model3_can_id31_dcc_chg_status2_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id31_dcc_chg_status2_cc_chg_status2_index_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id31_dcc_chg_status2_cc_chg_status2_index_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id31_dcc_chg_status2_cc_chg_status2_index_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id31_dcc_chg_status2_cc_button_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id31_dcc_chg_status2_cc_button_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id31_dcc_chg_status2_cc_button_state_is_in_range(uint8_t value);

/**
 * Pack message ID32CCC_logData.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int model3_can_id32_ccc_log_data_pack(
    uint8_t *dst_p,
    const struct model3_can_id32_ccc_log_data_t *src_p,
    size_t size);

/**
 * Unpack message ID32CCC_logData.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int model3_can_id32_ccc_log_data_unpack(
    struct model3_can_id32_ccc_log_data_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id32_ccc_log_data_cc_log_index_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id32_ccc_log_data_cc_log_index_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id32_ccc_log_data_cc_log_index_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id32_ccc_log_data_cc_active_connector_id_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id32_ccc_log_data_cc_active_connector_id_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id32_ccc_log_data_cc_active_connector_id_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id32_ccc_log_data_cc_conn1_current_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id32_ccc_log_data_cc_conn1_current_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id32_ccc_log_data_cc_conn1_current_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id32_ccc_log_data_cc_conn2_current_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id32_ccc_log_data_cc_conn2_current_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id32_ccc_log_data_cc_conn2_current_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id32_ccc_log_data_cc_conn3_current_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id32_ccc_log_data_cc_conn3_current_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id32_ccc_log_data_cc_conn3_current_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id32_ccc_log_data_cc_conn4_current_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id32_ccc_log_data_cc_conn4_current_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id32_ccc_log_data_cc_conn4_current_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t model3_can_id32_ccc_log_data_cc_lifetime_alert_count_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id32_ccc_log_data_cc_lifetime_alert_count_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id32_ccc_log_data_cc_lifetime_alert_count_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t model3_can_id32_ccc_log_data_cc_lifetime_ctr_cycles_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id32_ccc_log_data_cc_lifetime_ctr_cycles_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id32_ccc_log_data_cc_lifetime_ctr_cycles_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t model3_can_id32_ccc_log_data_cc_temperature1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id32_ccc_log_data_cc_temperature1_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id32_ccc_log_data_cc_temperature1_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t model3_can_id32_ccc_log_data_cc_temperature2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id32_ccc_log_data_cc_temperature2_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id32_ccc_log_data_cc_temperature2_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t model3_can_id32_ccc_log_data_cc_lifetimei2t_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id32_ccc_log_data_cc_lifetimei2t_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id32_ccc_log_data_cc_lifetimei2t_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t model3_can_id32_ccc_log_data_cc_temperature3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id32_ccc_log_data_cc_temperature3_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id32_ccc_log_data_cc_temperature3_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int32_t model3_can_id32_ccc_log_data_cc_lifetime_avg_startup_temp_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id32_ccc_log_data_cc_lifetime_avg_startup_temp_decode(int32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id32_ccc_log_data_cc_lifetime_avg_startup_temp_is_in_range(int32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t model3_can_id32_ccc_log_data_cc_lifetime_ctr_cycles_loaded_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id32_ccc_log_data_cc_lifetime_ctr_cycles_loaded_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id32_ccc_log_data_cc_lifetime_ctr_cycles_loaded_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t model3_can_id32_ccc_log_data_cc_lifetime_thermal_foldbacks_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id32_ccc_log_data_cc_lifetime_thermal_foldbacks_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id32_ccc_log_data_cc_lifetime_thermal_foldbacks_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id32_ccc_log_data_cc_contactor1_closed_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id32_ccc_log_data_cc_contactor1_closed_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id32_ccc_log_data_cc_contactor1_closed_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id32_ccc_log_data_cc_contactor2_closed_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id32_ccc_log_data_cc_contactor2_closed_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id32_ccc_log_data_cc_contactor2_closed_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t model3_can_id32_ccc_log_data_cc_temperature4_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id32_ccc_log_data_cc_temperature4_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id32_ccc_log_data_cc_temperature4_is_in_range(int8_t value);

/**
 * Pack message ID23DCP_chargeStatus.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int model3_can_id23_dcp_charge_status_pack(
    uint8_t *dst_p,
    const struct model3_can_id23_dcp_charge_status_t *src_p,
    size_t size);

/**
 * Unpack message ID23DCP_chargeStatus.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int model3_can_id23_dcp_charge_status_unpack(
    struct model3_can_id23_dcp_charge_status_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id23_dcp_charge_status_cp_hv_charge_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id23_dcp_charge_status_cp_hv_charge_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id23_dcp_charge_status_cp_hv_charge_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id23_dcp_charge_status_cp_charge_shutdown_request_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id23_dcp_charge_status_cp_charge_shutdown_request_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id23_dcp_charge_status_cp_charge_shutdown_request_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id23_dcp_charge_status_cp_ac_charge_current_limit_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id23_dcp_charge_status_cp_ac_charge_current_limit_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id23_dcp_charge_status_cp_ac_charge_current_limit_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id23_dcp_charge_status_cp_internal_max_current_limit_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id23_dcp_charge_status_cp_internal_max_current_limit_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id23_dcp_charge_status_cp_internal_max_current_limit_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id23_dcp_charge_status_cp_vehicle_iso_check_required_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id23_dcp_charge_status_cp_vehicle_iso_check_required_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id23_dcp_charge_status_cp_vehicle_iso_check_required_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id23_dcp_charge_status_cp_vehicle_precharge_required_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id23_dcp_charge_status_cp_vehicle_precharge_required_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id23_dcp_charge_status_cp_vehicle_precharge_required_is_in_range(uint8_t value);

/**
 * Pack message ID43DCP_chargeStatusLog.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int model3_can_id43_dcp_charge_status_log_pack(
    uint8_t *dst_p,
    const struct model3_can_id43_dcp_charge_status_log_t *src_p,
    size_t size);

/**
 * Unpack message ID43DCP_chargeStatusLog.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int model3_can_id43_dcp_charge_status_log_unpack(
    struct model3_can_id43_dcp_charge_status_log_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id43_dcp_charge_status_log_cp_hv_charge_status_log_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id43_dcp_charge_status_log_cp_hv_charge_status_log_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id43_dcp_charge_status_log_cp_hv_charge_status_log_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id43_dcp_charge_status_log_cp_charge_shutdown_request_log_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id43_dcp_charge_status_log_cp_charge_shutdown_request_log_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id43_dcp_charge_status_log_cp_charge_shutdown_request_log_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id43_dcp_charge_status_log_cp_ac_charge_current_limit_log_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id43_dcp_charge_status_log_cp_ac_charge_current_limit_log_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id43_dcp_charge_status_log_cp_ac_charge_current_limit_log_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id43_dcp_charge_status_log_cp_internal_max_dc_current_limit_log_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id43_dcp_charge_status_log_cp_internal_max_dc_current_limit_log_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id43_dcp_charge_status_log_cp_internal_max_dc_current_limit_log_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id43_dcp_charge_status_log_cp_vehicle_iso_check_required_log_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id43_dcp_charge_status_log_cp_vehicle_iso_check_required_log_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id43_dcp_charge_status_log_cp_vehicle_iso_check_required_log_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id43_dcp_charge_status_log_cp_vehicle_precharge_required_log_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id43_dcp_charge_status_log_cp_vehicle_precharge_required_log_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id43_dcp_charge_status_log_cp_vehicle_precharge_required_log_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id43_dcp_charge_status_log_cp_internal_max_ac_current_limit_log_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id43_dcp_charge_status_log_cp_internal_max_ac_current_limit_log_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id43_dcp_charge_status_log_cp_internal_max_ac_current_limit_log_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id43_dcp_charge_status_log_cp_evse_charge_type_log_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id43_dcp_charge_status_log_cp_evse_charge_type_log_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id43_dcp_charge_status_log_cp_evse_charge_type_log_is_in_range(uint8_t value);

/**
 * Pack message ID21DCP_evseStatus.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int model3_can_id21_dcp_evse_status_pack(
    uint8_t *dst_p,
    const struct model3_can_id21_dcp_evse_status_t *src_p,
    size_t size);

/**
 * Unpack message ID21DCP_evseStatus.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int model3_can_id21_dcp_evse_status_unpack(
    struct model3_can_id21_dcp_evse_status_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id21_dcp_evse_status_cp_evse_accept_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id21_dcp_evse_status_cp_evse_accept_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id21_dcp_evse_status_cp_evse_accept_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id21_dcp_evse_status_cp_evse_request_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id21_dcp_evse_status_cp_evse_request_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id21_dcp_evse_status_cp_evse_request_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id21_dcp_evse_status_cp_proximity_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id21_dcp_evse_status_cp_proximity_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id21_dcp_evse_status_cp_proximity_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id21_dcp_evse_status_cp_pilot_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id21_dcp_evse_status_cp_pilot_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id21_dcp_evse_status_cp_pilot_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id21_dcp_evse_status_cp_pilot_current_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id21_dcp_evse_status_cp_pilot_current_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id21_dcp_evse_status_cp_pilot_current_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id21_dcp_evse_status_cp_cable_type_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id21_dcp_evse_status_cp_cable_type_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id21_dcp_evse_status_cp_cable_type_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id21_dcp_evse_status_cp_cable_current_limit_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id21_dcp_evse_status_cp_cable_current_limit_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id21_dcp_evse_status_cp_cable_current_limit_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id21_dcp_evse_status_cp_digital_comms_attempts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id21_dcp_evse_status_cp_digital_comms_attempts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id21_dcp_evse_status_cp_digital_comms_attempts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id21_dcp_evse_status_cp_tesla_swcan_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id21_dcp_evse_status_cp_tesla_swcan_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id21_dcp_evse_status_cp_tesla_swcan_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id21_dcp_evse_status_cp_digital_comms_established_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id21_dcp_evse_status_cp_digital_comms_established_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id21_dcp_evse_status_cp_digital_comms_established_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id21_dcp_evse_status_cp_evse_charge_type_ui_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id21_dcp_evse_status_cp_evse_charge_type_ui_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id21_dcp_evse_status_cp_evse_charge_type_ui_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id21_dcp_evse_status_cp_ac_num_retries_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id21_dcp_evse_status_cp_ac_num_retries_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id21_dcp_evse_status_cp_ac_num_retries_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id21_dcp_evse_status_cp_gb_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id21_dcp_evse_status_cp_gb_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id21_dcp_evse_status_cp_gb_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id21_dcp_evse_status_cp_gbdc_stop_charge_reason_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id21_dcp_evse_status_cp_gbdc_stop_charge_reason_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id21_dcp_evse_status_cp_gbdc_stop_charge_reason_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id21_dcp_evse_status_cp_gbdc_failure_reason_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id21_dcp_evse_status_cp_gbdc_failure_reason_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id21_dcp_evse_status_cp_gbdc_failure_reason_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id21_dcp_evse_status_cp_gbdc_charge_attempts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id21_dcp_evse_status_cp_gbdc_charge_attempts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id21_dcp_evse_status_cp_gbdc_charge_attempts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id21_dcp_evse_status_cp_ac_charge_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id21_dcp_evse_status_cp_ac_charge_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id21_dcp_evse_status_cp_ac_charge_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id21_dcp_evse_status_cp_tesla_dc_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id21_dcp_evse_status_cp_tesla_dc_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id21_dcp_evse_status_cp_tesla_dc_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id21_dcp_evse_status_cp_iec_combo_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id21_dcp_evse_status_cp_iec_combo_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id21_dcp_evse_status_cp_iec_combo_state_is_in_range(uint8_t value);

/**
 * Pack message ID75DCP_sensorData.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int model3_can_id75_dcp_sensor_data_pack(
    uint8_t *dst_p,
    const struct model3_can_id75_dcp_sensor_data_t *src_p,
    size_t size);

/**
 * Unpack message ID75DCP_sensorData.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int model3_can_id75_dcp_sensor_data_unpack(
    struct model3_can_id75_dcp_sensor_data_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id75_dcp_sensor_data_cp_sensor_data_select_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id75_dcp_sensor_data_cp_sensor_data_select_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id75_dcp_sensor_data_cp_sensor_data_select_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id75_dcp_sensor_data_cp_uhf_chip_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id75_dcp_sensor_data_cp_uhf_chip_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id75_dcp_sensor_data_cp_uhf_chip_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id75_dcp_sensor_data_cp_door_pot_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id75_dcp_sensor_data_cp_door_pot_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id75_dcp_sensor_data_cp_door_pot_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id75_dcp_sensor_data_cp_fault_line_v_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id75_dcp_sensor_data_cp_fault_line_v_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id75_dcp_sensor_data_cp_fault_line_v_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t model3_can_id75_dcp_sensor_data_cp_inductive_sensor_raw_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id75_dcp_sensor_data_cp_inductive_sensor_raw_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id75_dcp_sensor_data_cp_inductive_sensor_raw_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id75_dcp_sensor_data_cp_latch_i_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id75_dcp_sensor_data_cp_latch_i_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id75_dcp_sensor_data_cp_latch_i_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t model3_can_id75_dcp_sensor_data_cp_pilot_low_value_interval_max10s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id75_dcp_sensor_data_cp_pilot_low_value_interval_max10s_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id75_dcp_sensor_data_cp_pilot_low_value_interval_max10s_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id75_dcp_sensor_data_cp_pilot_pulse_width_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id75_dcp_sensor_data_cp_pilot_pulse_width_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id75_dcp_sensor_data_cp_pilot_pulse_width_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id75_dcp_sensor_data_cp_uhf_rssi_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id75_dcp_sensor_data_cp_uhf_rssi_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id75_dcp_sensor_data_cp_uhf_rssi_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id75_dcp_sensor_data_cp_door_counts_filtered_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id75_dcp_sensor_data_cp_door_counts_filtered_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id75_dcp_sensor_data_cp_door_counts_filtered_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id75_dcp_sensor_data_cp_pin_temperature1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id75_dcp_sensor_data_cp_pin_temperature1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id75_dcp_sensor_data_cp_pin_temperature1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id75_dcp_sensor_data_cp_proximity_v_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id75_dcp_sensor_data_cp_proximity_v_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id75_dcp_sensor_data_cp_proximity_v_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id75_dcp_sensor_data_cp_proximity_v_gbcc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id75_dcp_sensor_data_cp_proximity_v_gbcc1_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id75_dcp_sensor_data_cp_proximity_v_gbcc1_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id75_dcp_sensor_data_cp_ref_voltage_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id75_dcp_sensor_data_cp_ref_voltage_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id75_dcp_sensor_data_cp_ref_voltage_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id75_dcp_sensor_data_cp_uhf_rx_overflow_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id75_dcp_sensor_data_cp_uhf_rx_overflow_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id75_dcp_sensor_data_cp_uhf_rx_overflow_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id75_dcp_sensor_data_cp_door_i_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id75_dcp_sensor_data_cp_door_i_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id75_dcp_sensor_data_cp_door_i_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id75_dcp_sensor_data_cp_latch2_i_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id75_dcp_sensor_data_cp_latch2_i_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id75_dcp_sensor_data_cp_latch2_i_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t model3_can_id75_dcp_sensor_data_cp_pilot_low_value_interval_min10s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id75_dcp_sensor_data_cp_pilot_low_value_interval_min10s_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id75_dcp_sensor_data_cp_pilot_low_value_interval_min10s_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id75_dcp_sensor_data_cp_pilot_period_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id75_dcp_sensor_data_cp_pilot_period_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id75_dcp_sensor_data_cp_pilot_period_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id75_dcp_sensor_data_cp_pin_temperature2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id75_dcp_sensor_data_cp_pin_temperature2_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id75_dcp_sensor_data_cp_pin_temperature2_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id75_dcp_sensor_data_cp_uhf_rx_num_bytes_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id75_dcp_sensor_data_cp_uhf_rx_num_bytes_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id75_dcp_sensor_data_cp_uhf_rx_num_bytes_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id75_dcp_sensor_data_cp_door_counts_debounced_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id75_dcp_sensor_data_cp_door_counts_debounced_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id75_dcp_sensor_data_cp_door_counts_debounced_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id75_dcp_sensor_data_cp_pin_temperature3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id75_dcp_sensor_data_cp_pin_temperature3_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id75_dcp_sensor_data_cp_pin_temperature3_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id75_dcp_sensor_data_cp_proximity_v_gbcc2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id75_dcp_sensor_data_cp_proximity_v_gbcc2_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id75_dcp_sensor_data_cp_proximity_v_gbcc2_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id75_dcp_sensor_data_cp_proximity_v_interval_min10s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id75_dcp_sensor_data_cp_proximity_v_interval_min10s_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id75_dcp_sensor_data_cp_proximity_v_interval_min10s_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id75_dcp_sensor_data_cp_door_last_request_max_i_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id75_dcp_sensor_data_cp_door_last_request_max_i_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id75_dcp_sensor_data_cp_door_last_request_max_i_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t model3_can_id75_dcp_sensor_data_cp_pilot_high_value_interval_max10s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id75_dcp_sensor_data_cp_pilot_high_value_interval_max10s_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id75_dcp_sensor_data_cp_pilot_high_value_interval_max10s_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t model3_can_id75_dcp_sensor_data_cp_pilot_low_value_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id75_dcp_sensor_data_cp_pilot_low_value_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id75_dcp_sensor_data_cp_pilot_low_value_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id75_dcp_sensor_data_cp_uhf_fifo_data_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id75_dcp_sensor_data_cp_uhf_fifo_data_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id75_dcp_sensor_data_cp_uhf_fifo_data_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id75_dcp_sensor_data_cp_board_temperature_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id75_dcp_sensor_data_cp_board_temperature_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id75_dcp_sensor_data_cp_board_temperature_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id75_dcp_sensor_data_cp_uhf_self_test_rssi_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id75_dcp_sensor_data_cp_uhf_self_test_rssi_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id75_dcp_sensor_data_cp_uhf_self_test_rssi_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id75_dcp_sensor_data_cp_back_cover_counts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id75_dcp_sensor_data_cp_back_cover_counts_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id75_dcp_sensor_data_cp_back_cover_counts_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t model3_can_id75_dcp_sensor_data_cp_pilot_high_value_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id75_dcp_sensor_data_cp_pilot_high_value_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id75_dcp_sensor_data_cp_pilot_high_value_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t model3_can_id75_dcp_sensor_data_cp_pilot_high_value_interval_min10s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id75_dcp_sensor_data_cp_pilot_high_value_interval_min10s_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id75_dcp_sensor_data_cp_pilot_high_value_interval_min10s_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id75_dcp_sensor_data_cp_proximity_v_interval_max10s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id75_dcp_sensor_data_cp_proximity_v_interval_max10s_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id75_dcp_sensor_data_cp_proximity_v_interval_max10s_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id75_dcp_sensor_data_cp_prox_conn1_sense_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id75_dcp_sensor_data_cp_prox_conn1_sense_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id75_dcp_sensor_data_cp_prox_conn1_sense_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id75_dcp_sensor_data_cp_prox_en_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id75_dcp_sensor_data_cp_prox_en_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id75_dcp_sensor_data_cp_prox_en_is_in_range(uint8_t value);

/**
 * Pack message ID287PTCcabinHeatSensorStatus.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int model3_can_id287_pt_ccabin_heat_sensor_status_pack(
    uint8_t *dst_p,
    const struct model3_can_id287_pt_ccabin_heat_sensor_status_t *src_p,
    size_t size);

/**
 * Unpack message ID287PTCcabinHeatSensorStatus.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int model3_can_id287_pt_ccabin_heat_sensor_status_unpack(
    struct model3_can_id287_pt_ccabin_heat_sensor_status_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id287_pt_ccabin_heat_sensor_status_ptc_left_temp_igbt_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id287_pt_ccabin_heat_sensor_status_ptc_left_temp_igbt_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id287_pt_ccabin_heat_sensor_status_ptc_left_temp_igbt_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id287_pt_ccabin_heat_sensor_status_ptc_temp_ocp_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id287_pt_ccabin_heat_sensor_status_ptc_temp_ocp_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id287_pt_ccabin_heat_sensor_status_ptc_temp_ocp_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id287_pt_ccabin_heat_sensor_status_ptc_right_temp_igbt_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id287_pt_ccabin_heat_sensor_status_ptc_right_temp_igbt_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id287_pt_ccabin_heat_sensor_status_ptc_right_temp_igbt_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id287_pt_ccabin_heat_sensor_status_ptc_temp_pcb_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id287_pt_ccabin_heat_sensor_status_ptc_temp_pcb_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id287_pt_ccabin_heat_sensor_status_ptc_temp_pcb_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id287_pt_ccabin_heat_sensor_status_ptc_voltage_hv_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id287_pt_ccabin_heat_sensor_status_ptc_voltage_hv_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id287_pt_ccabin_heat_sensor_status_ptc_voltage_hv_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id287_pt_ccabin_heat_sensor_status_ptc_left_current_hv_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id287_pt_ccabin_heat_sensor_status_ptc_left_current_hv_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id287_pt_ccabin_heat_sensor_status_ptc_left_current_hv_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id287_pt_ccabin_heat_sensor_status_ptc_right_current_hv_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id287_pt_ccabin_heat_sensor_status_ptc_right_current_hv_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id287_pt_ccabin_heat_sensor_status_ptc_right_current_hv_is_in_range(uint8_t value);

/**
 * Pack message ID333UI_chargeRequest.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int model3_can_id333_ui_charge_request_pack(
    uint8_t *dst_p,
    const struct model3_can_id333_ui_charge_request_t *src_p,
    size_t size);

/**
 * Unpack message ID333UI_chargeRequest.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int model3_can_id333_ui_charge_request_unpack(
    struct model3_can_id333_ui_charge_request_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id333_ui_charge_request_ui_open_charge_port_door_request_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id333_ui_charge_request_ui_open_charge_port_door_request_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id333_ui_charge_request_ui_open_charge_port_door_request_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id333_ui_charge_request_ui_close_charge_port_door_request_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id333_ui_charge_request_ui_close_charge_port_door_request_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id333_ui_charge_request_ui_close_charge_port_door_request_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id333_ui_charge_request_ui_charge_enable_request_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id333_ui_charge_request_ui_charge_enable_request_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id333_ui_charge_request_ui_charge_enable_request_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id333_ui_charge_request_ui_ac_charge_current_limit_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id333_ui_charge_request_ui_ac_charge_current_limit_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id333_ui_charge_request_ui_ac_charge_current_limit_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id333_ui_charge_request_ui_charge_termination_pct_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id333_ui_charge_request_ui_charge_termination_pct_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id333_ui_charge_request_ui_charge_termination_pct_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id333_ui_charge_request_ui_smart_ac_charging_enabled_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id333_ui_charge_request_ui_smart_ac_charging_enabled_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id333_ui_charge_request_ui_smart_ac_charging_enabled_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id333_ui_charge_request_ui_scheduled_departure_enabled_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id333_ui_charge_request_ui_scheduled_departure_enabled_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id333_ui_charge_request_ui_scheduled_departure_enabled_is_in_range(uint8_t value);

/**
 * Pack message ID334UI_powertrainControl.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int model3_can_id334_ui_powertrain_control_pack(
    uint8_t *dst_p,
    const struct model3_can_id334_ui_powertrain_control_t *src_p,
    size_t size);

/**
 * Unpack message ID334UI_powertrainControl.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int model3_can_id334_ui_powertrain_control_unpack(
    struct model3_can_id334_ui_powertrain_control_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id334_ui_powertrain_control_ui_system_power_limit_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id334_ui_powertrain_control_ui_system_power_limit_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id334_ui_powertrain_control_ui_system_power_limit_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id334_ui_powertrain_control_ui_pedal_map_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id334_ui_powertrain_control_ui_pedal_map_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id334_ui_powertrain_control_ui_pedal_map_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id334_ui_powertrain_control_ui_system_torque_limit_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id334_ui_powertrain_control_ui_system_torque_limit_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id334_ui_powertrain_control_ui_system_torque_limit_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id334_ui_powertrain_control_ui_speed_limit_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id334_ui_powertrain_control_ui_speed_limit_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id334_ui_powertrain_control_ui_speed_limit_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id334_ui_powertrain_control_ui_regen_torque_max_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id334_ui_powertrain_control_ui_regen_torque_max_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id334_ui_powertrain_control_ui_regen_torque_max_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id334_ui_powertrain_control_ui_limit_mode_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id334_ui_powertrain_control_ui_limit_mode_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id334_ui_powertrain_control_ui_limit_mode_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id334_ui_powertrain_control_ui_motor_on_mode_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id334_ui_powertrain_control_ui_motor_on_mode_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id334_ui_powertrain_control_ui_motor_on_mode_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id334_ui_powertrain_control_ui_waste_mode_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id334_ui_powertrain_control_ui_waste_mode_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id334_ui_powertrain_control_ui_waste_mode_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id334_ui_powertrain_control_ui_waste_mode_regen_limit_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id334_ui_powertrain_control_ui_waste_mode_regen_limit_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id334_ui_powertrain_control_ui_waste_mode_regen_limit_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id334_ui_powertrain_control_ui_stopping_mode_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id334_ui_powertrain_control_ui_stopping_mode_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id334_ui_powertrain_control_ui_stopping_mode_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id334_ui_powertrain_control_ui_di_app_slider_debug_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id334_ui_powertrain_control_ui_di_app_slider_debug_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id334_ui_powertrain_control_ui_di_app_slider_debug_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id334_ui_powertrain_control_ui_powertrain_control_counter_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id334_ui_powertrain_control_ui_powertrain_control_counter_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id334_ui_powertrain_control_ui_powertrain_control_counter_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id334_ui_powertrain_control_ui_powertrain_control_checksum_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id334_ui_powertrain_control_ui_powertrain_control_checksum_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id334_ui_powertrain_control_ui_powertrain_control_checksum_is_in_range(uint8_t value);

/**
 * Pack message ID33AUI_rangeSOC.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int model3_can_id33_aui_range_soc_pack(
    uint8_t *dst_p,
    const struct model3_can_id33_aui_range_soc_t *src_p,
    size_t size);

/**
 * Unpack message ID33AUI_rangeSOC.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int model3_can_id33_aui_range_soc_unpack(
    struct model3_can_id33_aui_range_soc_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id33_aui_range_soc_ui_range_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id33_aui_range_soc_ui_range_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id33_aui_range_soc_ui_range_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id33_aui_range_soc_ui_ideal_range_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id33_aui_range_soc_ui_ideal_range_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id33_aui_range_soc_ui_ideal_range_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id33_aui_range_soc_ui_rated_w_hp_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id33_aui_range_soc_ui_rated_w_hp_m_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id33_aui_range_soc_ui_rated_w_hp_m_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id33_aui_range_soc_ui_soc_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id33_aui_range_soc_ui_soc_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id33_aui_range_soc_ui_soc_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id33_aui_range_soc_ui_u_soe_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id33_aui_range_soc_ui_u_soe_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id33_aui_range_soc_ui_u_soe_is_in_range(uint8_t value);

/**
 * Pack message ID241VCFRONT_coolant.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int model3_can_id241_vcfront_coolant_pack(
    uint8_t *dst_p,
    const struct model3_can_id241_vcfront_coolant_t *src_p,
    size_t size);

/**
 * Unpack message ID241VCFRONT_coolant.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int model3_can_id241_vcfront_coolant_unpack(
    struct model3_can_id241_vcfront_coolant_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id241_vcfront_coolant_vcfront_coolant_flow_bat_actual_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id241_vcfront_coolant_vcfront_coolant_flow_bat_actual_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id241_vcfront_coolant_vcfront_coolant_flow_bat_actual_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id241_vcfront_coolant_vcfront_coolant_flow_bat_target_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id241_vcfront_coolant_vcfront_coolant_flow_bat_target_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id241_vcfront_coolant_vcfront_coolant_flow_bat_target_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id241_vcfront_coolant_vcfront_coolant_flow_bat_reason_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id241_vcfront_coolant_vcfront_coolant_flow_bat_reason_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id241_vcfront_coolant_vcfront_coolant_flow_bat_reason_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id241_vcfront_coolant_vcfront_coolant_flow_pt_actual_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id241_vcfront_coolant_vcfront_coolant_flow_pt_actual_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id241_vcfront_coolant_vcfront_coolant_flow_pt_actual_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id241_vcfront_coolant_vcfront_coolant_flow_pt_target_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id241_vcfront_coolant_vcfront_coolant_flow_pt_target_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id241_vcfront_coolant_vcfront_coolant_flow_pt_target_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id241_vcfront_coolant_vcfront_coolant_flow_pt_reason_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id241_vcfront_coolant_vcfront_coolant_flow_pt_reason_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id241_vcfront_coolant_vcfront_coolant_flow_pt_reason_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id241_vcfront_coolant_vcfront_waste_heat_request_type_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id241_vcfront_coolant_vcfront_waste_heat_request_type_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id241_vcfront_coolant_vcfront_waste_heat_request_type_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id241_vcfront_coolant_vcfront_coolant_has_been_filled_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id241_vcfront_coolant_vcfront_coolant_has_been_filled_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id241_vcfront_coolant_vcfront_coolant_has_been_filled_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id241_vcfront_coolant_vcfront_radiator_ineffective_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id241_vcfront_coolant_vcfront_radiator_ineffective_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id241_vcfront_coolant_vcfront_radiator_ineffective_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id241_vcfront_coolant_vcfront_coolant_air_purge_bat_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id241_vcfront_coolant_vcfront_coolant_air_purge_bat_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id241_vcfront_coolant_vcfront_coolant_air_purge_bat_state_is_in_range(uint8_t value);

/**
 * Pack message ID2C4PCS_logging.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int model3_can_id2_c4_pcs_logging_pack(
    uint8_t *dst_p,
    const struct model3_can_id2_c4_pcs_logging_t *src_p,
    size_t size);

/**
 * Unpack message ID2C4PCS_logging.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int model3_can_id2_c4_pcs_logging_unpack(
    struct model3_can_id2_c4_pcs_logging_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_c4_pcs_logging_pcs_log_message_select_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_c4_pcs_logging_pcs_log_message_select_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_c4_pcs_logging_pcs_log_message_select_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id2_c4_pcs_logging_pcs_chg_input_frequency_l1_n_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_c4_pcs_logging_pcs_chg_input_frequency_l1_n_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_c4_pcs_logging_pcs_chg_input_frequency_l1_n_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t model3_can_id2_c4_pcs_logging_pcs_chg_input_l1_n_vdc_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_c4_pcs_logging_pcs_chg_input_l1_n_vdc_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_c4_pcs_logging_pcs_chg_input_l1_n_vdc_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id2_c4_pcs_logging_pcs_chg_input_l1_n_vrms_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_c4_pcs_logging_pcs_chg_input_l1_n_vrms_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_c4_pcs_logging_pcs_chg_input_l1_n_vrms_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id2_c4_pcs_logging_pcs_chg_pha_input_v_peak10s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_c4_pcs_logging_pcs_chg_pha_input_v_peak10s_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_c4_pcs_logging_pcs_chg_pha_input_v_peak10s_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id2_c4_pcs_logging_pcs_chg_ph_a_input_irms_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_c4_pcs_logging_pcs_chg_ph_a_input_irms_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_c4_pcs_logging_pcs_chg_ph_a_input_irms_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id2_c4_pcs_logging_pcs_chg_ph_a_int_bus_v_min10s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_c4_pcs_logging_pcs_chg_ph_a_int_bus_v_min10s_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_c4_pcs_logging_pcs_chg_ph_a_int_bus_v_min10s_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_c4_pcs_logging_pcs_chg_ph_a_machine_enabled_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_c4_pcs_logging_pcs_chg_ph_a_machine_enabled_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_c4_pcs_logging_pcs_chg_ph_a_machine_enabled_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id2_c4_pcs_logging_pcs_chg_ph_a_no_flow_bucket_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_c4_pcs_logging_pcs_chg_ph_a_no_flow_bucket_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_c4_pcs_logging_pcs_chg_ph_a_no_flow_bucket_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_c4_pcs_logging_pcs_chg_ph_a_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_c4_pcs_logging_pcs_chg_ph_a_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_c4_pcs_logging_pcs_chg_ph_a_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id2_c4_pcs_logging_pcs_chg_ph_b_input_irms_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_c4_pcs_logging_pcs_chg_ph_b_input_irms_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_c4_pcs_logging_pcs_chg_ph_b_input_irms_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id2_c4_pcs_logging_pcs_chg_ph_b_int_bus_v_min10s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_c4_pcs_logging_pcs_chg_ph_b_int_bus_v_min10s_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_c4_pcs_logging_pcs_chg_ph_b_int_bus_v_min10s_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id2_c4_pcs_logging_pcs_chg_ph_c_input_irms_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_c4_pcs_logging_pcs_chg_ph_c_input_irms_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_c4_pcs_logging_pcs_chg_ph_c_input_irms_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id2_c4_pcs_logging_pcs_chg_ph_c_int_bus_v_min10s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_c4_pcs_logging_pcs_chg_ph_c_int_bus_v_min10s_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_c4_pcs_logging_pcs_chg_ph_c_int_bus_v_min10s_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_c4_pcs_logging_pcs_cpu2_boot_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_c4_pcs_logging_pcs_cpu2_boot_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_c4_pcs_logging_pcs_cpu2_boot_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_c4_pcs_logging_pcs_d_log_ph_a_channel1_content_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_c4_pcs_logging_pcs_d_log_ph_a_channel1_content_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_c4_pcs_logging_pcs_d_log_ph_a_channel1_content_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_c4_pcs_logging_pcs_d_log_ph_a_channel2_content_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_c4_pcs_logging_pcs_d_log_ph_a_channel2_content_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_c4_pcs_logging_pcs_d_log_ph_a_channel2_content_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_c4_pcs_logging_pcs_d_log_ph_a_channel3_content_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_c4_pcs_logging_pcs_d_log_ph_a_channel3_content_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_c4_pcs_logging_pcs_d_log_ph_a_channel3_content_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_c4_pcs_logging_pcs_d_log_ph_a_channel4_content_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_c4_pcs_logging_pcs_d_log_ph_a_channel4_content_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_c4_pcs_logging_pcs_d_log_ph_a_channel4_content_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id2_c4_pcs_logging_pcs_dcdc_hv_bus_estimated_c_u_f_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_c4_pcs_logging_pcs_dcdc_hv_bus_estimated_c_u_f_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_c4_pcs_logging_pcs_dcdc_hv_bus_estimated_c_u_f_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id2_c4_pcs_logging_pcs_dcdc_pchg_start_lv_bus_volt_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_c4_pcs_logging_pcs_dcdc_pchg_start_lv_bus_volt_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_c4_pcs_logging_pcs_dcdc_pchg_start_lv_bus_volt_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id2_c4_pcs_logging_pcs_dcdc_unified_command_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_c4_pcs_logging_pcs_dcdc_unified_command_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_c4_pcs_logging_pcs_dcdc_unified_command_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t model3_can_id2_c4_pcs_logging_pcs_chg_ph_a_machine_rotor_freq_droop_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_c4_pcs_logging_pcs_chg_ph_a_machine_rotor_freq_droop_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_c4_pcs_logging_pcs_chg_ph_a_machine_rotor_freq_droop_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_c4_pcs_logging_pcs_ac_charge_self_test_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_c4_pcs_logging_pcs_ac_charge_self_test_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_c4_pcs_logging_pcs_ac_charge_self_test_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id2_c4_pcs_logging_pcs_1_v5_min10s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_c4_pcs_logging_pcs_1_v5_min10s_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_c4_pcs_logging_pcs_1_v5_min10s_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_c4_pcs_logging_pcs_d_log_ph_b_channel1_content_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_c4_pcs_logging_pcs_d_log_ph_b_channel1_content_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_c4_pcs_logging_pcs_d_log_ph_b_channel1_content_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_c4_pcs_logging_pcs_d_log_ph_b_channel2_content_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_c4_pcs_logging_pcs_d_log_ph_b_channel2_content_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_c4_pcs_logging_pcs_d_log_ph_b_channel2_content_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_c4_pcs_logging_pcs_d_log_ph_b_channel3_content_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_c4_pcs_logging_pcs_d_log_ph_b_channel3_content_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_c4_pcs_logging_pcs_d_log_ph_b_channel3_content_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_c4_pcs_logging_pcs_d_log_ph_b_channel4_content_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_c4_pcs_logging_pcs_d_log_ph_b_channel4_content_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_c4_pcs_logging_pcs_d_log_ph_b_channel4_content_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t model3_can_id2_c4_pcs_logging_pcs_dcdc12v_support_lifetimek_wh_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_c4_pcs_logging_pcs_dcdc12v_support_lifetimek_wh_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_c4_pcs_logging_pcs_dcdc12v_support_lifetimek_wh_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id2_c4_pcs_logging_pcs_dcdc_interval_max_frequency_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_c4_pcs_logging_pcs_dcdc_interval_max_frequency_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_c4_pcs_logging_pcs_dcdc_interval_max_frequency_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id2_c4_pcs_logging_pcs_dcdc_interval_min_frequency_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_c4_pcs_logging_pcs_dcdc_interval_min_frequency_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_c4_pcs_logging_pcs_dcdc_interval_min_frequency_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id2_c4_pcs_logging_pcs_dcdc_max_lv_output_current_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_c4_pcs_logging_pcs_dcdc_max_lv_output_current_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_c4_pcs_logging_pcs_dcdc_max_lv_output_current_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t model3_can_id2_c4_pcs_logging_pcs_dcdc_t_comm_measured_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_c4_pcs_logging_pcs_dcdc_t_comm_measured_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_c4_pcs_logging_pcs_dcdc_t_comm_measured_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_c4_pcs_logging_pcs_chg_ph_b_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_c4_pcs_logging_pcs_chg_ph_b_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_c4_pcs_logging_pcs_chg_ph_b_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_c4_pcs_logging_pcs_d_log_ph_c_channel1_content_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_c4_pcs_logging_pcs_d_log_ph_c_channel1_content_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_c4_pcs_logging_pcs_d_log_ph_c_channel1_content_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_c4_pcs_logging_pcs_d_log_ph_c_channel2_content_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_c4_pcs_logging_pcs_d_log_ph_c_channel2_content_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_c4_pcs_logging_pcs_d_log_ph_c_channel2_content_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_c4_pcs_logging_pcs_d_log_ph_c_channel3_content_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_c4_pcs_logging_pcs_d_log_ph_c_channel3_content_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_c4_pcs_logging_pcs_d_log_ph_c_channel3_content_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_c4_pcs_logging_pcs_d_log_ph_c_channel4_content_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_c4_pcs_logging_pcs_d_log_ph_c_channel4_content_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_c4_pcs_logging_pcs_d_log_ph_c_channel4_content_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_c4_pcs_logging_pcs_chg_ph_c_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_c4_pcs_logging_pcs_chg_ph_c_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_c4_pcs_logging_pcs_chg_ph_c_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id2_c4_pcs_logging_pcs_chg_phb_input_v_peak10s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_c4_pcs_logging_pcs_chg_phb_input_v_peak10s_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_c4_pcs_logging_pcs_chg_phb_input_v_peak10s_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id2_c4_pcs_logging_pcs_chg_ph_a_int_bus_v_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_c4_pcs_logging_pcs_chg_ph_a_int_bus_v_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_c4_pcs_logging_pcs_chg_ph_a_int_bus_v_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id2_c4_pcs_logging_pcs_chg_ph_a_int_bus_v_max10s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_c4_pcs_logging_pcs_chg_ph_a_int_bus_v_max10s_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_c4_pcs_logging_pcs_chg_ph_a_int_bus_v_max10s_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id2_c4_pcs_logging_pcs_chg_ph_b_int_bus_v_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_c4_pcs_logging_pcs_chg_ph_b_int_bus_v_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_c4_pcs_logging_pcs_chg_ph_b_int_bus_v_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id2_c4_pcs_logging_pcs_chg_ph_b_int_bus_v_max10s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_c4_pcs_logging_pcs_chg_ph_b_int_bus_v_max10s_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_c4_pcs_logging_pcs_chg_ph_b_int_bus_v_max10s_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id2_c4_pcs_logging_pcs_chg_ph_b_no_flow_bucket_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_c4_pcs_logging_pcs_chg_ph_b_no_flow_bucket_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_c4_pcs_logging_pcs_chg_ph_b_no_flow_bucket_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id2_c4_pcs_logging_pcs_chg_ph_c_int_bus_v_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_c4_pcs_logging_pcs_chg_ph_c_int_bus_v_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_c4_pcs_logging_pcs_chg_ph_c_int_bus_v_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id2_c4_pcs_logging_pcs_chg_ph_c_int_bus_v_max10s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_c4_pcs_logging_pcs_chg_ph_c_int_bus_v_max10s_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_c4_pcs_logging_pcs_chg_ph_c_int_bus_v_max10s_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t model3_can_id2_c4_pcs_logging_pcs_chg_input_l2_n_vdc_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_c4_pcs_logging_pcs_chg_input_l2_n_vdc_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_c4_pcs_logging_pcs_chg_input_l2_n_vdc_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t model3_can_id2_c4_pcs_logging_pcs_chg_ph_a_machine_stator_current_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_c4_pcs_logging_pcs_chg_ph_a_machine_stator_current_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_c4_pcs_logging_pcs_chg_ph_a_machine_stator_current_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t model3_can_id2_c4_pcs_logging_pcs_d_log_ph_a_channel1_data_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_c4_pcs_logging_pcs_d_log_ph_a_channel1_data_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_c4_pcs_logging_pcs_d_log_ph_a_channel1_data_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t model3_can_id2_c4_pcs_logging_pcs_d_log_ph_a_channel2_data_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_c4_pcs_logging_pcs_d_log_ph_a_channel2_data_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_c4_pcs_logging_pcs_d_log_ph_a_channel2_data_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t model3_can_id2_c4_pcs_logging_pcs_d_log_ph_a_channel3_data_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_c4_pcs_logging_pcs_d_log_ph_a_channel3_data_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_c4_pcs_logging_pcs_d_log_ph_a_channel3_data_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t model3_can_id2_c4_pcs_logging_pcs_d_log_ph_a_channel4_data_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_c4_pcs_logging_pcs_d_log_ph_a_channel4_data_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_c4_pcs_logging_pcs_d_log_ph_a_channel4_data_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id2_c4_pcs_logging_pcs_dcdc_cla_controller_output_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_c4_pcs_logging_pcs_dcdc_cla_controller_output_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_c4_pcs_logging_pcs_dcdc_cla_controller_output_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id2_c4_pcs_logging_pcs_dcdc_hv_bus_estimated_r_k_ohm_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_c4_pcs_logging_pcs_dcdc_hv_bus_estimated_r_k_ohm_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_c4_pcs_logging_pcs_dcdc_hv_bus_estimated_r_k_ohm_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id2_c4_pcs_logging_pcs_dcdc_pchg_start_hv_bus_volt_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_c4_pcs_logging_pcs_dcdc_pchg_start_hv_bus_volt_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_c4_pcs_logging_pcs_dcdc_pchg_start_hv_bus_volt_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id2_c4_pcs_logging_pcs_chg_input_frequency_l2_n_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_c4_pcs_logging_pcs_chg_input_frequency_l2_n_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_c4_pcs_logging_pcs_chg_input_frequency_l2_n_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id2_c4_pcs_logging_pcs_chg_input_l2_n_vrms_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_c4_pcs_logging_pcs_chg_input_l2_n_vrms_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_c4_pcs_logging_pcs_chg_input_l2_n_vrms_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_c4_pcs_logging_pcs_chg_ph_a_last_shutdown_reason_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_c4_pcs_logging_pcs_chg_ph_a_last_shutdown_reason_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_c4_pcs_logging_pcs_chg_ph_a_last_shutdown_reason_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id2_c4_pcs_logging_pcs_1_v5_max10s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_c4_pcs_logging_pcs_1_v5_max10s_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_c4_pcs_logging_pcs_1_v5_max10s_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id2_c4_pcs_logging_pcs_dcdc_current_limit_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_c4_pcs_logging_pcs_dcdc_current_limit_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_c4_pcs_logging_pcs_dcdc_current_limit_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_c4_pcs_logging_pcs_chg_ph_b_last_shutdown_reason_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_c4_pcs_logging_pcs_chg_ph_b_last_shutdown_reason_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_c4_pcs_logging_pcs_chg_ph_b_last_shutdown_reason_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id2_c4_pcs_logging_pcs_chg_phc_input_v_peak10s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_c4_pcs_logging_pcs_chg_phc_input_v_peak10s_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_c4_pcs_logging_pcs_chg_phc_input_v_peak10s_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id2_c4_pcs_logging_pcs_chg_ph_a_int_bus_v_target_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_c4_pcs_logging_pcs_chg_ph_a_int_bus_v_target_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_c4_pcs_logging_pcs_chg_ph_a_int_bus_v_target_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_c4_pcs_logging_pcs_chg_ph_a_pchg_volt_delta_max10s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_c4_pcs_logging_pcs_chg_ph_a_pchg_volt_delta_max10s_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_c4_pcs_logging_pcs_chg_ph_a_pchg_volt_delta_max10s_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id2_c4_pcs_logging_pcs_chg_ph_b_int_bus_v_target_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_c4_pcs_logging_pcs_chg_ph_b_int_bus_v_target_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_c4_pcs_logging_pcs_chg_ph_b_int_bus_v_target_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_c4_pcs_logging_pcs_chg_ph_b_pchg_volt_delta_max10s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_c4_pcs_logging_pcs_chg_ph_b_pchg_volt_delta_max10s_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_c4_pcs_logging_pcs_chg_ph_b_pchg_volt_delta_max10s_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id2_c4_pcs_logging_pcs_chg_ph_c_int_bus_v_target_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_c4_pcs_logging_pcs_chg_ph_c_int_bus_v_target_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_c4_pcs_logging_pcs_chg_ph_c_int_bus_v_target_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id2_c4_pcs_logging_pcs_chg_ph_c_no_flow_bucket_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_c4_pcs_logging_pcs_chg_ph_c_no_flow_bucket_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_c4_pcs_logging_pcs_chg_ph_c_no_flow_bucket_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_c4_pcs_logging_pcs_chg_ph_c_pchg_volt_delta_max10s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_c4_pcs_logging_pcs_chg_ph_c_pchg_volt_delta_max10s_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_c4_pcs_logging_pcs_chg_ph_c_pchg_volt_delta_max10s_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_c4_pcs_logging_pcs_chg_ph_b_machine_enabled_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_c4_pcs_logging_pcs_chg_ph_b_machine_enabled_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_c4_pcs_logging_pcs_chg_ph_b_machine_enabled_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id2_c4_pcs_logging_pcs_dcdc_interval_max_hv_bus_volt_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_c4_pcs_logging_pcs_dcdc_interval_max_hv_bus_volt_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_c4_pcs_logging_pcs_dcdc_interval_max_hv_bus_volt_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id2_c4_pcs_logging_pcs_dcdc_interval_min_hv_bus_volt_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_c4_pcs_logging_pcs_dcdc_interval_min_hv_bus_volt_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_c4_pcs_logging_pcs_dcdc_interval_min_hv_bus_volt_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id2_c4_pcs_logging_pcs_dcdc_short_time_us_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_c4_pcs_logging_pcs_dcdc_short_time_us_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_c4_pcs_logging_pcs_dcdc_short_time_us_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t model3_can_id2_c4_pcs_logging_pcs_chg_ph_b_machine_rotor_freq_droop_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_c4_pcs_logging_pcs_chg_ph_b_machine_rotor_freq_droop_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_c4_pcs_logging_pcs_chg_ph_b_machine_rotor_freq_droop_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t model3_can_id2_c4_pcs_logging_pcs_chg_input_l3_n_vdc_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_c4_pcs_logging_pcs_chg_input_l3_n_vdc_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_c4_pcs_logging_pcs_chg_input_l3_n_vdc_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t model3_can_id2_c4_pcs_logging_pcs_dcdc_tank_voltage_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_c4_pcs_logging_pcs_dcdc_tank_voltage_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_c4_pcs_logging_pcs_dcdc_tank_voltage_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_c4_pcs_logging_pcs_chg_ph_c_last_shutdown_reason_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_c4_pcs_logging_pcs_chg_ph_c_last_shutdown_reason_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_c4_pcs_logging_pcs_chg_ph_c_last_shutdown_reason_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id2_c4_pcs_logging_pcs_chg_input_frequency_l3_n_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_c4_pcs_logging_pcs_chg_input_frequency_l3_n_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_c4_pcs_logging_pcs_chg_input_frequency_l3_n_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id2_c4_pcs_logging_pcs_chg_input_l3_n_vrms_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_c4_pcs_logging_pcs_chg_input_l3_n_vrms_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_c4_pcs_logging_pcs_chg_input_l3_n_vrms_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t model3_can_id2_c4_pcs_logging_pcs_chg_ph_a_lifetimek_wh_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_c4_pcs_logging_pcs_chg_ph_a_lifetimek_wh_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_c4_pcs_logging_pcs_chg_ph_a_lifetimek_wh_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t model3_can_id2_c4_pcs_logging_pcs_chg_ph_b_lifetimek_wh_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_c4_pcs_logging_pcs_chg_ph_b_lifetimek_wh_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_c4_pcs_logging_pcs_chg_ph_b_lifetimek_wh_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t model3_can_id2_c4_pcs_logging_pcs_chg_ph_c_lifetimek_wh_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_c4_pcs_logging_pcs_chg_ph_c_lifetimek_wh_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_c4_pcs_logging_pcs_chg_ph_c_lifetimek_wh_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id2_c4_pcs_logging_pcs_1_v2_min10s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_c4_pcs_logging_pcs_1_v2_min10s_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_c4_pcs_logging_pcs_1_v2_min10s_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id2_c4_pcs_logging_pcs_chg_current_sensor_out_of_band_us_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_c4_pcs_logging_pcs_chg_current_sensor_out_of_band_us_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_c4_pcs_logging_pcs_chg_current_sensor_out_of_band_us_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_c4_pcs_logging_pcs_chg_ph_a_input_freq_wobble_cnt_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_c4_pcs_logging_pcs_chg_ph_a_input_freq_wobble_cnt_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_c4_pcs_logging_pcs_chg_ph_a_input_freq_wobble_cnt_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_c4_pcs_logging_pcs_chg_ph_a_output_i_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_c4_pcs_logging_pcs_chg_ph_a_output_i_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_c4_pcs_logging_pcs_chg_ph_a_output_i_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_c4_pcs_logging_pcs_chg_ph_a_retry_count_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_c4_pcs_logging_pcs_chg_ph_a_retry_count_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_c4_pcs_logging_pcs_chg_ph_a_retry_count_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_c4_pcs_logging_pcs_chg_ph_b_output_i_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_c4_pcs_logging_pcs_chg_ph_b_output_i_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_c4_pcs_logging_pcs_chg_ph_b_output_i_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_c4_pcs_logging_pcs_chg_ph_c_output_i_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_c4_pcs_logging_pcs_chg_ph_c_output_i_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_c4_pcs_logging_pcs_chg_ph_c_output_i_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id2_c4_pcs_logging_pcs_chg_pwm_enable_line_error_count_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_c4_pcs_logging_pcs_chg_pwm_enable_line_error_count_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_c4_pcs_logging_pcs_chg_pwm_enable_line_error_count_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t model3_can_id2_c4_pcs_logging_pcs_d_log_ph_b_channel1_data_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_c4_pcs_logging_pcs_d_log_ph_b_channel1_data_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_c4_pcs_logging_pcs_d_log_ph_b_channel1_data_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t model3_can_id2_c4_pcs_logging_pcs_d_log_ph_b_channel2_data_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_c4_pcs_logging_pcs_d_log_ph_b_channel2_data_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_c4_pcs_logging_pcs_d_log_ph_b_channel2_data_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t model3_can_id2_c4_pcs_logging_pcs_d_log_ph_b_channel3_data_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_c4_pcs_logging_pcs_d_log_ph_b_channel3_data_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_c4_pcs_logging_pcs_d_log_ph_b_channel3_data_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t model3_can_id2_c4_pcs_logging_pcs_d_log_ph_b_channel4_data_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_c4_pcs_logging_pcs_d_log_ph_b_channel4_data_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_c4_pcs_logging_pcs_d_log_ph_b_channel4_data_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id2_c4_pcs_logging_pcs_dcdc_lv_output_current_temp_limit_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_c4_pcs_logging_pcs_dcdc_lv_output_current_temp_limit_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_c4_pcs_logging_pcs_dcdc_lv_output_current_temp_limit_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t model3_can_id2_c4_pcs_logging_pcs_chg_ph_b_machine_stator_current_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_c4_pcs_logging_pcs_chg_ph_b_machine_stator_current_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_c4_pcs_logging_pcs_chg_ph_b_machine_stator_current_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_c4_pcs_logging_pcs_chg_ph_b_retry_count_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_c4_pcs_logging_pcs_chg_ph_b_retry_count_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_c4_pcs_logging_pcs_chg_ph_b_retry_count_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t model3_can_id2_c4_pcs_logging_pcs_chg_input_l1_l2_vdc_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_c4_pcs_logging_pcs_chg_input_l1_l2_vdc_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_c4_pcs_logging_pcs_chg_input_l1_l2_vdc_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id2_c4_pcs_logging_pcs_dcdc_interval_max_lv_bus_volt_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_c4_pcs_logging_pcs_dcdc_interval_max_lv_bus_volt_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_c4_pcs_logging_pcs_dcdc_interval_max_lv_bus_volt_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id2_c4_pcs_logging_pcs_dcdc_interval_min_lv_bus_volt_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_c4_pcs_logging_pcs_dcdc_interval_min_lv_bus_volt_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_c4_pcs_logging_pcs_dcdc_interval_min_lv_bus_volt_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id2_c4_pcs_logging_pcs_dcdc_tank_voltage_target_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_c4_pcs_logging_pcs_dcdc_tank_voltage_target_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_c4_pcs_logging_pcs_dcdc_tank_voltage_target_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_c4_pcs_logging_pcs_chg_ph_c_retry_count_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_c4_pcs_logging_pcs_chg_ph_c_retry_count_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_c4_pcs_logging_pcs_chg_ph_c_retry_count_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_c4_pcs_logging_pcs_chg_ph_b_input_freq_wobble_cnt_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_c4_pcs_logging_pcs_chg_ph_b_input_freq_wobble_cnt_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_c4_pcs_logging_pcs_chg_ph_b_input_freq_wobble_cnt_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id2_c4_pcs_logging_pcs_dcdc_half_period_us_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_c4_pcs_logging_pcs_dcdc_half_period_us_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_c4_pcs_logging_pcs_dcdc_half_period_us_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id2_c4_pcs_logging_pcs_chg_input_l1_l2_vrms_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_c4_pcs_logging_pcs_chg_input_l1_l2_vrms_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_c4_pcs_logging_pcs_chg_input_l1_l2_vrms_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_c4_pcs_logging_pcs_chg_internal_phase_config_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_c4_pcs_logging_pcs_chg_internal_phase_config_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_c4_pcs_logging_pcs_chg_internal_phase_config_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_c4_pcs_logging_pcs_chg_retry_count_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_c4_pcs_logging_pcs_chg_retry_count_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_c4_pcs_logging_pcs_chg_retry_count_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id2_c4_pcs_logging_pcs_dcdc_pwm_enable_line_error_count_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_c4_pcs_logging_pcs_dcdc_pwm_enable_line_error_count_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_c4_pcs_logging_pcs_dcdc_pwm_enable_line_error_count_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id2_c4_pcs_logging_pcs_1_v2_max10s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_c4_pcs_logging_pcs_1_v2_max10s_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_c4_pcs_logging_pcs_1_v2_max10s_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_c4_pcs_logging_pcs_chg_ph_c_machine_enabled_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_c4_pcs_logging_pcs_chg_ph_c_machine_enabled_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_c4_pcs_logging_pcs_chg_ph_c_machine_enabled_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t model3_can_id2_c4_pcs_logging_pcs_chg_ph_c_machine_rotor_freq_droop_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_c4_pcs_logging_pcs_chg_ph_c_machine_rotor_freq_droop_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_c4_pcs_logging_pcs_chg_ph_c_machine_rotor_freq_droop_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id2_c4_pcs_logging_pcs_chg_ph_man_current_to_dist_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_c4_pcs_logging_pcs_chg_ph_man_current_to_dist_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_c4_pcs_logging_pcs_chg_ph_man_current_to_dist_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_c4_pcs_logging_pcs_chg_phases_priority_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_c4_pcs_logging_pcs_chg_phases_priority_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_c4_pcs_logging_pcs_chg_phases_priority_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t model3_can_id2_c4_pcs_logging_pcs_chg_input_ng_vdc_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_c4_pcs_logging_pcs_chg_input_ng_vdc_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_c4_pcs_logging_pcs_chg_input_ng_vdc_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_c4_pcs_logging_pcs_chg_kwh_lost_by_freq_droop_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_c4_pcs_logging_pcs_chg_kwh_lost_by_freq_droop_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_c4_pcs_logging_pcs_chg_kwh_lost_by_freq_droop_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_c4_pcs_logging_pcs_chg_ph_c_input_freq_wobble_cnt_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_c4_pcs_logging_pcs_chg_ph_c_input_freq_wobble_cnt_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_c4_pcs_logging_pcs_chg_ph_c_input_freq_wobble_cnt_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t model3_can_id2_c4_pcs_logging_pcs_d_log_ph_c_channel1_data_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_c4_pcs_logging_pcs_d_log_ph_c_channel1_data_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_c4_pcs_logging_pcs_d_log_ph_c_channel1_data_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t model3_can_id2_c4_pcs_logging_pcs_d_log_ph_c_channel2_data_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_c4_pcs_logging_pcs_d_log_ph_c_channel2_data_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_c4_pcs_logging_pcs_d_log_ph_c_channel2_data_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t model3_can_id2_c4_pcs_logging_pcs_d_log_ph_c_channel3_data_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_c4_pcs_logging_pcs_d_log_ph_c_channel3_data_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_c4_pcs_logging_pcs_d_log_ph_c_channel3_data_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t model3_can_id2_c4_pcs_logging_pcs_d_log_ph_c_channel4_data_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_c4_pcs_logging_pcs_d_log_ph_c_channel4_data_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_c4_pcs_logging_pcs_d_log_ph_c_channel4_data_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id2_c4_pcs_logging_pcs_dcdc_cla_current_freq_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_c4_pcs_logging_pcs_dcdc_cla_current_freq_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_c4_pcs_logging_pcs_dcdc_cla_current_freq_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id2_c4_pcs_logging_pcs_dcdc_interval_max_lv_output_curr_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_c4_pcs_logging_pcs_dcdc_interval_max_lv_output_curr_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_c4_pcs_logging_pcs_dcdc_interval_max_lv_output_curr_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id2_c4_pcs_logging_pcs_dcdc_interval_min_lv_output_curr_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_c4_pcs_logging_pcs_dcdc_interval_min_lv_output_curr_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_c4_pcs_logging_pcs_dcdc_interval_min_lv_output_curr_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id2_c4_pcs_logging_pcs_chg_output_v_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_c4_pcs_logging_pcs_chg_output_v_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_c4_pcs_logging_pcs_chg_output_v_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id2_c4_pcs_logging_pcs_chg_input_ng_vrms_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_c4_pcs_logging_pcs_chg_input_ng_vrms_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_c4_pcs_logging_pcs_chg_input_ng_vrms_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id2_c4_pcs_logging_pcs_5_vn_max10s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_c4_pcs_logging_pcs_5_vn_max10s_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_c4_pcs_logging_pcs_5_vn_max10s_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_c4_pcs_logging_pcs_chg_l1_n_pll_locked_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_c4_pcs_logging_pcs_chg_l1_n_pll_locked_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_c4_pcs_logging_pcs_chg_l1_n_pll_locked_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t model3_can_id2_c4_pcs_logging_pcs_chg_ph_c_machine_stator_current_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_c4_pcs_logging_pcs_chg_ph_c_machine_stator_current_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_c4_pcs_logging_pcs_chg_ph_c_machine_stator_current_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_c4_pcs_logging_pcs_chg_l2_n_pll_locked_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_c4_pcs_logging_pcs_chg_l2_n_pll_locked_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_c4_pcs_logging_pcs_chg_l2_n_pll_locked_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id2_c4_pcs_logging_pcs_chg_ph_a_transient_retry_count_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_c4_pcs_logging_pcs_chg_ph_a_transient_retry_count_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_c4_pcs_logging_pcs_chg_ph_a_transient_retry_count_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id2_c4_pcs_logging_pcs_chg_ph_b_transient_retry_count_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_c4_pcs_logging_pcs_chg_ph_b_transient_retry_count_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_c4_pcs_logging_pcs_chg_ph_b_transient_retry_count_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id2_c4_pcs_logging_pcs_chg_ph_c_transient_retry_count_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_c4_pcs_logging_pcs_chg_ph_c_transient_retry_count_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_c4_pcs_logging_pcs_chg_ph_c_transient_retry_count_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_c4_pcs_logging_pcs_chg_l3_n_pll_locked_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_c4_pcs_logging_pcs_chg_l3_n_pll_locked_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_c4_pcs_logging_pcs_chg_l3_n_pll_locked_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_c4_pcs_logging_pcs_chg_req_kwh_lost_by_freq_droop_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_c4_pcs_logging_pcs_chg_req_kwh_lost_by_freq_droop_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_c4_pcs_logging_pcs_chg_req_kwh_lost_by_freq_droop_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_c4_pcs_logging_pcs_num_alerts_set_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_c4_pcs_logging_pcs_num_alerts_set_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_c4_pcs_logging_pcs_num_alerts_set_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_c4_pcs_logging_pcs_chg_l1_l2_pll_locked_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_c4_pcs_logging_pcs_chg_l1_l2_pll_locked_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_c4_pcs_logging_pcs_chg_l1_l2_pll_locked_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_c4_pcs_logging_pcs_chg_ng_pll_locked_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_c4_pcs_logging_pcs_chg_ng_pll_locked_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_c4_pcs_logging_pcs_chg_ng_pll_locked_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_c4_pcs_logging_pcs_chg_ph_man_optimal_phs_to_use_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_c4_pcs_logging_pcs_chg_ph_man_optimal_phs_to_use_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_c4_pcs_logging_pcs_chg_ph_man_optimal_phs_to_use_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_c4_pcs_logging_pcs_chg5_vl1_enable_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_c4_pcs_logging_pcs_chg5_vl1_enable_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_c4_pcs_logging_pcs_chg5_vl1_enable_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_c4_pcs_logging_pcs_chg_acpw_heartbeat_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_c4_pcs_logging_pcs_chg_acpw_heartbeat_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_c4_pcs_logging_pcs_chg_acpw_heartbeat_state_is_in_range(uint8_t value);

/**
 * Pack message ID3BBUI_power.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int model3_can_id3_bbui_power_pack(
    uint8_t *dst_p,
    const struct model3_can_id3_bbui_power_t *src_p,
    size_t size);

/**
 * Unpack message ID3BBUI_power.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int model3_can_id3_bbui_power_unpack(
    struct model3_can_id3_bbui_power_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id3_bbui_power_ui_power_expected_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id3_bbui_power_ui_power_expected_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id3_bbui_power_ui_power_expected_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id3_bbui_power_ui_power_ideal_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id3_bbui_power_ui_power_ideal_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id3_bbui_power_ui_power_ideal_is_in_range(uint8_t value);

/**
 * Pack message ID5D5RearTBD.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int model3_can_id5_d5_rear_tbd_pack(
    uint8_t *dst_p,
    const struct model3_can_id5_d5_rear_tbd_t *src_p,
    size_t size);

/**
 * Unpack message ID5D5RearTBD.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int model3_can_id5_d5_rear_tbd_unpack(
    struct model3_can_id5_d5_rear_tbd_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id5_d5_rear_tbd_test_temp5_d5_a_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id5_d5_rear_tbd_test_temp5_d5_a_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id5_d5_rear_tbd_test_temp5_d5_a_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id5_d5_rear_tbd_rear_temp5_d5_b_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id5_d5_rear_tbd_rear_temp5_d5_b_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id5_d5_rear_tbd_rear_temp5_d5_b_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id5_d5_rear_tbd_rear_flow5_d5_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id5_d5_rear_tbd_rear_flow5_d5_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id5_d5_rear_tbd_rear_flow5_d5_is_in_range(uint8_t value);

/**
 * Pack message ID556FrontTBD.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int model3_can_id556_front_tbd_pack(
    uint8_t *dst_p,
    const struct model3_can_id556_front_tbd_t *src_p,
    size_t size);

/**
 * Unpack message ID556FrontTBD.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int model3_can_id556_front_tbd_unpack(
    struct model3_can_id556_front_tbd_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id556_front_tbd_front_temp556_a_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id556_front_tbd_front_temp556_a_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id556_front_tbd_front_temp556_a_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id556_front_tbd_front_temp556_b_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id556_front_tbd_front_temp556_b_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id556_front_tbd_front_temp556_b_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id556_front_tbd_front_flow556_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id556_front_tbd_front_flow556_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id556_front_tbd_front_flow556_is_in_range(uint8_t value);

/**
 * Pack message ID557FrontThermalControl.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int model3_can_id557_front_thermal_control_pack(
    uint8_t *dst_p,
    const struct model3_can_id557_front_thermal_control_t *src_p,
    size_t size);

/**
 * Unpack message ID557FrontThermalControl.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int model3_can_id557_front_thermal_control_unpack(
    struct model3_can_id557_front_thermal_control_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id557_front_thermal_control_dis_passive_inlet_temp_req_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id557_front_thermal_control_dis_passive_inlet_temp_req_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id557_front_thermal_control_dis_passive_inlet_temp_req_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id557_front_thermal_control_dis_active_inlet_temp_req_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id557_front_thermal_control_dis_active_inlet_temp_req_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id557_front_thermal_control_dis_active_inlet_temp_req_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id557_front_thermal_control_dis_coolant_flow_req_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id557_front_thermal_control_dis_coolant_flow_req_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id557_front_thermal_control_dis_coolant_flow_req_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id557_front_thermal_control_dis_oil_flow_req_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id557_front_thermal_control_dis_oil_flow_req_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id557_front_thermal_control_dis_oil_flow_req_is_in_range(uint8_t value);

/**
 * Pack message ID5D7RearThermalControl.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int model3_can_id5_d7_rear_thermal_control_pack(
    uint8_t *dst_p,
    const struct model3_can_id5_d7_rear_thermal_control_t *src_p,
    size_t size);

/**
 * Unpack message ID5D7RearThermalControl.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int model3_can_id5_d7_rear_thermal_control_unpack(
    struct model3_can_id5_d7_rear_thermal_control_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id5_d7_rear_thermal_control_di_passive_inlet_temp_req_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id5_d7_rear_thermal_control_di_passive_inlet_temp_req_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id5_d7_rear_thermal_control_di_passive_inlet_temp_req_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id5_d7_rear_thermal_control_di_active_inlet_temp_req_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id5_d7_rear_thermal_control_di_active_inlet_temp_req_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id5_d7_rear_thermal_control_di_active_inlet_temp_req_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id5_d7_rear_thermal_control_di_coolant_flow_req_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id5_d7_rear_thermal_control_di_coolant_flow_req_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id5_d7_rear_thermal_control_di_coolant_flow_req_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id5_d7_rear_thermal_control_di_oil_flow_req_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id5_d7_rear_thermal_control_di_oil_flow_req_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id5_d7_rear_thermal_control_di_oil_flow_req_is_in_range(uint8_t value);

/**
 * Pack message ID7D5DIR_debug.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int model3_can_id7_d5_dir_debug_pack(
    uint8_t *dst_p,
    const struct model3_can_id7_d5_dir_debug_t *src_p,
    size_t size);

/**
 * Unpack message ID7D5DIR_debug.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int model3_can_id7_d5_dir_debug_unpack(
    struct model3_can_id7_d5_dir_debug_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id7_d5_dir_debug_dir_debug_selector_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id7_d5_dir_debug_dir_debug_selector_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id7_d5_dir_debug_dir_debug_selector_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id7_d5_dir_debug_dir_cpu10_hz_min_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id7_d5_dir_debug_dir_cpu10_hz_min_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id7_d5_dir_debug_dir_cpu10_hz_min_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id7_d5_dir_debug_dir_cpu1k_hz_min_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id7_d5_dir_debug_dir_cpu1k_hz_min_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id7_d5_dir_debug_dir_cpu1k_hz_min_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id7_d5_dir_debug_dir_dc_cap_temp_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id7_d5_dir_debug_dir_dc_cap_temp_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id7_d5_dir_debug_dir_dc_cap_temp_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id7_d5_dir_debug_dir_gain_scale_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id7_d5_dir_debug_dir_gain_scale_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id7_d5_dir_debug_dir_gain_scale_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id7_d5_dir_debug_dir_gate_drive_supply_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id7_d5_dir_debug_dir_gate_drive_supply_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id7_d5_dir_debug_dir_gate_drive_supply_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id7_d5_dir_debug_dir_hw_fault_count_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id7_d5_dir_debug_dir_hw_fault_count_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id7_d5_dir_debug_dir_hw_fault_count_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id7_d5_dir_debug_dir_lm_scale_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id7_d5_dir_debug_dir_lm_scale_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id7_d5_dir_debug_dir_lm_scale_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t model3_can_id7_d5_dir_debug_dir_loc_target_accel_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id7_d5_dir_debug_dir_loc_target_accel_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id7_d5_dir_debug_dir_loc_target_accel_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id7_d5_dir_debug_dir_motor_type_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id7_d5_dir_debug_dir_motor_type_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id7_d5_dir_debug_dir_motor_type_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id7_d5_dir_debug_dir_mu_surf_high_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id7_d5_dir_debug_dir_mu_surf_high_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id7_d5_dir_debug_dir_mu_surf_high_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t model3_can_id7_d5_dir_debug_dir_offset_a_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id7_d5_dir_debug_dir_offset_a_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id7_d5_dir_debug_dir_offset_a_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t model3_can_id7_d5_dir_debug_dir_offset_b_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id7_d5_dir_debug_dir_offset_b_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id7_d5_dir_debug_dir_offset_b_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id7_d5_dir_debug_dir_oil_pump_motor_speed_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id7_d5_dir_debug_dir_oil_pump_motor_speed_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id7_d5_dir_debug_dir_oil_pump_motor_speed_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id7_d5_dir_debug_dir_phase_out_busbar_temp_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id7_d5_dir_debug_dir_phase_out_busbar_temp_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id7_d5_dir_debug_dir_phase_out_busbar_temp_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id7_d5_dir_debug_dir_pwr_sat_charge_current_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id7_d5_dir_debug_dir_pwr_sat_charge_current_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id7_d5_dir_debug_dir_pwr_sat_charge_current_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id7_d5_dir_debug_dir_pwr_sat_discharge_current_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id7_d5_dir_debug_dir_pwr_sat_discharge_current_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id7_d5_dir_debug_dir_pwr_sat_discharge_current_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id7_d5_dir_debug_dir_resolver_offset_cos_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id7_d5_dir_debug_dir_resolver_offset_cos_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id7_d5_dir_debug_dir_resolver_offset_cos_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t model3_can_id7_d5_dir_debug_dir_rotor_offset_est_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id7_d5_dir_debug_dir_rotor_offset_est_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id7_d5_dir_debug_dir_rotor_offset_est_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id7_d5_dir_debug_dir_rotor_offset_learning_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id7_d5_dir_debug_dir_rotor_offset_learning_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id7_d5_dir_debug_dir_rotor_offset_learning_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id7_d5_dir_debug_dir_rs_scale_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id7_d5_dir_debug_dir_rs_scale_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id7_d5_dir_debug_dir_rs_scale_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id7_d5_dir_debug_dir_sopt_time_to_trip_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id7_d5_dir_debug_dir_sopt_time_to_trip_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id7_d5_dir_debug_dir_sopt_time_to_trip_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id7_d5_dir_debug_dir_ssm_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id7_d5_dir_debug_dir_ssm_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id7_d5_dir_debug_dir_ssm_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id7_d5_dir_debug_dir_stator_end_winding_temp_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id7_d5_dir_debug_dir_stator_end_winding_temp_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id7_d5_dir_debug_dir_stator_end_winding_temp_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id7_d5_dir_debug_dir_sys_pedal_min_torque_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id7_d5_dir_debug_dir_sys_pedal_min_torque_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id7_d5_dir_debug_dir_sys_pedal_min_torque_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id7_d5_dir_debug_dir_system_stack_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id7_d5_dir_debug_dir_system_stack_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id7_d5_dir_debug_dir_system_stack_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id7_d5_dir_debug_dir_tq_sat_thermal_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id7_d5_dir_debug_dir_tq_sat_thermal_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id7_d5_dir_debug_dir_tq_sat_thermal_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id7_d5_dir_debug_dir_tq_scale_differential_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id7_d5_dir_debug_dir_tq_scale_differential_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id7_d5_dir_debug_dir_tq_scale_differential_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id7_d5_dir_debug_dir_ve_mass_inv_raw_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id7_d5_dir_debug_dir_ve_mass_inv_raw_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id7_d5_dir_debug_dir_ve_mass_inv_raw_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id7_d5_dir_debug_dir_velocity_estimator_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id7_d5_dir_debug_dir_velocity_estimator_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id7_d5_dir_debug_dir_velocity_estimator_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id7_d5_dir_debug_dir_gate_drive_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id7_d5_dir_debug_dir_gate_drive_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id7_d5_dir_debug_dir_gate_drive_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id7_d5_dir_debug_dir_usm_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id7_d5_dir_debug_dir_usm_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id7_d5_dir_debug_dir_usm_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id7_d5_dir_debug_dir_power_stage_safe_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id7_d5_dir_debug_dir_power_stage_safe_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id7_d5_dir_debug_dir_power_stage_safe_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id7_d5_dir_debug_dir_aeb_fault_reason_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id7_d5_dir_debug_dir_aeb_fault_reason_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id7_d5_dir_debug_dir_aeb_fault_reason_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t model3_can_id7_d5_dir_debug_dir_brake_cp_scale_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id7_d5_dir_debug_dir_brake_cp_scale_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id7_d5_dir_debug_dir_brake_cp_scale_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id7_d5_dir_debug_dir_busbar_temp_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id7_d5_dir_debug_dir_busbar_temp_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id7_d5_dir_debug_dir_busbar_temp_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id7_d5_dir_debug_dir_cpu10_hz_max_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id7_d5_dir_debug_dir_cpu10_hz_max_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id7_d5_dir_debug_dir_cpu10_hz_max_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id7_d5_dir_debug_dir_cpu1_hz_min_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id7_d5_dir_debug_dir_cpu1_hz_min_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id7_d5_dir_debug_dir_cpu1_hz_min_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id7_d5_dir_debug_dir_cpu1k_hz_max_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id7_d5_dir_debug_dir_cpu1k_hz_max_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id7_d5_dir_debug_dir_cpu1k_hz_max_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id7_d5_dir_debug_dir_cpu_id_word0_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id7_d5_dir_debug_dir_cpu_id_word0_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id7_d5_dir_debug_dir_cpu_id_word0_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id7_d5_dir_debug_dir_cpu_id_word1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id7_d5_dir_debug_dir_cpu_id_word1_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id7_d5_dir_debug_dir_cpu_id_word1_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t model3_can_id7_d5_dir_debug_dir_dc_cable_current_est_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id7_d5_dir_debug_dir_dc_cable_current_est_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id7_d5_dir_debug_dir_dc_cable_current_est_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id7_d5_dir_debug_dir_flux_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id7_d5_dir_debug_dir_flux_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id7_d5_dir_debug_dir_flux_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id7_d5_dir_debug_dir_idle_stack_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id7_d5_dir_debug_dir_idle_stack_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id7_d5_dir_debug_dir_idle_stack_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id7_d5_dir_debug_dir_loc_target_speed_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id7_d5_dir_debug_dir_loc_target_speed_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id7_d5_dir_debug_dir_loc_target_speed_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id7_d5_dir_debug_dir_motor_ia_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id7_d5_dir_debug_dir_motor_ia_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id7_d5_dir_debug_dir_motor_ia_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id7_d5_dir_debug_dir_oil_pump_phase_voltage_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id7_d5_dir_debug_dir_oil_pump_phase_voltage_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id7_d5_dir_debug_dir_oil_pump_phase_voltage_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id7_d5_dir_debug_dir_peak_i_qref_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id7_d5_dir_debug_dir_peak_i_qref_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id7_d5_dir_debug_dir_peak_i_qref_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id7_d5_dir_debug_dir_phase_out_busbar_weld_temp_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id7_d5_dir_debug_dir_phase_out_busbar_weld_temp_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id7_d5_dir_debug_dir_phase_out_busbar_weld_temp_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id7_d5_dir_debug_dir_pwr_sat_max_discharge_power_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id7_d5_dir_debug_dir_pwr_sat_max_discharge_power_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id7_d5_dir_debug_dir_pwr_sat_max_discharge_power_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id7_d5_dir_debug_dir_resolver_cos_rms_squared_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id7_d5_dir_debug_dir_resolver_cos_rms_squared_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id7_d5_dir_debug_dir_resolver_cos_rms_squared_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id7_d5_dir_debug_dir_resolver_offset_sin_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id7_d5_dir_debug_dir_resolver_offset_sin_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id7_d5_dir_debug_dir_resolver_offset_sin_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id7_d5_dir_debug_dir_rotor_flux_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id7_d5_dir_debug_dir_rotor_flux_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id7_d5_dir_debug_dir_rotor_flux_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id7_d5_dir_debug_dir_rotor_max_magnet_temp_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id7_d5_dir_debug_dir_rotor_max_magnet_temp_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id7_d5_dir_debug_dir_rotor_max_magnet_temp_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id7_d5_dir_debug_dir_sopt_trip_delay_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id7_d5_dir_debug_dir_sopt_trip_delay_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id7_d5_dir_debug_dir_sopt_trip_delay_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id7_d5_dir_debug_dir_stator_flux_ref_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id7_d5_dir_debug_dir_stator_flux_ref_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id7_d5_dir_debug_dir_stator_flux_ref_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t model3_can_id7_d5_dir_debug_dir_stator_i_dref_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id7_d5_dir_debug_dir_stator_i_dref_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id7_d5_dir_debug_dir_stator_i_dref_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t model3_can_id7_d5_dir_debug_dir_stator_i_qref_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id7_d5_dir_debug_dir_stator_i_qref_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id7_d5_dir_debug_dir_stator_i_qref_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t model3_can_id7_d5_dir_debug_dir_stator_vd_filtered_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id7_d5_dir_debug_dir_stator_vd_filtered_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id7_d5_dir_debug_dir_stator_vd_filtered_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t model3_can_id7_d5_dir_debug_dir_stator_vq_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id7_d5_dir_debug_dir_stator_vq_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id7_d5_dir_debug_dir_stator_vq_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id7_d5_dir_debug_dir_sys_heat_power_optimal_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id7_d5_dir_debug_dir_sys_heat_power_optimal_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id7_d5_dir_debug_dir_sys_heat_power_optimal_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id7_d5_dir_debug_dir_tc_max_request_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id7_d5_dir_debug_dir_tc_max_request_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id7_d5_dir_debug_dir_tc_max_request_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t model3_can_id7_d5_dir_debug_dir_rotor_offset_mean_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id7_d5_dir_debug_dir_rotor_offset_mean_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id7_d5_dir_debug_dir_rotor_offset_mean_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t model3_can_id7_d5_dir_debug_dir_ve_res_force_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id7_d5_dir_debug_dir_ve_res_force_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id7_d5_dir_debug_dir_ve_res_force_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id7_d5_dir_debug_dir_sys_pedal_max_torque_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id7_d5_dir_debug_dir_sys_pedal_max_torque_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id7_d5_dir_debug_dir_sys_pedal_max_torque_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id7_d5_dir_debug_dir_aeb_unavailable_reason_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id7_d5_dir_debug_dir_aeb_unavailable_reason_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id7_d5_dir_debug_dir_aeb_unavailable_reason_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id7_d5_dir_debug_dir_brk_st_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id7_d5_dir_debug_dir_brk_st_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id7_d5_dir_debug_dir_brk_st_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id7_d5_dir_debug_dir_cpu10_hz_avg_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id7_d5_dir_debug_dir_cpu10_hz_avg_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id7_d5_dir_debug_dir_cpu10_hz_avg_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id7_d5_dir_debug_dir_cpu1_hz_max_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id7_d5_dir_debug_dir_cpu1_hz_max_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id7_d5_dir_debug_dir_cpu1_hz_max_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id7_d5_dir_debug_dir_cpu1k_hz_avg_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id7_d5_dir_debug_dir_cpu1k_hz_avg_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id7_d5_dir_debug_dir_cpu1k_hz_avg_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id7_d5_dir_debug_dir_decode_hardware_stack_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id7_d5_dir_debug_dir_decode_hardware_stack_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id7_d5_dir_debug_dir_decode_hardware_stack_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id7_d5_dir_debug_dir_lls_scale_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id7_d5_dir_debug_dir_lls_scale_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id7_d5_dir_debug_dir_lls_scale_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t model3_can_id7_d5_dir_debug_dir_loc_up_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id7_d5_dir_debug_dir_loc_up_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id7_d5_dir_debug_dir_loc_up_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id7_d5_dir_debug_dir_oil_pump_pressure_estimate_max_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id7_d5_dir_debug_dir_oil_pump_pressure_estimate_max_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id7_d5_dir_debug_dir_oil_pump_pressure_estimate_max_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id7_d5_dir_debug_dir_pcs_temp_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id7_d5_dir_debug_dir_pcs_temp_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id7_d5_dir_debug_dir_pcs_temp_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id7_d5_dir_debug_dir_phase_out_lug_temp_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id7_d5_dir_debug_dir_phase_out_lug_temp_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id7_d5_dir_debug_dir_phase_out_lug_temp_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id7_d5_dir_debug_dir_pwr_sat_max_regen_power_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id7_d5_dir_debug_dir_pwr_sat_max_regen_power_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id7_d5_dir_debug_dir_pwr_sat_max_regen_power_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id7_d5_dir_debug_dir_resolver_phase_offset_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id7_d5_dir_debug_dir_resolver_phase_offset_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id7_d5_dir_debug_dir_resolver_phase_offset_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id7_d5_dir_debug_dir_resolver_sin_rms_squared_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id7_d5_dir_debug_dir_resolver_sin_rms_squared_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id7_d5_dir_debug_dir_resolver_sin_rms_squared_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id7_d5_dir_debug_dir_sopt_time_to_off_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id7_d5_dir_debug_dir_sopt_time_to_off_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id7_d5_dir_debug_dir_sopt_time_to_off_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id7_d5_dir_debug_dir_tc_min_request_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id7_d5_dir_debug_dir_tc_min_request_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id7_d5_dir_debug_dir_tc_min_request_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id7_d5_dir_debug_dir_aeb_cancel_reason_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id7_d5_dir_debug_dir_aeb_cancel_reason_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id7_d5_dir_debug_dir_aeb_cancel_reason_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id7_d5_dir_debug_dir_cpu100_hz_min_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id7_d5_dir_debug_dir_cpu100_hz_min_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id7_d5_dir_debug_dir_cpu100_hz_min_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id7_d5_dir_debug_dir_cpu1_hz_avg_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id7_d5_dir_debug_dir_cpu1_hz_avg_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id7_d5_dir_debug_dir_cpu1_hz_avg_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id7_d5_dir_debug_dir_cpu20k_hz_min_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id7_d5_dir_debug_dir_cpu20k_hz_min_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id7_d5_dir_debug_dir_cpu20k_hz_min_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id7_d5_dir_debug_dir_cpu_id_word2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id7_d5_dir_debug_dir_cpu_id_word2_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id7_d5_dir_debug_dir_cpu_id_word2_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t model3_can_id7_d5_dir_debug_dir_crc_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id7_d5_dir_debug_dir_crc_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id7_d5_dir_debug_dir_crc_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id7_d5_dir_debug_dir_current_limit_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id7_d5_dir_debug_dir_current_limit_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id7_d5_dir_debug_dir_current_limit_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id7_d5_dir_debug_dir_dc_cable_heat_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id7_d5_dir_debug_dir_dc_cable_heat_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id7_d5_dir_debug_dir_dc_cable_heat_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id7_d5_dir_debug_dir_dc_link_cap_temp_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id7_d5_dir_debug_dir_dc_link_cap_temp_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id7_d5_dir_debug_dir_dc_link_cap_temp_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t model3_can_id7_d5_dir_debug_dir_drive_unit_odometer_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id7_d5_dir_debug_dir_drive_unit_odometer_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id7_d5_dir_debug_dir_drive_unit_odometer_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id7_d5_dir_debug_dir_eeprom_stack_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id7_d5_dir_debug_dir_eeprom_stack_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id7_d5_dir_debug_dir_eeprom_stack_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id7_d5_dir_debug_dir_llr_scale_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id7_d5_dir_debug_dir_llr_scale_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id7_d5_dir_debug_dir_llr_scale_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t model3_can_id7_d5_dir_debug_dir_load_angle_margin_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id7_d5_dir_debug_dir_load_angle_margin_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id7_d5_dir_debug_dir_load_angle_margin_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t model3_can_id7_d5_dir_debug_dir_motor_i_aavg_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id7_d5_dir_debug_dir_motor_i_aavg_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id7_d5_dir_debug_dir_motor_i_aavg_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id7_d5_dir_debug_dir_motor_ib_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id7_d5_dir_debug_dir_motor_ib_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id7_d5_dir_debug_dir_motor_ib_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id7_d5_dir_debug_dir_oil_pump_pressure_expected_min_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id7_d5_dir_debug_dir_oil_pump_pressure_expected_min_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id7_d5_dir_debug_dir_oil_pump_pressure_expected_min_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id7_d5_dir_debug_dir_pedal_pos_filt_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id7_d5_dir_debug_dir_pedal_pos_filt_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id7_d5_dir_debug_dir_pedal_pos_filt_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id7_d5_dir_debug_dir_resolver_common_gain_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id7_d5_dir_debug_dir_resolver_common_gain_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id7_d5_dir_debug_dir_resolver_common_gain_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t model3_can_id7_d5_dir_debug_dir_resolver_cos_filtered_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id7_d5_dir_debug_dir_resolver_cos_filtered_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id7_d5_dir_debug_dir_resolver_cos_filtered_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id7_d5_dir_debug_dir_stator_flux_fdb_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id7_d5_dir_debug_dir_stator_flux_fdb_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id7_d5_dir_debug_dir_stator_flux_fdb_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t model3_can_id7_d5_dir_debug_dir_stator_i_dfdb_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id7_d5_dir_debug_dir_stator_i_dfdb_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id7_d5_dir_debug_dir_stator_i_dfdb_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t model3_can_id7_d5_dir_debug_dir_stator_i_qfdb_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id7_d5_dir_debug_dir_stator_i_qfdb_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id7_d5_dir_debug_dir_stator_i_qfdb_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id7_d5_dir_debug_dir_stator_temp1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id7_d5_dir_debug_dir_stator_temp1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id7_d5_dir_debug_dir_stator_temp1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t model3_can_id7_d5_dir_debug_dir_stator_vd_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id7_d5_dir_debug_dir_stator_vd_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id7_d5_dir_debug_dir_stator_vd_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t model3_can_id7_d5_dir_debug_dir_stator_vq_filtered_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id7_d5_dir_debug_dir_stator_vq_filtered_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id7_d5_dir_debug_dir_stator_vq_filtered_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id7_d5_dir_debug_dir_tq_sat_motor_voltage_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id7_d5_dir_debug_dir_tq_sat_motor_voltage_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id7_d5_dir_debug_dir_tq_sat_motor_voltage_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id7_d5_dir_debug_dir_tq_sat_ui_drive_torque_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id7_d5_dir_debug_dir_tq_sat_ui_drive_torque_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id7_d5_dir_debug_dir_tq_sat_ui_drive_torque_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t model3_can_id7_d5_dir_debug_dir_loc_ui_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id7_d5_dir_debug_dir_loc_ui_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id7_d5_dir_debug_dir_loc_ui_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id7_d5_dir_debug_dir_sys_post_pedal_min_torque_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id7_d5_dir_debug_dir_sys_post_pedal_min_torque_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id7_d5_dir_debug_dir_sys_post_pedal_min_torque_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id7_d5_dir_debug_dir_cpu100_hz_max_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id7_d5_dir_debug_dir_cpu100_hz_max_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id7_d5_dir_debug_dir_cpu100_hz_max_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id7_d5_dir_debug_dir_cpu20k_hz_max_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id7_d5_dir_debug_dir_cpu20k_hz_max_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id7_d5_dir_debug_dir_cpu20k_hz_max_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id7_d5_dir_debug_dir_hv_dc_cable_temp_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id7_d5_dir_debug_dir_hv_dc_cable_temp_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id7_d5_dir_debug_dir_hv_dc_cable_temp_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t model3_can_id7_d5_dir_debug_dir_load_angle_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id7_d5_dir_debug_dir_load_angle_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id7_d5_dir_debug_dir_load_angle_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id7_d5_dir_debug_dir_opd_unavailable_reason_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id7_d5_dir_debug_dir_opd_unavailable_reason_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id7_d5_dir_debug_dir_opd_unavailable_reason_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id7_d5_dir_debug_dir_resolver_ready_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id7_d5_dir_debug_dir_resolver_ready_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id7_d5_dir_debug_dir_resolver_ready_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t model3_can_id7_d5_dir_debug_dir_resolver_sin_filtered_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id7_d5_dir_debug_dir_resolver_sin_filtered_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id7_d5_dir_debug_dir_resolver_sin_filtered_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id7_d5_dir_debug_dir_sopt_max_current_mag_sqrd_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id7_d5_dir_debug_dir_sopt_max_current_mag_sqrd_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id7_d5_dir_debug_dir_sopt_max_current_mag_sqrd_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id7_d5_dir_debug_dir_stator_temp2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id7_d5_dir_debug_dir_stator_temp2_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id7_d5_dir_debug_dir_stator_temp2_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id7_d5_dir_debug_dir_tq_sat_motor_current_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id7_d5_dir_debug_dir_tq_sat_motor_current_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id7_d5_dir_debug_dir_tq_sat_motor_current_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id7_d5_dir_debug_dir_tq_sat_ui_regen_torque_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id7_d5_dir_debug_dir_tq_sat_ui_regen_torque_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id7_d5_dir_debug_dir_tq_sat_ui_regen_torque_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id7_d5_dir_debug_dir_uds_stack_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id7_d5_dir_debug_dir_uds_stack_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id7_d5_dir_debug_dir_uds_stack_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id7_d5_dir_debug_dir_resolver_no_carrier_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id7_d5_dir_debug_dir_resolver_no_carrier_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id7_d5_dir_debug_dir_resolver_no_carrier_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id7_d5_dir_debug_dir_resolver_no_phase_lock_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id7_d5_dir_debug_dir_resolver_no_phase_lock_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id7_d5_dir_debug_dir_resolver_no_phase_lock_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id7_d5_dir_debug_dir_resolver_cla_mia_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id7_d5_dir_debug_dir_resolver_cla_mia_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id7_d5_dir_debug_dir_resolver_cla_mia_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t model3_can_id7_d5_dir_debug_dir_loc_feed_fw_trq_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id7_d5_dir_debug_dir_loc_feed_fw_trq_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id7_d5_dir_debug_dir_loc_feed_fw_trq_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id7_d5_dir_debug_dir_cpu100_hz_avg_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id7_d5_dir_debug_dir_cpu100_hz_avg_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id7_d5_dir_debug_dir_cpu100_hz_avg_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id7_d5_dir_debug_dir_cpu20k_hz_avg_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id7_d5_dir_debug_dir_cpu20k_hz_avg_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id7_d5_dir_debug_dir_cpu20k_hz_avg_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id7_d5_dir_debug_dir_cpu_id_word3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id7_d5_dir_debug_dir_cpu_id_word3_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id7_d5_dir_debug_dir_cpu_id_word3_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id7_d5_dir_debug_dir_internal_angle_filt_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id7_d5_dir_debug_dir_internal_angle_filt_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id7_d5_dir_debug_dir_internal_angle_filt_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id7_d5_dir_debug_dir_magnet_temp_est_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id7_d5_dir_debug_dir_magnet_temp_est_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id7_d5_dir_debug_dir_magnet_temp_est_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t model3_can_id7_d5_dir_debug_dir_motor_i_bavg_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id7_d5_dir_debug_dir_motor_i_bavg_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id7_d5_dir_debug_dir_motor_i_bavg_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id7_d5_dir_debug_dir_motor_ic_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id7_d5_dir_debug_dir_motor_ic_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id7_d5_dir_debug_dir_motor_ic_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id7_d5_dir_debug_dir_motor_v_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id7_d5_dir_debug_dir_motor_v_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id7_d5_dir_debug_dir_motor_v_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id7_d5_dir_debug_dir_neg_dc_busbar_temp_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id7_d5_dir_debug_dir_neg_dc_busbar_temp_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id7_d5_dir_debug_dir_neg_dc_busbar_temp_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id7_d5_dir_debug_dir_peak_flux_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id7_d5_dir_debug_dir_peak_flux_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id7_d5_dir_debug_dir_peak_flux_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id7_d5_dir_debug_dir_pwr_sat_max_bus_voltage_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id7_d5_dir_debug_dir_pwr_sat_max_bus_voltage_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id7_d5_dir_debug_dir_pwr_sat_max_bus_voltage_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id7_d5_dir_debug_dir_resolver_error_rms_squared_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id7_d5_dir_debug_dir_resolver_error_rms_squared_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id7_d5_dir_debug_dir_resolver_error_rms_squared_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t model3_can_id7_d5_dir_debug_dir_system_torque_command_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id7_d5_dir_debug_dir_system_torque_command_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id7_d5_dir_debug_dir_system_torque_command_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id7_d5_dir_debug_dir_torque_per_amp_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id7_d5_dir_debug_dir_torque_per_amp_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id7_d5_dir_debug_dir_torque_per_amp_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id7_d5_dir_debug_dir_tq_scale_max_motor_speed_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id7_d5_dir_debug_dir_tq_scale_max_motor_speed_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id7_d5_dir_debug_dir_tq_scale_max_motor_speed_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id7_d5_dir_debug_dir_waste_current_limit_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id7_d5_dir_debug_dir_waste_current_limit_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id7_d5_dir_debug_dir_waste_current_limit_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id7_d5_dir_debug_dir_xcp_stack_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id7_d5_dir_debug_dir_xcp_stack_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id7_d5_dir_debug_dir_xcp_stack_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id7_d5_dir_debug_dir_sys_post_pedal_max_torque_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id7_d5_dir_debug_dir_sys_post_pedal_max_torque_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id7_d5_dir_debug_dir_sys_post_pedal_max_torque_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id7_d5_dir_debug_dir_loc_check_speed_ref_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id7_d5_dir_debug_dir_loc_check_speed_ref_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id7_d5_dir_debug_dir_loc_check_speed_ref_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id7_d5_dir_debug_dir_control_stack_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id7_d5_dir_debug_dir_control_stack_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id7_d5_dir_debug_dir_control_stack_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id7_d5_dir_debug_dir_immobilizer_stack_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id7_d5_dir_debug_dir_immobilizer_stack_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id7_d5_dir_debug_dir_immobilizer_stack_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id7_d5_dir_debug_dir_module10_hz_stack_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id7_d5_dir_debug_dir_module10_hz_stack_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id7_d5_dir_debug_dir_module10_hz_stack_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id7_d5_dir_debug_dir_pos_dc_busbar_temp_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id7_d5_dir_debug_dir_pos_dc_busbar_temp_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id7_d5_dir_debug_dir_pos_dc_busbar_temp_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id7_d5_dir_debug_dir_pwr_sat_min_bus_voltage_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id7_d5_dir_debug_dir_pwr_sat_min_bus_voltage_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id7_d5_dir_debug_dir_pwr_sat_min_bus_voltage_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id7_d5_dir_debug_dir_tq_scale_shift_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id7_d5_dir_debug_dir_tq_scale_shift_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id7_d5_dir_debug_dir_tq_scale_shift_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id7_d5_dir_debug_dir_brake_switch_no_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id7_d5_dir_debug_dir_brake_switch_no_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id7_d5_dir_debug_dir_brake_switch_no_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id7_d5_dir_debug_dir_brake_switch_nc_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id7_d5_dir_debug_dir_brake_switch_nc_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id7_d5_dir_debug_dir_brake_switch_nc_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id7_d5_dir_debug_dir_immobilizer_condition_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id7_d5_dir_debug_dir_immobilizer_condition_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id7_d5_dir_debug_dir_immobilizer_condition_is_in_range(uint8_t value);

/**
 * Pack message ID757DIF_debug.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int model3_can_id757_dif_debug_pack(
    uint8_t *dst_p,
    const struct model3_can_id757_dif_debug_t *src_p,
    size_t size);

/**
 * Unpack message ID757DIF_debug.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int model3_can_id757_dif_debug_unpack(
    struct model3_can_id757_dif_debug_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id757_dif_debug_dif_debug_selector_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id757_dif_debug_dif_debug_selector_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id757_dif_debug_dif_debug_selector_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id757_dif_debug_dif_cpu10_hz_min_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id757_dif_debug_dif_cpu10_hz_min_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id757_dif_debug_dif_cpu10_hz_min_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id757_dif_debug_dif_cpu1k_hz_min_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id757_dif_debug_dif_cpu1k_hz_min_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id757_dif_debug_dif_cpu1k_hz_min_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id757_dif_debug_dif_dc_cap_temp_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id757_dif_debug_dif_dc_cap_temp_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id757_dif_debug_dif_dc_cap_temp_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id757_dif_debug_dif_gain_scale_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id757_dif_debug_dif_gain_scale_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id757_dif_debug_dif_gain_scale_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id757_dif_debug_dif_gate_drive_supply_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id757_dif_debug_dif_gate_drive_supply_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id757_dif_debug_dif_gate_drive_supply_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id757_dif_debug_dif_hw_fault_count_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id757_dif_debug_dif_hw_fault_count_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id757_dif_debug_dif_hw_fault_count_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id757_dif_debug_dif_lm_scale_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id757_dif_debug_dif_lm_scale_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id757_dif_debug_dif_lm_scale_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t model3_can_id757_dif_debug_dif_loc_target_accel_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id757_dif_debug_dif_loc_target_accel_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id757_dif_debug_dif_loc_target_accel_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id757_dif_debug_dif_motor_type_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id757_dif_debug_dif_motor_type_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id757_dif_debug_dif_motor_type_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id757_dif_debug_dif_mu_surf_high_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id757_dif_debug_dif_mu_surf_high_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id757_dif_debug_dif_mu_surf_high_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t model3_can_id757_dif_debug_dif_offset_a_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id757_dif_debug_dif_offset_a_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id757_dif_debug_dif_offset_a_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t model3_can_id757_dif_debug_dif_offset_b_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id757_dif_debug_dif_offset_b_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id757_dif_debug_dif_offset_b_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id757_dif_debug_dif_oil_pump_motor_speed_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id757_dif_debug_dif_oil_pump_motor_speed_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id757_dif_debug_dif_oil_pump_motor_speed_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id757_dif_debug_dif_phase_out_busbar_temp_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id757_dif_debug_dif_phase_out_busbar_temp_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id757_dif_debug_dif_phase_out_busbar_temp_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id757_dif_debug_dif_pwr_sat_charge_current_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id757_dif_debug_dif_pwr_sat_charge_current_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id757_dif_debug_dif_pwr_sat_charge_current_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id757_dif_debug_dif_pwr_sat_discharge_current_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id757_dif_debug_dif_pwr_sat_discharge_current_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id757_dif_debug_dif_pwr_sat_discharge_current_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id757_dif_debug_dif_resolver_offset_cos_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id757_dif_debug_dif_resolver_offset_cos_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id757_dif_debug_dif_resolver_offset_cos_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t model3_can_id757_dif_debug_dif_rotor_offset_est_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id757_dif_debug_dif_rotor_offset_est_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id757_dif_debug_dif_rotor_offset_est_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id757_dif_debug_dif_rotor_offset_learning_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id757_dif_debug_dif_rotor_offset_learning_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id757_dif_debug_dif_rotor_offset_learning_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id757_dif_debug_dif_rs_scale_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id757_dif_debug_dif_rs_scale_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id757_dif_debug_dif_rs_scale_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id757_dif_debug_dif_sopt_time_to_trip_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id757_dif_debug_dif_sopt_time_to_trip_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id757_dif_debug_dif_sopt_time_to_trip_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id757_dif_debug_dif_ssm_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id757_dif_debug_dif_ssm_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id757_dif_debug_dif_ssm_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id757_dif_debug_dif_stator_end_winding_temp_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id757_dif_debug_dif_stator_end_winding_temp_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id757_dif_debug_dif_stator_end_winding_temp_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id757_dif_debug_dif_sys_pedal_min_torque_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id757_dif_debug_dif_sys_pedal_min_torque_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id757_dif_debug_dif_sys_pedal_min_torque_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id757_dif_debug_dif_system_stack_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id757_dif_debug_dif_system_stack_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id757_dif_debug_dif_system_stack_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id757_dif_debug_dif_tq_sat_thermal_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id757_dif_debug_dif_tq_sat_thermal_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id757_dif_debug_dif_tq_sat_thermal_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id757_dif_debug_dif_tq_scale_differential_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id757_dif_debug_dif_tq_scale_differential_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id757_dif_debug_dif_tq_scale_differential_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id757_dif_debug_dif_ve_mass_inv_raw_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id757_dif_debug_dif_ve_mass_inv_raw_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id757_dif_debug_dif_ve_mass_inv_raw_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id757_dif_debug_dif_velocity_estimator_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id757_dif_debug_dif_velocity_estimator_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id757_dif_debug_dif_velocity_estimator_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id757_dif_debug_dif_gate_drive_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id757_dif_debug_dif_gate_drive_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id757_dif_debug_dif_gate_drive_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id757_dif_debug_dif_usm_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id757_dif_debug_dif_usm_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id757_dif_debug_dif_usm_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id757_dif_debug_dif_power_stage_safe_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id757_dif_debug_dif_power_stage_safe_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id757_dif_debug_dif_power_stage_safe_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id757_dif_debug_dif_aeb_fault_reason_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id757_dif_debug_dif_aeb_fault_reason_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id757_dif_debug_dif_aeb_fault_reason_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t model3_can_id757_dif_debug_dif_brake_cp_scale_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id757_dif_debug_dif_brake_cp_scale_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id757_dif_debug_dif_brake_cp_scale_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id757_dif_debug_dif_busbar_temp_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id757_dif_debug_dif_busbar_temp_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id757_dif_debug_dif_busbar_temp_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id757_dif_debug_dif_cpu10_hz_max_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id757_dif_debug_dif_cpu10_hz_max_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id757_dif_debug_dif_cpu10_hz_max_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id757_dif_debug_dif_cpu1_hz_min_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id757_dif_debug_dif_cpu1_hz_min_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id757_dif_debug_dif_cpu1_hz_min_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id757_dif_debug_dif_cpu1k_hz_max_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id757_dif_debug_dif_cpu1k_hz_max_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id757_dif_debug_dif_cpu1k_hz_max_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id757_dif_debug_dif_cpu_id_word0_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id757_dif_debug_dif_cpu_id_word0_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id757_dif_debug_dif_cpu_id_word0_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id757_dif_debug_dif_cpu_id_word1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id757_dif_debug_dif_cpu_id_word1_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id757_dif_debug_dif_cpu_id_word1_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t model3_can_id757_dif_debug_dif_dc_cable_current_est_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id757_dif_debug_dif_dc_cable_current_est_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id757_dif_debug_dif_dc_cable_current_est_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id757_dif_debug_dif_flux_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id757_dif_debug_dif_flux_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id757_dif_debug_dif_flux_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id757_dif_debug_dif_idle_stack_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id757_dif_debug_dif_idle_stack_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id757_dif_debug_dif_idle_stack_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id757_dif_debug_dif_loc_target_speed_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id757_dif_debug_dif_loc_target_speed_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id757_dif_debug_dif_loc_target_speed_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id757_dif_debug_dif_motor_ia_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id757_dif_debug_dif_motor_ia_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id757_dif_debug_dif_motor_ia_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id757_dif_debug_dif_oil_pump_phase_voltage_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id757_dif_debug_dif_oil_pump_phase_voltage_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id757_dif_debug_dif_oil_pump_phase_voltage_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id757_dif_debug_dif_peak_i_qref_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id757_dif_debug_dif_peak_i_qref_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id757_dif_debug_dif_peak_i_qref_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id757_dif_debug_dif_phase_out_busbar_weld_temp_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id757_dif_debug_dif_phase_out_busbar_weld_temp_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id757_dif_debug_dif_phase_out_busbar_weld_temp_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id757_dif_debug_dif_pwr_sat_max_discharge_power_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id757_dif_debug_dif_pwr_sat_max_discharge_power_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id757_dif_debug_dif_pwr_sat_max_discharge_power_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id757_dif_debug_dif_resolver_cos_rms_squared_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id757_dif_debug_dif_resolver_cos_rms_squared_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id757_dif_debug_dif_resolver_cos_rms_squared_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id757_dif_debug_dif_resolver_offset_sin_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id757_dif_debug_dif_resolver_offset_sin_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id757_dif_debug_dif_resolver_offset_sin_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id757_dif_debug_dif_rotor_flux_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id757_dif_debug_dif_rotor_flux_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id757_dif_debug_dif_rotor_flux_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id757_dif_debug_dif_rotor_max_magnet_temp_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id757_dif_debug_dif_rotor_max_magnet_temp_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id757_dif_debug_dif_rotor_max_magnet_temp_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id757_dif_debug_dif_sopt_trip_delay_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id757_dif_debug_dif_sopt_trip_delay_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id757_dif_debug_dif_sopt_trip_delay_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id757_dif_debug_dif_stator_flux_ref_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id757_dif_debug_dif_stator_flux_ref_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id757_dif_debug_dif_stator_flux_ref_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t model3_can_id757_dif_debug_dif_stator_i_dref_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id757_dif_debug_dif_stator_i_dref_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id757_dif_debug_dif_stator_i_dref_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t model3_can_id757_dif_debug_dif_stator_i_qref_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id757_dif_debug_dif_stator_i_qref_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id757_dif_debug_dif_stator_i_qref_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t model3_can_id757_dif_debug_dif_stator_vd_filtered_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id757_dif_debug_dif_stator_vd_filtered_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id757_dif_debug_dif_stator_vd_filtered_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t model3_can_id757_dif_debug_dif_stator_vq_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id757_dif_debug_dif_stator_vq_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id757_dif_debug_dif_stator_vq_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id757_dif_debug_dif_sys_heat_power_optimal_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id757_dif_debug_dif_sys_heat_power_optimal_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id757_dif_debug_dif_sys_heat_power_optimal_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id757_dif_debug_dif_tc_max_request_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id757_dif_debug_dif_tc_max_request_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id757_dif_debug_dif_tc_max_request_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t model3_can_id757_dif_debug_dif_rotor_offset_mean_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id757_dif_debug_dif_rotor_offset_mean_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id757_dif_debug_dif_rotor_offset_mean_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t model3_can_id757_dif_debug_dif_ve_res_force_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id757_dif_debug_dif_ve_res_force_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id757_dif_debug_dif_ve_res_force_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id757_dif_debug_dif_sys_pedal_max_torque_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id757_dif_debug_dif_sys_pedal_max_torque_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id757_dif_debug_dif_sys_pedal_max_torque_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id757_dif_debug_dif_aeb_unavailable_reason_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id757_dif_debug_dif_aeb_unavailable_reason_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id757_dif_debug_dif_aeb_unavailable_reason_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id757_dif_debug_dif_brk_st_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id757_dif_debug_dif_brk_st_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id757_dif_debug_dif_brk_st_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id757_dif_debug_dif_cpu10_hz_avg_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id757_dif_debug_dif_cpu10_hz_avg_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id757_dif_debug_dif_cpu10_hz_avg_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id757_dif_debug_dif_cpu1_hz_max_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id757_dif_debug_dif_cpu1_hz_max_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id757_dif_debug_dif_cpu1_hz_max_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id757_dif_debug_dif_cpu1k_hz_avg_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id757_dif_debug_dif_cpu1k_hz_avg_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id757_dif_debug_dif_cpu1k_hz_avg_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id757_dif_debug_dif_decode_hardware_stack_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id757_dif_debug_dif_decode_hardware_stack_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id757_dif_debug_dif_decode_hardware_stack_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id757_dif_debug_dif_lls_scale_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id757_dif_debug_dif_lls_scale_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id757_dif_debug_dif_lls_scale_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t model3_can_id757_dif_debug_dif_loc_up_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id757_dif_debug_dif_loc_up_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id757_dif_debug_dif_loc_up_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id757_dif_debug_dif_oil_pump_pressure_estimate_max_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id757_dif_debug_dif_oil_pump_pressure_estimate_max_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id757_dif_debug_dif_oil_pump_pressure_estimate_max_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id757_dif_debug_dif_pcs_temp_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id757_dif_debug_dif_pcs_temp_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id757_dif_debug_dif_pcs_temp_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id757_dif_debug_dif_phase_out_lug_temp_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id757_dif_debug_dif_phase_out_lug_temp_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id757_dif_debug_dif_phase_out_lug_temp_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id757_dif_debug_dif_pwr_sat_max_regen_power_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id757_dif_debug_dif_pwr_sat_max_regen_power_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id757_dif_debug_dif_pwr_sat_max_regen_power_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id757_dif_debug_dif_resolver_phase_offset_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id757_dif_debug_dif_resolver_phase_offset_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id757_dif_debug_dif_resolver_phase_offset_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id757_dif_debug_dif_resolver_sin_rms_squared_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id757_dif_debug_dif_resolver_sin_rms_squared_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id757_dif_debug_dif_resolver_sin_rms_squared_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id757_dif_debug_dif_sopt_time_to_off_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id757_dif_debug_dif_sopt_time_to_off_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id757_dif_debug_dif_sopt_time_to_off_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id757_dif_debug_dif_tc_min_request_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id757_dif_debug_dif_tc_min_request_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id757_dif_debug_dif_tc_min_request_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id757_dif_debug_dif_aeb_cancel_reason_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id757_dif_debug_dif_aeb_cancel_reason_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id757_dif_debug_dif_aeb_cancel_reason_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id757_dif_debug_dif_cpu100_hz_min_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id757_dif_debug_dif_cpu100_hz_min_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id757_dif_debug_dif_cpu100_hz_min_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id757_dif_debug_dif_cpu1_hz_avg_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id757_dif_debug_dif_cpu1_hz_avg_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id757_dif_debug_dif_cpu1_hz_avg_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id757_dif_debug_dif_cpu20k_hz_min_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id757_dif_debug_dif_cpu20k_hz_min_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id757_dif_debug_dif_cpu20k_hz_min_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id757_dif_debug_dif_cpu_id_word2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id757_dif_debug_dif_cpu_id_word2_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id757_dif_debug_dif_cpu_id_word2_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t model3_can_id757_dif_debug_dif_crc_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id757_dif_debug_dif_crc_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id757_dif_debug_dif_crc_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id757_dif_debug_dif_current_limit_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id757_dif_debug_dif_current_limit_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id757_dif_debug_dif_current_limit_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id757_dif_debug_dif_dc_cable_heat_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id757_dif_debug_dif_dc_cable_heat_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id757_dif_debug_dif_dc_cable_heat_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id757_dif_debug_dif_dc_link_cap_temp_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id757_dif_debug_dif_dc_link_cap_temp_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id757_dif_debug_dif_dc_link_cap_temp_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t model3_can_id757_dif_debug_dif_drive_unit_odometer_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id757_dif_debug_dif_drive_unit_odometer_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id757_dif_debug_dif_drive_unit_odometer_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id757_dif_debug_dif_eeprom_stack_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id757_dif_debug_dif_eeprom_stack_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id757_dif_debug_dif_eeprom_stack_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id757_dif_debug_dif_llr_scale_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id757_dif_debug_dif_llr_scale_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id757_dif_debug_dif_llr_scale_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t model3_can_id757_dif_debug_dif_load_angle_margin_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id757_dif_debug_dif_load_angle_margin_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id757_dif_debug_dif_load_angle_margin_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t model3_can_id757_dif_debug_dif_motor_i_aavg_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id757_dif_debug_dif_motor_i_aavg_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id757_dif_debug_dif_motor_i_aavg_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id757_dif_debug_dif_motor_ib_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id757_dif_debug_dif_motor_ib_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id757_dif_debug_dif_motor_ib_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id757_dif_debug_dif_oil_pump_pressure_expected_min_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id757_dif_debug_dif_oil_pump_pressure_expected_min_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id757_dif_debug_dif_oil_pump_pressure_expected_min_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id757_dif_debug_dif_pedal_pos_filt_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id757_dif_debug_dif_pedal_pos_filt_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id757_dif_debug_dif_pedal_pos_filt_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id757_dif_debug_dif_resolver_common_gain_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id757_dif_debug_dif_resolver_common_gain_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id757_dif_debug_dif_resolver_common_gain_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t model3_can_id757_dif_debug_dif_resolver_cos_filtered_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id757_dif_debug_dif_resolver_cos_filtered_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id757_dif_debug_dif_resolver_cos_filtered_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id757_dif_debug_dif_stator_flux_fdb_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id757_dif_debug_dif_stator_flux_fdb_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id757_dif_debug_dif_stator_flux_fdb_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t model3_can_id757_dif_debug_dif_stator_i_dfdb_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id757_dif_debug_dif_stator_i_dfdb_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id757_dif_debug_dif_stator_i_dfdb_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t model3_can_id757_dif_debug_dif_stator_i_qfdb_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id757_dif_debug_dif_stator_i_qfdb_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id757_dif_debug_dif_stator_i_qfdb_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id757_dif_debug_dif_stator_temp1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id757_dif_debug_dif_stator_temp1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id757_dif_debug_dif_stator_temp1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t model3_can_id757_dif_debug_dif_stator_vd_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id757_dif_debug_dif_stator_vd_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id757_dif_debug_dif_stator_vd_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t model3_can_id757_dif_debug_dif_stator_vq_filtered_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id757_dif_debug_dif_stator_vq_filtered_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id757_dif_debug_dif_stator_vq_filtered_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id757_dif_debug_dif_tq_sat_motor_voltage_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id757_dif_debug_dif_tq_sat_motor_voltage_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id757_dif_debug_dif_tq_sat_motor_voltage_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id757_dif_debug_dif_tq_sat_ui_drive_torque_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id757_dif_debug_dif_tq_sat_ui_drive_torque_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id757_dif_debug_dif_tq_sat_ui_drive_torque_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t model3_can_id757_dif_debug_dif_loc_ui_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id757_dif_debug_dif_loc_ui_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id757_dif_debug_dif_loc_ui_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id757_dif_debug_dif_sys_post_pedal_min_torque_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id757_dif_debug_dif_sys_post_pedal_min_torque_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id757_dif_debug_dif_sys_post_pedal_min_torque_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id757_dif_debug_dif_cpu100_hz_max_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id757_dif_debug_dif_cpu100_hz_max_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id757_dif_debug_dif_cpu100_hz_max_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id757_dif_debug_dif_cpu20k_hz_max_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id757_dif_debug_dif_cpu20k_hz_max_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id757_dif_debug_dif_cpu20k_hz_max_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id757_dif_debug_dif_hv_dc_cable_temp_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id757_dif_debug_dif_hv_dc_cable_temp_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id757_dif_debug_dif_hv_dc_cable_temp_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t model3_can_id757_dif_debug_dif_load_angle_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id757_dif_debug_dif_load_angle_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id757_dif_debug_dif_load_angle_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id757_dif_debug_dif_opd_unavailable_reason_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id757_dif_debug_dif_opd_unavailable_reason_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id757_dif_debug_dif_opd_unavailable_reason_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id757_dif_debug_dif_resolver_ready_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id757_dif_debug_dif_resolver_ready_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id757_dif_debug_dif_resolver_ready_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t model3_can_id757_dif_debug_dif_resolver_sin_filtered_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id757_dif_debug_dif_resolver_sin_filtered_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id757_dif_debug_dif_resolver_sin_filtered_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id757_dif_debug_dif_sopt_max_current_mag_sqrd_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id757_dif_debug_dif_sopt_max_current_mag_sqrd_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id757_dif_debug_dif_sopt_max_current_mag_sqrd_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id757_dif_debug_dif_stator_temp2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id757_dif_debug_dif_stator_temp2_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id757_dif_debug_dif_stator_temp2_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id757_dif_debug_dif_tq_sat_motor_current_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id757_dif_debug_dif_tq_sat_motor_current_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id757_dif_debug_dif_tq_sat_motor_current_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id757_dif_debug_dif_tq_sat_ui_regen_torque_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id757_dif_debug_dif_tq_sat_ui_regen_torque_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id757_dif_debug_dif_tq_sat_ui_regen_torque_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id757_dif_debug_dif_uds_stack_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id757_dif_debug_dif_uds_stack_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id757_dif_debug_dif_uds_stack_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id757_dif_debug_dif_resolver_no_carrier_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id757_dif_debug_dif_resolver_no_carrier_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id757_dif_debug_dif_resolver_no_carrier_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id757_dif_debug_dif_resolver_no_phase_lock_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id757_dif_debug_dif_resolver_no_phase_lock_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id757_dif_debug_dif_resolver_no_phase_lock_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id757_dif_debug_dif_resolver_cla_mia_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id757_dif_debug_dif_resolver_cla_mia_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id757_dif_debug_dif_resolver_cla_mia_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t model3_can_id757_dif_debug_dif_loc_feed_fw_trq_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id757_dif_debug_dif_loc_feed_fw_trq_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id757_dif_debug_dif_loc_feed_fw_trq_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id757_dif_debug_dif_cpu100_hz_avg_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id757_dif_debug_dif_cpu100_hz_avg_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id757_dif_debug_dif_cpu100_hz_avg_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id757_dif_debug_dif_cpu20k_hz_avg_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id757_dif_debug_dif_cpu20k_hz_avg_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id757_dif_debug_dif_cpu20k_hz_avg_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id757_dif_debug_dif_cpu_id_word3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id757_dif_debug_dif_cpu_id_word3_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id757_dif_debug_dif_cpu_id_word3_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id757_dif_debug_dif_internal_angle_filt_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id757_dif_debug_dif_internal_angle_filt_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id757_dif_debug_dif_internal_angle_filt_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id757_dif_debug_dif_magnet_temp_est_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id757_dif_debug_dif_magnet_temp_est_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id757_dif_debug_dif_magnet_temp_est_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t model3_can_id757_dif_debug_dif_motor_i_bavg_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id757_dif_debug_dif_motor_i_bavg_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id757_dif_debug_dif_motor_i_bavg_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id757_dif_debug_dif_motor_ic_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id757_dif_debug_dif_motor_ic_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id757_dif_debug_dif_motor_ic_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id757_dif_debug_dif_motor_v_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id757_dif_debug_dif_motor_v_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id757_dif_debug_dif_motor_v_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id757_dif_debug_dif_neg_dc_busbar_temp_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id757_dif_debug_dif_neg_dc_busbar_temp_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id757_dif_debug_dif_neg_dc_busbar_temp_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id757_dif_debug_dif_peak_flux_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id757_dif_debug_dif_peak_flux_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id757_dif_debug_dif_peak_flux_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id757_dif_debug_dif_pwr_sat_max_bus_voltage_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id757_dif_debug_dif_pwr_sat_max_bus_voltage_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id757_dif_debug_dif_pwr_sat_max_bus_voltage_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id757_dif_debug_dif_resolver_error_rms_squared_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id757_dif_debug_dif_resolver_error_rms_squared_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id757_dif_debug_dif_resolver_error_rms_squared_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t model3_can_id757_dif_debug_dif_system_torque_command_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id757_dif_debug_dif_system_torque_command_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id757_dif_debug_dif_system_torque_command_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id757_dif_debug_dif_torque_per_amp_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id757_dif_debug_dif_torque_per_amp_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id757_dif_debug_dif_torque_per_amp_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id757_dif_debug_dif_tq_scale_max_motor_speed_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id757_dif_debug_dif_tq_scale_max_motor_speed_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id757_dif_debug_dif_tq_scale_max_motor_speed_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id757_dif_debug_dif_waste_current_limit_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id757_dif_debug_dif_waste_current_limit_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id757_dif_debug_dif_waste_current_limit_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id757_dif_debug_dif_xcp_stack_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id757_dif_debug_dif_xcp_stack_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id757_dif_debug_dif_xcp_stack_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id757_dif_debug_dif_sys_post_pedal_max_torque_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id757_dif_debug_dif_sys_post_pedal_max_torque_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id757_dif_debug_dif_sys_post_pedal_max_torque_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id757_dif_debug_dif_loc_check_speed_ref_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id757_dif_debug_dif_loc_check_speed_ref_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id757_dif_debug_dif_loc_check_speed_ref_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id757_dif_debug_dif_control_stack_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id757_dif_debug_dif_control_stack_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id757_dif_debug_dif_control_stack_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id757_dif_debug_dif_immobilizer_stack_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id757_dif_debug_dif_immobilizer_stack_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id757_dif_debug_dif_immobilizer_stack_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id757_dif_debug_dif_module10_hz_stack_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id757_dif_debug_dif_module10_hz_stack_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id757_dif_debug_dif_module10_hz_stack_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id757_dif_debug_dif_pos_dc_busbar_temp_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id757_dif_debug_dif_pos_dc_busbar_temp_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id757_dif_debug_dif_pos_dc_busbar_temp_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id757_dif_debug_dif_pwr_sat_min_bus_voltage_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id757_dif_debug_dif_pwr_sat_min_bus_voltage_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id757_dif_debug_dif_pwr_sat_min_bus_voltage_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id757_dif_debug_dif_tq_scale_shift_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id757_dif_debug_dif_tq_scale_shift_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id757_dif_debug_dif_tq_scale_shift_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id757_dif_debug_dif_brake_switch_no_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id757_dif_debug_dif_brake_switch_no_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id757_dif_debug_dif_brake_switch_no_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id757_dif_debug_dif_brake_switch_nc_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id757_dif_debug_dif_brake_switch_nc_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id757_dif_debug_dif_brake_switch_nc_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id757_dif_debug_dif_immobilizer_condition_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id757_dif_debug_dif_immobilizer_condition_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id757_dif_debug_dif_immobilizer_condition_is_in_range(uint8_t value);

/**
 * Pack message ID2B6DI_chassisControlStatus.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int model3_can_id2_b6_di_chassis_control_status_pack(
    uint8_t *dst_p,
    const struct model3_can_id2_b6_di_chassis_control_status_t *src_p,
    size_t size);

/**
 * Unpack message ID2B6DI_chassisControlStatus.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int model3_can_id2_b6_di_chassis_control_status_unpack(
    struct model3_can_id2_b6_di_chassis_control_status_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_b6_di_chassis_control_status_di_vdc_telltale_flash_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_b6_di_chassis_control_status_di_vdc_telltale_flash_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_b6_di_chassis_control_status_di_vdc_telltale_flash_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_b6_di_chassis_control_status_di_vdc_telltale_on_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_b6_di_chassis_control_status_di_vdc_telltale_on_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_b6_di_chassis_control_status_di_vdc_telltale_on_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_b6_di_chassis_control_status_di_tc_telltale_flash_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_b6_di_chassis_control_status_di_tc_telltale_flash_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_b6_di_chassis_control_status_di_tc_telltale_flash_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_b6_di_chassis_control_status_di_tc_telltale_on_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_b6_di_chassis_control_status_di_tc_telltale_on_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_b6_di_chassis_control_status_di_tc_telltale_on_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_b6_di_chassis_control_status_di_traction_control_mode_ui_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_b6_di_chassis_control_status_di_traction_control_mode_ui_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_b6_di_chassis_control_status_di_traction_control_mode_ui_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_b6_di_chassis_control_status_di_ptc_state_ui_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_b6_di_chassis_control_status_di_ptc_state_ui_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_b6_di_chassis_control_status_di_ptc_state_ui_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_b6_di_chassis_control_status_di_btc_state_ui_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_b6_di_chassis_control_status_di_btc_state_ui_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_b6_di_chassis_control_status_di_btc_state_ui_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_b6_di_chassis_control_status_di_vehicle_hold_telltale_on_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_b6_di_chassis_control_status_di_vehicle_hold_telltale_on_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_b6_di_chassis_control_status_di_vehicle_hold_telltale_on_is_in_range(uint8_t value);

/**
 * Pack message ID284UIvehicleModes.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int model3_can_id284_u_ivehicle_modes_pack(
    uint8_t *dst_p,
    const struct model3_can_id284_u_ivehicle_modes_t *src_p,
    size_t size);

/**
 * Unpack message ID284UIvehicleModes.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int model3_can_id284_u_ivehicle_modes_unpack(
    struct model3_can_id284_u_ivehicle_modes_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id284_u_ivehicle_modes_u_ifactory_mode284_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id284_u_ivehicle_modes_u_ifactory_mode284_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id284_u_ivehicle_modes_u_ifactory_mode284_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id284_u_ivehicle_modes_u_itransport_mode284_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id284_u_ivehicle_modes_u_itransport_mode284_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id284_u_ivehicle_modes_u_itransport_mode284_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id284_u_ivehicle_modes_u_ishowroom_mode284_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id284_u_ivehicle_modes_u_ishowroom_mode284_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id284_u_ivehicle_modes_u_ishowroom_mode284_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id284_u_ivehicle_modes_u_iservice_mode284_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id284_u_ivehicle_modes_u_iservice_mode284_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id284_u_ivehicle_modes_u_iservice_mode284_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id284_u_ivehicle_modes_u_iis_delivered284_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id284_u_ivehicle_modes_u_iis_delivered284_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id284_u_ivehicle_modes_u_iis_delivered284_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id284_u_ivehicle_modes_u_isentry_mode284_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id284_u_ivehicle_modes_u_isentry_mode284_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id284_u_ivehicle_modes_u_isentry_mode284_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id284_u_ivehicle_modes_u_ihomelink_v2_command0284_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id284_u_ivehicle_modes_u_ihomelink_v2_command0284_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id284_u_ivehicle_modes_u_ihomelink_v2_command0284_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id284_u_ivehicle_modes_u_ihomelink_v2_command1284_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id284_u_ivehicle_modes_u_ihomelink_v2_command1284_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id284_u_ivehicle_modes_u_ihomelink_v2_command1284_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id284_u_ivehicle_modes_u_ihomelink_v2_command2284_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id284_u_ivehicle_modes_u_ihomelink_v2_command2284_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id284_u_ivehicle_modes_u_ihomelink_v2_command2284_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id284_u_ivehicle_modes_u_icar_wash_mode_request284_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id284_u_ivehicle_modes_u_icar_wash_mode_request284_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id284_u_ivehicle_modes_u_icar_wash_mode_request284_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id284_u_ivehicle_modes_u_ivalet_mode284_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id284_u_ivehicle_modes_u_ivalet_mode284_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id284_u_ivehicle_modes_u_ivalet_mode284_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id284_u_ivehicle_modes_u_igame_mode284_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id284_u_ivehicle_modes_u_igame_mode284_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id284_u_ivehicle_modes_u_igame_mode284_is_in_range(uint8_t value);

/**
 * Pack message ID221VCFRONT_LVPowerState.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int model3_can_id221_vcfront_lv_power_state_pack(
    uint8_t *dst_p,
    const struct model3_can_id221_vcfront_lv_power_state_t *src_p,
    size_t size);

/**
 * Unpack message ID221VCFRONT_LVPowerState.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int model3_can_id221_vcfront_lv_power_state_unpack(
    struct model3_can_id221_vcfront_lv_power_state_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id221_vcfront_lv_power_state_vcfront_lv_power_state_index_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id221_vcfront_lv_power_state_vcfront_lv_power_state_index_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id221_vcfront_lv_power_state_vcfront_lv_power_state_index_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id221_vcfront_lv_power_state_vcfront_cp_lv_request_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id221_vcfront_lv_power_state_vcfront_cp_lv_request_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id221_vcfront_lv_power_state_vcfront_cp_lv_request_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id221_vcfront_lv_power_state_vcfront_park_lv_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id221_vcfront_lv_power_state_vcfront_park_lv_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id221_vcfront_lv_power_state_vcfront_park_lv_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id221_vcfront_lv_power_state_vcfront_epas_lv_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id221_vcfront_lv_power_state_vcfront_epas_lv_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id221_vcfront_lv_power_state_vcfront_epas_lv_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id221_vcfront_lv_power_state_vcfront_esp_lv_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id221_vcfront_lv_power_state_vcfront_esp_lv_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id221_vcfront_lv_power_state_vcfront_esp_lv_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id221_vcfront_lv_power_state_vcfront_hvc_lv_request_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id221_vcfront_lv_power_state_vcfront_hvc_lv_request_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id221_vcfront_lv_power_state_vcfront_hvc_lv_request_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id221_vcfront_lv_power_state_vcfront_radc_lv_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id221_vcfront_lv_power_state_vcfront_radc_lv_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id221_vcfront_lv_power_state_vcfront_radc_lv_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id221_vcfront_lv_power_state_vcfront_hvac_comp_lv_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id221_vcfront_lv_power_state_vcfront_hvac_comp_lv_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id221_vcfront_lv_power_state_vcfront_hvac_comp_lv_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id221_vcfront_lv_power_state_vcfront_tas_lv_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id221_vcfront_lv_power_state_vcfront_tas_lv_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id221_vcfront_lv_power_state_vcfront_tas_lv_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id221_vcfront_lv_power_state_vcfront_pcs_lv_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id221_vcfront_lv_power_state_vcfront_pcs_lv_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id221_vcfront_lv_power_state_vcfront_pcs_lv_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id221_vcfront_lv_power_state_vcfront_ptc_lv_request_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id221_vcfront_lv_power_state_vcfront_ptc_lv_request_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id221_vcfront_lv_power_state_vcfront_ptc_lv_request_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id221_vcfront_lv_power_state_vcfront_cmpdlv_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id221_vcfront_lv_power_state_vcfront_cmpdlv_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id221_vcfront_lv_power_state_vcfront_cmpdlv_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id221_vcfront_lv_power_state_vcfront_sccm_lv_request_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id221_vcfront_lv_power_state_vcfront_sccm_lv_request_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id221_vcfront_lv_power_state_vcfront_sccm_lv_request_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id221_vcfront_lv_power_state_vcfront_tpms_lv_request_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id221_vcfront_lv_power_state_vcfront_tpms_lv_request_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id221_vcfront_lv_power_state_vcfront_tpms_lv_request_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id221_vcfront_lv_power_state_vcfront_rcm_lv_request_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id221_vcfront_lv_power_state_vcfront_rcm_lv_request_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id221_vcfront_lv_power_state_vcfront_rcm_lv_request_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id221_vcfront_lv_power_state_vcfront_i_booster_lv_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id221_vcfront_lv_power_state_vcfront_i_booster_lv_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id221_vcfront_lv_power_state_vcfront_i_booster_lv_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id221_vcfront_lv_power_state_vcfront_tuner_lv_request_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id221_vcfront_lv_power_state_vcfront_tuner_lv_request_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id221_vcfront_lv_power_state_vcfront_tuner_lv_request_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id221_vcfront_lv_power_state_vcfront_amplifier_lv_request_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id221_vcfront_lv_power_state_vcfront_amplifier_lv_request_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id221_vcfront_lv_power_state_vcfront_amplifier_lv_request_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id221_vcfront_lv_power_state_vcfront_das1_high_current_lv_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id221_vcfront_lv_power_state_vcfront_das1_high_current_lv_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id221_vcfront_lv_power_state_vcfront_das1_high_current_lv_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id221_vcfront_lv_power_state_vcfront_das2_high_current_lv_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id221_vcfront_lv_power_state_vcfront_das2_high_current_lv_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id221_vcfront_lv_power_state_vcfront_das2_high_current_lv_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id221_vcfront_lv_power_state_vcfront_dir_lv_request_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id221_vcfront_lv_power_state_vcfront_dir_lv_request_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id221_vcfront_lv_power_state_vcfront_dir_lv_request_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id221_vcfront_lv_power_state_vcfront_dif_lv_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id221_vcfront_lv_power_state_vcfront_dif_lv_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id221_vcfront_lv_power_state_vcfront_dif_lv_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id221_vcfront_lv_power_state_vcfront_oil_pump_front_lv_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id221_vcfront_lv_power_state_vcfront_oil_pump_front_lv_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id221_vcfront_lv_power_state_vcfront_oil_pump_front_lv_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id221_vcfront_lv_power_state_vcfront_oil_pump_rear_lv_request_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id221_vcfront_lv_power_state_vcfront_oil_pump_rear_lv_request_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id221_vcfront_lv_power_state_vcfront_oil_pump_rear_lv_request_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id221_vcfront_lv_power_state_vcfront_ocs_lv_request_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id221_vcfront_lv_power_state_vcfront_ocs_lv_request_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id221_vcfront_lv_power_state_vcfront_ocs_lv_request_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id221_vcfront_lv_power_state_vcfront_vcleft_hi_current_lv_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id221_vcfront_lv_power_state_vcfront_vcleft_hi_current_lv_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id221_vcfront_lv_power_state_vcfront_vcleft_hi_current_lv_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id221_vcfront_lv_power_state_vcfront_vcright_hi_current_lv_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id221_vcfront_lv_power_state_vcfront_vcright_hi_current_lv_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id221_vcfront_lv_power_state_vcfront_vcright_hi_current_lv_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id221_vcfront_lv_power_state_vcfront_ui_hi_current_lv_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id221_vcfront_lv_power_state_vcfront_ui_hi_current_lv_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id221_vcfront_lv_power_state_vcfront_ui_hi_current_lv_state_is_in_range(uint8_t value);

/**
 * Pack message ID2F1VCFRONT_eFuseDebugStatus.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int model3_can_id2_f1_vcfront_e_fuse_debug_status_pack(
    uint8_t *dst_p,
    const struct model3_can_id2_f1_vcfront_e_fuse_debug_status_t *src_p,
    size_t size);

/**
 * Unpack message ID2F1VCFRONT_eFuseDebugStatus.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int model3_can_id2_f1_vcfront_e_fuse_debug_status_unpack(
    struct model3_can_id2_f1_vcfront_e_fuse_debug_status_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_f1_vcfront_e_fuse_debug_status_vcfront_e_fuse_debug_status_index_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_f1_vcfront_e_fuse_debug_status_vcfront_e_fuse_debug_status_index_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_f1_vcfront_e_fuse_debug_status_vcfront_e_fuse_debug_status_index_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_f1_vcfront_e_fuse_debug_status_vcfront_pump1_and_fan_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_f1_vcfront_e_fuse_debug_status_vcfront_pump1_and_fan_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_f1_vcfront_e_fuse_debug_status_vcfront_pump1_and_fan_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_f1_vcfront_e_fuse_debug_status_vcfront_ui_audio_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_f1_vcfront_e_fuse_debug_status_vcfront_ui_audio_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_f1_vcfront_e_fuse_debug_status_vcfront_ui_audio_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id2_f1_vcfront_e_fuse_debug_status_vcfront_pump1_and_fan_current_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_f1_vcfront_e_fuse_debug_status_vcfront_pump1_and_fan_current_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_f1_vcfront_e_fuse_debug_status_vcfront_pump1_and_fan_current_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_f1_vcfront_e_fuse_debug_status_vcfront_ui_audio_fault_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_f1_vcfront_e_fuse_debug_status_vcfront_ui_audio_fault_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_f1_vcfront_e_fuse_debug_status_vcfront_ui_audio_fault_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_f1_vcfront_e_fuse_debug_status_vcfront_epas3_p_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_f1_vcfront_e_fuse_debug_status_vcfront_epas3_p_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_f1_vcfront_e_fuse_debug_status_vcfront_epas3_p_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_f1_vcfront_e_fuse_debug_status_vcfront_epas3_s_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_f1_vcfront_e_fuse_debug_status_vcfront_epas3_s_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_f1_vcfront_e_fuse_debug_status_vcfront_epas3_s_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_f1_vcfront_e_fuse_debug_status_vcfront_esp_motor_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_f1_vcfront_e_fuse_debug_status_vcfront_esp_motor_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_f1_vcfront_e_fuse_debug_status_vcfront_esp_motor_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_f1_vcfront_e_fuse_debug_status_vcfront_esp_valve_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_f1_vcfront_e_fuse_debug_status_vcfront_esp_valve_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_f1_vcfront_e_fuse_debug_status_vcfront_esp_valve_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_f1_vcfront_e_fuse_debug_status_vcfront_pcs_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_f1_vcfront_e_fuse_debug_status_vcfront_pcs_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_f1_vcfront_e_fuse_debug_status_vcfront_pcs_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_f1_vcfront_e_fuse_debug_status_vcfront_autopilot1_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_f1_vcfront_e_fuse_debug_status_vcfront_autopilot1_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_f1_vcfront_e_fuse_debug_status_vcfront_autopilot1_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_f1_vcfront_e_fuse_debug_status_vcfront_autopilot2_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_f1_vcfront_e_fuse_debug_status_vcfront_autopilot2_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_f1_vcfront_e_fuse_debug_status_vcfront_autopilot2_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id2_f1_vcfront_e_fuse_debug_status_vcfront_charged_ibs_amp_hours_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_f1_vcfront_e_fuse_debug_status_vcfront_charged_ibs_amp_hours_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_f1_vcfront_e_fuse_debug_status_vcfront_charged_ibs_amp_hours_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id2_f1_vcfront_e_fuse_debug_status_vcfront_e_fuse_lockout_voltage_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_f1_vcfront_e_fuse_debug_status_vcfront_e_fuse_lockout_voltage_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_f1_vcfront_e_fuse_debug_status_vcfront_e_fuse_lockout_voltage_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_f1_vcfront_e_fuse_debug_status_vcfront_headlamp_left_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_f1_vcfront_e_fuse_debug_status_vcfront_headlamp_left_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_f1_vcfront_e_fuse_debug_status_vcfront_headlamp_left_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_f1_vcfront_e_fuse_debug_status_vcfront_i_booster_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_f1_vcfront_e_fuse_debug_status_vcfront_i_booster_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_f1_vcfront_e_fuse_debug_status_vcfront_i_booster_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_f1_vcfront_e_fuse_debug_status_vcfront_left_controller_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_f1_vcfront_e_fuse_debug_status_vcfront_left_controller_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_f1_vcfront_e_fuse_debug_status_vcfront_left_controller_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id2_f1_vcfront_e_fuse_debug_status_vcfront_rail_a_12v_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_f1_vcfront_e_fuse_debug_status_vcfront_rail_a_12v_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_f1_vcfront_e_fuse_debug_status_vcfront_rail_a_12v_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_f1_vcfront_e_fuse_debug_status_vcfront_right_controller_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_f1_vcfront_e_fuse_debug_status_vcfront_right_controller_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_f1_vcfront_e_fuse_debug_status_vcfront_right_controller_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_f1_vcfront_e_fuse_debug_status_vcfront_sleep_bypass_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_f1_vcfront_e_fuse_debug_status_vcfront_sleep_bypass_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_f1_vcfront_e_fuse_debug_status_vcfront_sleep_bypass_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id2_f1_vcfront_e_fuse_debug_status_vcfront_ui_audio_current_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_f1_vcfront_e_fuse_debug_status_vcfront_ui_audio_current_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_f1_vcfront_e_fuse_debug_status_vcfront_ui_audio_current_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_f1_vcfront_e_fuse_debug_status_vcfront_vbat_fused_high_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_f1_vcfront_e_fuse_debug_status_vcfront_vbat_fused_high_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_f1_vcfront_e_fuse_debug_status_vcfront_vbat_fused_high_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_f1_vcfront_e_fuse_debug_status_vcfront_headlamp_left_fault_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_f1_vcfront_e_fuse_debug_status_vcfront_headlamp_left_fault_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_f1_vcfront_e_fuse_debug_status_vcfront_headlamp_left_fault_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_f1_vcfront_e_fuse_debug_status_vcfront_sleep_bypass_fault_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_f1_vcfront_e_fuse_debug_status_vcfront_sleep_bypass_fault_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_f1_vcfront_e_fuse_debug_status_vcfront_sleep_bypass_fault_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_f1_vcfront_e_fuse_debug_status_vcfront_vbat_fused_high_fault_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_f1_vcfront_e_fuse_debug_status_vcfront_vbat_fused_high_fault_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_f1_vcfront_e_fuse_debug_status_vcfront_vbat_fused_high_fault_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_f1_vcfront_e_fuse_debug_status_vcfront_epas3_p_fault_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_f1_vcfront_e_fuse_debug_status_vcfront_epas3_p_fault_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_f1_vcfront_e_fuse_debug_status_vcfront_epas3_p_fault_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_f1_vcfront_e_fuse_debug_status_vcfront_epas3_s_fault_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_f1_vcfront_e_fuse_debug_status_vcfront_epas3_s_fault_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_f1_vcfront_e_fuse_debug_status_vcfront_epas3_s_fault_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_f1_vcfront_e_fuse_debug_status_vcfront_esp_motor_fault_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_f1_vcfront_e_fuse_debug_status_vcfront_esp_motor_fault_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_f1_vcfront_e_fuse_debug_status_vcfront_esp_motor_fault_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_f1_vcfront_e_fuse_debug_status_vcfront_esp_valve_fault_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_f1_vcfront_e_fuse_debug_status_vcfront_esp_valve_fault_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_f1_vcfront_e_fuse_debug_status_vcfront_esp_valve_fault_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_f1_vcfront_e_fuse_debug_status_vcfront_pcs_fault_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_f1_vcfront_e_fuse_debug_status_vcfront_pcs_fault_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_f1_vcfront_e_fuse_debug_status_vcfront_pcs_fault_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_f1_vcfront_e_fuse_debug_status_vcfront_autopilot1_fault_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_f1_vcfront_e_fuse_debug_status_vcfront_autopilot1_fault_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_f1_vcfront_e_fuse_debug_status_vcfront_autopilot1_fault_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_f1_vcfront_e_fuse_debug_status_vcfront_autopilot2_fault_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_f1_vcfront_e_fuse_debug_status_vcfront_autopilot2_fault_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_f1_vcfront_e_fuse_debug_status_vcfront_autopilot2_fault_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id2_f1_vcfront_e_fuse_debug_status_vcfront_headlamp_left_current_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_f1_vcfront_e_fuse_debug_status_vcfront_headlamp_left_current_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_f1_vcfront_e_fuse_debug_status_vcfront_headlamp_left_current_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_f1_vcfront_e_fuse_debug_status_vcfront_i_booster_fault_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_f1_vcfront_e_fuse_debug_status_vcfront_i_booster_fault_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_f1_vcfront_e_fuse_debug_status_vcfront_i_booster_fault_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_f1_vcfront_e_fuse_debug_status_vcfront_left_controller_fault_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_f1_vcfront_e_fuse_debug_status_vcfront_left_controller_fault_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_f1_vcfront_e_fuse_debug_status_vcfront_left_controller_fault_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_f1_vcfront_e_fuse_debug_status_vcfront_right_controller_fault_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_f1_vcfront_e_fuse_debug_status_vcfront_right_controller_fault_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_f1_vcfront_e_fuse_debug_status_vcfront_right_controller_fault_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id2_f1_vcfront_e_fuse_debug_status_vcfront_sleep_bypass_voltage_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_f1_vcfront_e_fuse_debug_status_vcfront_sleep_bypass_voltage_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_f1_vcfront_e_fuse_debug_status_vcfront_sleep_bypass_voltage_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_f1_vcfront_e_fuse_debug_status_vcfront_vbat_fused_self_test_result_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_f1_vcfront_e_fuse_debug_status_vcfront_vbat_fused_self_test_result_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_f1_vcfront_e_fuse_debug_status_vcfront_vbat_fused_self_test_result_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_f1_vcfront_e_fuse_debug_status_vcfront_epas3_p_self_test_result_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_f1_vcfront_e_fuse_debug_status_vcfront_epas3_p_self_test_result_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_f1_vcfront_e_fuse_debug_status_vcfront_epas3_p_self_test_result_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_f1_vcfront_e_fuse_debug_status_vcfront_epas3_s_self_test_result_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_f1_vcfront_e_fuse_debug_status_vcfront_epas3_s_self_test_result_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_f1_vcfront_e_fuse_debug_status_vcfront_epas3_s_self_test_result_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_f1_vcfront_e_fuse_debug_status_vcfront_esp_motor_self_test_result_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_f1_vcfront_e_fuse_debug_status_vcfront_esp_motor_self_test_result_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_f1_vcfront_e_fuse_debug_status_vcfront_esp_motor_self_test_result_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id2_f1_vcfront_e_fuse_debug_status_vcfront_autopilot1_temp_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_f1_vcfront_e_fuse_debug_status_vcfront_autopilot1_temp_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_f1_vcfront_e_fuse_debug_status_vcfront_autopilot1_temp_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id2_f1_vcfront_e_fuse_debug_status_vcfront_autopilot2_temp_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_f1_vcfront_e_fuse_debug_status_vcfront_autopilot2_temp_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_f1_vcfront_e_fuse_debug_status_vcfront_autopilot2_temp_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_f1_vcfront_e_fuse_debug_status_vcfront_i_booster_self_test_result_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_f1_vcfront_e_fuse_debug_status_vcfront_i_booster_self_test_result_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_f1_vcfront_e_fuse_debug_status_vcfront_i_booster_self_test_result_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_f1_vcfront_e_fuse_debug_status_vcfront_pcs_self_test_result_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_f1_vcfront_e_fuse_debug_status_vcfront_pcs_self_test_result_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_f1_vcfront_e_fuse_debug_status_vcfront_pcs_self_test_result_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_f1_vcfront_e_fuse_debug_status_vcfront_vcleft_self_test_result_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_f1_vcfront_e_fuse_debug_status_vcfront_vcleft_self_test_result_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_f1_vcfront_e_fuse_debug_status_vcfront_vcleft_self_test_result_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_f1_vcfront_e_fuse_debug_status_vcfront_vcright_self_test_result_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_f1_vcfront_e_fuse_debug_status_vcfront_vcright_self_test_result_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_f1_vcfront_e_fuse_debug_status_vcfront_vcright_self_test_result_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id2_f1_vcfront_e_fuse_debug_status_vcfront_esp_valve_temp_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_f1_vcfront_e_fuse_debug_status_vcfront_esp_valve_temp_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_f1_vcfront_e_fuse_debug_status_vcfront_esp_valve_temp_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id2_f1_vcfront_e_fuse_debug_status_vcfront_vbat_fused_high_temp_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_f1_vcfront_e_fuse_debug_status_vcfront_vbat_fused_high_temp_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_f1_vcfront_e_fuse_debug_status_vcfront_vbat_fused_high_temp_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id2_f1_vcfront_e_fuse_debug_status_vcfront_epas3_p_temp_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_f1_vcfront_e_fuse_debug_status_vcfront_epas3_p_temp_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_f1_vcfront_e_fuse_debug_status_vcfront_epas3_p_temp_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id2_f1_vcfront_e_fuse_debug_status_vcfront_epas3_s_temp_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_f1_vcfront_e_fuse_debug_status_vcfront_epas3_s_temp_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_f1_vcfront_e_fuse_debug_status_vcfront_epas3_s_temp_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id2_f1_vcfront_e_fuse_debug_status_vcfront_esp_motor_temp_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_f1_vcfront_e_fuse_debug_status_vcfront_esp_motor_temp_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_f1_vcfront_e_fuse_debug_status_vcfront_esp_motor_temp_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id2_f1_vcfront_e_fuse_debug_status_vcfront_pcs_temp_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_f1_vcfront_e_fuse_debug_status_vcfront_pcs_temp_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_f1_vcfront_e_fuse_debug_status_vcfront_pcs_temp_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id2_f1_vcfront_e_fuse_debug_status_vcfront_i_booster_temp_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_f1_vcfront_e_fuse_debug_status_vcfront_i_booster_temp_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_f1_vcfront_e_fuse_debug_status_vcfront_i_booster_temp_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id2_f1_vcfront_e_fuse_debug_status_vcfront_left_controller_temp_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_f1_vcfront_e_fuse_debug_status_vcfront_left_controller_temp_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_f1_vcfront_e_fuse_debug_status_vcfront_left_controller_temp_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id2_f1_vcfront_e_fuse_debug_status_vcfront_right_controller_temp_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_f1_vcfront_e_fuse_debug_status_vcfront_right_controller_temp_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_f1_vcfront_e_fuse_debug_status_vcfront_right_controller_temp_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_f1_vcfront_e_fuse_debug_status_vcfront_headlamp_left_voltage_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_f1_vcfront_e_fuse_debug_status_vcfront_headlamp_left_voltage_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_f1_vcfront_e_fuse_debug_status_vcfront_headlamp_left_voltage_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id2_f1_vcfront_e_fuse_debug_status_vcfront_rail_b_12v_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_f1_vcfront_e_fuse_debug_status_vcfront_rail_b_12v_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_f1_vcfront_e_fuse_debug_status_vcfront_rail_b_12v_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id2_f1_vcfront_e_fuse_debug_status_vcfront_pump1_and_fan_voltage_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_f1_vcfront_e_fuse_debug_status_vcfront_pump1_and_fan_voltage_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_f1_vcfront_e_fuse_debug_status_vcfront_pump1_and_fan_voltage_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id2_f1_vcfront_e_fuse_debug_status_vcfront_charge_pump_voltage_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_f1_vcfront_e_fuse_debug_status_vcfront_charge_pump_voltage_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_f1_vcfront_e_fuse_debug_status_vcfront_charge_pump_voltage_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id2_f1_vcfront_e_fuse_debug_status_vcfront_discharged_ibs_amp_hours_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_f1_vcfront_e_fuse_debug_status_vcfront_discharged_ibs_amp_hours_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_f1_vcfront_e_fuse_debug_status_vcfront_discharged_ibs_amp_hours_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_f1_vcfront_e_fuse_debug_status_vcfront_ui_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_f1_vcfront_e_fuse_debug_status_vcfront_ui_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_f1_vcfront_e_fuse_debug_status_vcfront_ui_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_f1_vcfront_e_fuse_debug_status_vcfront_ui_fault_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_f1_vcfront_e_fuse_debug_status_vcfront_ui_fault_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_f1_vcfront_e_fuse_debug_status_vcfront_ui_fault_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id2_f1_vcfront_e_fuse_debug_status_vcfront_sleep_bypass_current_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_f1_vcfront_e_fuse_debug_status_vcfront_sleep_bypass_current_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_f1_vcfront_e_fuse_debug_status_vcfront_sleep_bypass_current_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id2_f1_vcfront_e_fuse_debug_status_vcfront_autopilot1_voltage_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_f1_vcfront_e_fuse_debug_status_vcfront_autopilot1_voltage_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_f1_vcfront_e_fuse_debug_status_vcfront_autopilot1_voltage_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id2_f1_vcfront_e_fuse_debug_status_vcfront_autopilot2_voltage_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_f1_vcfront_e_fuse_debug_status_vcfront_autopilot2_voltage_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_f1_vcfront_e_fuse_debug_status_vcfront_autopilot2_voltage_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id2_f1_vcfront_e_fuse_debug_status_vcfront_esp_valve_voltage_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_f1_vcfront_e_fuse_debug_status_vcfront_esp_valve_voltage_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_f1_vcfront_e_fuse_debug_status_vcfront_esp_valve_voltage_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_f1_vcfront_e_fuse_debug_status_vcfront_headlamp_right_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_f1_vcfront_e_fuse_debug_status_vcfront_headlamp_right_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_f1_vcfront_e_fuse_debug_status_vcfront_headlamp_right_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_f1_vcfront_e_fuse_debug_status_vcfront_headlamp_right_fault_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_f1_vcfront_e_fuse_debug_status_vcfront_headlamp_right_fault_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_f1_vcfront_e_fuse_debug_status_vcfront_headlamp_right_fault_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id2_f1_vcfront_e_fuse_debug_status_vcfront_headlamp_right_current_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_f1_vcfront_e_fuse_debug_status_vcfront_headlamp_right_current_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_f1_vcfront_e_fuse_debug_status_vcfront_headlamp_right_current_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id2_f1_vcfront_e_fuse_debug_status_vcfront_vbat_fused_high_voltage_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_f1_vcfront_e_fuse_debug_status_vcfront_vbat_fused_high_voltage_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_f1_vcfront_e_fuse_debug_status_vcfront_vbat_fused_high_voltage_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id2_f1_vcfront_e_fuse_debug_status_vcfront_epas3_p_voltage_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_f1_vcfront_e_fuse_debug_status_vcfront_epas3_p_voltage_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_f1_vcfront_e_fuse_debug_status_vcfront_epas3_p_voltage_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id2_f1_vcfront_e_fuse_debug_status_vcfront_epas3_s_voltage_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_f1_vcfront_e_fuse_debug_status_vcfront_epas3_s_voltage_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_f1_vcfront_e_fuse_debug_status_vcfront_epas3_s_voltage_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id2_f1_vcfront_e_fuse_debug_status_vcfront_esp_motor_voltage_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_f1_vcfront_e_fuse_debug_status_vcfront_esp_motor_voltage_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_f1_vcfront_e_fuse_debug_status_vcfront_esp_motor_voltage_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id2_f1_vcfront_e_fuse_debug_status_vcfront_pcs_voltage_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_f1_vcfront_e_fuse_debug_status_vcfront_pcs_voltage_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_f1_vcfront_e_fuse_debug_status_vcfront_pcs_voltage_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id2_f1_vcfront_e_fuse_debug_status_vcfront_i_booster_voltage_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_f1_vcfront_e_fuse_debug_status_vcfront_i_booster_voltage_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_f1_vcfront_e_fuse_debug_status_vcfront_i_booster_voltage_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id2_f1_vcfront_e_fuse_debug_status_vcfront_left_controller_voltage_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_f1_vcfront_e_fuse_debug_status_vcfront_left_controller_voltage_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_f1_vcfront_e_fuse_debug_status_vcfront_left_controller_voltage_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id2_f1_vcfront_e_fuse_debug_status_vcfront_right_controller_voltage_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_f1_vcfront_e_fuse_debug_status_vcfront_right_controller_voltage_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_f1_vcfront_e_fuse_debug_status_vcfront_right_controller_voltage_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id2_f1_vcfront_e_fuse_debug_status_vcfront_rail_a_5v_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_f1_vcfront_e_fuse_debug_status_vcfront_rail_a_5v_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_f1_vcfront_e_fuse_debug_status_vcfront_rail_a_5v_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id2_f1_vcfront_e_fuse_debug_status_vcfront_ui_current_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_f1_vcfront_e_fuse_debug_status_vcfront_ui_current_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_f1_vcfront_e_fuse_debug_status_vcfront_ui_current_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_f1_vcfront_e_fuse_debug_status_vcfront_pump2_and_air_comp_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_f1_vcfront_e_fuse_debug_status_vcfront_pump2_and_air_comp_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_f1_vcfront_e_fuse_debug_status_vcfront_pump2_and_air_comp_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id2_f1_vcfront_e_fuse_debug_status_vcfront_pump2_and_air_comp_current_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_f1_vcfront_e_fuse_debug_status_vcfront_pump2_and_air_comp_current_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_f1_vcfront_e_fuse_debug_status_vcfront_pump2_and_air_comp_current_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t model3_can_id2_f1_vcfront_e_fuse_debug_status_vcfront_ibs_unfiltered_temperature_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_f1_vcfront_e_fuse_debug_status_vcfront_ibs_unfiltered_temperature_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_f1_vcfront_e_fuse_debug_status_vcfront_ibs_unfiltered_temperature_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_f1_vcfront_e_fuse_debug_status_vcfront_headlamp_right_voltage_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_f1_vcfront_e_fuse_debug_status_vcfront_headlamp_right_voltage_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_f1_vcfront_e_fuse_debug_status_vcfront_headlamp_right_voltage_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id2_f1_vcfront_e_fuse_debug_status_vcfront_autopilot1_current_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_f1_vcfront_e_fuse_debug_status_vcfront_autopilot1_current_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_f1_vcfront_e_fuse_debug_status_vcfront_autopilot1_current_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id2_f1_vcfront_e_fuse_debug_status_vcfront_autopilot2_current_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_f1_vcfront_e_fuse_debug_status_vcfront_autopilot2_current_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_f1_vcfront_e_fuse_debug_status_vcfront_autopilot2_current_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id2_f1_vcfront_e_fuse_debug_status_vcfront_esp_valve_current_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_f1_vcfront_e_fuse_debug_status_vcfront_esp_valve_current_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_f1_vcfront_e_fuse_debug_status_vcfront_esp_valve_current_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id2_f1_vcfront_e_fuse_debug_status_vcfront_rail_b_5v_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_f1_vcfront_e_fuse_debug_status_vcfront_rail_b_5v_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_f1_vcfront_e_fuse_debug_status_vcfront_rail_b_5v_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id2_f1_vcfront_e_fuse_debug_status_vcfront_vbat_fused_high_current_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_f1_vcfront_e_fuse_debug_status_vcfront_vbat_fused_high_current_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_f1_vcfront_e_fuse_debug_status_vcfront_vbat_fused_high_current_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id2_f1_vcfront_e_fuse_debug_status_vcfront_epas3_p_current_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_f1_vcfront_e_fuse_debug_status_vcfront_epas3_p_current_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_f1_vcfront_e_fuse_debug_status_vcfront_epas3_p_current_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id2_f1_vcfront_e_fuse_debug_status_vcfront_epas3_s_current_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_f1_vcfront_e_fuse_debug_status_vcfront_epas3_s_current_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_f1_vcfront_e_fuse_debug_status_vcfront_epas3_s_current_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id2_f1_vcfront_e_fuse_debug_status_vcfront_esp_motor_current_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_f1_vcfront_e_fuse_debug_status_vcfront_esp_motor_current_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_f1_vcfront_e_fuse_debug_status_vcfront_esp_motor_current_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t model3_can_id2_f1_vcfront_e_fuse_debug_status_vcfront_pcs_current_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_f1_vcfront_e_fuse_debug_status_vcfront_pcs_current_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_f1_vcfront_e_fuse_debug_status_vcfront_pcs_current_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id2_f1_vcfront_e_fuse_debug_status_vcfront_i_booster_current_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_f1_vcfront_e_fuse_debug_status_vcfront_i_booster_current_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_f1_vcfront_e_fuse_debug_status_vcfront_i_booster_current_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id2_f1_vcfront_e_fuse_debug_status_vcfront_left_controller_current_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_f1_vcfront_e_fuse_debug_status_vcfront_left_controller_current_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_f1_vcfront_e_fuse_debug_status_vcfront_left_controller_current_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id2_f1_vcfront_e_fuse_debug_status_vcfront_right_controller_current_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_f1_vcfront_e_fuse_debug_status_vcfront_right_controller_current_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_f1_vcfront_e_fuse_debug_status_vcfront_right_controller_current_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t model3_can_id2_f1_vcfront_e_fuse_debug_status_vcfront_headlamp_left_temperature_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_f1_vcfront_e_fuse_debug_status_vcfront_headlamp_left_temperature_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_f1_vcfront_e_fuse_debug_status_vcfront_headlamp_left_temperature_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id2_f1_vcfront_e_fuse_debug_status_vcfront_pump2_and_air_comp_voltage_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_f1_vcfront_e_fuse_debug_status_vcfront_pump2_and_air_comp_voltage_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_f1_vcfront_e_fuse_debug_status_vcfront_pump2_and_air_comp_voltage_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t model3_can_id2_f1_vcfront_e_fuse_debug_status_vcfront_headlamp_right_temperature_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_f1_vcfront_e_fuse_debug_status_vcfront_headlamp_right_temperature_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_f1_vcfront_e_fuse_debug_status_vcfront_headlamp_right_temperature_is_in_range(int8_t value);

/**
 * Pack message ID243VCRighthvacFeedback.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int model3_can_id243_vc_righthvac_feedback_pack(
    uint8_t *dst_p,
    const struct model3_can_id243_vc_righthvac_feedback_t *src_p,
    size_t size);

/**
 * Unpack message ID243VCRighthvacFeedback.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int model3_can_id243_vc_righthvac_feedback_unpack(
    struct model3_can_id243_vc_righthvac_feedback_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id243_vc_righthvac_feedback_vc_righthvac_qdot_left_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id243_vc_righthvac_feedback_vc_righthvac_qdot_left_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id243_vc_righthvac_feedback_vc_righthvac_qdot_left_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id243_vc_righthvac_feedback_vc_righthvac_qdot_right_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id243_vc_righthvac_feedback_vc_righthvac_qdot_right_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id243_vc_righthvac_feedback_vc_righthvac_qdot_right_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id243_vc_righthvac_feedback_vc_righthvac_cabin_temp_est_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id243_vc_righthvac_feedback_vc_righthvac_cabin_temp_est_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id243_vc_righthvac_feedback_vc_righthvac_cabin_temp_est_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id243_vc_righthvac_feedback_vc_righthvac_air_distribution_mode_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id243_vc_righthvac_feedback_vc_righthvac_air_distribution_mode_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id243_vc_righthvac_feedback_vc_righthvac_air_distribution_mode_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id243_vc_righthvac_feedback_vc_righthvac_blower_segment_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id243_vc_righthvac_feedback_vc_righthvac_blower_segment_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id243_vc_righthvac_feedback_vc_righthvac_blower_segment_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id243_vc_righthvac_feedback_vc_righthvac_recirc_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id243_vc_righthvac_feedback_vc_righthvac_recirc_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id243_vc_righthvac_feedback_vc_righthvac_recirc_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id243_vc_righthvac_feedback_vc_righthvac_ac_running_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id243_vc_righthvac_feedback_vc_righthvac_ac_running_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id243_vc_righthvac_feedback_vc_righthvac_ac_running_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id243_vc_righthvac_feedback_vc_righthvac_power_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id243_vc_righthvac_feedback_vc_righthvac_power_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id243_vc_righthvac_feedback_vc_righthvac_power_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id243_vc_righthvac_feedback_vc_righthvac_second_row_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id243_vc_righthvac_feedback_vc_righthvac_second_row_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id243_vc_righthvac_feedback_vc_righthvac_second_row_state_is_in_range(uint8_t value);

/**
 * Pack message ID20CVCRighthvacRequest.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int model3_can_id20_cvc_righthvac_request_pack(
    uint8_t *dst_p,
    const struct model3_can_id20_cvc_righthvac_request_t *src_p,
    size_t size);

/**
 * Unpack message ID20CVCRighthvacRequest.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int model3_can_id20_cvc_righthvac_request_unpack(
    struct model3_can_id20_cvc_righthvac_request_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id20_cvc_righthvac_request_vc_rightwatts_demand_evap_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id20_cvc_righthvac_request_vc_rightwatts_demand_evap_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id20_cvc_righthvac_request_vc_rightwatts_demand_evap_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id20_cvc_righthvac_request_vc_righthvac_evap_enabled_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id20_cvc_righthvac_request_vc_righthvac_evap_enabled_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id20_cvc_righthvac_request_vc_righthvac_evap_enabled_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id20_cvc_righthvac_request_vc_rightconditioning_request_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id20_cvc_righthvac_request_vc_rightconditioning_request_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id20_cvc_righthvac_request_vc_rightconditioning_request_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id20_cvc_righthvac_request_vc_righttemp_evaporator_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id20_cvc_righthvac_request_vc_righttemp_evaporator_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id20_cvc_righthvac_request_vc_righttemp_evaporator_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id20_cvc_righthvac_request_vc_righttemp_evaporator_target_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id20_cvc_righthvac_request_vc_righttemp_evaporator_target_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id20_cvc_righthvac_request_vc_righttemp_evaporator_target_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id20_cvc_righthvac_request_vc_righthvac_blower_speed_rpm_req_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id20_cvc_righthvac_request_vc_righthvac_blower_speed_rpm_req_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id20_cvc_righthvac_request_vc_righthvac_blower_speed_rpm_req_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id20_cvc_righthvac_request_vc_rightdemand_evap_skip_rate_limit_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id20_cvc_righthvac_request_vc_rightdemand_evap_skip_rate_limit_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id20_cvc_righthvac_request_vc_rightdemand_evap_skip_rate_limit_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id20_cvc_righthvac_request_vc_rightevap_performance_low_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id20_cvc_righthvac_request_vc_rightevap_performance_low_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id20_cvc_righthvac_request_vc_rightevap_performance_low_is_in_range(uint8_t value);

/**
 * Pack message ID2B3VCRightlogging1Hz.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int model3_can_id2_b3_vc_rightlogging1_hz_pack(
    uint8_t *dst_p,
    const struct model3_can_id2_b3_vc_rightlogging1_hz_t *src_p,
    size_t size);

/**
 * Unpack message ID2B3VCRightlogging1Hz.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int model3_can_id2_b3_vc_rightlogging1_hz_unpack(
    struct model3_can_id2_b3_vc_rightlogging1_hz_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_b3_vc_rightlogging1_hz_vc_rightlogging1_hz_index_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_b3_vc_rightlogging1_hz_vc_rightlogging1_hz_index_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_b3_vc_rightlogging1_hz_vc_rightlogging1_hz_index_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id2_b3_vc_rightlogging1_hz_vc_righttemp_duct_left_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_b3_vc_rightlogging1_hz_vc_righttemp_duct_left_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_b3_vc_rightlogging1_hz_vc_righttemp_duct_left_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_b3_vc_rightlogging1_hz_vc_righthvac_estimate_windshield_rh_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_b3_vc_rightlogging1_hz_vc_righthvac_estimate_windshield_rh_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_b3_vc_rightlogging1_hz_vc_righthvac_estimate_windshield_rh_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_b3_vc_rightlogging1_hz_vc_rightptc_heater_temp_duct_high_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_b3_vc_rightlogging1_hz_vc_rightptc_heater_temp_duct_high_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_b3_vc_rightlogging1_hz_vc_rightptc_heater_temp_duct_high_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id2_b3_vc_rightlogging1_hz_vc_righttemp_duct_modeled_left_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_b3_vc_rightlogging1_hz_vc_righttemp_duct_modeled_left_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_b3_vc_rightlogging1_hz_vc_righttemp_duct_modeled_left_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_b3_vc_rightlogging1_hz_vc_rightptc_heater_temp_duct_fault_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_b3_vc_rightlogging1_hz_vc_rightptc_heater_temp_duct_fault_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_b3_vc_rightlogging1_hz_vc_rightptc_heater_temp_duct_fault_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_b3_vc_rightlogging1_hz_vc_rightptc_heater_no_airflow_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_b3_vc_rightlogging1_hz_vc_rightptc_heater_no_airflow_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_b3_vc_rightlogging1_hz_vc_rightptc_heater_no_airflow_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_b3_vc_rightlogging1_hz_vc_rightptc_heater_hvac_act_not_ready_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_b3_vc_rightlogging1_hz_vc_rightptc_heater_hvac_act_not_ready_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_b3_vc_rightlogging1_hz_vc_rightptc_heater_hvac_act_not_ready_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_b3_vc_rightlogging1_hz_vc_rightcabin_temp_glass_roof_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_b3_vc_rightlogging1_hz_vc_rightcabin_temp_glass_roof_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_b3_vc_rightlogging1_hz_vc_rightcabin_temp_glass_roof_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_b3_vc_rightlogging1_hz_vc_righthvac_set_temp_actual_left_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_b3_vc_rightlogging1_hz_vc_righthvac_set_temp_actual_left_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_b3_vc_rightlogging1_hz_vc_righthvac_set_temp_actual_left_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_b3_vc_rightlogging1_hz_vc_rightconvection_target_left_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_b3_vc_rightlogging1_hz_vc_rightconvection_target_left_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_b3_vc_rightlogging1_hz_vc_rightconvection_target_left_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_b3_vc_rightlogging1_hz_vc_rightptc_heater_no_ui_request_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_b3_vc_rightlogging1_hz_vc_rightptc_heater_no_ui_request_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_b3_vc_rightlogging1_hz_vc_rightptc_heater_no_ui_request_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_b3_vc_rightlogging1_hz_vc_righthvac_lh_bleed_voltage_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_b3_vc_rightlogging1_hz_vc_righthvac_lh_bleed_voltage_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_b3_vc_rightlogging1_hz_vc_righthvac_lh_bleed_voltage_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_b3_vc_rightlogging1_hz_vc_righthvac_lh_bleed_end_stop_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_b3_vc_rightlogging1_hz_vc_righthvac_lh_bleed_end_stop_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_b3_vc_rightlogging1_hz_vc_righthvac_lh_bleed_end_stop_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_b3_vc_rightlogging1_hz_vc_righthvac_lh_bleed_zero_stop_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_b3_vc_rightlogging1_hz_vc_righthvac_lh_bleed_zero_stop_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_b3_vc_rightlogging1_hz_vc_righthvac_lh_bleed_zero_stop_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_b3_vc_rightlogging1_hz_vc_righttime_left_to_cabin_model_init_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_b3_vc_rightlogging1_hz_vc_righttime_left_to_cabin_model_init_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_b3_vc_rightlogging1_hz_vc_righttime_left_to_cabin_model_init_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_b3_vc_rightlogging1_hz_vc_rightptc_heater_no_high_voltage_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_b3_vc_rightlogging1_hz_vc_rightptc_heater_no_high_voltage_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_b3_vc_rightlogging1_hz_vc_rightptc_heater_no_high_voltage_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_b3_vc_rightlogging1_hz_vc_rightptc_heater_l_air_path_blocked_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_b3_vc_rightlogging1_hz_vc_rightptc_heater_l_air_path_blocked_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_b3_vc_rightlogging1_hz_vc_rightptc_heater_l_air_path_blocked_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_b3_vc_rightlogging1_hz_vc_rightptc_heater_r_air_path_blocked_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_b3_vc_rightlogging1_hz_vc_rightptc_heater_r_air_path_blocked_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_b3_vc_rightlogging1_hz_vc_rightptc_heater_r_air_path_blocked_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_b3_vc_rightlogging1_hz_vc_righthvac_fogging_risk_level_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_b3_vc_rightlogging1_hz_vc_righthvac_fogging_risk_level_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_b3_vc_rightlogging1_hz_vc_righthvac_fogging_risk_level_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_b3_vc_rightlogging1_hz_vc_rightptc_heater_req_airpath_blocked_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_b3_vc_rightlogging1_hz_vc_rightptc_heater_req_airpath_blocked_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_b3_vc_rightlogging1_hz_vc_rightptc_heater_req_airpath_blocked_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id2_b3_vc_rightlogging1_hz_vc_righttemp_duct_right_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_b3_vc_rightlogging1_hz_vc_righttemp_duct_right_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_b3_vc_rightlogging1_hz_vc_righttemp_duct_right_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_b3_vc_rightlogging1_hz_vc_righthvac_duct_target_left_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_b3_vc_rightlogging1_hz_vc_righthvac_duct_target_left_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_b3_vc_rightlogging1_hz_vc_righthvac_duct_target_left_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id2_b3_vc_rightlogging1_hz_vc_righttemp_duct_modeled_right_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_b3_vc_rightlogging1_hz_vc_righttemp_duct_modeled_right_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_b3_vc_rightlogging1_hz_vc_righttemp_duct_modeled_right_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_b3_vc_rightlogging1_hz_vc_rightcabin_temp_windshield_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_b3_vc_rightlogging1_hz_vc_rightcabin_temp_windshield_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_b3_vc_rightlogging1_hz_vc_rightcabin_temp_windshield_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_b3_vc_rightlogging1_hz_vc_righthvac_set_temp_actual_right_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_b3_vc_rightlogging1_hz_vc_righthvac_set_temp_actual_right_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_b3_vc_rightlogging1_hz_vc_righthvac_set_temp_actual_right_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_b3_vc_rightlogging1_hz_vc_rightconvection_target_right_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_b3_vc_rightlogging1_hz_vc_rightconvection_target_right_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_b3_vc_rightlogging1_hz_vc_rightconvection_target_right_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_b3_vc_rightlogging1_hz_vc_righthvac_rh_bleed_voltage_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_b3_vc_rightlogging1_hz_vc_righthvac_rh_bleed_voltage_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_b3_vc_rightlogging1_hz_vc_righthvac_rh_bleed_voltage_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_b3_vc_rightlogging1_hz_vc_righthvac_rh_bleed_end_stop_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_b3_vc_rightlogging1_hz_vc_righthvac_rh_bleed_end_stop_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_b3_vc_rightlogging1_hz_vc_righthvac_rh_bleed_end_stop_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_b3_vc_rightlogging1_hz_vc_righthvac_rh_bleed_zero_stop_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_b3_vc_rightlogging1_hz_vc_righthvac_rh_bleed_zero_stop_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_b3_vc_rightlogging1_hz_vc_righthvac_rh_bleed_zero_stop_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_b3_vc_rightlogging1_hz_vc_righthvac_flash_fogging_detected_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_b3_vc_rightlogging1_hz_vc_righthvac_flash_fogging_detected_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_b3_vc_rightlogging1_hz_vc_righthvac_flash_fogging_detected_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_b3_vc_rightlogging1_hz_vc_rightsolar_load_on_veh_filtered_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_b3_vc_rightlogging1_hz_vc_rightsolar_load_on_veh_filtered_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_b3_vc_rightlogging1_hz_vc_rightsolar_load_on_veh_filtered_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_b3_vc_rightlogging1_hz_vc_righthvac_cabin_humidity_level_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_b3_vc_rightlogging1_hz_vc_righthvac_cabin_humidity_level_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_b3_vc_rightlogging1_hz_vc_righthvac_cabin_humidity_level_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_b3_vc_rightlogging1_hz_vc_righthvac_duct_target_right_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_b3_vc_rightlogging1_hz_vc_righthvac_duct_target_right_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_b3_vc_rightlogging1_hz_vc_righthvac_duct_target_right_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id2_b3_vc_rightlogging1_hz_vc_righttemp_htr_surface_modeled_l_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_b3_vc_rightlogging1_hz_vc_righttemp_htr_surface_modeled_l_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_b3_vc_rightlogging1_hz_vc_righttemp_htr_surface_modeled_l_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_b3_vc_rightlogging1_hz_vc_righttemp_incar_cabin_probe_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_b3_vc_rightlogging1_hz_vc_righttemp_incar_cabin_probe_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_b3_vc_rightlogging1_hz_vc_righttemp_incar_cabin_probe_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_b3_vc_rightlogging1_hz_vc_rightcabin_temp_interior_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_b3_vc_rightlogging1_hz_vc_rightcabin_temp_interior_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_b3_vc_rightlogging1_hz_vc_rightcabin_temp_interior_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_b3_vc_rightlogging1_hz_vc_righthvac_auto_transition_reason_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_b3_vc_rightlogging1_hz_vc_righthvac_auto_transition_reason_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_b3_vc_rightlogging1_hz_vc_righthvac_auto_transition_reason_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_b3_vc_rightlogging1_hz_vc_rightconvection_delivered_left_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_b3_vc_rightlogging1_hz_vc_rightconvection_delivered_left_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_b3_vc_rightlogging1_hz_vc_rightconvection_delivered_left_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_b3_vc_rightlogging1_hz_vc_righthvac_lh_vane_voltage_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_b3_vc_rightlogging1_hz_vc_righthvac_lh_vane_voltage_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_b3_vc_rightlogging1_hz_vc_righthvac_lh_vane_voltage_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_b3_vc_rightlogging1_hz_vc_righthvac_lh_vane_end_stop_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_b3_vc_rightlogging1_hz_vc_righthvac_lh_vane_end_stop_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_b3_vc_rightlogging1_hz_vc_righthvac_lh_vane_end_stop_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_b3_vc_rightlogging1_hz_vc_righthvac_lh_vane_zero_stop_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_b3_vc_rightlogging1_hz_vc_righthvac_lh_vane_zero_stop_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_b3_vc_rightlogging1_hz_vc_righthvac_lh_vane_zero_stop_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_b3_vc_rightlogging1_hz_vc_righthvac_cabin_purge_active_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_b3_vc_rightlogging1_hz_vc_righthvac_cabin_purge_active_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_b3_vc_rightlogging1_hz_vc_righthvac_cabin_purge_active_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_b3_vc_rightlogging1_hz_vc_righthvac_cab_ovrheat_prot_active_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_b3_vc_rightlogging1_hz_vc_righthvac_cab_ovrheat_prot_active_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_b3_vc_rightlogging1_hz_vc_righthvac_cab_ovrheat_prot_active_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_b3_vc_rightlogging1_hz_vc_righthvac_cabin_purge_allowed_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_b3_vc_rightlogging1_hz_vc_righthvac_cabin_purge_allowed_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_b3_vc_rightlogging1_hz_vc_righthvac_cabin_purge_allowed_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id2_b3_vc_rightlogging1_hz_vc_rightwatts_heater_left_total_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_b3_vc_rightlogging1_hz_vc_rightwatts_heater_left_total_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_b3_vc_rightlogging1_hz_vc_rightwatts_heater_left_total_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_b3_vc_rightlogging1_hz_vc_righthvac_cab_ovrheat_prot_allowed_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_b3_vc_rightlogging1_hz_vc_righthvac_cab_ovrheat_prot_allowed_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_b3_vc_rightlogging1_hz_vc_righthvac_cab_ovrheat_prot_allowed_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_b3_vc_rightlogging1_hz_vc_righthvac_air_flow_mode_row1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_b3_vc_rightlogging1_hz_vc_righthvac_air_flow_mode_row1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_b3_vc_rightlogging1_hz_vc_righthvac_air_flow_mode_row1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id2_b3_vc_rightlogging1_hz_vc_righthvac_qdot_feedforward_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_b3_vc_rightlogging1_hz_vc_righthvac_qdot_feedforward_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_b3_vc_rightlogging1_hz_vc_righthvac_qdot_feedforward_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_b3_vc_rightlogging1_hz_vc_rightcloudiness_probability_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_b3_vc_rightlogging1_hz_vc_rightcloudiness_probability_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_b3_vc_rightlogging1_hz_vc_rightcloudiness_probability_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id2_b3_vc_rightlogging1_hz_vc_righttemp_htr_surface_modeled_r_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_b3_vc_rightlogging1_hz_vc_righttemp_htr_surface_modeled_r_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_b3_vc_rightlogging1_hz_vc_righttemp_htr_surface_modeled_r_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_b3_vc_rightlogging1_hz_vc_righttemp_incar_cabin_mid_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_b3_vc_rightlogging1_hz_vc_righttemp_incar_cabin_mid_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_b3_vc_rightlogging1_hz_vc_righttemp_incar_cabin_mid_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_b3_vc_rightlogging1_hz_vc_rightcabin_temp_interior_sunny_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_b3_vc_rightlogging1_hz_vc_rightcabin_temp_interior_sunny_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_b3_vc_rightlogging1_hz_vc_rightcabin_temp_interior_sunny_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_b3_vc_rightlogging1_hz_vc_righthvac_air_flow_mode_row2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_b3_vc_rightlogging1_hz_vc_righthvac_air_flow_mode_row2_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_b3_vc_rightlogging1_hz_vc_righthvac_air_flow_mode_row2_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_b3_vc_rightlogging1_hz_vc_rightconvection_delivered_right_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_b3_vc_rightlogging1_hz_vc_rightconvection_delivered_right_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_b3_vc_rightlogging1_hz_vc_rightconvection_delivered_right_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_b3_vc_rightlogging1_hz_vc_righthvac_rh_vane_voltage_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_b3_vc_rightlogging1_hz_vc_righthvac_rh_vane_voltage_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_b3_vc_rightlogging1_hz_vc_righthvac_rh_vane_voltage_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_b3_vc_rightlogging1_hz_vc_righthvac_rh_vane_end_stop_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_b3_vc_rightlogging1_hz_vc_righthvac_rh_vane_end_stop_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_b3_vc_rightlogging1_hz_vc_righthvac_rh_vane_end_stop_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_b3_vc_rightlogging1_hz_vc_righthvac_rh_vane_zero_stop_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_b3_vc_rightlogging1_hz_vc_righthvac_rh_vane_zero_stop_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_b3_vc_rightlogging1_hz_vc_righthvac_rh_vane_zero_stop_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_b3_vc_rightlogging1_hz_vc_rightcabin_temp_interior_l3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_b3_vc_rightlogging1_hz_vc_rightcabin_temp_interior_l3_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_b3_vc_rightlogging1_hz_vc_rightcabin_temp_interior_l3_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id2_b3_vc_rightlogging1_hz_vc_rightwatts_heater_right_total_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_b3_vc_rightlogging1_hz_vc_rightwatts_heater_right_total_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_b3_vc_rightlogging1_hz_vc_rightwatts_heater_right_total_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_b3_vc_rightlogging1_hz_vc_righttemp_incar_cabin_deep_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_b3_vc_rightlogging1_hz_vc_righttemp_incar_cabin_deep_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_b3_vc_rightlogging1_hz_vc_righttemp_incar_cabin_deep_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_b3_vc_rightlogging1_hz_vc_rightcabin_temp_side_glass_left_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_b3_vc_rightlogging1_hz_vc_rightcabin_temp_side_glass_left_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_b3_vc_rightlogging1_hz_vc_rightcabin_temp_side_glass_left_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_b3_vc_rightlogging1_hz_vc_righthvac_massflow_target_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_b3_vc_rightlogging1_hz_vc_righthvac_massflow_target_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_b3_vc_rightlogging1_hz_vc_righthvac_massflow_target_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_b3_vc_rightlogging1_hz_vc_rightsolar_load_right_occupant_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_b3_vc_rightlogging1_hz_vc_rightsolar_load_right_occupant_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_b3_vc_rightlogging1_hz_vc_rightsolar_load_right_occupant_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_b3_vc_rightlogging1_hz_vc_righthvac_upper_mode_voltage_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_b3_vc_rightlogging1_hz_vc_righthvac_upper_mode_voltage_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_b3_vc_rightlogging1_hz_vc_righthvac_upper_mode_voltage_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_b3_vc_rightlogging1_hz_vc_righthvac_upper_mode_end_stop_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_b3_vc_rightlogging1_hz_vc_righthvac_upper_mode_end_stop_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_b3_vc_rightlogging1_hz_vc_righthvac_upper_mode_end_stop_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_b3_vc_rightlogging1_hz_vc_righthvac_upper_mode_zero_stop_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_b3_vc_rightlogging1_hz_vc_righthvac_upper_mode_zero_stop_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_b3_vc_rightlogging1_hz_vc_righthvac_upper_mode_zero_stop_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_b3_vc_rightlogging1_hz_vc_rightcabin_temp_interior_sunny_l3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_b3_vc_rightlogging1_hz_vc_rightcabin_temp_interior_sunny_l3_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_b3_vc_rightlogging1_hz_vc_rightcabin_temp_interior_sunny_l3_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_b3_vc_rightlogging1_hz_vc_rightevap_load_in_fresh_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_b3_vc_rightlogging1_hz_vc_rightevap_load_in_fresh_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_b3_vc_rightlogging1_hz_vc_rightevap_load_in_fresh_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_b3_vc_rightlogging1_hz_vc_rightcabin_temp_interior_l2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_b3_vc_rightlogging1_hz_vc_rightcabin_temp_interior_l2_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_b3_vc_rightlogging1_hz_vc_rightcabin_temp_interior_l2_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_b3_vc_rightlogging1_hz_vc_rightcabin_temp_side_glass_right_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_b3_vc_rightlogging1_hz_vc_rightcabin_temp_side_glass_right_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_b3_vc_rightlogging1_hz_vc_rightcabin_temp_side_glass_right_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_b3_vc_rightlogging1_hz_vc_rightptc_heater_pwr_demand_left_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_b3_vc_rightlogging1_hz_vc_rightptc_heater_pwr_demand_left_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_b3_vc_rightlogging1_hz_vc_rightptc_heater_pwr_demand_left_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_b3_vc_rightlogging1_hz_vc_righthvac_airflow_reason_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_b3_vc_rightlogging1_hz_vc_righthvac_airflow_reason_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_b3_vc_rightlogging1_hz_vc_righthvac_airflow_reason_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_b3_vc_rightlogging1_hz_vc_rightsolar_load_left_occupant_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_b3_vc_rightlogging1_hz_vc_rightsolar_load_left_occupant_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_b3_vc_rightlogging1_hz_vc_rightsolar_load_left_occupant_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_b3_vc_rightlogging1_hz_vc_righthvac_lower_mode_voltage_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_b3_vc_rightlogging1_hz_vc_righthvac_lower_mode_voltage_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_b3_vc_rightlogging1_hz_vc_righthvac_lower_mode_voltage_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_b3_vc_rightlogging1_hz_vc_righthvac_lower_mode_end_stop_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_b3_vc_rightlogging1_hz_vc_righthvac_lower_mode_end_stop_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_b3_vc_rightlogging1_hz_vc_righthvac_lower_mode_end_stop_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_b3_vc_rightlogging1_hz_vc_righthvac_lower_mode_zero_stop_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_b3_vc_rightlogging1_hz_vc_righthvac_lower_mode_zero_stop_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_b3_vc_rightlogging1_hz_vc_righthvac_lower_mode_zero_stop_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_b3_vc_rightlogging1_hz_vc_righthvac_qdot_limited_left_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_b3_vc_rightlogging1_hz_vc_righthvac_qdot_limited_left_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_b3_vc_rightlogging1_hz_vc_righthvac_qdot_limited_left_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_b3_vc_rightlogging1_hz_vc_rightcabin_temp_top_pad_air_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_b3_vc_rightlogging1_hz_vc_rightcabin_temp_top_pad_air_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_b3_vc_rightlogging1_hz_vc_rightcabin_temp_top_pad_air_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_b3_vc_rightlogging1_hz_vc_righthvac_qdot_limited_right_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_b3_vc_rightlogging1_hz_vc_righthvac_qdot_limited_right_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_b3_vc_rightlogging1_hz_vc_righthvac_qdot_limited_right_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_b3_vc_rightlogging1_hz_vc_rightevap_load_in_recirc_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_b3_vc_rightlogging1_hz_vc_rightevap_load_in_recirc_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_b3_vc_rightlogging1_hz_vc_rightevap_load_in_recirc_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_b3_vc_rightlogging1_hz_vc_right_lh_panel_airflow_blocked_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_b3_vc_rightlogging1_hz_vc_right_lh_panel_airflow_blocked_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_b3_vc_rightlogging1_hz_vc_right_lh_panel_airflow_blocked_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_b3_vc_rightlogging1_hz_vc_right_rh_panel_airflow_blocked_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_b3_vc_rightlogging1_hz_vc_right_rh_panel_airflow_blocked_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_b3_vc_rightlogging1_hz_vc_right_rh_panel_airflow_blocked_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_b3_vc_rightlogging1_hz_vc_rightcabin_temp_interior_sunny_l2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_b3_vc_rightlogging1_hz_vc_rightcabin_temp_interior_sunny_l2_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_b3_vc_rightlogging1_hz_vc_rightcabin_temp_interior_sunny_l2_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_b3_vc_rightlogging1_hz_vc_rightcabin_temp_breath_level_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_b3_vc_rightlogging1_hz_vc_rightcabin_temp_breath_level_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_b3_vc_rightlogging1_hz_vc_rightcabin_temp_breath_level_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_b3_vc_rightlogging1_hz_vc_rightptc_heater_pwr_demand_right_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_b3_vc_rightlogging1_hz_vc_rightptc_heater_pwr_demand_right_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_b3_vc_rightlogging1_hz_vc_rightptc_heater_pwr_demand_right_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_b3_vc_rightlogging1_hz_vc_rightfloor_airflow_blocked_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_b3_vc_rightlogging1_hz_vc_rightfloor_airflow_blocked_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_b3_vc_rightlogging1_hz_vc_rightfloor_airflow_blocked_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_b3_vc_rightlogging1_hz_vc_rightsolar_load_on_vehicle_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_b3_vc_rightlogging1_hz_vc_rightsolar_load_on_vehicle_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_b3_vc_rightlogging1_hz_vc_rightsolar_load_on_vehicle_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_b3_vc_rightlogging1_hz_vc_righthvac_intake_voltage_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_b3_vc_rightlogging1_hz_vc_righthvac_intake_voltage_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_b3_vc_rightlogging1_hz_vc_righthvac_intake_voltage_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_b3_vc_rightlogging1_hz_vc_righthvac_intake_end_stop_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_b3_vc_rightlogging1_hz_vc_righthvac_intake_end_stop_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_b3_vc_rightlogging1_hz_vc_righthvac_intake_end_stop_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_b3_vc_rightlogging1_hz_vc_righthvac_intake_zero_stop_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_b3_vc_rightlogging1_hz_vc_righthvac_intake_zero_stop_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_b3_vc_rightlogging1_hz_vc_righthvac_intake_zero_stop_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_b3_vc_rightlogging1_hz_vc_rightdefrost_airflow_blocked_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_b3_vc_rightlogging1_hz_vc_rightdefrost_airflow_blocked_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_b3_vc_rightlogging1_hz_vc_rightdefrost_airflow_blocked_is_in_range(uint8_t value);

/**
 * Pack message ID2C1VCFront10hz.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int model3_can_id2_c1_vc_front10hz_pack(
    uint8_t *dst_p,
    const struct model3_can_id2_c1_vc_front10hz_t *src_p,
    size_t size);

/**
 * Unpack message ID2C1VCFront10hz.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int model3_can_id2_c1_vc_front10hz_unpack(
    struct model3_can_id2_c1_vc_front10hz_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_c1_vc_front10hz_vc_front10_hz_index_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_c1_vc_front10hz_vc_front10_hz_index_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_c1_vc_front10hz_vc_front10_hz_index_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id2_c1_vc_front10hz_v_cfrontpump_battery_rpm_actual_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_c1_vc_front10hz_v_cfrontpump_battery_rpm_actual_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_c1_vc_front10hz_v_cfrontpump_battery_rpm_actual_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_c1_vc_front10hz_v_cfrontfive_way_valve_mode_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_c1_vc_front10hz_v_cfrontfive_way_valve_mode_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_c1_vc_front10hz_v_cfrontfive_way_valve_mode_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_c1_vc_front10hz_v_cfrontrefrigerant_has_been_filled_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_c1_vc_front10hz_v_cfrontrefrigerant_has_been_filled_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_c1_vc_front10hz_v_cfrontrefrigerant_has_been_filled_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_c1_vc_front10hz_v_cfrontcoolant_temp_based_mode_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_c1_vc_front10hz_v_cfrontcoolant_temp_based_mode_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_c1_vc_front10hz_v_cfrontcoolant_temp_based_mode_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_c1_vc_front10hz_v_cfrontfive_way_valve_mode_wrong_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_c1_vc_front10hz_v_cfrontfive_way_valve_mode_wrong_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_c1_vc_front10hz_v_cfrontfive_way_valve_mode_wrong_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id2_c1_vc_front10hz_v_cfrontfive_way_valve_angle_actual_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_c1_vc_front10hz_v_cfrontfive_way_valve_angle_actual_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_c1_vc_front10hz_v_cfrontfive_way_valve_angle_actual_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_c1_vc_front10hz_v_cfrontradiator_fan_out_voltage_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_c1_vc_front10hz_v_cfrontradiator_fan_out_voltage_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_c1_vc_front10hz_v_cfrontradiator_fan_out_voltage_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_c1_vc_front10hz_v_cfronttemp_refrig_suction_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_c1_vc_front10hz_v_cfronttemp_refrig_suction_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_c1_vc_front10hz_v_cfronttemp_refrig_suction_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_c1_vc_front10hz_v_cfrontcomp_demand_chiller_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_c1_vc_front10hz_v_cfrontcomp_demand_chiller_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_c1_vc_front10hz_v_cfrontcomp_demand_chiller_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id2_c1_vc_front10hz_v_cfrontpump_battery_rpm_target_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_c1_vc_front10hz_v_cfrontpump_battery_rpm_target_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_c1_vc_front10hz_v_cfrontpump_battery_rpm_target_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id2_c1_vc_front10hz_v_cfrontradiator_fan_rpm_target_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_c1_vc_front10hz_v_cfrontradiator_fan_rpm_target_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_c1_vc_front10hz_v_cfrontradiator_fan_rpm_target_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id2_c1_vc_front10hz_v_cfrontfive_way_valve_angle_target_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_c1_vc_front10hz_v_cfrontfive_way_valve_angle_target_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_c1_vc_front10hz_v_cfrontfive_way_valve_angle_target_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id2_c1_vc_front10hz_v_cfronttemp_refrig_discharge_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_c1_vc_front10hz_v_cfronttemp_refrig_discharge_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_c1_vc_front10hz_v_cfronttemp_refrig_discharge_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_c1_vc_front10hz_v_cfrontcomp_demand_evap_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_c1_vc_front10hz_v_cfrontcomp_demand_evap_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_c1_vc_front10hz_v_cfrontcomp_demand_evap_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id2_c1_vc_front10hz_v_cfrontpump_powertrain_rpm_actual_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_c1_vc_front10hz_v_cfrontpump_powertrain_rpm_actual_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_c1_vc_front10hz_v_cfrontpump_powertrain_rpm_actual_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_c1_vc_front10hz_v_cfrontcompressor_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_c1_vc_front10hz_v_cfrontcompressor_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_c1_vc_front10hz_v_cfrontcompressor_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id2_c1_vc_front10hz_v_cfrontradiator_fan_rpm_actual_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_c1_vc_front10hz_v_cfrontradiator_fan_rpm_actual_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_c1_vc_front10hz_v_cfrontradiator_fan_rpm_actual_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_c1_vc_front10hz_v_cfrontfive_way_valve_rad_bypass_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_c1_vc_front10hz_v_cfrontfive_way_valve_rad_bypass_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_c1_vc_front10hz_v_cfrontfive_way_valve_rad_bypass_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_c1_vc_front10hz_v_cfrontcomp_limit_pres_discharge_hi_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_c1_vc_front10hz_v_cfrontcomp_limit_pres_discharge_hi_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_c1_vc_front10hz_v_cfrontcomp_limit_pres_discharge_hi_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id2_c1_vc_front10hz_v_cfronttemp_superheat_actual_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_c1_vc_front10hz_v_cfronttemp_superheat_actual_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_c1_vc_front10hz_v_cfronttemp_superheat_actual_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_c1_vc_front10hz_v_cfrontcomp_limit_temp_discharge_hi_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_c1_vc_front10hz_v_cfrontcomp_limit_temp_discharge_hi_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_c1_vc_front10hz_v_cfrontcomp_limit_temp_discharge_hi_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_c1_vc_front10hz_v_cfrontcomp_limit_scroll_sep_region_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_c1_vc_front10hz_v_cfrontcomp_limit_scroll_sep_region_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_c1_vc_front10hz_v_cfrontcomp_limit_scroll_sep_region_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_c1_vc_front10hz_v_cfrontcomp_limit_nvh_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_c1_vc_front10hz_v_cfrontcomp_limit_nvh_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_c1_vc_front10hz_v_cfrontcomp_limit_nvh_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_c1_vc_front10hz_v_cfrontcomp_limit_scroll_sep_ramp_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_c1_vc_front10hz_v_cfrontcomp_limit_scroll_sep_ramp_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_c1_vc_front10hz_v_cfrontcomp_limit_scroll_sep_ramp_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_c1_vc_front10hz_v_cfrontcomp_limit_deadband_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_c1_vc_front10hz_v_cfrontcomp_limit_deadband_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_c1_vc_front10hz_v_cfrontcomp_limit_deadband_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_c1_vc_front10hz_v_cfrontcomp_standby_self_not_ready_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_c1_vc_front10hz_v_cfrontcomp_standby_self_not_ready_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_c1_vc_front10hz_v_cfrontcomp_standby_self_not_ready_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id2_c1_vc_front10hz_v_cfrontpump_powertrain_rpm_target_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_c1_vc_front10hz_v_cfrontpump_powertrain_rpm_target_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_c1_vc_front10hz_v_cfrontpump_powertrain_rpm_target_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_c1_vc_front10hz_v_cfrontfive_way_valve_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_c1_vc_front10hz_v_cfrontfive_way_valve_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_c1_vc_front10hz_v_cfrontfive_way_valve_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_c1_vc_front10hz_v_cfrontcomp_standby_communication_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_c1_vc_front10hz_v_cfrontcomp_standby_communication_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_c1_vc_front10hz_v_cfrontcomp_standby_communication_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_c1_vc_front10hz_v_cfrontcomp_standby_hv_not_ready_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_c1_vc_front10hz_v_cfrontcomp_standby_hv_not_ready_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_c1_vc_front10hz_v_cfrontcomp_standby_hv_not_ready_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t model3_can_id2_c1_vc_front10hz_v_cfrontfive_way_valve_duty_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_c1_vc_front10hz_v_cfrontfive_way_valve_duty_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_c1_vc_front10hz_v_cfrontfive_way_valve_duty_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_c1_vc_front10hz_v_cfrontcomp_standby_low_ambient_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_c1_vc_front10hz_v_cfrontcomp_standby_low_ambient_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_c1_vc_front10hz_v_cfrontcomp_standby_low_ambient_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_c1_vc_front10hz_v_cfrontradiator_fan_initd_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_c1_vc_front10hz_v_cfrontradiator_fan_initd_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_c1_vc_front10hz_v_cfrontradiator_fan_initd_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_c1_vc_front10hz_v_cfrontcomp_standby_low_disch_press_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_c1_vc_front10hz_v_cfrontcomp_standby_low_disch_press_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_c1_vc_front10hz_v_cfrontcomp_standby_low_disch_press_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_c1_vc_front10hz_v_cfrontradiator_fan_enabled_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_c1_vc_front10hz_v_cfrontradiator_fan_enabled_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_c1_vc_front10hz_v_cfrontradiator_fan_enabled_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id2_c1_vc_front10hz_v_cfronttemp_superheat_target_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_c1_vc_front10hz_v_cfronttemp_superheat_target_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_c1_vc_front10hz_v_cfronttemp_superheat_target_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_c1_vc_front10hz_v_cfrontcomp_standby_refrig_not_ok_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_c1_vc_front10hz_v_cfrontcomp_standby_refrig_not_ok_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_c1_vc_front10hz_v_cfrontcomp_standby_refrig_not_ok_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_c1_vc_front10hz_v_cfrontradiator_fan_power_on_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_c1_vc_front10hz_v_cfrontradiator_fan_power_on_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_c1_vc_front10hz_v_cfrontradiator_fan_power_on_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_c1_vc_front10hz_v_cfrontcomp_limit_temp_discharge_sim_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_c1_vc_front10hz_v_cfrontcomp_limit_temp_discharge_sim_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_c1_vc_front10hz_v_cfrontcomp_limit_temp_discharge_sim_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_c1_vc_front10hz_v_cfrontradiator_fan_phase_current_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_c1_vc_front10hz_v_cfrontradiator_fan_phase_current_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_c1_vc_front10hz_v_cfrontradiator_fan_phase_current_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_c1_vc_front10hz_v_cfrontcomp_ramp_rate_up_max_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_c1_vc_front10hz_v_cfrontcomp_ramp_rate_up_max_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_c1_vc_front10hz_v_cfrontcomp_ramp_rate_up_max_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_c1_vc_front10hz_v_cfrontpump_battery_out_voltage_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_c1_vc_front10hz_v_cfrontpump_battery_out_voltage_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_c1_vc_front10hz_v_cfrontpump_battery_out_voltage_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id2_c1_vc_front10hz_v_cfrontfive_way_valve_angle_travel_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_c1_vc_front10hz_v_cfrontfive_way_valve_angle_travel_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_c1_vc_front10hz_v_cfrontfive_way_valve_angle_travel_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_c1_vc_front10hz_v_cfrontrefrigerant_valves_closed_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_c1_vc_front10hz_v_cfrontrefrigerant_valves_closed_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_c1_vc_front10hz_v_cfrontrefrigerant_valves_closed_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_c1_vc_front10hz_v_cfrontpump_bat_spi_error_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_c1_vc_front10hz_v_cfrontpump_bat_spi_error_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_c1_vc_front10hz_v_cfrontpump_bat_spi_error_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_c1_vc_front10hz_v_cfrontpump_pt_spi_error_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_c1_vc_front10hz_v_cfrontpump_pt_spi_error_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_c1_vc_front10hz_v_cfrontpump_pt_spi_error_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_c1_vc_front10hz_v_cfrontthml_fan_spi_error_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_c1_vc_front10hz_v_cfrontthml_fan_spi_error_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_c1_vc_front10hz_v_cfrontthml_fan_spi_error_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_c1_vc_front10hz_v_cfrontpump_powertrain_out_voltage_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_c1_vc_front10hz_v_cfrontpump_powertrain_out_voltage_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_c1_vc_front10hz_v_cfrontpump_powertrain_out_voltage_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id2_c1_vc_front10hz_v_cfronttemp_discharge_simulated_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_c1_vc_front10hz_v_cfronttemp_discharge_simulated_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_c1_vc_front10hz_v_cfronttemp_discharge_simulated_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_c1_vc_front10hz_v_cfrontfive_way_valve_i_sense_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_c1_vc_front10hz_v_cfrontfive_way_valve_i_sense_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_c1_vc_front10hz_v_cfrontfive_way_valve_i_sense_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_c1_vc_front10hz_v_cfrontpump_battery_initd_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_c1_vc_front10hz_v_cfrontpump_battery_initd_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_c1_vc_front10hz_v_cfrontpump_battery_initd_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_c1_vc_front10hz_v_cfrontpump_powertrain_initd_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_c1_vc_front10hz_v_cfrontpump_powertrain_initd_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_c1_vc_front10hz_v_cfrontpump_powertrain_initd_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_c1_vc_front10hz_v_cfrontpump_battery_enabled_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_c1_vc_front10hz_v_cfrontpump_battery_enabled_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_c1_vc_front10hz_v_cfrontpump_battery_enabled_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_c1_vc_front10hz_v_cfrontpump_powertrain_enabled_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_c1_vc_front10hz_v_cfrontpump_powertrain_enabled_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_c1_vc_front10hz_v_cfrontpump_powertrain_enabled_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_c1_vc_front10hz_v_cfrontpump_battery_power_on_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_c1_vc_front10hz_v_cfrontpump_battery_power_on_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_c1_vc_front10hz_v_cfrontpump_battery_power_on_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_c1_vc_front10hz_v_cfrontis_only_suct_temp_not_ready_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_c1_vc_front10hz_v_cfrontis_only_suct_temp_not_ready_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_c1_vc_front10hz_v_cfrontis_only_suct_temp_not_ready_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_c1_vc_front10hz_v_cfrontpump_powertrain_power_on_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_c1_vc_front10hz_v_cfrontpump_powertrain_power_on_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_c1_vc_front10hz_v_cfrontpump_powertrain_power_on_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_c1_vc_front10hz_v_cfrontusing_simulated_disch_temp_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_c1_vc_front10hz_v_cfrontusing_simulated_disch_temp_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_c1_vc_front10hz_v_cfrontusing_simulated_disch_temp_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_c1_vc_front10hz_v_cfrontpumps_wake_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_c1_vc_front10hz_v_cfrontpumps_wake_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_c1_vc_front10hz_v_cfrontpumps_wake_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_c1_vc_front10hz_v_cfrontusing_simulated_amb_temp_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_c1_vc_front10hz_v_cfrontusing_simulated_amb_temp_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_c1_vc_front10hz_v_cfrontusing_simulated_amb_temp_is_in_range(uint8_t value);

/**
 * Pack message ID2E1VCFRONT_status.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int model3_can_id2_e1_vcfront_status_pack(
    uint8_t *dst_p,
    const struct model3_can_id2_e1_vcfront_status_t *src_p,
    size_t size);

/**
 * Unpack message ID2E1VCFRONT_status.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int model3_can_id2_e1_vcfront_status_unpack(
    struct model3_can_id2_e1_vcfront_status_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_e1_vcfront_status_vcfront_status_index_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_e1_vcfront_status_vcfront_status_index_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_e1_vcfront_status_vcfront_status_index_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_e1_vcfront_status_vcfront_5_va_rail_stable_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_e1_vcfront_status_vcfront_5_va_rail_stable_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_e1_vcfront_status_vcfront_5_va_rail_stable_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_e1_vcfront_status_vcfront_frunk_latch_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_e1_vcfront_status_vcfront_frunk_latch_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_e1_vcfront_status_vcfront_frunk_latch_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_e1_vcfront_status_vcfront_i_booster_wake_line_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_e1_vcfront_status_vcfront_i_booster_wake_line_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_e1_vcfront_status_vcfront_i_booster_wake_line_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id2_e1_vcfront_status_vcfront_temp_comp_target_voltage_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_e1_vcfront_status_vcfront_temp_comp_target_voltage_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_e1_vcfront_status_vcfront_temp_comp_target_voltage_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_e1_vcfront_status_vcfront_5_vb_rail_stable_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_e1_vcfront_status_vcfront_5_vb_rail_stable_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_e1_vcfront_status_vcfront_5_vb_rail_stable_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_e1_vcfront_status_vcfront_epas_wake_line_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_e1_vcfront_status_vcfront_epas_wake_line_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_e1_vcfront_status_vcfront_epas_wake_line_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_e1_vcfront_status_vcfront_12_va_rail_stable_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_e1_vcfront_status_vcfront_12_va_rail_stable_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_e1_vcfront_status_vcfront_12_va_rail_stable_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_e1_vcfront_status_vcfront_i_booster_state_dbg_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_e1_vcfront_status_vcfront_i_booster_state_dbg_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_e1_vcfront_status_vcfront_i_booster_state_dbg_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_e1_vcfront_status_vcfront_12_vb_rail_stable_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_e1_vcfront_status_vcfront_12_vb_rail_stable_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_e1_vcfront_status_vcfront_12_vb_rail_stable_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_e1_vcfront_status_vcfront_rail_a_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_e1_vcfront_status_vcfront_rail_a_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_e1_vcfront_status_vcfront_rail_a_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_e1_vcfront_status_vcfront_homelink_v2_response0_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_e1_vcfront_status_vcfront_homelink_v2_response0_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_e1_vcfront_status_vcfront_homelink_v2_response0_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_e1_vcfront_status_vcfront_max_evap_heat_rejection_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_e1_vcfront_status_vcfront_max_evap_heat_rejection_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_e1_vcfront_status_vcfront_max_evap_heat_rejection_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_e1_vcfront_status_vcfront_rail_b_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_e1_vcfront_status_vcfront_rail_b_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_e1_vcfront_status_vcfront_rail_b_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_e1_vcfront_status_vcfront_vehicle_status_dbg_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_e1_vcfront_status_vcfront_vehicle_status_dbg_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_e1_vcfront_status_vcfront_vehicle_status_dbg_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_e1_vcfront_status_vcfront_wiper_speed_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_e1_vcfront_status_vcfront_wiper_speed_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_e1_vcfront_status_vcfront_wiper_speed_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_e1_vcfront_status_vcfront_charge_pump_voltage_stable_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_e1_vcfront_status_vcfront_charge_pump_voltage_stable_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_e1_vcfront_status_vcfront_charge_pump_voltage_stable_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_e1_vcfront_status_vcfront_pe_reset_line_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_e1_vcfront_status_vcfront_pe_reset_line_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_e1_vcfront_status_vcfront_pe_reset_line_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_e1_vcfront_status_vcfront_hsd_init_complete_u13_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_e1_vcfront_status_vcfront_hsd_init_complete_u13_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_e1_vcfront_status_vcfront_hsd_init_complete_u13_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_e1_vcfront_status_vcfront_hsd_init_complete_u16_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_e1_vcfront_status_vcfront_hsd_init_complete_u16_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_e1_vcfront_status_vcfront_hsd_init_complete_u16_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_e1_vcfront_status_vcfront_wiper_position_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_e1_vcfront_status_vcfront_wiper_position_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_e1_vcfront_status_vcfront_wiper_position_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_e1_vcfront_status_vcfront_battery_sm_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_e1_vcfront_status_vcfront_battery_sm_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_e1_vcfront_status_vcfront_battery_sm_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_e1_vcfront_status_vcfront_charge_needed_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_e1_vcfront_status_vcfront_charge_needed_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_e1_vcfront_status_vcfront_charge_needed_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_e1_vcfront_status_vcfront_pcs_mia_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_e1_vcfront_status_vcfront_pcs_mia_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_e1_vcfront_status_vcfront_pcs_mia_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_e1_vcfront_status_vcfront_ibs_fault_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_e1_vcfront_status_vcfront_ibs_fault_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_e1_vcfront_status_vcfront_ibs_fault_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_e1_vcfront_status_vcfront_12_v_overcharge_counter_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_e1_vcfront_status_vcfront_12_v_overcharge_counter_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_e1_vcfront_status_vcfront_12_v_overcharge_counter_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_e1_vcfront_status_vcfront_homelink_v2_response1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_e1_vcfront_status_vcfront_homelink_v2_response1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_e1_vcfront_status_vcfront_homelink_v2_response1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_e1_vcfront_status_vcfront_min_evap_heat_rejection_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_e1_vcfront_status_vcfront_min_evap_heat_rejection_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_e1_vcfront_status_vcfront_min_evap_heat_rejection_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id2_e1_vcfront_status_vcfront_time_spent_charging_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_e1_vcfront_status_vcfront_time_spent_charging_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_e1_vcfront_status_vcfront_time_spent_charging_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id2_e1_vcfront_status_vcfront_vbat_monitor_voltage_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_e1_vcfront_status_vcfront_vbat_monitor_voltage_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_e1_vcfront_status_vcfront_vbat_monitor_voltage_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_e1_vcfront_status_vcfront_wiper_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_e1_vcfront_status_vcfront_wiper_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_e1_vcfront_status_vcfront_wiper_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_e1_vcfront_status_vcfront_crash_detected_type_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_e1_vcfront_status_vcfront_crash_detected_type_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_e1_vcfront_status_vcfront_crash_detected_type_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_e1_vcfront_status_vcfront_voltage_drop_counter_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_e1_vcfront_status_vcfront_voltage_drop_counter_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_e1_vcfront_status_vcfront_voltage_drop_counter_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_e1_vcfront_status_vcfront_crash_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_e1_vcfront_status_vcfront_crash_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_e1_vcfront_status_vcfront_crash_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_e1_vcfront_status_vcfront_crash_unlock_override_set_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_e1_vcfront_status_vcfront_crash_unlock_override_set_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_e1_vcfront_status_vcfront_crash_unlock_override_set_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_e1_vcfront_status_vcfront_freeze_evap_i_term_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_e1_vcfront_status_vcfront_freeze_evap_i_term_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_e1_vcfront_status_vcfront_freeze_evap_i_term_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_e1_vcfront_status_vcfront_homelink_v2_response2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_e1_vcfront_status_vcfront_homelink_v2_response2_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_e1_vcfront_status_vcfront_homelink_v2_response2_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_e1_vcfront_status_vcfront_voltage_floor_reached_counter_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_e1_vcfront_status_vcfront_voltage_floor_reached_counter_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_e1_vcfront_status_vcfront_voltage_floor_reached_counter_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_e1_vcfront_status_vcfront_air_compressor_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_e1_vcfront_status_vcfront_air_compressor_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_e1_vcfront_status_vcfront_air_compressor_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_e1_vcfront_status_vcfront_is_evap_operation_allowed_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_e1_vcfront_status_vcfront_is_evap_operation_allowed_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_e1_vcfront_status_vcfront_is_evap_operation_allowed_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_e1_vcfront_status_vcfront_chiller_demand_active_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_e1_vcfront_status_vcfront_chiller_demand_active_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_e1_vcfront_status_vcfront_chiller_demand_active_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id2_e1_vcfront_status_vcfront_time_spent_discharging_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_e1_vcfront_status_vcfront_time_spent_discharging_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_e1_vcfront_status_vcfront_time_spent_discharging_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_e1_vcfront_status_vcfront_comp_perf_recovery_limited_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_e1_vcfront_status_vcfront_comp_perf_recovery_limited_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_e1_vcfront_status_vcfront_comp_perf_recovery_limited_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id2_e1_vcfront_status_vcfront_as8510_voltage_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_e1_vcfront_status_vcfront_as8510_voltage_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_e1_vcfront_status_vcfront_as8510_voltage_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id2_e1_vcfront_status_vcfront_headlight_left_v_position_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_e1_vcfront_status_vcfront_headlight_left_v_position_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_e1_vcfront_status_vcfront_headlight_left_v_position_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_e1_vcfront_status_vcfront_voltage_profile_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_e1_vcfront_status_vcfront_voltage_profile_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_e1_vcfront_status_vcfront_voltage_profile_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_e1_vcfront_status_vcfront_has_low_refrigerant_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_e1_vcfront_status_vcfront_has_low_refrigerant_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_e1_vcfront_status_vcfront_has_low_refrigerant_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_e1_vcfront_status_vcfront_reverse_battery_fault_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_e1_vcfront_status_vcfront_reverse_battery_fault_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_e1_vcfront_status_vcfront_reverse_battery_fault_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_e1_vcfront_status_vcfront_homelink_v2_response3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_e1_vcfront_status_vcfront_homelink_v2_response3_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_e1_vcfront_status_vcfront_homelink_v2_response3_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_e1_vcfront_status_vcfront_pressure_refrig_suction_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_e1_vcfront_status_vcfront_pressure_refrig_suction_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_e1_vcfront_status_vcfront_pressure_refrig_suction_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id2_e1_vcfront_status_vcfront_headlight_right_v_position_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_e1_vcfront_status_vcfront_headlight_right_v_position_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_e1_vcfront_status_vcfront_headlight_right_v_position_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_e1_vcfront_status_vcfront_homelink_v2_response4_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_e1_vcfront_status_vcfront_homelink_v2_response4_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_e1_vcfront_status_vcfront_homelink_v2_response4_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_e1_vcfront_status_vcfront_pressure_refrig_discharge_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_e1_vcfront_status_vcfront_pressure_refrig_discharge_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_e1_vcfront_status_vcfront_pressure_refrig_discharge_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_e1_vcfront_status_vcfront_time_spent_sleeping_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_e1_vcfront_status_vcfront_time_spent_sleeping_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_e1_vcfront_status_vcfront_time_spent_sleeping_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id2_e1_vcfront_status_vcfront_vbat_prot_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_e1_vcfront_status_vcfront_vbat_prot_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_e1_vcfront_status_vcfront_vbat_prot_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_e1_vcfront_status_vcfront_frunk_interior_rel_switch_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_e1_vcfront_status_vcfront_frunk_interior_rel_switch_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_e1_vcfront_status_vcfront_frunk_interior_rel_switch_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_e1_vcfront_status_vcfront_homelink_comm_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_e1_vcfront_status_vcfront_homelink_comm_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_e1_vcfront_status_vcfront_homelink_comm_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t model3_can_id2_e1_vcfront_status_vcfront_sleep_current_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_e1_vcfront_status_vcfront_sleep_current_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_e1_vcfront_status_vcfront_sleep_current_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id2_e1_vcfront_status_vcfront_wiper_cycles_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_e1_vcfront_status_vcfront_wiper_cycles_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_e1_vcfront_status_vcfront_wiper_cycles_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_e1_vcfront_status_vcfront_any_closure_open_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_e1_vcfront_status_vcfront_any_closure_open_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_e1_vcfront_status_vcfront_any_closure_open_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_e1_vcfront_status_vcfront_any_door_open_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_e1_vcfront_status_vcfront_any_door_open_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_e1_vcfront_status_vcfront_any_door_open_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_e1_vcfront_status_vcfront_horn_on_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_e1_vcfront_status_vcfront_horn_on_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_e1_vcfront_status_vcfront_horn_on_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_e1_vcfront_status_vcfront_wiper_position_deg_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_e1_vcfront_status_vcfront_wiper_position_deg_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_e1_vcfront_status_vcfront_wiper_position_deg_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_e1_vcfront_status_vcfront_headlamp_left_fan_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_e1_vcfront_status_vcfront_headlamp_left_fan_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_e1_vcfront_status_vcfront_headlamp_left_fan_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_e1_vcfront_status_vcfront_headlamp_right_fan_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_e1_vcfront_status_vcfront_headlamp_right_fan_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_e1_vcfront_status_vcfront_headlamp_right_fan_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_e1_vcfront_status_vcfront_frunk_access_post_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_e1_vcfront_status_vcfront_frunk_access_post_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_e1_vcfront_status_vcfront_frunk_access_post_is_in_range(uint8_t value);

/**
 * Pack message ID381VCFRONT_logging1Hz.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int model3_can_id381_vcfront_logging1_hz_pack(
    uint8_t *dst_p,
    const struct model3_can_id381_vcfront_logging1_hz_t *src_p,
    size_t size);

/**
 * Unpack message ID381VCFRONT_logging1Hz.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int model3_can_id381_vcfront_logging1_hz_unpack(
    struct model3_can_id381_vcfront_logging1_hz_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id381_vcfront_logging1_hz_vcfront_logging1_hz_index_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id381_vcfront_logging1_hz_vcfront_logging1_hz_index_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id381_vcfront_logging1_hz_vcfront_logging1_hz_index_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id381_vcfront_logging1_hz_vcfront_calibrated_position_hcml_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id381_vcfront_logging1_hz_vcfront_calibrated_position_hcml_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id381_vcfront_logging1_hz_vcfront_calibrated_position_hcml_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id381_vcfront_logging1_hz_vcfront_chiller_exv_range_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id381_vcfront_logging1_hz_vcfront_chiller_exv_range_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id381_vcfront_logging1_hz_vcfront_chiller_exv_range_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id381_vcfront_logging1_hz_vcfront_est_pressure_liq_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id381_vcfront_logging1_hz_vcfront_est_pressure_liq_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id381_vcfront_logging1_hz_vcfront_est_pressure_liq_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id381_vcfront_logging1_hz_vcfront_five_way_valve_recal_reason_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id381_vcfront_logging1_hz_vcfront_five_way_valve_recal_reason_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id381_vcfront_logging1_hz_vcfront_five_way_valve_recal_reason_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id381_vcfront_logging1_hz_vcfront_homelink_region_code_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id381_vcfront_logging1_hz_vcfront_homelink_region_code_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id381_vcfront_logging1_hz_vcfront_homelink_region_code_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t model3_can_id381_vcfront_logging1_hz_vcfront_subcool_actual_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id381_vcfront_logging1_hz_vcfront_subcool_actual_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id381_vcfront_logging1_hz_vcfront_subcool_actual_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id381_vcfront_logging1_hz_vcfront_cc_qdot_fd_frwrd_target_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id381_vcfront_logging1_hz_vcfront_cc_qdot_fd_frwrd_target_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id381_vcfront_logging1_hz_vcfront_cc_qdot_fd_frwrd_target_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t model3_can_id381_vcfront_logging1_hz_vcfront_hcml_low_beam_spot_temp_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id381_vcfront_logging1_hz_vcfront_hcml_low_beam_spot_temp_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id381_vcfront_logging1_hz_vcfront_hcml_low_beam_spot_temp_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t model3_can_id381_vcfront_logging1_hz_vcfront_hcmr_low_beam_spot_temp_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id381_vcfront_logging1_hz_vcfront_hcmr_low_beam_spot_temp_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id381_vcfront_logging1_hz_vcfront_hcmr_low_beam_spot_temp_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id381_vcfront_logging1_hz_vcfront_condenser_pressure_limit_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id381_vcfront_logging1_hz_vcfront_condenser_pressure_limit_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id381_vcfront_logging1_hz_vcfront_condenser_pressure_limit_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id381_vcfront_logging1_hz_vcfront_five_way_valve_count_range_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id381_vcfront_logging1_hz_vcfront_five_way_valve_count_range_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id381_vcfront_logging1_hz_vcfront_five_way_valve_count_range_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id381_vcfront_logging1_hz_vcfront_mode_transition_id_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id381_vcfront_logging1_hz_vcfront_mode_transition_id_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id381_vcfront_logging1_hz_vcfront_mode_transition_id_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id381_vcfront_logging1_hz_vcfront_est_pressure_suct_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id381_vcfront_logging1_hz_vcfront_est_pressure_suct_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id381_vcfront_logging1_hz_vcfront_est_pressure_suct_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id381_vcfront_logging1_hz_vcfront_hp_subcool_target_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id381_vcfront_logging1_hz_vcfront_hp_subcool_target_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id381_vcfront_logging1_hz_vcfront_hp_subcool_target_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id381_vcfront_logging1_hz_vcfront_evap_exv_range_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id381_vcfront_logging1_hz_vcfront_evap_exv_range_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id381_vcfront_logging1_hz_vcfront_evap_exv_range_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id381_vcfront_logging1_hz_vcfront_mode_desired_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id381_vcfront_logging1_hz_vcfront_mode_desired_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id381_vcfront_logging1_hz_vcfront_mode_desired_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id381_vcfront_logging1_hz_vcfront_calibrated_position_hcmr_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id381_vcfront_logging1_hz_vcfront_calibrated_position_hcmr_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id381_vcfront_logging1_hz_vcfront_calibrated_position_hcmr_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t model3_can_id381_vcfront_logging1_hz_vcfront_cc_qdot_fdbk_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id381_vcfront_logging1_hz_vcfront_cc_qdot_fdbk_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id381_vcfront_logging1_hz_vcfront_cc_qdot_fdbk_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t model3_can_id381_vcfront_logging1_hz_vcfront_cmp_discharge_superheat_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id381_vcfront_logging1_hz_vcfront_cmp_discharge_superheat_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id381_vcfront_logging1_hz_vcfront_cmp_discharge_superheat_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t model3_can_id381_vcfront_logging1_hz_vcfront_hcml_high_beam_temp_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id381_vcfront_logging1_hz_vcfront_hcml_high_beam_temp_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id381_vcfront_logging1_hz_vcfront_hcml_high_beam_temp_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t model3_can_id381_vcfront_logging1_hz_vcfront_hcmr_high_beam_temp_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id381_vcfront_logging1_hz_vcfront_hcmr_high_beam_temp_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id381_vcfront_logging1_hz_vcfront_hcmr_high_beam_temp_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id381_vcfront_logging1_hz_vcfront_fan_demand_condenser_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id381_vcfront_logging1_hz_vcfront_fan_demand_condenser_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id381_vcfront_logging1_hz_vcfront_fan_demand_condenser_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id381_vcfront_logging1_hz_vcfront_target_pt_active_cool_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id381_vcfront_logging1_hz_vcfront_target_pt_active_cool_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id381_vcfront_logging1_hz_vcfront_target_pt_active_cool_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id381_vcfront_logging1_hz_vcfront_est_pressure_disch_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id381_vcfront_logging1_hz_vcfront_est_pressure_disch_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id381_vcfront_logging1_hz_vcfront_est_pressure_disch_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id381_vcfront_logging1_hz_vcfront_five_way_valve_angle_drift_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id381_vcfront_logging1_hz_vcfront_five_way_valve_angle_drift_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id381_vcfront_logging1_hz_vcfront_five_way_valve_angle_drift_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id381_vcfront_logging1_hz_vcfront_hp_cop_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id381_vcfront_logging1_hz_vcfront_hp_cop_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id381_vcfront_logging1_hz_vcfront_hp_cop_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id381_vcfront_logging1_hz_vcfront_recirc_exv_range_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id381_vcfront_logging1_hz_vcfront_recirc_exv_range_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id381_vcfront_logging1_hz_vcfront_recirc_exv_range_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id381_vcfront_logging1_hz_vcfront_cc_qdot_actual_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id381_vcfront_logging1_hz_vcfront_cc_qdot_actual_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id381_vcfront_logging1_hz_vcfront_cc_qdot_actual_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t model3_can_id381_vcfront_logging1_hz_vcfront_hcml_turn_temp_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id381_vcfront_logging1_hz_vcfront_hcml_turn_temp_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id381_vcfront_logging1_hz_vcfront_hcml_turn_temp_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t model3_can_id381_vcfront_logging1_hz_vcfront_hcmr_turn_temp_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id381_vcfront_logging1_hz_vcfront_hcmr_turn_temp_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id381_vcfront_logging1_hz_vcfront_hcmr_turn_temp_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id381_vcfront_logging1_hz_vcfront_current_position_hcml_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id381_vcfront_logging1_hz_vcfront_current_position_hcml_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id381_vcfront_logging1_hz_vcfront_current_position_hcml_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id381_vcfront_logging1_hz_vcfront_fan_demand_radiator_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id381_vcfront_logging1_hz_vcfront_fan_demand_radiator_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id381_vcfront_logging1_hz_vcfront_fan_demand_radiator_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id381_vcfront_logging1_hz_vcfront_target_pt_passive_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id381_vcfront_logging1_hz_vcfront_target_pt_passive_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id381_vcfront_logging1_hz_vcfront_target_pt_passive_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t model3_can_id381_vcfront_logging1_hz_vcfront_est_temp_liq_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id381_vcfront_logging1_hz_vcfront_est_temp_liq_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id381_vcfront_logging1_hz_vcfront_est_temp_liq_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id381_vcfront_logging1_hz_vcfront_hp_batt_stag_target_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id381_vcfront_logging1_hz_vcfront_hp_batt_stag_target_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id381_vcfront_logging1_hz_vcfront_hp_batt_stag_target_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id381_vcfront_logging1_hz_vcfront_lcc_exv_range_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id381_vcfront_logging1_hz_vcfront_lcc_exv_range_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id381_vcfront_logging1_hz_vcfront_lcc_exv_range_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t model3_can_id381_vcfront_logging1_hz_vcfront_hcml_blade_temp_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id381_vcfront_logging1_hz_vcfront_hcml_blade_temp_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id381_vcfront_logging1_hz_vcfront_hcml_blade_temp_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t model3_can_id381_vcfront_logging1_hz_vcfront_hcmr_blade_temp_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id381_vcfront_logging1_hz_vcfront_hcmr_blade_temp_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id381_vcfront_logging1_hz_vcfront_hcmr_blade_temp_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id381_vcfront_logging1_hz_vcfront_evap_fd_frwrd_target_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id381_vcfront_logging1_hz_vcfront_evap_fd_frwrd_target_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id381_vcfront_logging1_hz_vcfront_evap_fd_frwrd_target_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id381_vcfront_logging1_hz_vcfront_five_way_valve_recal_count_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id381_vcfront_logging1_hz_vcfront_five_way_valve_recal_count_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id381_vcfront_logging1_hz_vcfront_five_way_valve_recal_count_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id381_vcfront_logging1_hz_vcfront_target_bat_active_cool_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id381_vcfront_logging1_hz_vcfront_target_bat_active_cool_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id381_vcfront_logging1_hz_vcfront_target_bat_active_cool_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id381_vcfront_logging1_hz_vcfront_temp_refrig_suction_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id381_vcfront_logging1_hz_vcfront_temp_refrig_suction_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id381_vcfront_logging1_hz_vcfront_temp_refrig_suction_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t model3_can_id381_vcfront_logging1_hz_vcfront_est_temp_suct_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id381_vcfront_logging1_hz_vcfront_est_temp_suct_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id381_vcfront_logging1_hz_vcfront_est_temp_suct_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id381_vcfront_logging1_hz_vcfront_comp_energy_during_drive_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id381_vcfront_logging1_hz_vcfront_comp_energy_during_drive_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id381_vcfront_logging1_hz_vcfront_comp_energy_during_drive_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id381_vcfront_logging1_hz_vcfront_current_position_hcmr_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id381_vcfront_logging1_hz_vcfront_current_position_hcmr_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id381_vcfront_logging1_hz_vcfront_current_position_hcmr_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t model3_can_id381_vcfront_logging1_hz_vcfront_est_temp_disch_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id381_vcfront_logging1_hz_vcfront_est_temp_disch_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id381_vcfront_logging1_hz_vcfront_est_temp_disch_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t model3_can_id381_vcfront_logging1_hz_vcfront_hcml_diffuse_temp_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id381_vcfront_logging1_hz_vcfront_hcml_diffuse_temp_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id381_vcfront_logging1_hz_vcfront_hcml_diffuse_temp_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t model3_can_id381_vcfront_logging1_hz_vcfront_hcmr_diffuse_temp_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id381_vcfront_logging1_hz_vcfront_hcmr_diffuse_temp_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id381_vcfront_logging1_hz_vcfront_hcmr_diffuse_temp_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id381_vcfront_logging1_hz_vcfront_cc_left_exv_range_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id381_vcfront_logging1_hz_vcfront_cc_left_exv_range_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id381_vcfront_logging1_hz_vcfront_cc_left_exv_range_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t model3_can_id381_vcfront_logging1_hz_vcfront_evap_fdbk_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id381_vcfront_logging1_hz_vcfront_evap_fdbk_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id381_vcfront_logging1_hz_vcfront_evap_fdbk_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id381_vcfront_logging1_hz_vcfront_pump_battery_fet_temp_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id381_vcfront_logging1_hz_vcfront_pump_battery_fet_temp_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id381_vcfront_logging1_hz_vcfront_pump_battery_fet_temp_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id381_vcfront_logging1_hz_vcfront_target_bat_passive_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id381_vcfront_logging1_hz_vcfront_target_bat_passive_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id381_vcfront_logging1_hz_vcfront_target_bat_passive_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id381_vcfront_logging1_hz_vcfront_cabin_heat_energy_during_drive_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id381_vcfront_logging1_hz_vcfront_cabin_heat_energy_during_drive_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id381_vcfront_logging1_hz_vcfront_cabin_heat_energy_during_drive_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id381_vcfront_logging1_hz_vcfront_est_compressor_rpm_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id381_vcfront_logging1_hz_vcfront_est_compressor_rpm_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id381_vcfront_logging1_hz_vcfront_est_compressor_rpm_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id381_vcfront_logging1_hz_vcfront_di_qdot_a_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id381_vcfront_logging1_hz_vcfront_di_qdot_a_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id381_vcfront_logging1_hz_vcfront_di_qdot_a_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id381_vcfront_logging1_hz_vcfront_five_way_valve_windup_est_l_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id381_vcfront_logging1_hz_vcfront_five_way_valve_windup_est_l_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id381_vcfront_logging1_hz_vcfront_five_way_valve_windup_est_l_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id381_vcfront_logging1_hz_vcfront_low_side_lift_energy_drive_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id381_vcfront_logging1_hz_vcfront_low_side_lift_energy_drive_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id381_vcfront_logging1_hz_vcfront_low_side_lift_energy_drive_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id381_vcfront_logging1_hz_vcfront_pump_powertrain_fet_temp_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id381_vcfront_logging1_hz_vcfront_pump_powertrain_fet_temp_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id381_vcfront_logging1_hz_vcfront_pump_powertrain_fet_temp_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id381_vcfront_logging1_hz_vcfront_target_bat_active_heat_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id381_vcfront_logging1_hz_vcfront_target_bat_active_heat_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id381_vcfront_logging1_hz_vcfront_target_bat_active_heat_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id381_vcfront_logging1_hz_vcfront_cc_right_exv_range_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id381_vcfront_logging1_hz_vcfront_cc_right_exv_range_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id381_vcfront_logging1_hz_vcfront_cc_right_exv_range_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id381_vcfront_logging1_hz_vcfront_five_way_valve_windup_est_r_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id381_vcfront_logging1_hz_vcfront_five_way_valve_windup_est_r_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id381_vcfront_logging1_hz_vcfront_five_way_valve_windup_est_r_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id381_vcfront_logging1_hz_vcfront_est_q_lift_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id381_vcfront_logging1_hz_vcfront_est_q_lift_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id381_vcfront_logging1_hz_vcfront_est_q_lift_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id381_vcfront_logging1_hz_vcfront_coolant_level_voltage_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id381_vcfront_logging1_hz_vcfront_coolant_level_voltage_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id381_vcfront_logging1_hz_vcfront_coolant_level_voltage_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id381_vcfront_logging1_hz_vcfront_evap_qdot_actual_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id381_vcfront_logging1_hz_vcfront_evap_qdot_actual_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id381_vcfront_logging1_hz_vcfront_evap_qdot_actual_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id381_vcfront_logging1_hz_vcfront_low_side_watts_lift_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id381_vcfront_logging1_hz_vcfront_low_side_watts_lift_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id381_vcfront_logging1_hz_vcfront_low_side_watts_lift_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id381_vcfront_logging1_hz_vcfront_five_way_valve_rad_bypass_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id381_vcfront_logging1_hz_vcfront_five_way_valve_rad_bypass_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id381_vcfront_logging1_hz_vcfront_five_way_valve_rad_bypass_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id381_vcfront_logging1_hz_vcfront_radiator_fan_fet_temp_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id381_vcfront_logging1_hz_vcfront_radiator_fan_fet_temp_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id381_vcfront_logging1_hz_vcfront_radiator_fan_fet_temp_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id381_vcfront_logging1_hz_vcfront_cycle_model_converged_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id381_vcfront_logging1_hz_vcfront_cycle_model_converged_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id381_vcfront_logging1_hz_vcfront_cycle_model_converged_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id381_vcfront_logging1_hz_vcfront_passive_cooling_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id381_vcfront_logging1_hz_vcfront_passive_cooling_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id381_vcfront_logging1_hz_vcfront_passive_cooling_state_is_in_range(uint8_t value);

/**
 * Pack message ID318SystemTimeUTC.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int model3_can_id318_system_time_utc_pack(
    uint8_t *dst_p,
    const struct model3_can_id318_system_time_utc_t *src_p,
    size_t size);

/**
 * Unpack message ID318SystemTimeUTC.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int model3_can_id318_system_time_utc_unpack(
    struct model3_can_id318_system_time_utc_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id318_system_time_utc_ut_cyear318_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id318_system_time_utc_ut_cyear318_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id318_system_time_utc_ut_cyear318_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id318_system_time_utc_ut_cmonth318_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id318_system_time_utc_ut_cmonth318_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id318_system_time_utc_ut_cmonth318_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id318_system_time_utc_ut_cseconds318_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id318_system_time_utc_ut_cseconds318_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id318_system_time_utc_ut_cseconds318_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id318_system_time_utc_ut_chour318_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id318_system_time_utc_ut_chour318_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id318_system_time_utc_ut_chour318_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id318_system_time_utc_ut_cday318_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id318_system_time_utc_ut_cday318_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id318_system_time_utc_ut_cday318_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id318_system_time_utc_ut_cminutes318_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id318_system_time_utc_ut_cminutes318_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id318_system_time_utc_ut_cminutes318_is_in_range(uint8_t value);

/**
 * Pack message ID528UnixTime.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int model3_can_id528_unix_time_pack(
    uint8_t *dst_p,
    const struct model3_can_id528_unix_time_t *src_p,
    size_t size);

/**
 * Unpack message ID528UnixTime.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int model3_can_id528_unix_time_unpack(
    struct model3_can_id528_unix_time_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t model3_can_id528_unix_time_unix_time_seconds528_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id528_unix_time_unix_time_seconds528_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id528_unix_time_unix_time_seconds528_is_in_range(uint32_t value);

/**
 * Pack message ID229GearLever.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int model3_can_id229_gear_lever_pack(
    uint8_t *dst_p,
    const struct model3_can_id229_gear_lever_t *src_p,
    size_t size);

/**
 * Unpack message ID229GearLever.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int model3_can_id229_gear_lever_unpack(
    struct model3_can_id229_gear_lever_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id229_gear_lever_gear_lever_position229_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id229_gear_lever_gear_lever_position229_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id229_gear_lever_gear_lever_position229_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id229_gear_lever_gear_lever_button229_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id229_gear_lever_gear_lever_button229_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id229_gear_lever_gear_lever_button229_is_in_range(uint8_t value);

/**
 * Pack message ID249LeftStalk.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int model3_can_id249_left_stalk_pack(
    uint8_t *dst_p,
    const struct model3_can_id249_left_stalk_t *src_p,
    size_t size);

/**
 * Unpack message ID249LeftStalk.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int model3_can_id249_left_stalk_unpack(
    struct model3_can_id249_left_stalk_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id249_left_stalk_left_stalk_f_rpos249_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id249_left_stalk_left_stalk_f_rpos249_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id249_left_stalk_left_stalk_f_rpos249_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id249_left_stalk_left_stalk_button249_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id249_left_stalk_left_stalk_button249_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id249_left_stalk_left_stalk_button249_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id249_left_stalk_left_stalk_u_dpos249_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id249_left_stalk_left_stalk_u_dpos249_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id249_left_stalk_left_stalk_u_dpos249_is_in_range(uint8_t value);

/**
 * Pack message ID628UDSPCStoMCU.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int model3_can_id628_udspc_sto_mcu_pack(
    uint8_t *dst_p,
    const struct model3_can_id628_udspc_sto_mcu_t *src_p,
    size_t size);

/**
 * Unpack message ID628UDSPCStoMCU.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int model3_can_id628_udspc_sto_mcu_unpack(
    struct model3_can_id628_udspc_sto_mcu_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Pack message ID628UDSMCUtoPCS.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int model3_can_id628_udsmc_uto_pcs_pack(
    uint8_t *dst_p,
    const struct model3_can_id628_udsmc_uto_pcs_t *src_p,
    size_t size);

/**
 * Unpack message ID628UDSMCUtoPCS.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int model3_can_id628_udsmc_uto_pcs_unpack(
    struct model3_can_id628_udsmc_uto_pcs_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Pack message ID186FrontDriveTorqueRPM.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int model3_can_id186_front_drive_torque_rpm_pack(
    uint8_t *dst_p,
    const struct model3_can_id186_front_drive_torque_rpm_t *src_p,
    size_t size);

/**
 * Unpack message ID186FrontDriveTorqueRPM.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int model3_can_id186_front_drive_torque_rpm_unpack(
    struct model3_can_id186_front_drive_torque_rpm_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t model3_can_id186_front_drive_torque_rpm_front_torque_request186_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id186_front_drive_torque_rpm_front_torque_request186_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id186_front_drive_torque_rpm_front_torque_request186_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t model3_can_id186_front_drive_torque_rpm_front_torque_actual186_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id186_front_drive_torque_rpm_front_torque_actual186_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id186_front_drive_torque_rpm_front_torque_actual186_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t model3_can_id186_front_drive_torque_rpm_front_axle_rpm186_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id186_front_drive_torque_rpm_front_axle_rpm186_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id186_front_drive_torque_rpm_front_axle_rpm186_is_in_range(int16_t value);

/**
 * Pack message ID396FrontOilPump.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int model3_can_id396_front_oil_pump_pack(
    uint8_t *dst_p,
    const struct model3_can_id396_front_oil_pump_t *src_p,
    size_t size);

/**
 * Unpack message ID396FrontOilPump.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int model3_can_id396_front_oil_pump_unpack(
    struct model3_can_id396_front_oil_pump_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id396_front_oil_pump_front_oil_pump_state396_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id396_front_oil_pump_front_oil_pump_state396_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id396_front_oil_pump_front_oil_pump_state396_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id396_front_oil_pump_front_oil_pump_oil_temp_est_confident39_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id396_front_oil_pump_front_oil_pump_oil_temp_est_confident39_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id396_front_oil_pump_front_oil_pump_oil_temp_est_confident39_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id396_front_oil_pump_front_oil_pump_lead_angle396_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id396_front_oil_pump_front_oil_pump_lead_angle396_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id396_front_oil_pump_front_oil_pump_lead_angle396_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id396_front_oil_pump_front_oil_pump_duty_cycle396_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id396_front_oil_pump_front_oil_pump_duty_cycle396_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id396_front_oil_pump_front_oil_pump_duty_cycle396_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id396_front_oil_pump_front_oil_flow_actual396_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id396_front_oil_pump_front_oil_flow_actual396_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id396_front_oil_pump_front_oil_flow_actual396_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id396_front_oil_pump_front_oil_pump_fluid_temp396_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id396_front_oil_pump_front_oil_pump_fluid_temp396_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id396_front_oil_pump_front_oil_pump_fluid_temp396_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id396_front_oil_pump_front_oil_pump_oil_temp_est396_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id396_front_oil_pump_front_oil_pump_oil_temp_est396_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id396_front_oil_pump_front_oil_pump_oil_temp_est396_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id396_front_oil_pump_front_oil_pump_pressure_estimate396_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id396_front_oil_pump_front_oil_pump_pressure_estimate396_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id396_front_oil_pump_front_oil_pump_pressure_estimate396_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id396_front_oil_pump_front_oil_pump_pressure_expected396_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id396_front_oil_pump_front_oil_pump_pressure_expected396_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id396_front_oil_pump_front_oil_pump_pressure_expected396_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id396_front_oil_pump_front_oil_pump_phase_current396_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id396_front_oil_pump_front_oil_pump_phase_current396_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id396_front_oil_pump_front_oil_pump_phase_current396_is_in_range(uint8_t value);

/**
 * Pack message ID395RearOilPump.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int model3_can_id395_rear_oil_pump_pack(
    uint8_t *dst_p,
    const struct model3_can_id395_rear_oil_pump_t *src_p,
    size_t size);

/**
 * Unpack message ID395RearOilPump.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int model3_can_id395_rear_oil_pump_unpack(
    struct model3_can_id395_rear_oil_pump_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id395_rear_oil_pump_rear_oil_pump_state395_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id395_rear_oil_pump_rear_oil_pump_state395_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id395_rear_oil_pump_rear_oil_pump_state395_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id395_rear_oil_pump_rear_oil_pump_oil_temp_est_confident395_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id395_rear_oil_pump_rear_oil_pump_oil_temp_est_confident395_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id395_rear_oil_pump_rear_oil_pump_oil_temp_est_confident395_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id395_rear_oil_pump_rear_oil_pump_lead_angle395_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id395_rear_oil_pump_rear_oil_pump_lead_angle395_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id395_rear_oil_pump_rear_oil_pump_lead_angle395_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id395_rear_oil_pump_rear_oil_pump_duty_cycle395_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id395_rear_oil_pump_rear_oil_pump_duty_cycle395_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id395_rear_oil_pump_rear_oil_pump_duty_cycle395_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id395_rear_oil_pump_rear_oil_flow_actual395_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id395_rear_oil_pump_rear_oil_flow_actual395_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id395_rear_oil_pump_rear_oil_flow_actual395_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id395_rear_oil_pump_rear_oil_pump_fluid_temp395_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id395_rear_oil_pump_rear_oil_pump_fluid_temp395_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id395_rear_oil_pump_rear_oil_pump_fluid_temp395_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id395_rear_oil_pump_rear_oil_pump_oil_temp_est395_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id395_rear_oil_pump_rear_oil_pump_oil_temp_est395_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id395_rear_oil_pump_rear_oil_pump_oil_temp_est395_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id395_rear_oil_pump_rear_oil_pump_pressure_estimate395_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id395_rear_oil_pump_rear_oil_pump_pressure_estimate395_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id395_rear_oil_pump_rear_oil_pump_pressure_estimate395_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id395_rear_oil_pump_rear_oil_pump_pressure_expected395_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id395_rear_oil_pump_rear_oil_pump_pressure_expected395_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id395_rear_oil_pump_rear_oil_pump_pressure_expected395_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id395_rear_oil_pump_rear_oil_pump_phase_current395_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id395_rear_oil_pump_rear_oil_pump_phase_current395_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id395_rear_oil_pump_rear_oil_pump_phase_current395_is_in_range(uint8_t value);

/**
 * Pack message ID1D8RearTorque.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int model3_can_id1_d8_rear_torque_pack(
    uint8_t *dst_p,
    const struct model3_can_id1_d8_rear_torque_t *src_p,
    size_t size);

/**
 * Unpack message ID1D8RearTorque.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int model3_can_id1_d8_rear_torque_unpack(
    struct model3_can_id1_d8_rear_torque_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id1_d8_rear_torque_torque_flags1_d8_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id1_d8_rear_torque_torque_flags1_d8_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id1_d8_rear_torque_torque_flags1_d8_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t model3_can_id1_d8_rear_torque_rear_torque_request1_d8_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id1_d8_rear_torque_rear_torque_request1_d8_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id1_d8_rear_torque_rear_torque_request1_d8_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t model3_can_id1_d8_rear_torque_rear_torque1_d8_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id1_d8_rear_torque_rear_torque1_d8_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id1_d8_rear_torque_rear_torque1_d8_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id1_d8_rear_torque_counter1_d8_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id1_d8_rear_torque_counter1_d8_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id1_d8_rear_torque_counter1_d8_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id1_d8_rear_torque_checksum1_d8_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id1_d8_rear_torque_checksum1_d8_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id1_d8_rear_torque_checksum1_d8_is_in_range(uint8_t value);

/**
 * Pack message ID155WheelAngles.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int model3_can_id155_wheel_angles_pack(
    uint8_t *dst_p,
    const struct model3_can_id155_wheel_angles_t *src_p,
    size_t size);

/**
 * Unpack message ID155WheelAngles.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int model3_can_id155_wheel_angles_unpack(
    struct model3_can_id155_wheel_angles_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id155_wheel_angles_wheel_angle_tics_fl155_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id155_wheel_angles_wheel_angle_tics_fl155_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id155_wheel_angles_wheel_angle_tics_fl155_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id155_wheel_angles_wheel_angle_tics_fr155_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id155_wheel_angles_wheel_angle_tics_fr155_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id155_wheel_angles_wheel_angle_tics_fr155_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id155_wheel_angles_wheel_angle_tics_rl155_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id155_wheel_angles_wheel_angle_tics_rl155_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id155_wheel_angles_wheel_angle_tics_rl155_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id155_wheel_angles_wheel_angle_tics_rr155_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id155_wheel_angles_wheel_angle_tics_rr155_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id155_wheel_angles_wheel_angle_tics_rr155_is_in_range(uint8_t value);

/**
 * Pack message ID175WheelSpeed.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int model3_can_id175_wheel_speed_pack(
    uint8_t *dst_p,
    const struct model3_can_id175_wheel_speed_t *src_p,
    size_t size);

/**
 * Unpack message ID175WheelSpeed.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int model3_can_id175_wheel_speed_unpack(
    struct model3_can_id175_wheel_speed_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id175_wheel_speed_wheel_speed_fl175_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id175_wheel_speed_wheel_speed_fl175_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id175_wheel_speed_wheel_speed_fl175_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id175_wheel_speed_wheel_speed_fr175_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id175_wheel_speed_wheel_speed_fr175_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id175_wheel_speed_wheel_speed_fr175_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id175_wheel_speed_wheel_speed_rl175_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id175_wheel_speed_wheel_speed_rl175_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id175_wheel_speed_wheel_speed_rl175_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id175_wheel_speed_wheel_speed_rr175_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id175_wheel_speed_wheel_speed_rr175_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id175_wheel_speed_wheel_speed_rr175_is_in_range(uint16_t value);

/**
 * Pack message ID1D4FrontTorqueOld.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int model3_can_id1_d4_front_torque_old_pack(
    uint8_t *dst_p,
    const struct model3_can_id1_d4_front_torque_old_t *src_p,
    size_t size);

/**
 * Unpack message ID1D4FrontTorqueOld.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int model3_can_id1_d4_front_torque_old_unpack(
    struct model3_can_id1_d4_front_torque_old_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t model3_can_id1_d4_front_torque_old_raw_torque_front1_d4_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id1_d4_front_torque_old_raw_torque_front1_d4_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id1_d4_front_torque_old_raw_torque_front1_d4_is_in_range(int16_t value);

/**
 * Pack message ID1D5FrontTorque.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int model3_can_id1_d5_front_torque_pack(
    uint8_t *dst_p,
    const struct model3_can_id1_d5_front_torque_t *src_p,
    size_t size);

/**
 * Unpack message ID1D5FrontTorque.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int model3_can_id1_d5_front_torque_unpack(
    struct model3_can_id1_d5_front_torque_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t model3_can_id1_d5_front_torque_front_torque_request1_d5_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id1_d5_front_torque_front_torque_request1_d5_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id1_d5_front_torque_front_torque_request1_d5_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t model3_can_id1_d5_front_torque_front_torque1_d5_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id1_d5_front_torque_front_torque1_d5_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id1_d5_front_torque_front_torque1_d5_is_in_range(int16_t value);

/**
 * Pack message ID2E5FrontInverterPower.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int model3_can_id2_e5_front_inverter_power_pack(
    uint8_t *dst_p,
    const struct model3_can_id2_e5_front_inverter_power_t *src_p,
    size_t size);

/**
 * Unpack message ID2E5FrontInverterPower.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int model3_can_id2_e5_front_inverter_power_unpack(
    struct model3_can_id2_e5_front_inverter_power_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t model3_can_id2_e5_front_inverter_power_front_power2_e5_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_e5_front_inverter_power_front_power2_e5_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_e5_front_inverter_power_front_power2_e5_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_e5_front_inverter_power_front_heat_power_optimal2_e5_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_e5_front_inverter_power_front_heat_power_optimal2_e5_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_e5_front_inverter_power_front_heat_power_optimal2_e5_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_e5_front_inverter_power_front_heat_power_max2_e5_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_e5_front_inverter_power_front_heat_power_max2_e5_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_e5_front_inverter_power_front_heat_power_max2_e5_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_e5_front_inverter_power_front_heat_power2_e5_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_e5_front_inverter_power_front_heat_power2_e5_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_e5_front_inverter_power_front_heat_power2_e5_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id2_e5_front_inverter_power_front_excess_heat_cmd_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_e5_front_inverter_power_front_excess_heat_cmd_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_e5_front_inverter_power_front_excess_heat_cmd_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id2_e5_front_inverter_power_front_power_limit2_e5_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_e5_front_inverter_power_front_power_limit2_e5_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_e5_front_inverter_power_front_power_limit2_e5_is_in_range(uint16_t value);

/**
 * Pack message ID3C2VCLeftswitches.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int model3_can_id3_c2_vc_leftswitches_pack(
    uint8_t *dst_p,
    const struct model3_can_id3_c2_vc_leftswitches_t *src_p,
    size_t size);

/**
 * Unpack message ID3C2VCLeftswitches.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int model3_can_id3_c2_vc_leftswitches_unpack(
    struct model3_can_id3_c2_vc_leftswitches_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id3_c2_vc_leftswitches_vc_lswitch_status_index3_c2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id3_c2_vc_leftswitches_vc_lswitch_status_index3_c2_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id3_c2_vc_leftswitches_vc_lswitch_status_index3_c2_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id3_c2_vc_leftswitches_vc_lhorn_switch_pressed3_c2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id3_c2_vc_leftswitches_vc_lhorn_switch_pressed3_c2_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id3_c2_vc_leftswitches_vc_lhorn_switch_pressed3_c2_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id3_c2_vc_leftswitches_vc_lhazard_button_pressed3_c2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id3_c2_vc_leftswitches_vc_lhazard_button_pressed3_c2_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id3_c2_vc_leftswitches_vc_lhazard_button_pressed3_c2_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id3_c2_vc_leftswitches_vc_lswc_left_tilt_right3_c2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id3_c2_vc_leftswitches_vc_lswc_left_tilt_right3_c2_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id3_c2_vc_leftswitches_vc_lswc_left_tilt_right3_c2_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id3_c2_vc_leftswitches_vc_ldriver_present3_c2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id3_c2_vc_leftswitches_vc_ldriver_present3_c2_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id3_c2_vc_leftswitches_vc_ldriver_present3_c2_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id3_c2_vc_leftswitches_vc_lright_mirror_tilt3_c2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id3_c2_vc_leftswitches_vc_lright_mirror_tilt3_c2_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id3_c2_vc_leftswitches_vc_lright_mirror_tilt3_c2_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id3_c2_vc_leftswitches_vc_lswc_left_pressed3_c2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id3_c2_vc_leftswitches_vc_lswc_left_pressed3_c2_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id3_c2_vc_leftswitches_vc_lswc_left_pressed3_c2_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id3_c2_vc_leftswitches_vc_lfront_seat_track_back3_c2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id3_c2_vc_leftswitches_vc_lfront_seat_track_back3_c2_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id3_c2_vc_leftswitches_vc_lfront_seat_track_back3_c2_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id3_c2_vc_leftswitches_vc_lswc_right_tilt_left3_c2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id3_c2_vc_leftswitches_vc_lswc_right_tilt_left3_c2_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id3_c2_vc_leftswitches_vc_lswc_right_tilt_left3_c2_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id3_c2_vc_leftswitches_vc_lfront_seat_track_forward3_c2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id3_c2_vc_leftswitches_vc_lfront_seat_track_forward3_c2_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id3_c2_vc_leftswitches_vc_lfront_seat_track_forward3_c2_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id3_c2_vc_leftswitches_vc_lswc_right_tilt_right3_c2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id3_c2_vc_leftswitches_vc_lswc_right_tilt_right3_c2_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id3_c2_vc_leftswitches_vc_lswc_right_tilt_right3_c2_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id3_c2_vc_leftswitches_vc_lfront_seat_tilt_down3_c2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id3_c2_vc_leftswitches_vc_lfront_seat_tilt_down3_c2_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id3_c2_vc_leftswitches_vc_lfront_seat_tilt_down3_c2_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id3_c2_vc_leftswitches_vc_lswc_right_pressed3_c2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id3_c2_vc_leftswitches_vc_lswc_right_pressed3_c2_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id3_c2_vc_leftswitches_vc_lswc_right_pressed3_c2_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id3_c2_vc_leftswitches_vc_lfront_seat_tilt_up3_c2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id3_c2_vc_leftswitches_vc_lfront_seat_tilt_up3_c2_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id3_c2_vc_leftswitches_vc_lfront_seat_tilt_up3_c2_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id3_c2_vc_leftswitches_vc_lswc_left_tilt_left3_c2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id3_c2_vc_leftswitches_vc_lswc_left_tilt_left3_c2_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id3_c2_vc_leftswitches_vc_lswc_left_tilt_left3_c2_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id3_c2_vc_leftswitches_vc_lfront_seat_lift_down3_c2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id3_c2_vc_leftswitches_vc_lfront_seat_lift_down3_c2_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id3_c2_vc_leftswitches_vc_lfront_seat_lift_down3_c2_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t model3_can_id3_c2_vc_leftswitches_vc_lswc_left_scroll_ticks3_c2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id3_c2_vc_leftswitches_vc_lswc_left_scroll_ticks3_c2_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id3_c2_vc_leftswitches_vc_lswc_left_scroll_ticks3_c2_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id3_c2_vc_leftswitches_vc_lfront_seat_lift_up3_c2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id3_c2_vc_leftswitches_vc_lfront_seat_lift_up3_c2_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id3_c2_vc_leftswitches_vc_lfront_seat_lift_up3_c2_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id3_c2_vc_leftswitches_vc_lfront_seat_backrest_back3_c2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id3_c2_vc_leftswitches_vc_lfront_seat_backrest_back3_c2_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id3_c2_vc_leftswitches_vc_lfront_seat_backrest_back3_c2_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id3_c2_vc_leftswitches_vc_lfront_seat_backrest_forward3_c2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id3_c2_vc_leftswitches_vc_lfront_seat_backrest_forward3_c2_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id3_c2_vc_leftswitches_vc_lfront_seat_backrest_forward3_c2_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id3_c2_vc_leftswitches_vc_lfront_seat_lumbar_down3_c2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id3_c2_vc_leftswitches_vc_lfront_seat_lumbar_down3_c2_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id3_c2_vc_leftswitches_vc_lfront_seat_lumbar_down3_c2_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t model3_can_id3_c2_vc_leftswitches_vc_lswc_right_scroll_ticks3_c2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id3_c2_vc_leftswitches_vc_lswc_right_scroll_ticks3_c2_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id3_c2_vc_leftswitches_vc_lswc_right_scroll_ticks3_c2_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id3_c2_vc_leftswitches_vc_lfront_seat_lumbar_up3_c2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id3_c2_vc_leftswitches_vc_lfront_seat_lumbar_up3_c2_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id3_c2_vc_leftswitches_vc_lfront_seat_lumbar_up3_c2_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id3_c2_vc_leftswitches_vc_lfront_seat_lumbar_in3_c2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id3_c2_vc_leftswitches_vc_lfront_seat_lumbar_in3_c2_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id3_c2_vc_leftswitches_vc_lfront_seat_lumbar_in3_c2_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id3_c2_vc_leftswitches_vc_lfront_seat_lumbar_out3_c2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id3_c2_vc_leftswitches_vc_lfront_seat_lumbar_out3_c2_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id3_c2_vc_leftswitches_vc_lfront_seat_lumbar_out3_c2_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id3_c2_vc_leftswitches_vc_lbtn_window_sw_pack_up_lf3_c2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id3_c2_vc_leftswitches_vc_lbtn_window_sw_pack_up_lf3_c2_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id3_c2_vc_leftswitches_vc_lbtn_window_sw_pack_up_lf3_c2_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id3_c2_vc_leftswitches_vc_lbtn_window_up_lr3_c2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id3_c2_vc_leftswitches_vc_lbtn_window_up_lr3_c2_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id3_c2_vc_leftswitches_vc_lbtn_window_up_lr3_c2_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id3_c2_vc_leftswitches_vc_lbtn_window_sw_pack_auto_up_lf3_c2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id3_c2_vc_leftswitches_vc_lbtn_window_sw_pack_auto_up_lf3_c2_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id3_c2_vc_leftswitches_vc_lbtn_window_sw_pack_auto_up_lf3_c2_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id3_c2_vc_leftswitches_vc_lbtn_window_auto_up_lr3_c2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id3_c2_vc_leftswitches_vc_lbtn_window_auto_up_lr3_c2_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id3_c2_vc_leftswitches_vc_lbtn_window_auto_up_lr3_c2_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id3_c2_vc_leftswitches_vc_lbtn_window_sw_pack_down_lf3_c2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id3_c2_vc_leftswitches_vc_lbtn_window_sw_pack_down_lf3_c2_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id3_c2_vc_leftswitches_vc_lbtn_window_sw_pack_down_lf3_c2_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id3_c2_vc_leftswitches_vc_lbtn_window_down_lr3_c2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id3_c2_vc_leftswitches_vc_lbtn_window_down_lr3_c2_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id3_c2_vc_leftswitches_vc_lbtn_window_down_lr3_c2_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id3_c2_vc_leftswitches_vc_lbtn_window_sw_pack_auto_down_lf3_c2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id3_c2_vc_leftswitches_vc_lbtn_window_sw_pack_auto_down_lf3_c2_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id3_c2_vc_leftswitches_vc_lbtn_window_sw_pack_auto_down_lf3_c2_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id3_c2_vc_leftswitches_vc_lbtn_window_auto_down_lr3_c2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id3_c2_vc_leftswitches_vc_lbtn_window_auto_down_lr3_c2_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id3_c2_vc_leftswitches_vc_lbtn_window_auto_down_lr3_c2_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id3_c2_vc_leftswitches_vc_lbtn_window_sw_pack_up_lr3_c2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id3_c2_vc_leftswitches_vc_lbtn_window_sw_pack_up_lr3_c2_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id3_c2_vc_leftswitches_vc_lbtn_window_sw_pack_up_lr3_c2_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id3_c2_vc_leftswitches_vc_lbtn_window_sw_pack_auto_up_lr3_c2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id3_c2_vc_leftswitches_vc_lbtn_window_sw_pack_auto_up_lr3_c2_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id3_c2_vc_leftswitches_vc_lbtn_window_sw_pack_auto_up_lr3_c2_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id3_c2_vc_leftswitches_vc_lbtn_window_sw_pack_down_lr3_c2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id3_c2_vc_leftswitches_vc_lbtn_window_sw_pack_down_lr3_c2_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id3_c2_vc_leftswitches_vc_lbtn_window_sw_pack_down_lr3_c2_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id3_c2_vc_leftswitches_vc_lbtn_window_sw_pack_auto_down_lr3_c2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id3_c2_vc_leftswitches_vc_lbtn_window_sw_pack_auto_down_lr3_c2_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id3_c2_vc_leftswitches_vc_lbtn_window_sw_pack_auto_down_lr3_c2_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id3_c2_vc_leftswitches_vc_lbtn_window_sw_pack_up_rf3_c2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id3_c2_vc_leftswitches_vc_lbtn_window_sw_pack_up_rf3_c2_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id3_c2_vc_leftswitches_vc_lbtn_window_sw_pack_up_rf3_c2_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id3_c2_vc_leftswitches_vc_lbtn_window_sw_pack_auto_up_rf3_c2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id3_c2_vc_leftswitches_vc_lbtn_window_sw_pack_auto_up_rf3_c2_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id3_c2_vc_leftswitches_vc_lbtn_window_sw_pack_auto_up_rf3_c2_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id3_c2_vc_leftswitches_vc_lbtn_window_sw_pack_down_rf3_c2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id3_c2_vc_leftswitches_vc_lbtn_window_sw_pack_down_rf3_c2_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id3_c2_vc_leftswitches_vc_lbtn_window_sw_pack_down_rf3_c2_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id3_c2_vc_leftswitches_vc_lbtn_window_sw_pack_auto_down_rf3_c2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id3_c2_vc_leftswitches_vc_lbtn_window_sw_pack_auto_down_rf3_c2_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id3_c2_vc_leftswitches_vc_lbtn_window_sw_pack_auto_down_rf3_c2_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id3_c2_vc_leftswitches_vc_lbtn_window_sw_pack_up_rr3_c2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id3_c2_vc_leftswitches_vc_lbtn_window_sw_pack_up_rr3_c2_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id3_c2_vc_leftswitches_vc_lbtn_window_sw_pack_up_rr3_c2_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id3_c2_vc_leftswitches_vc_lbtn_window_sw_pack_auto_up_rr3_c2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id3_c2_vc_leftswitches_vc_lbtn_window_sw_pack_auto_up_rr3_c2_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id3_c2_vc_leftswitches_vc_lbtn_window_sw_pack_auto_up_rr3_c2_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id3_c2_vc_leftswitches_vc_lbtn_window_sw_pack_down_rr3_c2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id3_c2_vc_leftswitches_vc_lbtn_window_sw_pack_down_rr3_c2_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id3_c2_vc_leftswitches_vc_lbtn_window_sw_pack_down_rr3_c2_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id3_c2_vc_leftswitches_vc_lbtn_window_sw_pack_auto_down_rr3_c2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id3_c2_vc_leftswitches_vc_lbtn_window_sw_pack_auto_down_rr3_c2_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id3_c2_vc_leftswitches_vc_lbtn_window_sw_pack_auto_down_rr3_c2_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id3_c2_vc_leftswitches_vc_lfront_buckle_switch3_c2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id3_c2_vc_leftswitches_vc_lfront_buckle_switch3_c2_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id3_c2_vc_leftswitches_vc_lfront_buckle_switch3_c2_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id3_c2_vc_leftswitches_vc_lfront_occupancy_switch3_c2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id3_c2_vc_leftswitches_vc_lfront_occupancy_switch3_c2_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id3_c2_vc_leftswitches_vc_lfront_occupancy_switch3_c2_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id3_c2_vc_leftswitches_vc_lrear_left_buckle_switch3_c2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id3_c2_vc_leftswitches_vc_lrear_left_buckle_switch3_c2_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id3_c2_vc_leftswitches_vc_lrear_left_buckle_switch3_c2_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id3_c2_vc_leftswitches_vc_lrear_center_occupancy_switch3_c2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id3_c2_vc_leftswitches_vc_lrear_center_occupancy_switch3_c2_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id3_c2_vc_leftswitches_vc_lrear_center_occupancy_switch3_c2_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id3_c2_vc_leftswitches_vc_lrear_left_occupancy_switch3_c2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id3_c2_vc_leftswitches_vc_lrear_left_occupancy_switch3_c2_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id3_c2_vc_leftswitches_vc_lrear_left_occupancy_switch3_c2_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id3_c2_vc_leftswitches_vc_lrear_right_occupancy_switch3_c2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id3_c2_vc_leftswitches_vc_lrear_right_occupancy_switch3_c2_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id3_c2_vc_leftswitches_vc_lrear_right_occupancy_switch3_c2_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id3_c2_vc_leftswitches_vc_lbrake_pressed3_c2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id3_c2_vc_leftswitches_vc_lbrake_pressed3_c2_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id3_c2_vc_leftswitches_vc_lbrake_pressed3_c2_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id3_c2_vc_leftswitches_vc_lrear_hvac_button_pressed3_c2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id3_c2_vc_leftswitches_vc_lrear_hvac_button_pressed3_c2_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id3_c2_vc_leftswitches_vc_lrear_hvac_button_pressed3_c2_is_in_range(uint8_t value);

/**
 * Pack message ID336MaxPowerRating.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int model3_can_id336_max_power_rating_pack(
    uint8_t *dst_p,
    const struct model3_can_id336_max_power_rating_t *src_p,
    size_t size);

/**
 * Unpack message ID336MaxPowerRating.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int model3_can_id336_max_power_rating_unpack(
    struct model3_can_id336_max_power_rating_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id336_max_power_rating_drive_power_rating336_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id336_max_power_rating_drive_power_rating336_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id336_max_power_rating_drive_power_rating336_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id336_max_power_rating_drive_regen_rating336_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id336_max_power_rating_drive_regen_rating336_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id336_max_power_rating_drive_regen_rating336_is_in_range(uint8_t value);

/**
 * Pack message ID293UI_chassisControl.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int model3_can_id293_ui_chassis_control_pack(
    uint8_t *dst_p,
    const struct model3_can_id293_ui_chassis_control_t *src_p,
    size_t size);

/**
 * Unpack message ID293UI_chassisControl.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int model3_can_id293_ui_chassis_control_unpack(
    struct model3_can_id293_ui_chassis_control_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id293_ui_chassis_control_ui_steering_tune_request_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id293_ui_chassis_control_ui_steering_tune_request_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id293_ui_chassis_control_ui_steering_tune_request_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id293_ui_chassis_control_ui_traction_control_mode_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id293_ui_chassis_control_ui_traction_control_mode_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id293_ui_chassis_control_ui_traction_control_mode_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id293_ui_chassis_control_ui_park_brake_request_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id293_ui_chassis_control_ui_park_brake_request_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id293_ui_chassis_control_ui_park_brake_request_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id293_ui_chassis_control_ui_narrow_garages_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id293_ui_chassis_control_ui_narrow_garages_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id293_ui_chassis_control_ui_narrow_garages_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id293_ui_chassis_control_ui_winch_mode_request_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id293_ui_chassis_control_ui_winch_mode_request_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id293_ui_chassis_control_ui_winch_mode_request_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id293_ui_chassis_control_ui_zero_speed_confirmed_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id293_ui_chassis_control_ui_zero_speed_confirmed_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id293_ui_chassis_control_ui_zero_speed_confirmed_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id293_ui_chassis_control_ui_trailer_mode_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id293_ui_chassis_control_ui_trailer_mode_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id293_ui_chassis_control_ui_trailer_mode_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id293_ui_chassis_control_ui_distance_units_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id293_ui_chassis_control_ui_distance_units_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id293_ui_chassis_control_ui_distance_units_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id293_ui_chassis_control_ui_das_debug_enable_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id293_ui_chassis_control_ui_das_debug_enable_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id293_ui_chassis_control_ui_das_debug_enable_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id293_ui_chassis_control_ui_acc_overtake_enable_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id293_ui_chassis_control_ui_acc_overtake_enable_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id293_ui_chassis_control_ui_acc_overtake_enable_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id293_ui_chassis_control_ui_aeb_enable_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id293_ui_chassis_control_ui_aeb_enable_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id293_ui_chassis_control_ui_aeb_enable_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id293_ui_chassis_control_ui_aes_enable_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id293_ui_chassis_control_ui_aes_enable_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id293_ui_chassis_control_ui_aes_enable_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id293_ui_chassis_control_ui_ahlb_enable_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id293_ui_chassis_control_ui_ahlb_enable_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id293_ui_chassis_control_ui_ahlb_enable_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id293_ui_chassis_control_ui_auto_lane_change_enable_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id293_ui_chassis_control_ui_auto_lane_change_enable_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id293_ui_chassis_control_ui_auto_lane_change_enable_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id293_ui_chassis_control_ui_reboot_autopilot_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id293_ui_chassis_control_ui_reboot_autopilot_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id293_ui_chassis_control_ui_reboot_autopilot_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id293_ui_chassis_control_ui_auto_park_request_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id293_ui_chassis_control_ui_auto_park_request_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id293_ui_chassis_control_ui_auto_park_request_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id293_ui_chassis_control_ui_bsd_enable_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id293_ui_chassis_control_ui_bsd_enable_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id293_ui_chassis_control_ui_bsd_enable_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id293_ui_chassis_control_ui_fcw_enable_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id293_ui_chassis_control_ui_fcw_enable_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id293_ui_chassis_control_ui_fcw_enable_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id293_ui_chassis_control_ui_fcw_sensitivity_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id293_ui_chassis_control_ui_fcw_sensitivity_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id293_ui_chassis_control_ui_fcw_sensitivity_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id293_ui_chassis_control_ui_lat_control_enable_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id293_ui_chassis_control_ui_lat_control_enable_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id293_ui_chassis_control_ui_lat_control_enable_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id293_ui_chassis_control_ui_ldw_enable_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id293_ui_chassis_control_ui_ldw_enable_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id293_ui_chassis_control_ui_ldw_enable_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id293_ui_chassis_control_ui_pedal_safety_enable_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id293_ui_chassis_control_ui_pedal_safety_enable_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id293_ui_chassis_control_ui_pedal_safety_enable_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id293_ui_chassis_control_ui_red_light_stop_sign_enable_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id293_ui_chassis_control_ui_red_light_stop_sign_enable_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id293_ui_chassis_control_ui_red_light_stop_sign_enable_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id293_ui_chassis_control_ui_self_park_tune_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id293_ui_chassis_control_ui_self_park_tune_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id293_ui_chassis_control_ui_self_park_tune_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id293_ui_chassis_control_ui_chassis_control_counter_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id293_ui_chassis_control_ui_chassis_control_counter_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id293_ui_chassis_control_ui_chassis_control_counter_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id293_ui_chassis_control_ui_chassis_control_checksum_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id293_ui_chassis_control_ui_chassis_control_checksum_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id293_ui_chassis_control_ui_chassis_control_checksum_is_in_range(uint8_t value);

/**
 * Pack message ID268SystemPower.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int model3_can_id268_system_power_pack(
    uint8_t *dst_p,
    const struct model3_can_id268_system_power_t *src_p,
    size_t size);

/**
 * Unpack message ID268SystemPower.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int model3_can_id268_system_power_unpack(
    struct model3_can_id268_system_power_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id268_system_power_system_heat_power_max268_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id268_system_power_system_heat_power_max268_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id268_system_power_system_heat_power_max268_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id268_system_power_system_heat_power268_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id268_system_power_system_heat_power268_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id268_system_power_system_heat_power268_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id268_system_power_system_drive_power_max268_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id268_system_power_system_drive_power_max268_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id268_system_power_system_drive_power_max268_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id268_system_power_di_primary_unit_silicon_type_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id268_system_power_di_primary_unit_silicon_type_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id268_system_power_di_primary_unit_silicon_type_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id268_system_power_system_regen_power_max268_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id268_system_power_system_regen_power_max268_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id268_system_power_system_regen_power_max268_is_in_range(uint8_t value);

/**
 * Pack message ID04FGPSLatLong.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int model3_can_id04_fgps_lat_long_pack(
    uint8_t *dst_p,
    const struct model3_can_id04_fgps_lat_long_t *src_p,
    size_t size);

/**
 * Unpack message ID04FGPSLatLong.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int model3_can_id04_fgps_lat_long_unpack(
    struct model3_can_id04_fgps_lat_long_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int32_t model3_can_id04_fgps_lat_long_gps_lattitude04_f_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id04_fgps_lat_long_gps_lattitude04_f_decode(int32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id04_fgps_lat_long_gps_lattitude04_f_is_in_range(int32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int32_t model3_can_id04_fgps_lat_long_gps_longitude04_f_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id04_fgps_lat_long_gps_longitude04_f_decode(int32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id04_fgps_lat_long_gps_longitude04_f_is_in_range(int32_t value);

/**
 * Pack message ID3D2TotalChargeDischarge.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int model3_can_id3_d2_total_charge_discharge_pack(
    uint8_t *dst_p,
    const struct model3_can_id3_d2_total_charge_discharge_t *src_p,
    size_t size);

/**
 * Unpack message ID3D2TotalChargeDischarge.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int model3_can_id3_d2_total_charge_discharge_unpack(
    struct model3_can_id3_d2_total_charge_discharge_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t model3_can_id3_d2_total_charge_discharge_total_discharge_k_wh3_d2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id3_d2_total_charge_discharge_total_discharge_k_wh3_d2_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id3_d2_total_charge_discharge_total_discharge_k_wh3_d2_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t model3_can_id3_d2_total_charge_discharge_total_charge_k_wh3_d2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id3_d2_total_charge_discharge_total_charge_k_wh3_d2_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id3_d2_total_charge_discharge_total_charge_k_wh3_d2_is_in_range(uint32_t value);

/**
 * Pack message ID3F2BMSCounters.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int model3_can_id3_f2_bms_counters_pack(
    uint8_t *dst_p,
    const struct model3_can_id3_f2_bms_counters_t *src_p,
    size_t size);

/**
 * Unpack message ID3F2BMSCounters.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int model3_can_id3_f2_bms_counters_unpack(
    struct model3_can_id3_f2_bms_counters_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id3_f2_bms_counters_bms_counters_index3_f2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id3_f2_bms_counters_bms_counters_index3_f2_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id3_f2_bms_counters_bms_counters_index3_f2_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t model3_can_id3_f2_bms_counters_bm_stotal_a_ccharge3_f2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id3_f2_bms_counters_bm_stotal_a_ccharge3_f2_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id3_f2_bms_counters_bm_stotal_a_ccharge3_f2_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t model3_can_id3_f2_bms_counters_bm_stotal_d_ccharge3_f2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id3_f2_bms_counters_bm_stotal_d_ccharge3_f2_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id3_f2_bms_counters_bm_stotal_d_ccharge3_f2_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t model3_can_id3_f2_bms_counters_bm_stotal_regen_charge3_f2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id3_f2_bms_counters_bm_stotal_regen_charge3_f2_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id3_f2_bms_counters_bm_stotal_regen_charge3_f2_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t model3_can_id3_f2_bms_counters_bm_stotal_drive_discharge3_f2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id3_f2_bms_counters_bm_stotal_drive_discharge3_f2_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id3_f2_bms_counters_bm_stotal_drive_discharge3_f2_is_in_range(uint32_t value);

/**
 * Pack message ID2D2BMSVAlimits.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int model3_can_id2_d2_bmsv_alimits_pack(
    uint8_t *dst_p,
    const struct model3_can_id2_d2_bmsv_alimits_t *src_p,
    size_t size);

/**
 * Unpack message ID2D2BMSVAlimits.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int model3_can_id2_d2_bmsv_alimits_unpack(
    struct model3_can_id2_d2_bmsv_alimits_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id2_d2_bmsv_alimits_min_voltage2_d2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_d2_bmsv_alimits_min_voltage2_d2_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_d2_bmsv_alimits_min_voltage2_d2_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id2_d2_bmsv_alimits_max_voltage2_d2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_d2_bmsv_alimits_max_voltage2_d2_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_d2_bmsv_alimits_max_voltage2_d2_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id2_d2_bmsv_alimits_max_charge_current2_d2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_d2_bmsv_alimits_max_charge_current2_d2_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_d2_bmsv_alimits_max_charge_current2_d2_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id2_d2_bmsv_alimits_max_discharge_current2_d2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id2_d2_bmsv_alimits_max_discharge_current2_d2_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id2_d2_bmsv_alimits_max_discharge_current2_d2_is_in_range(uint16_t value);

/**
 * Pack message ID541FastChargeMaxLimits.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int model3_can_id541_fast_charge_max_limits_pack(
    uint8_t *dst_p,
    const struct model3_can_id541_fast_charge_max_limits_t *src_p,
    size_t size);

/**
 * Unpack message ID541FastChargeMaxLimits.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int model3_can_id541_fast_charge_max_limits_unpack(
    struct model3_can_id541_fast_charge_max_limits_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id541_fast_charge_max_limits_fc_max_power_limit541_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id541_fast_charge_max_limits_fc_max_power_limit541_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id541_fast_charge_max_limits_fc_max_power_limit541_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id541_fast_charge_max_limits_fc_max_current_limit541_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id541_fast_charge_max_limits_fc_max_current_limit541_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id541_fast_charge_max_limits_fc_max_current_limit541_is_in_range(uint16_t value);

/**
 * Pack message ID244FastChargeLimits.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int model3_can_id244_fast_charge_limits_pack(
    uint8_t *dst_p,
    const struct model3_can_id244_fast_charge_limits_t *src_p,
    size_t size);

/**
 * Unpack message ID244FastChargeLimits.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int model3_can_id244_fast_charge_limits_unpack(
    struct model3_can_id244_fast_charge_limits_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id244_fast_charge_limits_fc_power_limit244_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id244_fast_charge_limits_fc_power_limit244_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id244_fast_charge_limits_fc_power_limit244_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id244_fast_charge_limits_fc_current_limit244_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id244_fast_charge_limits_fc_current_limit244_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id244_fast_charge_limits_fc_current_limit244_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id244_fast_charge_limits_fc_max_vlimit244_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id244_fast_charge_limits_fc_max_vlimit244_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id244_fast_charge_limits_fc_max_vlimit244_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id244_fast_charge_limits_fc_min_vlimit244_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id244_fast_charge_limits_fc_min_vlimit244_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id244_fast_charge_limits_fc_min_vlimit244_is_in_range(uint16_t value);

/**
 * Pack message ID214FastChargeVA.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int model3_can_id214_fast_charge_va_pack(
    uint8_t *dst_p,
    const struct model3_can_id214_fast_charge_va_t *src_p,
    size_t size);

/**
 * Unpack message ID214FastChargeVA.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int model3_can_id214_fast_charge_va_unpack(
    struct model3_can_id214_fast_charge_va_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id214_fast_charge_va_f_cprotocol_version214_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id214_fast_charge_va_f_cprotocol_version214_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id214_fast_charge_va_f_cprotocol_version214_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id214_fast_charge_va_f_cstatus_code214_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id214_fast_charge_va_f_cstatus_code214_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id214_fast_charge_va_f_cstatus_code214_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id214_fast_charge_va_f_ccurrent_limit_achieved214_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id214_fast_charge_va_f_ccurrent_limit_achieved214_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id214_fast_charge_va_f_ccurrent_limit_achieved214_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id214_fast_charge_va_f_cpower_limit_achieved214_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id214_fast_charge_va_f_cpower_limit_achieved214_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id214_fast_charge_va_f_cpower_limit_achieved214_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id214_fast_charge_va_f_cvoltage_limit_achieved214_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id214_fast_charge_va_f_cvoltage_limit_achieved214_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id214_fast_charge_va_f_cvoltage_limit_achieved214_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id214_fast_charge_va_f_cadapter_locked214_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id214_fast_charge_va_f_cadapter_locked214_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id214_fast_charge_va_f_cadapter_locked214_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id214_fast_charge_va_f_cmin_current_limit214_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id214_fast_charge_va_f_cmin_current_limit214_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id214_fast_charge_va_f_cmin_current_limit214_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id214_fast_charge_va_f_ctype214_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id214_fast_charge_va_f_ctype214_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id214_fast_charge_va_f_ctype214_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t model3_can_id214_fast_charge_va_fc_current214_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id214_fast_charge_va_fc_current214_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id214_fast_charge_va_fc_current214_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id214_fast_charge_va_f_cpost_id214_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id214_fast_charge_va_f_cpost_id214_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id214_fast_charge_va_f_cpost_id214_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id214_fast_charge_va_fc_voltage214_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id214_fast_charge_va_fc_voltage214_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id214_fast_charge_va_fc_voltage214_is_in_range(uint16_t value);

/**
 * Pack message ID215FCisolation.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int model3_can_id215_f_cisolation_pack(
    uint8_t *dst_p,
    const struct model3_can_id215_f_cisolation_t *src_p,
    size_t size);

/**
 * Unpack message ID215FCisolation.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int model3_can_id215_f_cisolation_unpack(
    struct model3_can_id215_f_cisolation_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id215_f_cisolation_fc_isolation215_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id215_f_cisolation_fc_isolation215_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id215_f_cisolation_fc_isolation215_is_in_range(uint8_t value);

/**
 * Pack message ID217FCinfo.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int model3_can_id217_f_cinfo_pack(
    uint8_t *dst_p,
    const struct model3_can_id217_f_cinfo_t *src_p,
    size_t size);

/**
 * Unpack message ID217FCinfo.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int model3_can_id217_f_cinfo_unpack(
    struct model3_can_id217_f_cinfo_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id217_f_cinfo_f_cinfo_mux217_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id217_f_cinfo_f_cinfo_mux217_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id217_f_cinfo_f_cinfo_mux217_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id217_f_cinfo_f_cclass217_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id217_f_cinfo_f_cclass217_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id217_f_cinfo_f_cclass217_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id217_f_cinfo_f_cbrand217_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id217_f_cinfo_f_cbrand217_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id217_f_cinfo_f_cbrand217_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id217_f_cinfo_f_ccooling_type217_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id217_f_cinfo_f_ccooling_type217_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id217_f_cinfo_f_ccooling_type217_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id217_f_cinfo_f_cui_stop_type217_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id217_f_cinfo_f_cui_stop_type217_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id217_f_cinfo_f_cui_stop_type217_is_in_range(uint8_t value);

/**
 * Pack message ID321VCFRONT_sensors.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int model3_can_id321_vcfront_sensors_pack(
    uint8_t *dst_p,
    const struct model3_can_id321_vcfront_sensors_t *src_p,
    size_t size);

/**
 * Unpack message ID321VCFRONT_sensors.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int model3_can_id321_vcfront_sensors_unpack(
    struct model3_can_id321_vcfront_sensors_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id321_vcfront_sensors_vcfront_temp_coolant_bat_inlet_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id321_vcfront_sensors_vcfront_temp_coolant_bat_inlet_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id321_vcfront_sensors_vcfront_temp_coolant_bat_inlet_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id321_vcfront_sensors_vcfront_temp_coolant_pt_inlet_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id321_vcfront_sensors_vcfront_temp_coolant_pt_inlet_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id321_vcfront_sensors_vcfront_temp_coolant_pt_inlet_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id321_vcfront_sensors_vcfront_coolant_level_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id321_vcfront_sensors_vcfront_coolant_level_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id321_vcfront_sensors_vcfront_coolant_level_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id321_vcfront_sensors_vcfront_brake_fluid_level_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id321_vcfront_sensors_vcfront_brake_fluid_level_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id321_vcfront_sensors_vcfront_brake_fluid_level_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id321_vcfront_sensors_vcfront_temp_ambient_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id321_vcfront_sensors_vcfront_temp_ambient_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id321_vcfront_sensors_vcfront_temp_ambient_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id321_vcfront_sensors_vcfront_washer_fluid_level_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id321_vcfront_sensors_vcfront_washer_fluid_level_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id321_vcfront_sensors_vcfront_washer_fluid_level_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id321_vcfront_sensors_vcfront_temp_ambient_filtered_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id321_vcfront_sensors_vcfront_temp_ambient_filtered_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id321_vcfront_sensors_vcfront_temp_ambient_filtered_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id321_vcfront_sensors_vcfront_batt_sensor_irrational_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id321_vcfront_sensors_vcfront_batt_sensor_irrational_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id321_vcfront_sensors_vcfront_batt_sensor_irrational_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id321_vcfront_sensors_vcfront_pt_sensor_irrational_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id321_vcfront_sensors_vcfront_pt_sensor_irrational_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id321_vcfront_sensors_vcfront_pt_sensor_irrational_is_in_range(uint8_t value);

/**
 * Pack message ID301VCFRONT_info.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int model3_can_id301_vcfront_info_pack(
    uint8_t *dst_p,
    const struct model3_can_id301_vcfront_info_t *src_p,
    size_t size);

/**
 * Unpack message ID301VCFRONT_info.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int model3_can_id301_vcfront_info_unpack(
    struct model3_can_id301_vcfront_info_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id301_vcfront_info_vcfront_info_index_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id301_vcfront_info_vcfront_info_index_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id301_vcfront_info_vcfront_info_index_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t model3_can_id301_vcfront_info_vcfront_info_app_crc_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id301_vcfront_info_vcfront_info_app_crc_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id301_vcfront_info_vcfront_info_app_crc_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint64_t model3_can_id301_vcfront_info_vcfront_info_app_git_hash_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id301_vcfront_info_vcfront_info_app_git_hash_decode(uint64_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id301_vcfront_info_vcfront_info_app_git_hash_is_in_range(uint64_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint64_t model3_can_id301_vcfront_info_vcfront_info_boot_git_hash_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id301_vcfront_info_vcfront_info_boot_git_hash_decode(uint64_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id301_vcfront_info_vcfront_info_boot_git_hash_is_in_range(uint64_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id301_vcfront_info_vcfront_info_boot_uds_proto_version_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id301_vcfront_info_vcfront_info_boot_uds_proto_version_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id301_vcfront_info_vcfront_info_boot_uds_proto_version_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id301_vcfront_info_vcfront_info_build_type_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id301_vcfront_info_vcfront_info_build_type_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id301_vcfront_info_vcfront_info_build_type_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id301_vcfront_info_vcfront_info_pcba_id_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id301_vcfront_info_vcfront_info_pcba_id_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id301_vcfront_info_vcfront_info_pcba_id_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id301_vcfront_info_vcfront_info_platform_type_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id301_vcfront_info_vcfront_info_platform_type_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id301_vcfront_info_vcfront_info_platform_type_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id301_vcfront_info_vcfront_info_assembly_id_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id301_vcfront_info_vcfront_info_assembly_id_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id301_vcfront_info_vcfront_info_assembly_id_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id301_vcfront_info_vcfront_info_build_config_id_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id301_vcfront_info_vcfront_info_build_config_id_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id301_vcfront_info_vcfront_info_build_config_id_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t model3_can_id301_vcfront_info_vcfront_info_boot_crc_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id301_vcfront_info_vcfront_info_boot_crc_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id301_vcfront_info_vcfront_info_boot_crc_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id301_vcfront_info_vcfront_info_usage_id_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id301_vcfront_info_vcfront_info_usage_id_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id301_vcfront_info_vcfront_info_usage_id_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t model3_can_id301_vcfront_info_vcfront_hcml_app_crc_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id301_vcfront_info_vcfront_hcml_app_crc_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id301_vcfront_info_vcfront_hcml_app_crc_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t model3_can_id301_vcfront_info_vcfront_hcmr_app_crc_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id301_vcfront_info_vcfront_hcmr_app_crc_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id301_vcfront_info_vcfront_hcmr_app_crc_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id301_vcfront_info_vcfront_info_hardware_id_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id301_vcfront_info_vcfront_info_hardware_id_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id301_vcfront_info_vcfront_info_hardware_id_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t model3_can_id301_vcfront_info_vcfront_info_subcomponent3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id301_vcfront_info_vcfront_info_subcomponent3_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id301_vcfront_info_vcfront_info_subcomponent3_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t model3_can_id301_vcfront_info_vcfront_info_subcomponent4_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id301_vcfront_info_vcfront_info_subcomponent4_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id301_vcfront_info_vcfront_info_subcomponent4_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t model3_can_id301_vcfront_info_vcfront_info_subcomponent5_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id301_vcfront_info_vcfront_info_subcomponent5_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id301_vcfront_info_vcfront_info_subcomponent5_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t model3_can_id301_vcfront_info_vcfront_info_subcomponent6_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id301_vcfront_info_vcfront_info_subcomponent6_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id301_vcfront_info_vcfront_info_subcomponent6_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id301_vcfront_info_vcfront_info_sub_usage_id_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id301_vcfront_info_vcfront_info_sub_usage_id_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id301_vcfront_info_vcfront_info_sub_usage_id_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id301_vcfront_info_vcfront_info_component_id_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id301_vcfront_info_vcfront_info_component_id_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id301_vcfront_info_vcfront_info_component_id_is_in_range(uint16_t value);

/**
 * Pack message ID201VCFRONT_loggingAndVitals10Hz.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int model3_can_id201_vcfront_logging_and_vitals10_hz_pack(
    uint8_t *dst_p,
    const struct model3_can_id201_vcfront_logging_and_vitals10_hz_t *src_p,
    size_t size);

/**
 * Unpack message ID201VCFRONT_loggingAndVitals10Hz.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int model3_can_id201_vcfront_logging_and_vitals10_hz_unpack(
    struct model3_can_id201_vcfront_logging_and_vitals10_hz_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id201_vcfront_logging_and_vitals10_hz_vcfront_logging_and_vitals10_hz_index_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id201_vcfront_logging_and_vitals10_hz_vcfront_logging_and_vitals10_hz_index_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id201_vcfront_logging_and_vitals10_hz_vcfront_logging_and_vitals10_hz_index_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id201_vcfront_logging_and_vitals10_hz_vcfront_exv_flow_chiller_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id201_vcfront_logging_and_vitals10_hz_vcfront_exv_flow_chiller_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id201_vcfront_logging_and_vitals10_hz_vcfront_exv_flow_chiller_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id201_vcfront_logging_and_vitals10_hz_vcfront_hp_high_side_hx_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id201_vcfront_logging_and_vitals10_hz_vcfront_hp_high_side_hx_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id201_vcfront_logging_and_vitals10_hz_vcfront_hp_high_side_hx_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id201_vcfront_logging_and_vitals10_hz_vcfront_pump_battery_rpm_actual_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id201_vcfront_logging_and_vitals10_hz_vcfront_pump_battery_rpm_actual_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id201_vcfront_logging_and_vitals10_hz_vcfront_pump_battery_rpm_actual_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id201_vcfront_logging_and_vitals10_hz_vcfront_temp_refrig_discharge_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id201_vcfront_logging_and_vitals10_hz_vcfront_temp_refrig_discharge_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id201_vcfront_logging_and_vitals10_hz_vcfront_temp_refrig_discharge_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id201_vcfront_logging_and_vitals10_hz_vcfront_hp_low_side_hx_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id201_vcfront_logging_and_vitals10_hz_vcfront_hp_low_side_hx_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id201_vcfront_logging_and_vitals10_hz_vcfront_hp_low_side_hx_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id201_vcfront_logging_and_vitals10_hz_vcfront_active_louver_open_pos_targ_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id201_vcfront_logging_and_vitals10_hz_vcfront_active_louver_open_pos_targ_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id201_vcfront_logging_and_vitals10_hz_vcfront_active_louver_open_pos_targ_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id201_vcfront_logging_and_vitals10_hz_vcfront_hp_dominant_load_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id201_vcfront_logging_and_vitals10_hz_vcfront_hp_dominant_load_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id201_vcfront_logging_and_vitals10_hz_vcfront_hp_dominant_load_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id201_vcfront_logging_and_vitals10_hz_vcfront_hp_blend_type_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id201_vcfront_logging_and_vitals10_hz_vcfront_hp_blend_type_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id201_vcfront_logging_and_vitals10_hz_vcfront_hp_blend_type_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id201_vcfront_logging_and_vitals10_hz_vcfront_exv_flow_lcc_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id201_vcfront_logging_and_vitals10_hz_vcfront_exv_flow_lcc_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id201_vcfront_logging_and_vitals10_hz_vcfront_exv_flow_lcc_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id201_vcfront_logging_and_vitals10_hz_vcfront_hp_quiet_mode_enabled_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id201_vcfront_logging_and_vitals10_hz_vcfront_hp_quiet_mode_enabled_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id201_vcfront_logging_and_vitals10_hz_vcfront_hp_quiet_mode_enabled_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id201_vcfront_logging_and_vitals10_hz_vcfront_pump_powertrain_rpm_actual_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id201_vcfront_logging_and_vitals10_hz_vcfront_pump_powertrain_rpm_actual_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id201_vcfront_logging_and_vitals10_hz_vcfront_pump_powertrain_rpm_actual_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id201_vcfront_logging_and_vitals10_hz_vcfront_hp_cabin_load_type_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id201_vcfront_logging_and_vitals10_hz_vcfront_hp_cabin_load_type_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id201_vcfront_logging_and_vitals10_hz_vcfront_hp_cabin_load_type_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id201_vcfront_logging_and_vitals10_hz_vcfront_active_louver_open_pos_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id201_vcfront_logging_and_vitals10_hz_vcfront_active_louver_open_pos_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id201_vcfront_logging_and_vitals10_hz_vcfront_active_louver_open_pos_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id201_vcfront_logging_and_vitals10_hz_vcfront_fan_demand_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id201_vcfront_logging_and_vitals10_hz_vcfront_fan_demand_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id201_vcfront_logging_and_vitals10_hz_vcfront_fan_demand_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id201_vcfront_logging_and_vitals10_hz_vcfront_hp_battery_load_type_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id201_vcfront_logging_and_vitals10_hz_vcfront_hp_battery_load_type_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id201_vcfront_logging_and_vitals10_hz_vcfront_hp_battery_load_type_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id201_vcfront_logging_and_vitals10_hz_vcfront_hp_req_coolant_mode_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id201_vcfront_logging_and_vitals10_hz_vcfront_hp_req_coolant_mode_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id201_vcfront_logging_and_vitals10_hz_vcfront_hp_req_coolant_mode_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id201_vcfront_logging_and_vitals10_hz_vcfront_compressor_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id201_vcfront_logging_and_vitals10_hz_vcfront_compressor_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id201_vcfront_logging_and_vitals10_hz_vcfront_compressor_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id201_vcfront_logging_and_vitals10_hz_vcfront_exv_flow_cc_left_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id201_vcfront_logging_and_vitals10_hz_vcfront_exv_flow_cc_left_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id201_vcfront_logging_and_vitals10_hz_vcfront_exv_flow_cc_left_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id201_vcfront_logging_and_vitals10_hz_vcfront_radiator_fan_rpm_actual_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id201_vcfront_logging_and_vitals10_hz_vcfront_radiator_fan_rpm_actual_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id201_vcfront_logging_and_vitals10_hz_vcfront_radiator_fan_rpm_actual_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id201_vcfront_logging_and_vitals10_hz_vcfront_temp_refrig_liquid_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id201_vcfront_logging_and_vitals10_hz_vcfront_temp_refrig_liquid_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id201_vcfront_logging_and_vitals10_hz_vcfront_temp_refrig_liquid_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id201_vcfront_logging_and_vitals10_hz_vcfront_comp_demand_evap_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id201_vcfront_logging_and_vitals10_hz_vcfront_comp_demand_evap_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id201_vcfront_logging_and_vitals10_hz_vcfront_comp_demand_evap_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id201_vcfront_logging_and_vitals10_hz_vcfront_exv_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id201_vcfront_logging_and_vitals10_hz_vcfront_exv_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id201_vcfront_logging_and_vitals10_hz_vcfront_exv_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id201_vcfront_logging_and_vitals10_hz_vcfront_exv_flow_cc_right_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id201_vcfront_logging_and_vitals10_hz_vcfront_exv_flow_cc_right_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id201_vcfront_logging_and_vitals10_hz_vcfront_exv_flow_cc_right_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id201_vcfront_logging_and_vitals10_hz_vcfront_temp_superheat_actual_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id201_vcfront_logging_and_vitals10_hz_vcfront_temp_superheat_actual_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id201_vcfront_logging_and_vitals10_hz_vcfront_temp_superheat_actual_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id201_vcfront_logging_and_vitals10_hz_vcfront_solenoid_evap_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id201_vcfront_logging_and_vitals10_hz_vcfront_solenoid_evap_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id201_vcfront_logging_and_vitals10_hz_vcfront_solenoid_evap_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id201_vcfront_logging_and_vitals10_hz_vcfront_comp_demand_chiller_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id201_vcfront_logging_and_vitals10_hz_vcfront_comp_demand_chiller_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id201_vcfront_logging_and_vitals10_hz_vcfront_comp_demand_chiller_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id201_vcfront_logging_and_vitals10_hz_vcfront_pressure_refrig_liquid_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id201_vcfront_logging_and_vitals10_hz_vcfront_pressure_refrig_liquid_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id201_vcfront_logging_and_vitals10_hz_vcfront_pressure_refrig_liquid_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id201_vcfront_logging_and_vitals10_hz_vcfront_exv_flow_evap_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id201_vcfront_logging_and_vitals10_hz_vcfront_exv_flow_evap_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id201_vcfront_logging_and_vitals10_hz_vcfront_exv_flow_evap_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id201_vcfront_logging_and_vitals10_hz_vcfront_temp_superheat_target_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id201_vcfront_logging_and_vitals10_hz_vcfront_temp_superheat_target_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id201_vcfront_logging_and_vitals10_hz_vcfront_temp_superheat_target_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id201_vcfront_logging_and_vitals10_hz_vcfront_pressure_refrig_suction_vitals_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id201_vcfront_logging_and_vitals10_hz_vcfront_pressure_refrig_suction_vitals_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id201_vcfront_logging_and_vitals10_hz_vcfront_pressure_refrig_suction_vitals_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id201_vcfront_logging_and_vitals10_hz_vcfront_pressure_refrig_discharge_vitals_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id201_vcfront_logging_and_vitals10_hz_vcfront_pressure_refrig_discharge_vitals_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id201_vcfront_logging_and_vitals10_hz_vcfront_pressure_refrig_discharge_vitals_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id201_vcfront_logging_and_vitals10_hz_vcfront_exv_flow_recirc_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id201_vcfront_logging_and_vitals10_hz_vcfront_exv_flow_recirc_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id201_vcfront_logging_and_vitals10_hz_vcfront_exv_flow_recirc_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id201_vcfront_logging_and_vitals10_hz_vcfront_exv_flow_target_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id201_vcfront_logging_and_vitals10_hz_vcfront_exv_flow_target_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id201_vcfront_logging_and_vitals10_hz_vcfront_exv_flow_target_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id201_vcfront_logging_and_vitals10_hz_vcfront_five_way_valve_mode_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id201_vcfront_logging_and_vitals10_hz_vcfront_five_way_valve_mode_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id201_vcfront_logging_and_vitals10_hz_vcfront_five_way_valve_mode_is_in_range(uint8_t value);

/**
 * Pack message ID3D8Elevation.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int model3_can_id3_d8_elevation_pack(
    uint8_t *dst_p,
    const struct model3_can_id3_d8_elevation_t *src_p,
    size_t size);

/**
 * Unpack message ID3D8Elevation.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int model3_can_id3_d8_elevation_unpack(
    struct model3_can_id3_d8_elevation_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t model3_can_id3_d8_elevation_elevation3_d8_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id3_d8_elevation_elevation3_d8_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id3_d8_elevation_elevation3_d8_is_in_range(int16_t value);

/**
 * Pack message ID261_12vBattStatus.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int model3_can_id261_12v_batt_status_pack(
    uint8_t *dst_p,
    const struct model3_can_id261_12v_batt_status_t *src_p,
    size_t size);

/**
 * Unpack message ID261_12vBattStatus.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int model3_can_id261_12v_batt_status_unpack(
    struct model3_can_id261_12v_batt_status_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id261_12v_batt_status_v12v_batt_voltage261_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id261_12v_batt_status_v12v_batt_voltage261_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id261_12v_batt_status_v12v_batt_voltage261_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id261_12v_batt_status_vcfront_is12_v_battery_supported_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id261_12v_batt_status_vcfront_is12_v_battery_supported_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id261_12v_batt_status_vcfront_is12_v_battery_supported_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t model3_can_id261_12v_batt_status_v12v_batt_temp261_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id261_12v_batt_status_v12v_batt_temp261_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id261_12v_batt_status_v12v_batt_temp261_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t model3_can_id261_12v_batt_status_v12v_batt_ah261_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id261_12v_batt_status_v12v_batt_ah261_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id261_12v_batt_status_v12v_batt_ah261_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id261_12v_batt_status_vcfront_good12_vfor_update_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id261_12v_batt_status_vcfront_good12_vfor_update_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id261_12v_batt_status_vcfront_good12_vfor_update_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id261_12v_batt_status_vcfront_lv_load_request_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id261_12v_batt_status_vcfront_lv_load_request_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id261_12v_batt_status_vcfront_lv_load_request_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t model3_can_id261_12v_batt_status_v12v_batt_current261_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id261_12v_batt_status_v12v_batt_current261_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id261_12v_batt_status_v12v_batt_current261_is_in_range(int16_t value);

/**
 * Pack message ID129SteeringAngle.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int model3_can_id129_steering_angle_pack(
    uint8_t *dst_p,
    const struct model3_can_id129_steering_angle_t *src_p,
    size_t size);

/**
 * Unpack message ID129SteeringAngle.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int model3_can_id129_steering_angle_unpack(
    struct model3_can_id129_steering_angle_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id129_steering_angle_steering_angle129_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id129_steering_angle_steering_angle129_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id129_steering_angle_steering_angle129_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id129_steering_angle_steering_speed129_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id129_steering_angle_steering_speed129_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id129_steering_angle_steering_speed129_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id129_steering_angle_steering_sensor_a129_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id129_steering_angle_steering_sensor_a129_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id129_steering_angle_steering_sensor_a129_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id129_steering_angle_steering_sensor_b129_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id129_steering_angle_steering_sensor_b129_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id129_steering_angle_steering_sensor_b129_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id129_steering_angle_steering_sensor_c129_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id129_steering_angle_steering_sensor_c129_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id129_steering_angle_steering_sensor_c129_is_in_range(uint8_t value);

/**
 * Pack message ID264ChargeLineStatus.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int model3_can_id264_charge_line_status_pack(
    uint8_t *dst_p,
    const struct model3_can_id264_charge_line_status_t *src_p,
    size_t size);

/**
 * Unpack message ID264ChargeLineStatus.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int model3_can_id264_charge_line_status_unpack(
    struct model3_can_id264_charge_line_status_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id264_charge_line_status_charge_line_voltage264_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id264_charge_line_status_charge_line_voltage264_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id264_charge_line_status_charge_line_voltage264_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id264_charge_line_status_charge_line_current264_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id264_charge_line_status_charge_line_current264_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id264_charge_line_status_charge_line_current264_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id264_charge_line_status_charge_line_power264_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id264_charge_line_status_charge_line_power264_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id264_charge_line_status_charge_line_power264_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id264_charge_line_status_charge_line_current_limit264_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id264_charge_line_status_charge_line_current_limit264_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id264_charge_line_status_charge_line_current_limit264_is_in_range(uint16_t value);

/**
 * Pack message ID224PCSDCDCstatus.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int model3_can_id224_pcsdcd_cstatus_pack(
    uint8_t *dst_p,
    const struct model3_can_id224_pcsdcd_cstatus_t *src_p,
    size_t size);

/**
 * Unpack message ID224PCSDCDCstatus.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int model3_can_id224_pcsdcd_cstatus_unpack(
    struct model3_can_id224_pcsdcd_cstatus_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id224_pcsdcd_cstatus_dcdc_precharge_status224_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id224_pcsdcd_cstatus_dcdc_precharge_status224_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id224_pcsdcd_cstatus_dcdc_precharge_status224_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id224_pcsdcd_cstatus_dcdc12_v_support_status224_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id224_pcsdcd_cstatus_dcdc12_v_support_status224_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id224_pcsdcd_cstatus_dcdc12_v_support_status224_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id224_pcsdcd_cstatus_dcdc_hv_bus_discharge_status224_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id224_pcsdcd_cstatus_dcdc_hv_bus_discharge_status224_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id224_pcsdcd_cstatus_dcdc_hv_bus_discharge_status224_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id224_pcsdcd_cstatus_dcd_cstate224_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id224_pcsdcd_cstatus_dcd_cstate224_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id224_pcsdcd_cstatus_dcd_cstate224_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id224_pcsdcd_cstatus_dcdc_sub_state224_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id224_pcsdcd_cstatus_dcdc_sub_state224_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id224_pcsdcd_cstatus_dcdc_sub_state224_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id224_pcsdcd_cstatus_dcdc_faulted224_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id224_pcsdcd_cstatus_dcdc_faulted224_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id224_pcsdcd_cstatus_dcdc_faulted224_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id224_pcsdcd_cstatus_dcd_coutput_current224_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id224_pcsdcd_cstatus_dcd_coutput_current224_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id224_pcsdcd_cstatus_dcd_coutput_current224_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id224_pcsdcd_cstatus_dcdc_output_is_limited224_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id224_pcsdcd_cstatus_dcdc_output_is_limited224_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id224_pcsdcd_cstatus_dcdc_output_is_limited224_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id224_pcsdcd_cstatus_dcd_coutput_current_max224_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id224_pcsdcd_cstatus_dcd_coutput_current_max224_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id224_pcsdcd_cstatus_dcd_coutput_current_max224_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id224_pcsdcd_cstatus_dcdc_precharge_rty_cnt224_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id224_pcsdcd_cstatus_dcdc_precharge_rty_cnt224_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id224_pcsdcd_cstatus_dcdc_precharge_rty_cnt224_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id224_pcsdcd_cstatus_dcdc12_v_support_rty_cnt224_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id224_pcsdcd_cstatus_dcdc12_v_support_rty_cnt224_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id224_pcsdcd_cstatus_dcdc12_v_support_rty_cnt224_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id224_pcsdcd_cstatus_dcdc_discharge_rty_cnt224_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id224_pcsdcd_cstatus_dcdc_discharge_rty_cnt224_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id224_pcsdcd_cstatus_dcdc_discharge_rty_cnt224_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id224_pcsdcd_cstatus_dcdc_pwm_enable_line224_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id224_pcsdcd_cstatus_dcdc_pwm_enable_line224_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id224_pcsdcd_cstatus_dcdc_pwm_enable_line224_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id224_pcsdcd_cstatus_dcdc_supporting_fixed_lv_target224_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id224_pcsdcd_cstatus_dcdc_supporting_fixed_lv_target224_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id224_pcsdcd_cstatus_dcdc_supporting_fixed_lv_target224_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id224_pcsdcd_cstatus_pcs_ecu_log_upload_request224_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id224_pcsdcd_cstatus_pcs_ecu_log_upload_request224_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id224_pcsdcd_cstatus_pcs_ecu_log_upload_request224_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id224_pcsdcd_cstatus_dcdc_precharge_restart_cnt224_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id224_pcsdcd_cstatus_dcdc_precharge_restart_cnt224_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id224_pcsdcd_cstatus_dcdc_precharge_restart_cnt224_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id224_pcsdcd_cstatus_dcdc_initial_precharge_sub_state224_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id224_pcsdcd_cstatus_dcdc_initial_precharge_sub_state224_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id224_pcsdcd_cstatus_dcdc_initial_precharge_sub_state224_is_in_range(uint8_t value);

/**
 * Pack message ID118DriveSystemStatus.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int model3_can_id118_drive_system_status_pack(
    uint8_t *dst_p,
    const struct model3_can_id118_drive_system_status_t *src_p,
    size_t size);

/**
 * Unpack message ID118DriveSystemStatus.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int model3_can_id118_drive_system_status_unpack(
    struct model3_can_id118_drive_system_status_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id118_drive_system_status_drive_system_status_checksum118_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id118_drive_system_status_drive_system_status_checksum118_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id118_drive_system_status_drive_system_status_checksum118_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id118_drive_system_status_drive_system_status_counter118_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id118_drive_system_status_drive_system_status_counter118_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id118_drive_system_status_drive_system_status_counter118_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id118_drive_system_status_drive_state118_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id118_drive_system_status_drive_state118_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id118_drive_system_status_drive_state118_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id118_drive_system_status_brake_pedal118_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id118_drive_system_status_brake_pedal118_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id118_drive_system_status_brake_pedal118_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id118_drive_system_status_d_igear118_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id118_drive_system_status_d_igear118_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id118_drive_system_status_d_igear118_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id118_drive_system_status_brake_state118_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id118_drive_system_status_brake_state118_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id118_drive_system_status_brake_state118_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id118_drive_system_status_immobilizer_state118_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id118_drive_system_status_immobilizer_state118_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id118_drive_system_status_immobilizer_state118_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id118_drive_system_status_pedal_position118_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id118_drive_system_status_pedal_position118_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id118_drive_system_status_pedal_position118_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id118_drive_system_status_traction_control118_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id118_drive_system_status_traction_control118_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id118_drive_system_status_traction_control118_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id118_drive_system_status_parking_brake118_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id118_drive_system_status_parking_brake118_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id118_drive_system_status_parking_brake118_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id118_drive_system_status_proximity118_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id118_drive_system_status_proximity118_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id118_drive_system_status_proximity118_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id118_drive_system_status_keep_alive_req118_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id118_drive_system_status_keep_alive_req118_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id118_drive_system_status_keep_alive_req118_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id118_drive_system_status_track_mode118_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id118_drive_system_status_track_mode118_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id118_drive_system_status_track_mode118_is_in_range(uint8_t value);

/**
 * Pack message ID352BMSenergy.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int model3_can_id352_bm_senergy_pack(
    uint8_t *dst_p,
    const struct model3_can_id352_bm_senergy_t *src_p,
    size_t size);

/**
 * Unpack message ID352BMSenergy.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int model3_can_id352_bm_senergy_unpack(
    struct model3_can_id352_bm_senergy_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id352_bm_senergy_bfull_k_wh_nom352_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id352_bm_senergy_bfull_k_wh_nom352_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id352_bm_senergy_bfull_k_wh_nom352_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id352_bm_senergy_bremaining_k_wh_nom352_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id352_bm_senergy_bremaining_k_wh_nom352_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id352_bm_senergy_bremaining_k_wh_nom352_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id352_bm_senergy_bexpectedremain_k_wh352_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id352_bm_senergy_bexpectedremain_k_wh352_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id352_bm_senergy_bexpectedremain_k_wh352_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id352_bm_senergy_bidealremain_k_wh352_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id352_bm_senergy_bidealremain_k_wh352_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id352_bm_senergy_bidealremain_k_wh352_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id352_bm_senergy_btochargecomplete_k_wh352_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id352_bm_senergy_btochargecomplete_k_wh352_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id352_bm_senergy_btochargecomplete_k_wh352_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id352_bm_senergy_bbuffer_k_wh352_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id352_bm_senergy_bbuffer_k_wh352_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id352_bm_senergy_bbuffer_k_wh352_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id352_bm_senergy_bms_energy_counter_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id352_bm_senergy_bms_energy_counter_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id352_bm_senergy_bms_energy_counter_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id352_bm_senergy_bms_full_charge_complete_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id352_bm_senergy_bms_full_charge_complete_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id352_bm_senergy_bms_full_charge_complete_is_in_range(uint8_t value);

/**
 * Pack message ID252BMS_powerAvailable.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int model3_can_id252_bms_power_available_pack(
    uint8_t *dst_p,
    const struct model3_can_id252_bms_power_available_t *src_p,
    size_t size);

/**
 * Unpack message ID252BMS_powerAvailable.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int model3_can_id252_bms_power_available_unpack(
    struct model3_can_id252_bms_power_available_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id252_bms_power_available_bms_max_regen_power_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id252_bms_power_available_bms_max_regen_power_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id252_bms_power_available_bms_max_regen_power_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id252_bms_power_available_bms_max_discharge_power_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id252_bms_power_available_bms_max_discharge_power_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id252_bms_power_available_bms_max_discharge_power_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id252_bms_power_available_bms_max_stationary_heat_power_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id252_bms_power_available_bms_max_stationary_heat_power_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id252_bms_power_available_bms_max_stationary_heat_power_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id252_bms_power_available_bms_power_limits_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id252_bms_power_available_bms_power_limits_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id252_bms_power_available_bms_power_limits_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id252_bms_power_available_bms_hvac_power_budget_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id252_bms_power_available_bms_hvac_power_budget_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id252_bms_power_available_bms_hvac_power_budget_is_in_range(uint16_t value);

/**
 * Pack message ID312BMSthermal.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int model3_can_id312_bm_sthermal_pack(
    uint8_t *dst_p,
    const struct model3_can_id312_bm_sthermal_t *src_p,
    size_t size);

/**
 * Unpack message ID312BMSthermal.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int model3_can_id312_bm_sthermal_unpack(
    struct model3_can_id312_bm_sthermal_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id312_bm_sthermal_bm_sdissipation312_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id312_bm_sthermal_bm_sdissipation312_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id312_bm_sthermal_bm_sdissipation312_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id312_bm_sthermal_bm_sflow_request312_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id312_bm_sthermal_bm_sflow_request312_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id312_bm_sthermal_bm_sflow_request312_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id312_bm_sthermal_bm_sinlet_active_cool_target312_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id312_bm_sthermal_bm_sinlet_active_cool_target312_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id312_bm_sthermal_bm_sinlet_active_cool_target312_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id312_bm_sthermal_bm_sinlet_passive_target312_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id312_bm_sthermal_bm_sinlet_passive_target312_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id312_bm_sthermal_bm_sinlet_passive_target312_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id312_bm_sthermal_bm_sinlet_active_heat_target312_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id312_bm_sthermal_bm_sinlet_active_heat_target312_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id312_bm_sthermal_bm_sinlet_active_heat_target312_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id312_bm_sthermal_bm_smin_pack_temperature2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id312_bm_sthermal_bm_smin_pack_temperature2_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id312_bm_sthermal_bm_smin_pack_temperature2_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id312_bm_sthermal_bm_smax_pack_temperature_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id312_bm_sthermal_bm_smax_pack_temperature_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id312_bm_sthermal_bm_smax_pack_temperature_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id312_bm_sthermal_bm_spcs_no_flow_request312_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id312_bm_sthermal_bm_spcs_no_flow_request312_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id312_bm_sthermal_bm_spcs_no_flow_request312_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id312_bm_sthermal_bm_sno_flow_request312_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id312_bm_sthermal_bm_sno_flow_request312_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id312_bm_sthermal_bm_sno_flow_request312_is_in_range(uint8_t value);

/**
 * Pack message ID292BMS_SOC.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int model3_can_id292_bms_soc_pack(
    uint8_t *dst_p,
    const struct model3_can_id292_bms_soc_t *src_p,
    size_t size);

/**
 * Unpack message ID292BMS_SOC.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int model3_can_id292_bms_soc_unpack(
    struct model3_can_id292_bms_soc_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id292_bms_soc_so_cmin292_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id292_bms_soc_so_cmin292_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id292_bms_soc_so_cmin292_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id292_bms_soc_socui292_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id292_bms_soc_socui292_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id292_bms_soc_socui292_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id292_bms_soc_so_cmax292_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id292_bms_soc_so_cmax292_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id292_bms_soc_so_cmax292_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id292_bms_soc_so_cave292_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id292_bms_soc_so_cave292_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id292_bms_soc_so_cave292_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id292_bms_soc_batt_beginning_of_life_energy292_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id292_bms_soc_batt_beginning_of_life_energy292_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id292_bms_soc_batt_beginning_of_life_energy292_is_in_range(uint16_t value);

/**
 * Pack message ID257UIspeed.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int model3_can_id257_u_ispeed_pack(
    uint8_t *dst_p,
    const struct model3_can_id257_u_ispeed_t *src_p,
    size_t size);

/**
 * Unpack message ID257UIspeed.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int model3_can_id257_u_ispeed_unpack(
    struct model3_can_id257_u_ispeed_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id257_u_ispeed_u_ispeed_checksum257_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id257_u_ispeed_u_ispeed_checksum257_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id257_u_ispeed_u_ispeed_checksum257_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id257_u_ispeed_u_ispeed_counter257_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id257_u_ispeed_u_ispeed_counter257_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id257_u_ispeed_u_ispeed_counter257_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id257_u_ispeed_u_ispeed_signed257_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id257_u_ispeed_u_ispeed_signed257_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id257_u_ispeed_u_ispeed_signed257_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id257_u_ispeed_u_ispeed_abs257_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id257_u_ispeed_u_ispeed_abs257_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id257_u_ispeed_u_ispeed_abs257_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id257_u_ispeed_u_ispeed_units257_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id257_u_ispeed_u_ispeed_units257_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id257_u_ispeed_u_ispeed_units257_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id257_u_ispeed_ui_speed_high_speed257_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id257_u_ispeed_ui_speed_high_speed257_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id257_u_ispeed_ui_speed_high_speed257_is_in_range(uint16_t value);

/**
 * Pack message ID405VIN.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int model3_can_id405_vin_pack(
    uint8_t *dst_p,
    const struct model3_can_id405_vin_t *src_p,
    size_t size);

/**
 * Unpack message ID405VIN.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int model3_can_id405_vin_unpack(
    struct model3_can_id405_vin_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id405_vin_mux405_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id405_vin_mux405_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id405_vin_mux405_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint64_t model3_can_id405_vin_vinb405_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id405_vin_vinb405_decode(uint64_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id405_vin_vinb405_is_in_range(uint64_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint64_t model3_can_id405_vin_vinc405_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id405_vin_vinc405_decode(uint64_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id405_vin_vinc405_is_in_range(uint64_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint64_t model3_can_id405_vin_vina405_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id405_vin_vina405_decode(uint64_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id405_vin_vina405_is_in_range(uint64_t value);

/**
 * Pack message ID51EFC_info.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int model3_can_id51_efc_info_pack(
    uint8_t *dst_p,
    const struct model3_can_id51_efc_info_t *src_p,
    size_t size);

/**
 * Unpack message ID51EFC_info.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int model3_can_id51_efc_info_unpack(
    struct model3_can_id51_efc_info_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id51_efc_info_fc_info_index_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id51_efc_info_fc_info_index_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id51_efc_info_fc_info_index_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint64_t model3_can_id51_efc_info_fc_info_app_git_hash_bytes_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id51_efc_info_fc_info_app_git_hash_bytes_decode(uint64_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id51_efc_info_fc_info_app_git_hash_bytes_is_in_range(uint64_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint64_t model3_can_id51_efc_info_fc_info_boot_git_hash_bytes_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id51_efc_info_fc_info_boot_git_hash_bytes_decode(uint64_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id51_efc_info_fc_info_boot_git_hash_bytes_is_in_range(uint64_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t model3_can_id51_efc_info_fc_info_boot_svn_rev_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id51_efc_info_fc_info_boot_svn_rev_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id51_efc_info_fc_info_boot_svn_rev_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id51_efc_info_fc_info_boot_uds_proto_version_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id51_efc_info_fc_info_boot_uds_proto_version_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id51_efc_info_fc_info_boot_uds_proto_version_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id51_efc_info_fc_info_build_type_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id51_efc_info_fc_info_build_type_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id51_efc_info_fc_info_build_type_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id51_efc_info_fc_info_platform_type_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id51_efc_info_fc_info_platform_type_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id51_efc_info_fc_info_platform_type_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id51_efc_info_fc_part_num_char01_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id51_efc_info_fc_part_num_char01_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id51_efc_info_fc_part_num_char01_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id51_efc_info_fc_part_num_char08_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id51_efc_info_fc_part_num_char08_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id51_efc_info_fc_part_num_char08_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id51_efc_info_fc_part_num_char15_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id51_efc_info_fc_part_num_char15_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id51_efc_info_fc_part_num_char15_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id51_efc_info_fc_info_build_config_id_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id51_efc_info_fc_info_build_config_id_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id51_efc_info_fc_info_build_config_id_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id51_efc_info_fc_info_cpld_version_major_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id51_efc_info_fc_info_cpld_version_major_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id51_efc_info_fc_info_cpld_version_major_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id51_efc_info_fc_info_major_version_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id51_efc_info_fc_info_major_version_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id51_efc_info_fc_info_major_version_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id51_efc_info_fc_info_pcba_id_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id51_efc_info_fc_info_pcba_id_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id51_efc_info_fc_info_pcba_id_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id51_efc_info_fc_part_num_char02_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id51_efc_info_fc_part_num_char02_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id51_efc_info_fc_part_num_char02_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id51_efc_info_fc_part_num_char09_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id51_efc_info_fc_part_num_char09_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id51_efc_info_fc_part_num_char09_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id51_efc_info_fc_part_num_char16_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id51_efc_info_fc_part_num_char16_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id51_efc_info_fc_part_num_char16_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id51_efc_info_fc_info_assembly_id_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id51_efc_info_fc_info_assembly_id_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id51_efc_info_fc_info_assembly_id_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id51_efc_info_fc_info_branch_origin_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id51_efc_info_fc_info_branch_origin_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id51_efc_info_fc_info_branch_origin_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id51_efc_info_fc_info_cpld_version_minor_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id51_efc_info_fc_info_cpld_version_minor_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id51_efc_info_fc_info_cpld_version_minor_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id51_efc_info_fc_part_num_char03_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id51_efc_info_fc_part_num_char03_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id51_efc_info_fc_part_num_char03_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id51_efc_info_fc_part_num_char10_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id51_efc_info_fc_part_num_char10_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id51_efc_info_fc_part_num_char10_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id51_efc_info_fc_part_num_char17_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id51_efc_info_fc_part_num_char17_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id51_efc_info_fc_part_num_char17_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t model3_can_id51_efc_info_fc_info_application_crc_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id51_efc_info_fc_info_application_crc_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id51_efc_info_fc_info_application_crc_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t model3_can_id51_efc_info_fc_info_boot_crc_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id51_efc_info_fc_info_boot_crc_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id51_efc_info_fc_info_boot_crc_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id51_efc_info_fc_info_hardware_id_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id51_efc_info_fc_info_hardware_id_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id51_efc_info_fc_info_hardware_id_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id51_efc_info_fc_info_maturity_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id51_efc_info_fc_info_maturity_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id51_efc_info_fc_info_maturity_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id51_efc_info_fc_info_usage_id_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id51_efc_info_fc_info_usage_id_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id51_efc_info_fc_info_usage_id_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t model3_can_id51_efc_info_fc_info_variant_crc_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id51_efc_info_fc_info_variant_crc_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id51_efc_info_fc_info_variant_crc_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id51_efc_info_fc_part_num_char04_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id51_efc_info_fc_part_num_char04_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id51_efc_info_fc_part_num_char04_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id51_efc_info_fc_part_num_char11_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id51_efc_info_fc_part_num_char11_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id51_efc_info_fc_part_num_char11_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id51_efc_info_fc_part_num_char18_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id51_efc_info_fc_part_num_char18_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id51_efc_info_fc_part_num_char18_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id51_efc_info_fc_info_hardware_revision_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id51_efc_info_fc_info_hardware_revision_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id51_efc_info_fc_info_hardware_revision_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id51_efc_info_fc_part_num_char05_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id51_efc_info_fc_part_num_char05_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id51_efc_info_fc_part_num_char05_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id51_efc_info_fc_part_num_char12_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id51_efc_info_fc_part_num_char12_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id51_efc_info_fc_part_num_char12_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id51_efc_info_fc_part_num_char19_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id51_efc_info_fc_part_num_char19_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id51_efc_info_fc_part_num_char19_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id51_efc_info_fc_info_component_id_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id51_efc_info_fc_info_component_id_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id51_efc_info_fc_info_component_id_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id51_efc_info_fc_info_sub_usage_id_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id51_efc_info_fc_info_sub_usage_id_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id51_efc_info_fc_info_sub_usage_id_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id51_efc_info_fc_part_num_char06_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id51_efc_info_fc_part_num_char06_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id51_efc_info_fc_part_num_char06_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id51_efc_info_fc_part_num_char13_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id51_efc_info_fc_part_num_char13_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id51_efc_info_fc_part_num_char13_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id51_efc_info_fc_part_num_char20_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id51_efc_info_fc_part_num_char20_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id51_efc_info_fc_part_num_char20_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id51_efc_info_fc_part_num_char07_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id51_efc_info_fc_part_num_char07_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id51_efc_info_fc_part_num_char07_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id51_efc_info_fc_part_num_char14_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id51_efc_info_fc_part_num_char14_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id51_efc_info_fc_part_num_char14_is_in_range(uint8_t value);

/**
 * Pack message ID376FrontInverterTemps.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int model3_can_id376_front_inverter_temps_pack(
    uint8_t *dst_p,
    const struct model3_can_id376_front_inverter_temps_t *src_p,
    size_t size);

/**
 * Unpack message ID376FrontInverterTemps.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int model3_can_id376_front_inverter_temps_unpack(
    struct model3_can_id376_front_inverter_temps_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id376_front_inverter_temps_temp_inv_pcb376_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id376_front_inverter_temps_temp_inv_pcb376_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id376_front_inverter_temps_temp_inv_pcb376_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id376_front_inverter_temps_temp_inverter376_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id376_front_inverter_temps_temp_inverter376_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id376_front_inverter_temps_temp_inverter376_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id376_front_inverter_temps_temp_stator376_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id376_front_inverter_temps_temp_stator376_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id376_front_inverter_temps_temp_stator376_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id376_front_inverter_temps_temp_inv_capbank376_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id376_front_inverter_temps_temp_inv_capbank376_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id376_front_inverter_temps_temp_inv_capbank376_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id376_front_inverter_temps_temp_inv_heatsink376_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id376_front_inverter_temps_temp_inv_heatsink376_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id376_front_inverter_temps_temp_inv_heatsink376_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id376_front_inverter_temps_temp_pct_inverter376_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id376_front_inverter_temps_temp_pct_inverter376_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id376_front_inverter_temps_temp_pct_inverter376_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id376_front_inverter_temps_temp_pct_stator376_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id376_front_inverter_temps_temp_pct_stator376_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id376_front_inverter_temps_temp_pct_stator376_is_in_range(uint8_t value);

/**
 * Pack message ID315RearInverterTemps.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int model3_can_id315_rear_inverter_temps_pack(
    uint8_t *dst_p,
    const struct model3_can_id315_rear_inverter_temps_t *src_p,
    size_t size);

/**
 * Unpack message ID315RearInverterTemps.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int model3_can_id315_rear_inverter_temps_unpack(
    struct model3_can_id315_rear_inverter_temps_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id315_rear_inverter_temps_rear_temp_inv_pcb315_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id315_rear_inverter_temps_rear_temp_inv_pcb315_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id315_rear_inverter_temps_rear_temp_inv_pcb315_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id315_rear_inverter_temps_rear_temp_inverter315_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id315_rear_inverter_temps_rear_temp_inverter315_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id315_rear_inverter_temps_rear_temp_inverter315_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id315_rear_inverter_temps_rear_temp_stator315_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id315_rear_inverter_temps_rear_temp_stator315_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id315_rear_inverter_temps_rear_temp_stator315_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id315_rear_inverter_temps_rear_temp_inv_capbank315_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id315_rear_inverter_temps_rear_temp_inv_capbank315_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id315_rear_inverter_temps_rear_temp_inv_capbank315_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id315_rear_inverter_temps_rear_temp_inv_heatsink315_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id315_rear_inverter_temps_rear_temp_inv_heatsink315_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id315_rear_inverter_temps_rear_temp_inv_heatsink315_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id315_rear_inverter_temps_rear_temp_pct_inverter315_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id315_rear_inverter_temps_rear_temp_pct_inverter315_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id315_rear_inverter_temps_rear_temp_pct_inverter315_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id315_rear_inverter_temps_rear_temp_pct_stator315_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id315_rear_inverter_temps_rear_temp_pct_stator315_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id315_rear_inverter_temps_rear_temp_pct_stator315_is_in_range(uint8_t value);

/**
 * Pack message ID154RearTorqueOld.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int model3_can_id154_rear_torque_old_pack(
    uint8_t *dst_p,
    const struct model3_can_id154_rear_torque_old_t *src_p,
    size_t size);

/**
 * Unpack message ID154RearTorqueOld.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int model3_can_id154_rear_torque_old_unpack(
    struct model3_can_id154_rear_torque_old_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t model3_can_id154_rear_torque_old_raw_torque_rear154_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id154_rear_torque_old_raw_torque_rear154_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id154_rear_torque_old_raw_torque_rear154_is_in_range(int16_t value);

/**
 * Pack message ID3B6odometer.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int model3_can_id3_b6odometer_pack(
    uint8_t *dst_p,
    const struct model3_can_id3_b6odometer_t *src_p,
    size_t size);

/**
 * Unpack message ID3B6odometer.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int model3_can_id3_b6odometer_unpack(
    struct model3_can_id3_b6odometer_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t model3_can_id3_b6odometer_odometer3_b6_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id3_b6odometer_odometer3_b6_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id3_b6odometer_odometer3_b6_is_in_range(uint32_t value);

/**
 * Pack message ID266RearInverterPower.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int model3_can_id266_rear_inverter_power_pack(
    uint8_t *dst_p,
    const struct model3_can_id266_rear_inverter_power_t *src_p,
    size_t size);

/**
 * Unpack message ID266RearInverterPower.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int model3_can_id266_rear_inverter_power_unpack(
    struct model3_can_id266_rear_inverter_power_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t model3_can_id266_rear_inverter_power_rear_power266_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id266_rear_inverter_power_rear_power266_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id266_rear_inverter_power_rear_power266_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id266_rear_inverter_power_rear_heat_power_optimal266_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id266_rear_inverter_power_rear_heat_power_optimal266_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id266_rear_inverter_power_rear_heat_power_optimal266_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id266_rear_inverter_power_rear_heat_power_max266_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id266_rear_inverter_power_rear_heat_power_max266_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id266_rear_inverter_power_rear_heat_power_max266_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id266_rear_inverter_power_rear_heat_power266_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id266_rear_inverter_power_rear_heat_power266_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id266_rear_inverter_power_rear_heat_power266_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id266_rear_inverter_power_rear_excess_heat_cmd_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id266_rear_inverter_power_rear_excess_heat_cmd_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id266_rear_inverter_power_rear_excess_heat_cmd_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id266_rear_inverter_power_rear_power_limit266_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id266_rear_inverter_power_rear_power_limit266_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id266_rear_inverter_power_rear_power_limit266_is_in_range(uint16_t value);

/**
 * Pack message ID108RearDriveTorqueRPM.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int model3_can_id108_rear_drive_torque_rpm_pack(
    uint8_t *dst_p,
    const struct model3_can_id108_rear_drive_torque_rpm_t *src_p,
    size_t size);

/**
 * Unpack message ID108RearDriveTorqueRPM.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int model3_can_id108_rear_drive_torque_rpm_unpack(
    struct model3_can_id108_rear_drive_torque_rpm_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t model3_can_id108_rear_drive_torque_rpm_rear_torque_request108_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id108_rear_drive_torque_rpm_rear_torque_request108_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id108_rear_drive_torque_rpm_rear_torque_request108_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t model3_can_id108_rear_drive_torque_rpm_rear_torque_actual108_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id108_rear_drive_torque_rpm_rear_torque_actual108_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id108_rear_drive_torque_rpm_rear_torque_actual108_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t model3_can_id108_rear_drive_torque_rpm_rear_axle_rpm108_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id108_rear_drive_torque_rpm_rear_axle_rpm108_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id108_rear_drive_torque_rpm_rear_axle_rpm108_is_in_range(int16_t value);

/**
 * Pack message ID132HVBattAmpVolt.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int model3_can_id132_hv_batt_amp_volt_pack(
    uint8_t *dst_p,
    const struct model3_can_id132_hv_batt_amp_volt_t *src_p,
    size_t size);

/**
 * Unpack message ID132HVBattAmpVolt.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int model3_can_id132_hv_batt_amp_volt_unpack(
    struct model3_can_id132_hv_batt_amp_volt_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id132_hv_batt_amp_volt_batt_voltage132_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id132_hv_batt_amp_volt_batt_voltage132_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id132_hv_batt_amp_volt_batt_voltage132_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t model3_can_id132_hv_batt_amp_volt_smooth_batt_current132_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id132_hv_batt_amp_volt_smooth_batt_current132_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id132_hv_batt_amp_volt_smooth_batt_current132_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t model3_can_id132_hv_batt_amp_volt_raw_batt_current132_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id132_hv_batt_amp_volt_raw_batt_current132_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id132_hv_batt_amp_volt_raw_batt_current132_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id132_hv_batt_amp_volt_charge_hours_remaining132_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id132_hv_batt_amp_volt_charge_hours_remaining132_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id132_hv_batt_amp_volt_charge_hours_remaining132_is_in_range(uint16_t value);

/**
 * Pack message ID126RearHVStatus.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int model3_can_id126_rear_hv_status_pack(
    uint8_t *dst_p,
    const struct model3_can_id126_rear_hv_status_t *src_p,
    size_t size);

/**
 * Unpack message ID126RearHVStatus.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int model3_can_id126_rear_hv_status_unpack(
    struct model3_can_id126_rear_hv_status_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id126_rear_hv_status_rear_high_voltage126_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id126_rear_hv_status_rear_high_voltage126_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id126_rear_hv_status_rear_high_voltage126_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id126_rear_hv_status_rear_motor_current126_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id126_rear_hv_status_rear_motor_current126_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id126_rear_hv_status_rear_motor_current126_is_in_range(uint16_t value);

/**
 * Pack message ID1A5FrontHVStatus.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int model3_can_id1_a5_front_hv_status_pack(
    uint8_t *dst_p,
    const struct model3_can_id1_a5_front_hv_status_t *src_p,
    size_t size);

/**
 * Unpack message ID1A5FrontHVStatus.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int model3_can_id1_a5_front_hv_status_unpack(
    struct model3_can_id1_a5_front_hv_status_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id1_a5_front_hv_status_front_high_voltage1_a5_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id1_a5_front_hv_status_front_high_voltage1_a5_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id1_a5_front_hv_status_front_high_voltage1_a5_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id1_a5_front_hv_status_front_motor_current1_a5_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id1_a5_front_hv_status_front_motor_current1_a5_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id1_a5_front_hv_status_front_motor_current1_a5_is_in_range(uint16_t value);

/**
 * Pack message ID31FTPMSsensors.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int model3_can_id31_ftpm_ssensors_pack(
    uint8_t *dst_p,
    const struct model3_can_id31_ftpm_ssensors_t *src_p,
    size_t size);

/**
 * Unpack message ID31FTPMSsensors.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int model3_can_id31_ftpm_ssensors_unpack(
    struct model3_can_id31_ftpm_ssensors_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id31_ftpm_ssensors_tpmsf_lpressure31_f_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id31_ftpm_ssensors_tpmsf_lpressure31_f_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id31_ftpm_ssensors_tpmsf_lpressure31_f_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id31_ftpm_ssensors_tpmsf_ltemp31_f_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id31_ftpm_ssensors_tpmsf_ltemp31_f_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id31_ftpm_ssensors_tpmsf_ltemp31_f_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id31_ftpm_ssensors_tpmsf_rpressure31_f_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id31_ftpm_ssensors_tpmsf_rpressure31_f_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id31_ftpm_ssensors_tpmsf_rpressure31_f_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id31_ftpm_ssensors_tpmsf_rtemp31_f_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id31_ftpm_ssensors_tpmsf_rtemp31_f_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id31_ftpm_ssensors_tpmsf_rtemp31_f_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id31_ftpm_ssensors_tpmsr_lpressure31_f_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id31_ftpm_ssensors_tpmsr_lpressure31_f_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id31_ftpm_ssensors_tpmsr_lpressure31_f_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id31_ftpm_ssensors_tpmsr_ltemp31_f_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id31_ftpm_ssensors_tpmsr_ltemp31_f_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id31_ftpm_ssensors_tpmsr_ltemp31_f_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id31_ftpm_ssensors_tpmsr_rpressure31_f_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id31_ftpm_ssensors_tpmsr_rpressure31_f_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id31_ftpm_ssensors_tpmsr_rpressure31_f_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id31_ftpm_ssensors_tpmsr_rtemp31_f_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id31_ftpm_ssensors_tpmsr_rtemp31_f_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id31_ftpm_ssensors_tpmsr_rtemp31_f_is_in_range(uint8_t value);

/**
 * Pack message ID3FEbrakeTemps.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int model3_can_id3_f_ebrake_temps_pack(
    uint8_t *dst_p,
    const struct model3_can_id3_f_ebrake_temps_t *src_p,
    size_t size);

/**
 * Unpack message ID3FEbrakeTemps.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int model3_can_id3_f_ebrake_temps_unpack(
    struct model3_can_id3_f_ebrake_temps_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id3_f_ebrake_temps_brake_temp_fl3_fe_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id3_f_ebrake_temps_brake_temp_fl3_fe_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id3_f_ebrake_temps_brake_temp_fl3_fe_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id3_f_ebrake_temps_brake_temp_fr3_fe_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id3_f_ebrake_temps_brake_temp_fr3_fe_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id3_f_ebrake_temps_brake_temp_fr3_fe_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id3_f_ebrake_temps_brake_temp_rl3_fe_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id3_f_ebrake_temps_brake_temp_rl3_fe_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id3_f_ebrake_temps_brake_temp_rl3_fe_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id3_f_ebrake_temps_brake_temp_rr3_fe_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id3_f_ebrake_temps_brake_temp_rr3_fe_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id3_f_ebrake_temps_brake_temp_rr3_fe_is_in_range(uint16_t value);

/**
 * Pack message ID228EPBrightStatus.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int model3_can_id228_ep_bright_status_pack(
    uint8_t *dst_p,
    const struct model3_can_id228_ep_bright_status_t *src_p,
    size_t size);

/**
 * Unpack message ID228EPBrightStatus.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int model3_can_id228_ep_bright_status_unpack(
    struct model3_can_id228_ep_bright_status_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id228_ep_bright_status_epb_runit_status228_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id228_ep_bright_status_epb_runit_status228_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id228_ep_bright_status_epb_runit_status228_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id228_ep_bright_status_epb_runit_fault_status228_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id228_ep_bright_status_epb_runit_fault_status228_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id228_ep_bright_status_epb_runit_fault_status228_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id228_ep_bright_status_epb_rsummon_state228_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id228_ep_bright_status_epb_rsummon_state228_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id228_ep_bright_status_epb_rsummon_state228_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id228_ep_bright_status_epb_rdisconnected228_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id228_ep_bright_status_epb_rdisconnected228_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id228_ep_bright_status_epb_rdisconnected228_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id228_ep_bright_status_epb_rlockout_unlock_count228_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id228_ep_bright_status_epb_rlockout_unlock_count228_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id228_ep_bright_status_epb_rlockout_unlock_count228_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id228_ep_bright_status_epb_resm_caliper_request228_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id228_ep_bright_status_epb_resm_caliper_request228_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id228_ep_bright_status_epb_resm_caliper_request228_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id228_ep_bright_status_epb_rcsm_fault_reason228_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id228_ep_bright_status_epb_rcsm_fault_reason228_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id228_ep_bright_status_epb_rcsm_fault_reason228_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id228_ep_bright_status_epb_resm_operation_trigger228_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id228_ep_bright_status_epb_resm_operation_trigger228_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id228_ep_bright_status_epb_resm_operation_trigger228_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id228_ep_bright_status_epb_rsummon_fault_reason228_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id228_ep_bright_status_epb_rsummon_fault_reason228_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id228_ep_bright_status_epb_rsummon_fault_reason228_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id228_ep_bright_status_epb_rlocal_service_mode_active228_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id228_ep_bright_status_epb_rlocal_service_mode_active228_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id228_ep_bright_status_epb_rlocal_service_mode_active228_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id228_ep_bright_status_epbr12_v_filt228_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id228_ep_bright_status_epbr12_v_filt228_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id228_ep_bright_status_epbr12_v_filt228_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id228_ep_bright_status_epbrcdp_qualified228_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id228_ep_bright_status_epbrcdp_qualified228_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id228_ep_bright_status_epbrcdp_qualified228_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id228_ep_bright_status_epb_rinternal_cdp_request228_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id228_ep_bright_status_epb_rinternal_cdp_request228_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id228_ep_bright_status_epb_rinternal_cdp_request228_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id228_ep_bright_status_epb_rinternal_status_counter228_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id228_ep_bright_status_epb_rinternal_status_counter228_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id228_ep_bright_status_epb_rinternal_status_counter228_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id228_ep_bright_status_epb_rinternal_status_checksum228_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id228_ep_bright_status_epb_rinternal_status_checksum228_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id228_ep_bright_status_epb_rinternal_status_checksum228_is_in_range(uint8_t value);

/**
 * Pack message ID288EPBleftStatus.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int model3_can_id288_ep_bleft_status_pack(
    uint8_t *dst_p,
    const struct model3_can_id288_ep_bleft_status_t *src_p,
    size_t size);

/**
 * Unpack message ID288EPBleftStatus.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int model3_can_id288_ep_bleft_status_unpack(
    struct model3_can_id288_ep_bleft_status_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id288_ep_bleft_status_epb_lunit_status288_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id288_ep_bleft_status_epb_lunit_status288_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id288_ep_bleft_status_epb_lunit_status288_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id288_ep_bleft_status_epb_lunit_fault_status288_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id288_ep_bleft_status_epb_lunit_fault_status288_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id288_ep_bleft_status_epb_lunit_fault_status288_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id288_ep_bleft_status_epb_lsummon_state288_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id288_ep_bleft_status_epb_lsummon_state288_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id288_ep_bleft_status_epb_lsummon_state288_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id288_ep_bleft_status_epb_ldisconnected288_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id288_ep_bleft_status_epb_ldisconnected288_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id288_ep_bleft_status_epb_ldisconnected288_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id288_ep_bleft_status_epb_llockout_unlock_count288_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id288_ep_bleft_status_epb_llockout_unlock_count288_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id288_ep_bleft_status_epb_llockout_unlock_count288_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id288_ep_bleft_status_epb_lesm_caliper_request288_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id288_ep_bleft_status_epb_lesm_caliper_request288_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id288_ep_bleft_status_epb_lesm_caliper_request288_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id288_ep_bleft_status_epb_lcsm_fault_reason288_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id288_ep_bleft_status_epb_lcsm_fault_reason288_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id288_ep_bleft_status_epb_lcsm_fault_reason288_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id288_ep_bleft_status_epb_lesm_operation_trigger288_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id288_ep_bleft_status_epb_lesm_operation_trigger288_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id288_ep_bleft_status_epb_lesm_operation_trigger288_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id288_ep_bleft_status_epb_lsummon_fault_reason288_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id288_ep_bleft_status_epb_lsummon_fault_reason288_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id288_ep_bleft_status_epb_lsummon_fault_reason288_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id288_ep_bleft_status_epb_llocal_service_mode_active288_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id288_ep_bleft_status_epb_llocal_service_mode_active288_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id288_ep_bleft_status_epb_llocal_service_mode_active288_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id288_ep_bleft_status_epbl12_v_filt288_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id288_ep_bleft_status_epbl12_v_filt288_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id288_ep_bleft_status_epbl12_v_filt288_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id288_ep_bleft_status_epblcdp_qualified288_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id288_ep_bleft_status_epblcdp_qualified288_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id288_ep_bleft_status_epblcdp_qualified288_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id288_ep_bleft_status_epb_linternal_cdp_request288_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id288_ep_bleft_status_epb_linternal_cdp_request288_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id288_ep_bleft_status_epb_linternal_cdp_request288_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id288_ep_bleft_status_epb_linternal_status_counter288_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id288_ep_bleft_status_epb_linternal_status_counter288_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id288_ep_bleft_status_epb_linternal_status_counter288_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id288_ep_bleft_status_epb_linternal_status_checksum288_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id288_ep_bleft_status_epb_linternal_status_checksum288_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id288_ep_bleft_status_epb_linternal_status_checksum288_is_in_range(uint8_t value);

/**
 * Pack message ID7FFcarConfig.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int model3_can_id7_f_fcar_config_pack(
    uint8_t *dst_p,
    const struct model3_can_id7_f_fcar_config_t *src_p,
    size_t size);

/**
 * Unpack message ID7FFcarConfig.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int model3_can_id7_f_fcar_config_unpack(
    struct model3_can_id7_f_fcar_config_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id7_f_fcar_config_gtw_car_config_multiplexer_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id7_f_fcar_config_gtw_car_config_multiplexer_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id7_f_fcar_config_gtw_car_config_multiplexer_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id7_f_fcar_config_gtw_delivery_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id7_f_fcar_config_gtw_delivery_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id7_f_fcar_config_gtw_delivery_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id7_f_fcar_config_gtw_heated_wipers_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id7_f_fcar_config_gtw_heated_wipers_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id7_f_fcar_config_gtw_heated_wipers_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id7_f_fcar_config_gtw_map_region_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id7_f_fcar_config_gtw_map_region_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id7_f_fcar_config_gtw_map_region_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id7_f_fcar_config_gtw_epas_type_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id7_f_fcar_config_gtw_epas_type_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id7_f_fcar_config_gtw_epas_type_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id7_f_fcar_config_gtw_front_seat_heaters_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id7_f_fcar_config_gtw_front_seat_heaters_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id7_f_fcar_config_gtw_front_seat_heaters_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id7_f_fcar_config_gtw_drivetrain_type_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id7_f_fcar_config_gtw_drivetrain_type_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id7_f_fcar_config_gtw_drivetrain_type_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id7_f_fcar_config_gtw_rear_seat_heaters_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id7_f_fcar_config_gtw_rear_seat_heaters_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id7_f_fcar_config_gtw_rear_seat_heaters_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id7_f_fcar_config_gtw_right_hand_drive_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id7_f_fcar_config_gtw_right_hand_drive_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id7_f_fcar_config_gtw_right_hand_drive_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id7_f_fcar_config_gtw_tpms_type_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id7_f_fcar_config_gtw_tpms_type_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id7_f_fcar_config_gtw_tpms_type_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id7_f_fcar_config_gtw_performance_package_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id7_f_fcar_config_gtw_performance_package_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id7_f_fcar_config_gtw_performance_package_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id7_f_fcar_config_gtw_homelink_type_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id7_f_fcar_config_gtw_homelink_type_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id7_f_fcar_config_gtw_homelink_type_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id7_f_fcar_config_gtw_vdc_type_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id7_f_fcar_config_gtw_vdc_type_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id7_f_fcar_config_gtw_vdc_type_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id7_f_fcar_config_gtw_tow_package_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id7_f_fcar_config_gtw_tow_package_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id7_f_fcar_config_gtw_tow_package_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id7_f_fcar_config_gtw_xcp_ibst_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id7_f_fcar_config_gtw_xcp_ibst_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id7_f_fcar_config_gtw_xcp_ibst_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id7_f_fcar_config_gtw_country_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id7_f_fcar_config_gtw_country_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id7_f_fcar_config_gtw_country_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id7_f_fcar_config_gtw_rear_light_type_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id7_f_fcar_config_gtw_rear_light_type_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id7_f_fcar_config_gtw_rear_light_type_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id7_f_fcar_config_gtw_xcp_esp_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id7_f_fcar_config_gtw_xcp_esp_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id7_f_fcar_config_gtw_xcp_esp_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id7_f_fcar_config_gtw_coolant_pump_type_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id7_f_fcar_config_gtw_coolant_pump_type_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id7_f_fcar_config_gtw_coolant_pump_type_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id7_f_fcar_config_gtw_memory_mirrors_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id7_f_fcar_config_gtw_memory_mirrors_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id7_f_fcar_config_gtw_memory_mirrors_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id7_f_fcar_config_gtw_chassis_type_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id7_f_fcar_config_gtw_chassis_type_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id7_f_fcar_config_gtw_chassis_type_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id7_f_fcar_config_gtw_power_steering_column_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id7_f_fcar_config_gtw_power_steering_column_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id7_f_fcar_config_gtw_power_steering_column_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id7_f_fcar_config_gtw_front_fog_lamps_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id7_f_fcar_config_gtw_front_fog_lamps_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id7_f_fcar_config_gtw_front_fog_lamps_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id7_f_fcar_config_gtw_headlamps_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id7_f_fcar_config_gtw_headlamps_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id7_f_fcar_config_gtw_headlamps_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id7_f_fcar_config_gtw_rear_drive_unit_type_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id7_f_fcar_config_gtw_rear_drive_unit_type_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id7_f_fcar_config_gtw_rear_drive_unit_type_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id7_f_fcar_config_gtw_air_suspension_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id7_f_fcar_config_gtw_air_suspension_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id7_f_fcar_config_gtw_air_suspension_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id7_f_fcar_config_gtw_logging_version_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id7_f_fcar_config_gtw_logging_version_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id7_f_fcar_config_gtw_logging_version_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id7_f_fcar_config_gtw_lumbar_ecu_type_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id7_f_fcar_config_gtw_lumbar_ecu_type_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id7_f_fcar_config_gtw_lumbar_ecu_type_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id7_f_fcar_config_gtw_ibst_wake_type_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id7_f_fcar_config_gtw_ibst_wake_type_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id7_f_fcar_config_gtw_ibst_wake_type_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id7_f_fcar_config_gtw_passenger_occupancy_sensor_type_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id7_f_fcar_config_gtw_passenger_occupancy_sensor_type_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id7_f_fcar_config_gtw_passenger_occupancy_sensor_type_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id7_f_fcar_config_gtw_autopilot_camera_type_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id7_f_fcar_config_gtw_autopilot_camera_type_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id7_f_fcar_config_gtw_autopilot_camera_type_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id7_f_fcar_config_gtw_aux_park_lamps_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id7_f_fcar_config_gtw_aux_park_lamps_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id7_f_fcar_config_gtw_aux_park_lamps_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id7_f_fcar_config_gtw_connectivity_package_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id7_f_fcar_config_gtw_connectivity_package_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id7_f_fcar_config_gtw_connectivity_package_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id7_f_fcar_config_gtw_hvac_quiet_snorkel_type_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id7_f_fcar_config_gtw_hvac_quiet_snorkel_type_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id7_f_fcar_config_gtw_hvac_quiet_snorkel_type_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id7_f_fcar_config_gtw_plc_support_type_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id7_f_fcar_config_gtw_plc_support_type_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id7_f_fcar_config_gtw_plc_support_type_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id7_f_fcar_config_gtw_hvac_panel_vane_type_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id7_f_fcar_config_gtw_hvac_panel_vane_type_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id7_f_fcar_config_gtw_hvac_panel_vane_type_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id7_f_fcar_config_gtw_cabin_blower_ctrl_type_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id7_f_fcar_config_gtw_cabin_blower_ctrl_type_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id7_f_fcar_config_gtw_cabin_blower_ctrl_type_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id7_f_fcar_config_gtw_audio_type_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id7_f_fcar_config_gtw_audio_type_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id7_f_fcar_config_gtw_audio_type_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id7_f_fcar_config_gtw_e_buck_config_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id7_f_fcar_config_gtw_e_buck_config_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id7_f_fcar_config_gtw_e_buck_config_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id7_f_fcar_config_gtw_pack_energy_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id7_f_fcar_config_gtw_pack_energy_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id7_f_fcar_config_gtw_pack_energy_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id7_f_fcar_config_gtw_tire_type_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id7_f_fcar_config_gtw_tire_type_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id7_f_fcar_config_gtw_tire_type_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id7_f_fcar_config_gtw_windshield_type_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id7_f_fcar_config_gtw_windshield_type_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id7_f_fcar_config_gtw_windshield_type_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id7_f_fcar_config_gtw_active_high_beam_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id7_f_fcar_config_gtw_active_high_beam_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id7_f_fcar_config_gtw_active_high_beam_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id7_f_fcar_config_gtw_airbag_cutoff_switch_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id7_f_fcar_config_gtw_airbag_cutoff_switch_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id7_f_fcar_config_gtw_airbag_cutoff_switch_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id7_f_fcar_config_gtw_intrusion_sensor_type_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id7_f_fcar_config_gtw_intrusion_sensor_type_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id7_f_fcar_config_gtw_intrusion_sensor_type_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id7_f_fcar_config_gtw_front_seat_recliner_hardware_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id7_f_fcar_config_gtw_front_seat_recliner_hardware_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id7_f_fcar_config_gtw_front_seat_recliner_hardware_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id7_f_fcar_config_gtw_spoiler_type_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id7_f_fcar_config_gtw_spoiler_type_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id7_f_fcar_config_gtw_spoiler_type_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id7_f_fcar_config_gtw_rear_glass_type_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id7_f_fcar_config_gtw_rear_glass_type_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id7_f_fcar_config_gtw_rear_glass_type_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id7_f_fcar_config_gtw_passenger_airbag_type_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id7_f_fcar_config_gtw_passenger_airbag_type_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id7_f_fcar_config_gtw_passenger_airbag_type_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id7_f_fcar_config_gtw_rear_fog_lamps_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id7_f_fcar_config_gtw_rear_fog_lamps_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id7_f_fcar_config_gtw_rear_fog_lamps_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id7_f_fcar_config_gtw_das_hw_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id7_f_fcar_config_gtw_das_hw_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id7_f_fcar_config_gtw_das_hw_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id7_f_fcar_config_gtw_esp_valve_type_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id7_f_fcar_config_gtw_esp_valve_type_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id7_f_fcar_config_gtw_esp_valve_type_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id7_f_fcar_config_gtw_roof_type_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id7_f_fcar_config_gtw_roof_type_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id7_f_fcar_config_gtw_roof_type_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id7_f_fcar_config_gtw_autopilot_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id7_f_fcar_config_gtw_autopilot_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id7_f_fcar_config_gtw_autopilot_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id7_f_fcar_config_gtw_soft_range_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id7_f_fcar_config_gtw_soft_range_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id7_f_fcar_config_gtw_soft_range_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id7_f_fcar_config_gtw_refrigerant_type_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id7_f_fcar_config_gtw_refrigerant_type_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id7_f_fcar_config_gtw_refrigerant_type_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id7_f_fcar_config_gtw_supercharging_access_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id7_f_fcar_config_gtw_supercharging_access_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id7_f_fcar_config_gtw_supercharging_access_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id7_f_fcar_config_gtw_headlight_leveler_type_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id7_f_fcar_config_gtw_headlight_leveler_type_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id7_f_fcar_config_gtw_headlight_leveler_type_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id7_f_fcar_config_gtw_exterior_color_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id7_f_fcar_config_gtw_exterior_color_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id7_f_fcar_config_gtw_exterior_color_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id7_f_fcar_config_gtw_restraints_hardware_type_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id7_f_fcar_config_gtw_restraints_hardware_type_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id7_f_fcar_config_gtw_restraints_hardware_type_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id7_f_fcar_config_gtw_wheel_type_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id7_f_fcar_config_gtw_wheel_type_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id7_f_fcar_config_gtw_wheel_type_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id7_f_fcar_config_gtw_number_hvil_nodes_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id7_f_fcar_config_gtw_number_hvil_nodes_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id7_f_fcar_config_gtw_number_hvil_nodes_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id7_f_fcar_config_gtw_pedestrian_warning_sound_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id7_f_fcar_config_gtw_pedestrian_warning_sound_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id7_f_fcar_config_gtw_pedestrian_warning_sound_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id7_f_fcar_config_gtw_b_pillar_nfc_param_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id7_f_fcar_config_gtw_b_pillar_nfc_param_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id7_f_fcar_config_gtw_b_pillar_nfc_param_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id7_f_fcar_config_gtw_immersive_audio_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id7_f_fcar_config_gtw_immersive_audio_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id7_f_fcar_config_gtw_immersive_audio_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id7_f_fcar_config_gtw_interior_lighting_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id7_f_fcar_config_gtw_interior_lighting_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id7_f_fcar_config_gtw_interior_lighting_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id7_f_fcar_config_gtw_efficiency_package_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id7_f_fcar_config_gtw_efficiency_package_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id7_f_fcar_config_gtw_efficiency_package_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id7_f_fcar_config_gtw_brake_hw_type_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id7_f_fcar_config_gtw_brake_hw_type_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id7_f_fcar_config_gtw_brake_hw_type_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id7_f_fcar_config_gtw_front_seat_type_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id7_f_fcar_config_gtw_front_seat_type_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id7_f_fcar_config_gtw_front_seat_type_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id7_f_fcar_config_gtw_roof_glass_type_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id7_f_fcar_config_gtw_roof_glass_type_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id7_f_fcar_config_gtw_roof_glass_type_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id7_f_fcar_config_gtw_track_mode_package_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id7_f_fcar_config_gtw_track_mode_package_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id7_f_fcar_config_gtw_track_mode_package_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id7_f_fcar_config_gtw_e_call_enabled_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id7_f_fcar_config_gtw_e_call_enabled_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id7_f_fcar_config_gtw_e_call_enabled_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id7_f_fcar_config_gtw_twelve_v_battery_type_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id7_f_fcar_config_gtw_twelve_v_battery_type_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id7_f_fcar_config_gtw_twelve_v_battery_type_is_in_range(uint8_t value);

/**
 * Pack message ID332BattCellMinMax.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int model3_can_id332_batt_cell_min_max_pack(
    uint8_t *dst_p,
    const struct model3_can_id332_batt_cell_min_max_t *src_p,
    size_t size);

/**
 * Unpack message ID332BattCellMinMax.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int model3_can_id332_batt_cell_min_max_unpack(
    struct model3_can_id332_batt_cell_min_max_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id332_batt_cell_min_max_batt_cell_multiplexer332_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id332_batt_cell_min_max_batt_cell_multiplexer332_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id332_batt_cell_min_max_batt_cell_multiplexer332_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id332_batt_cell_min_max_batt_cell_temp_max_num332_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id332_batt_cell_min_max_batt_cell_temp_max_num332_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id332_batt_cell_min_max_batt_cell_temp_max_num332_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id332_batt_cell_min_max_batt_cell_brick_voltage_max332_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id332_batt_cell_min_max_batt_cell_brick_voltage_max332_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id332_batt_cell_min_max_batt_cell_brick_voltage_max332_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id332_batt_cell_min_max_batt_cell_temp_min_num332_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id332_batt_cell_min_max_batt_cell_temp_min_num332_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id332_batt_cell_min_max_batt_cell_temp_min_num332_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id332_batt_cell_min_max_batt_cell_temp_max332_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id332_batt_cell_min_max_batt_cell_temp_max332_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id332_batt_cell_min_max_batt_cell_temp_max332_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id332_batt_cell_min_max_batt_cell_brick_voltage_min332_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id332_batt_cell_min_max_batt_cell_brick_voltage_min332_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id332_batt_cell_min_max_batt_cell_brick_voltage_min332_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id332_batt_cell_min_max_batt_cell_temp_min332_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id332_batt_cell_min_max_batt_cell_temp_min332_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id332_batt_cell_min_max_batt_cell_temp_min332_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id332_batt_cell_min_max_batt_cell_model_t_max332_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id332_batt_cell_min_max_batt_cell_model_t_max332_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id332_batt_cell_min_max_batt_cell_model_t_max332_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id332_batt_cell_min_max_batt_cell_brick_voltage_max_num332_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id332_batt_cell_min_max_batt_cell_brick_voltage_max_num332_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id332_batt_cell_min_max_batt_cell_brick_voltage_max_num332_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id332_batt_cell_min_max_batt_cell_model_t_min332_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id332_batt_cell_min_max_batt_cell_model_t_min332_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id332_batt_cell_min_max_batt_cell_model_t_min332_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id332_batt_cell_min_max_batt_cell_brick_voltage_min_num332_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id332_batt_cell_min_max_batt_cell_brick_voltage_min_num332_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id332_batt_cell_min_max_batt_cell_brick_voltage_min_num332_is_in_range(uint8_t value);

/**
 * Pack message ID401CellVoltages.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int model3_can_id401_cell_voltages_pack(
    uint8_t *dst_p,
    const struct model3_can_id401_cell_voltages_t *src_p,
    size_t size);

/**
 * Unpack message ID401CellVoltages.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int model3_can_id401_cell_voltages_unpack(
    struct model3_can_id401_cell_voltages_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id401_cell_voltages_multiplex_selector_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id401_cell_voltages_multiplex_selector_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id401_cell_voltages_multiplex_selector_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t model3_can_id401_cell_voltages_status_flags_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id401_cell_voltages_status_flags_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id401_cell_voltages_status_flags_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id401_cell_voltages_cell0_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id401_cell_voltages_cell0_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id401_cell_voltages_cell0_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id401_cell_voltages_cell3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id401_cell_voltages_cell3_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id401_cell_voltages_cell3_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id401_cell_voltages_cell6_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id401_cell_voltages_cell6_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id401_cell_voltages_cell6_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id401_cell_voltages_cell9_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id401_cell_voltages_cell9_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id401_cell_voltages_cell9_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id401_cell_voltages_cell12_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id401_cell_voltages_cell12_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id401_cell_voltages_cell12_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id401_cell_voltages_cell15_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id401_cell_voltages_cell15_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id401_cell_voltages_cell15_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id401_cell_voltages_cell18_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id401_cell_voltages_cell18_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id401_cell_voltages_cell18_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id401_cell_voltages_cell21_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id401_cell_voltages_cell21_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id401_cell_voltages_cell21_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id401_cell_voltages_cell24_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id401_cell_voltages_cell24_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id401_cell_voltages_cell24_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id401_cell_voltages_cell27_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id401_cell_voltages_cell27_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id401_cell_voltages_cell27_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id401_cell_voltages_cell30_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id401_cell_voltages_cell30_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id401_cell_voltages_cell30_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id401_cell_voltages_cell34_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id401_cell_voltages_cell34_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id401_cell_voltages_cell34_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id401_cell_voltages_cell36_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id401_cell_voltages_cell36_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id401_cell_voltages_cell36_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id401_cell_voltages_cell39_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id401_cell_voltages_cell39_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id401_cell_voltages_cell39_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id401_cell_voltages_cell42_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id401_cell_voltages_cell42_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id401_cell_voltages_cell42_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id401_cell_voltages_cell45_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id401_cell_voltages_cell45_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id401_cell_voltages_cell45_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id401_cell_voltages_cell48_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id401_cell_voltages_cell48_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id401_cell_voltages_cell48_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id401_cell_voltages_cell51_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id401_cell_voltages_cell51_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id401_cell_voltages_cell51_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id401_cell_voltages_cell54_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id401_cell_voltages_cell54_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id401_cell_voltages_cell54_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id401_cell_voltages_cell57_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id401_cell_voltages_cell57_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id401_cell_voltages_cell57_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id401_cell_voltages_cell60_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id401_cell_voltages_cell60_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id401_cell_voltages_cell60_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id401_cell_voltages_cell63_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id401_cell_voltages_cell63_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id401_cell_voltages_cell63_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id401_cell_voltages_cell66_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id401_cell_voltages_cell66_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id401_cell_voltages_cell66_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id401_cell_voltages_cell69_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id401_cell_voltages_cell69_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id401_cell_voltages_cell69_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id401_cell_voltages_cell72_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id401_cell_voltages_cell72_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id401_cell_voltages_cell72_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id401_cell_voltages_cell75_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id401_cell_voltages_cell75_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id401_cell_voltages_cell75_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id401_cell_voltages_cell78_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id401_cell_voltages_cell78_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id401_cell_voltages_cell78_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id401_cell_voltages_cell81_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id401_cell_voltages_cell81_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id401_cell_voltages_cell81_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id401_cell_voltages_cell84_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id401_cell_voltages_cell84_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id401_cell_voltages_cell84_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id401_cell_voltages_cell87_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id401_cell_voltages_cell87_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id401_cell_voltages_cell87_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id401_cell_voltages_cell90_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id401_cell_voltages_cell90_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id401_cell_voltages_cell90_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id401_cell_voltages_cell93_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id401_cell_voltages_cell93_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id401_cell_voltages_cell93_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id401_cell_voltages_cell96_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id401_cell_voltages_cell96_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id401_cell_voltages_cell96_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id401_cell_voltages_cell99_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id401_cell_voltages_cell99_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id401_cell_voltages_cell99_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id401_cell_voltages_cell102_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id401_cell_voltages_cell102_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id401_cell_voltages_cell102_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id401_cell_voltages_cell105_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id401_cell_voltages_cell105_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id401_cell_voltages_cell105_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id401_cell_voltages_cell1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id401_cell_voltages_cell1_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id401_cell_voltages_cell1_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id401_cell_voltages_cell4_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id401_cell_voltages_cell4_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id401_cell_voltages_cell4_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id401_cell_voltages_cell7_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id401_cell_voltages_cell7_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id401_cell_voltages_cell7_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id401_cell_voltages_cell10_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id401_cell_voltages_cell10_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id401_cell_voltages_cell10_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id401_cell_voltages_cell13_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id401_cell_voltages_cell13_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id401_cell_voltages_cell13_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id401_cell_voltages_cell16_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id401_cell_voltages_cell16_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id401_cell_voltages_cell16_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id401_cell_voltages_cell19_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id401_cell_voltages_cell19_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id401_cell_voltages_cell19_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id401_cell_voltages_cell22_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id401_cell_voltages_cell22_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id401_cell_voltages_cell22_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id401_cell_voltages_cell25_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id401_cell_voltages_cell25_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id401_cell_voltages_cell25_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id401_cell_voltages_cell28_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id401_cell_voltages_cell28_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id401_cell_voltages_cell28_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id401_cell_voltages_cell31_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id401_cell_voltages_cell31_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id401_cell_voltages_cell31_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id401_cell_voltages_cell33_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id401_cell_voltages_cell33_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id401_cell_voltages_cell33_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id401_cell_voltages_cell37_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id401_cell_voltages_cell37_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id401_cell_voltages_cell37_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id401_cell_voltages_cell40_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id401_cell_voltages_cell40_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id401_cell_voltages_cell40_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id401_cell_voltages_cell43_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id401_cell_voltages_cell43_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id401_cell_voltages_cell43_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id401_cell_voltages_cell46_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id401_cell_voltages_cell46_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id401_cell_voltages_cell46_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id401_cell_voltages_cell49_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id401_cell_voltages_cell49_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id401_cell_voltages_cell49_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id401_cell_voltages_cell52_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id401_cell_voltages_cell52_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id401_cell_voltages_cell52_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id401_cell_voltages_cell55_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id401_cell_voltages_cell55_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id401_cell_voltages_cell55_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id401_cell_voltages_cell58_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id401_cell_voltages_cell58_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id401_cell_voltages_cell58_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id401_cell_voltages_cell61_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id401_cell_voltages_cell61_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id401_cell_voltages_cell61_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id401_cell_voltages_cell64_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id401_cell_voltages_cell64_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id401_cell_voltages_cell64_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id401_cell_voltages_cell67_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id401_cell_voltages_cell67_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id401_cell_voltages_cell67_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id401_cell_voltages_cell70_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id401_cell_voltages_cell70_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id401_cell_voltages_cell70_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id401_cell_voltages_cell73_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id401_cell_voltages_cell73_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id401_cell_voltages_cell73_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id401_cell_voltages_cell76_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id401_cell_voltages_cell76_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id401_cell_voltages_cell76_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id401_cell_voltages_cell79_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id401_cell_voltages_cell79_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id401_cell_voltages_cell79_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id401_cell_voltages_cell82_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id401_cell_voltages_cell82_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id401_cell_voltages_cell82_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id401_cell_voltages_cell85_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id401_cell_voltages_cell85_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id401_cell_voltages_cell85_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id401_cell_voltages_cell88_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id401_cell_voltages_cell88_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id401_cell_voltages_cell88_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id401_cell_voltages_cell91_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id401_cell_voltages_cell91_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id401_cell_voltages_cell91_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id401_cell_voltages_cell94_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id401_cell_voltages_cell94_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id401_cell_voltages_cell94_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id401_cell_voltages_cell97_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id401_cell_voltages_cell97_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id401_cell_voltages_cell97_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id401_cell_voltages_cell100_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id401_cell_voltages_cell100_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id401_cell_voltages_cell100_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id401_cell_voltages_cell103_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id401_cell_voltages_cell103_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id401_cell_voltages_cell103_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id401_cell_voltages_cell106_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id401_cell_voltages_cell106_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id401_cell_voltages_cell106_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id401_cell_voltages_cell2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id401_cell_voltages_cell2_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id401_cell_voltages_cell2_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id401_cell_voltages_cell5_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id401_cell_voltages_cell5_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id401_cell_voltages_cell5_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id401_cell_voltages_cell8_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id401_cell_voltages_cell8_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id401_cell_voltages_cell8_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id401_cell_voltages_cell11_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id401_cell_voltages_cell11_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id401_cell_voltages_cell11_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id401_cell_voltages_cell14_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id401_cell_voltages_cell14_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id401_cell_voltages_cell14_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id401_cell_voltages_cell17_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id401_cell_voltages_cell17_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id401_cell_voltages_cell17_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id401_cell_voltages_cell20_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id401_cell_voltages_cell20_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id401_cell_voltages_cell20_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id401_cell_voltages_cell23_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id401_cell_voltages_cell23_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id401_cell_voltages_cell23_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id401_cell_voltages_cell26_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id401_cell_voltages_cell26_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id401_cell_voltages_cell26_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id401_cell_voltages_cell29_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id401_cell_voltages_cell29_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id401_cell_voltages_cell29_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id401_cell_voltages_cell32_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id401_cell_voltages_cell32_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id401_cell_voltages_cell32_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id401_cell_voltages_cell35_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id401_cell_voltages_cell35_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id401_cell_voltages_cell35_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id401_cell_voltages_cell38_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id401_cell_voltages_cell38_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id401_cell_voltages_cell38_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id401_cell_voltages_cell41_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id401_cell_voltages_cell41_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id401_cell_voltages_cell41_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id401_cell_voltages_cell44_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id401_cell_voltages_cell44_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id401_cell_voltages_cell44_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id401_cell_voltages_cell47_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id401_cell_voltages_cell47_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id401_cell_voltages_cell47_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id401_cell_voltages_cell50_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id401_cell_voltages_cell50_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id401_cell_voltages_cell50_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id401_cell_voltages_cell53_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id401_cell_voltages_cell53_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id401_cell_voltages_cell53_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id401_cell_voltages_cell56_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id401_cell_voltages_cell56_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id401_cell_voltages_cell56_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id401_cell_voltages_cell59_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id401_cell_voltages_cell59_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id401_cell_voltages_cell59_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id401_cell_voltages_cell62_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id401_cell_voltages_cell62_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id401_cell_voltages_cell62_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id401_cell_voltages_cell65_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id401_cell_voltages_cell65_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id401_cell_voltages_cell65_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id401_cell_voltages_cell68_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id401_cell_voltages_cell68_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id401_cell_voltages_cell68_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id401_cell_voltages_cell71_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id401_cell_voltages_cell71_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id401_cell_voltages_cell71_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id401_cell_voltages_cell74_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id401_cell_voltages_cell74_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id401_cell_voltages_cell74_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id401_cell_voltages_cell77_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id401_cell_voltages_cell77_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id401_cell_voltages_cell77_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id401_cell_voltages_cell80_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id401_cell_voltages_cell80_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id401_cell_voltages_cell80_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id401_cell_voltages_cell83_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id401_cell_voltages_cell83_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id401_cell_voltages_cell83_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id401_cell_voltages_cell86_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id401_cell_voltages_cell86_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id401_cell_voltages_cell86_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id401_cell_voltages_cell89_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id401_cell_voltages_cell89_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id401_cell_voltages_cell89_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id401_cell_voltages_cell92_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id401_cell_voltages_cell92_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id401_cell_voltages_cell92_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id401_cell_voltages_cell95_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id401_cell_voltages_cell95_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id401_cell_voltages_cell95_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id401_cell_voltages_cell98_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id401_cell_voltages_cell98_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id401_cell_voltages_cell98_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id401_cell_voltages_cell101_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id401_cell_voltages_cell101_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id401_cell_voltages_cell101_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id401_cell_voltages_cell104_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id401_cell_voltages_cell104_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id401_cell_voltages_cell104_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t model3_can_id401_cell_voltages_cell107_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double model3_can_id401_cell_voltages_cell107_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool model3_can_id401_cell_voltages_cell107_is_in_range(uint16_t value);


#ifdef __cplusplus
}
#endif

#endif
